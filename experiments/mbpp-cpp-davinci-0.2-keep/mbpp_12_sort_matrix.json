{
  "name": "mbpp_12_sort_matrix",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nstd::vector<std::vector<long>> sort_matrix(std::vector<std::vector<long>> M) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = sort_matrix;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)5})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)-2, (long)4, (long)-5}), (std::vector<long>)std::vector<long>({(long)1, (long)-1, (long)1})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)-2, (long)4, (long)-5}), (std::vector<long>)std::vector<long>({(long)1, (long)-1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)1, (long)4})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)8, (long)9})})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (auto sum : sorted_sums) {\n        for (int i = 0; i < sums.size(); i++) {\n            if (sums[i] == sum) {\n                res.push_back(M[i]);\n                sums[i] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "  std::vector<std::vector<long>> res;\n  std::vector<long> sums;\n  for (int i = 0; i < M.size(); i++) {\n    long sum = 0;\n    for (int j = 0; j < M[i].size(); j++) {\n      sum += M[i][j];\n    }\n    sums.push_back(sum);\n  }\n  for (int i = 0; i < M.size(); i++) {\n    int min = i;\n    for (int j = i + 1; j < M.size(); j++) {\n      if (sums[j] < sums[min]) {\n        min = j;\n      }\n    }\n    if (min != i) {\n      long temp = sums[i];\n      sums[i] = sums[min];\n      sums[min] = temp;\n      std::vector<long> temp_vec = M[i];\n      M[i] = M[min];\n      M[min] = temp_vec;\n    }\n  }\n  return M;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> sorted_matrix;\n    std::vector<long> row_sums;\n    std::vector<long> row_index;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        row_sums.push_back(sum);\n        row_index.push_back(i);\n    }\n    for(int i=0;i<row_sums.size();i++){\n        for(int j=0;j<row_sums.size()-1;j++){\n            if(row_sums[j]>row_sums[j+1]){\n                long temp=row_sums[j];\n                row_sums[j]=row_sums[j+1];\n                row_sums[j+1]=temp;\n                temp=row_index[j];\n                row_index[j]=row_index[j+1];\n                row_index[j+1]=temp;\n            }\n        }\n    }\n    for(int i=0;i<row_index.size();i++){\n        sorted_matrix.push_back(M[row_index[i]]);\n    }\n    return sorted_matrix;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> row_sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        row_sums.push_back(sum);\n    }\n    std::vector<long> sorted_row_sums = row_sums;\n    std::sort(sorted_row_sums.begin(), sorted_row_sums.end());\n    for(int i = 0; i < sorted_row_sums.size(); i++) {\n        int index = std::find(row_sums.begin(), row_sums.end(), sorted_row_sums[i]) - row_sums.begin();\n        result.push_back(M[index]);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::pair<long, std::vector<long>>> v;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        v.push_back(std::make_pair(sum,M[i]));\n    }\n    std::sort(v.begin(),v.end());\n    std::vector<std::vector<long>> ans;\n    for(int i=0;i<v.size();i++){\n        ans.push_back(v[i].second);\n    }\n    return ans;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (int i = 0; i < sums.size(); i++) {\n        result.push_back(sums[i].second);\n    }\n    return result;",
    "    int n = M.size();\n    int m = M[0].size();\n    std::vector<std::pair<long, int>> sums(n);\n    for (int i = 0; i < n; i++) {\n        long sum = 0;\n        for (int j = 0; j < m; j++) {\n            sum += M[i][j];\n        }\n        sums[i] = std::make_pair(sum, i);\n    }\n    std::sort(sums.begin(), sums.end());\n    std::vector<std::vector<long>> result(n, std::vector<long>(m));\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            result[i][j] = M[sums[i].second][j];\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> sorted_matrix;\n    std::vector<long> sums;\n    for(auto row : M) {\n        long sum = 0;\n        for(auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(auto sum : sorted_sums) {\n        for(int i = 0; i < sums.size(); i++) {\n            if(sums[i] == sum) {\n                sorted_matrix.push_back(M[i]);\n                sums[i] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    std::vector<long> indices;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n        indices.push_back(i);\n    }\n    for (int i = 0; i < M.size(); i++) {\n        for (int j = i + 1; j < M.size(); j++) {\n            if (sums[j] < sums[i]) {\n                long temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                temp = indices[i];\n                indices[i] = indices[j];\n                indices[j] = temp;\n            }\n        }\n    }\n    for (int i = 0; i < M.size(); i++) {\n        result.push_back(M[indices[i]]);\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (auto sum : sums) {\n        res.push_back(sum.second);\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::sort(sums.begin(),sums.end());\n    for(int i=0;i<sums.size();i++){\n        for(int j=0;j<M.size();j++){\n            long sum=0;\n            for(int k=0;k<M[j].size();k++){\n                sum+=M[j][k];\n            }\n            if(sum==sums[i]){\n                result.push_back(M[j]);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> copy_sums=sums;\n    std::sort(sums.begin(),sums.end());\n    for(int i=0;i<sums.size();i++){\n        for(int j=0;j<copy_sums.size();j++){\n            if(sums[i]==copy_sums[j]){\n                res.push_back(M[j]);\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (auto sum : sorted_sums) {\n        for (int i = 0; i < sums.size(); i++) {\n            if (sums[i] == sum) {\n                res.push_back(M[i]);\n                sums[i] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(sums.begin(), sums.end());\n    for(int i = 0; i < sums.size(); i++) {\n        result.push_back(sums[i].second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for (int i = 0; i < M.size(); i++) {\n        for (int j = 0; j < M.size() - i - 1; j++) {\n            if (sums[j] > sums[j + 1]) {\n                std::swap(sums[j], sums[j + 1]);\n                std::swap(M[j], M[j + 1]);\n            }\n        }\n    }\n    return M;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> sorted_matrix;\n    std::vector<long> row_sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        row_sums.push_back(sum);\n    }\n    for (int i = 0; i < M.size(); i++) {\n        for (int j = i + 1; j < M.size(); j++) {\n            if (row_sums[i] > row_sums[j]) {\n                std::swap(row_sums[i], row_sums[j]);\n                std::swap(M[i], M[j]);\n            }\n        }\n    }\n    return M;",
    "\tstd::vector<std::vector<long>> result;\n\tstd::vector<long> sums;\n\tfor (int i = 0; i < M.size(); i++) {\n\t\tlong sum = 0;\n\t\tfor (int j = 0; j < M[i].size(); j++) {\n\t\t\tsum += M[i][j];\n\t\t}\n\t\tsums.push_back(sum);\n\t}\n\tfor (int i = 0; i < sums.size(); i++) {\n\t\tfor (int j = i + 1; j < sums.size(); j++) {\n\t\t\tif (sums[i] > sums[j]) {\n\t\t\t\tstd::swap(sums[i], sums[j]);\n\t\t\t\tstd::swap(M[i], M[j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn M;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for(auto row : M) {\n        long sum = 0;\n        for(auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sums.begin(), sums.end());\n    for(auto pair : sums) {\n        res.push_back(pair.second);\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto x : row) {\n            sum += x;\n        }\n        sums.push_back({sum, row});\n    }\n    std::sort(sums.begin(), sums.end());\n    for (auto p : sums) {\n        result.push_back(p.second);\n    }\n    return result;",
    "  std::vector<std::pair<long, std::vector<long>>> sums;\n  for (int i = 0; i < M.size(); i++) {\n    long sum = 0;\n    for (int j = 0; j < M[i].size(); j++) {\n      sum += M[i][j];\n    }\n    sums.push_back(std::make_pair(sum, M[i]));\n  }\n  std::sort(sums.begin(), sums.end());\n  std::vector<std::vector<long>> sorted_matrix;\n  for (int i = 0; i < sums.size(); i++) {\n    sorted_matrix.push_back(sums[i].second);\n  }\n  return sorted_matrix;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i=0; i<M.size(); i++){\n        long sum = 0;\n        for(int j=0; j<M[i].size(); j++){\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i=0; i<sorted_sums.size(); i++){\n        for(int j=0; j<sums.size(); j++){\n            if(sorted_sums[i] == sums[j]){\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for(int i = 0; i < M.size(); i++) {\n        int min = i;\n        for(int j = i + 1; j < M.size(); j++) {\n            if(sums[j] < sums[min]) {\n                min = j;\n            }\n        }\n        if(min != i) {\n            std::swap(sums[i], sums[min]);\n            std::swap(M[i], M[min]);\n        }\n    }\n    return M;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (auto sum : sorted_sums) {\n        for (int i = 0; i < sums.size(); i++) {\n            if (sum == sums[i]) {\n                res.push_back(M[i]);\n                sums[i] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    // Write your code here\n    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    std::vector<long> indices;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n        indices.push_back(i);\n    }\n    for(int i=0;i<sums.size();i++){\n        for(int j=i+1;j<sums.size();j++){\n            if(sums[i]>sums[j]){\n                long temp=sums[i];\n                sums[i]=sums[j];\n                sums[j]=temp;\n                temp=indices[i];\n                indices[i]=indices[j];\n                indices[j]=temp;\n            }\n        }\n    }\n    for(int i=0;i<indices.size();i++){\n        res.push_back(M[indices[i]]);\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for(int i = 0; i < sums.size(); i++) {\n        int min = i;\n        for(int j = i+1; j < sums.size(); j++) {\n            if(sums[j] < sums[min]) {\n                min = j;\n            }\n        }\n        if(min != i) {\n            std::swap(sums[i], sums[min]);\n            std::swap(M[i], M[min]);\n        }\n    }\n    return M;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (auto sum : sorted_sums) {\n        for (int i = 0; i < sums.size(); i++) {\n            if (sums[i] == sum) {\n                result.push_back(M[i]);\n                sums[i] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (auto j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (auto i = 0; i < sums.size(); i++) {\n        res.push_back(sums[i].second);\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++) {\n        long sum = 0;\n        for(int j=0;j<M[0].size();j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i=0;i<sorted_sums.size();i++) {\n        for(int j=0;j<sums.size();j++) {\n            if(sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> sorted_matrix;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++)\n    {\n        long sum=0;\n        for(int j=0;j<M[i].size();j++)\n        {\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums=sums;\n    std::sort(sorted_sums.begin(),sorted_sums.end());\n    for(int i=0;i<sorted_sums.size();i++)\n    {\n        for(int j=0;j<sums.size();j++)\n        {\n            if(sorted_sums[i]==sums[j])\n            {\n                sorted_matrix.push_back(M[j]);\n                sums[j]=0;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sum;\n    for(int i=0;i<M.size();i++){\n        long s=0;\n        for(int j=0;j<M[i].size();j++){\n            s+=M[i][j];\n        }\n        sum.push_back(s);\n    }\n    std::vector<long> temp=sum;\n    std::sort(temp.begin(),temp.end());\n    for(int i=0;i<temp.size();i++){\n        for(int j=0;j<sum.size();j++){\n            if(temp[i]==sum[j]){\n                res.push_back(M[j]);\n                sum[j]=-1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    int n = M.size();\n    int m = M[0].size();\n    std::vector<std::vector<long>> res(n, std::vector<long>(m));\n    std::vector<long> sums(n);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            sums[i] += M[i][j];\n        }\n    }\n    std::vector<int> order(n);\n    for (int i = 0; i < n; i++) {\n        order[i] = i;\n    }\n    std::sort(order.begin(), order.end(), [&sums](int i, int j) {\n        return sums[i] < sums[j];\n    });\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            res[i][j] = M[order[i]][j];\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums=sums;\n    std::sort(sorted_sums.begin(),sorted_sums.end());\n    for(int i=0;i<sorted_sums.size();i++){\n        for(int j=0;j<sums.size();j++){\n            if(sorted_sums[i]==sums[j]){\n                result.push_back(M[j]);\n                sums[j]=-1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for(int i = 0; i < sums.size(); i++) {\n        int min = i;\n        for(int j = i+1; j < sums.size(); j++) {\n            if(sums[j] < sums[min]) {\n                min = j;\n            }\n        }\n        if(min != i) {\n            std::swap(sums[i], sums[min]);\n            std::swap(M[i], M[min]);\n        }\n    }\n    return M;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    long sum = 0;\n    for (int i = 0; i < M.size(); i++) {\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n        sum = 0;\n    }\n    for (int i = 0; i < sums.size(); i++) {\n        for (int j = i + 1; j < sums.size(); j++) {\n            if (sums[i] > sums[j]) {\n                std::swap(sums[i], sums[j]);\n                std::swap(M[i], M[j]);\n            }\n        }\n    }\n    return M;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    int n = M.size();\n    int m = M[0].size();\n    std::vector<std::vector<long>> res(n, std::vector<long>(m));\n    std::vector<std::pair<long, int>> sums(n);\n    for (int i = 0; i < n; ++i) {\n        long sum = 0;\n        for (int j = 0; j < m; ++j) {\n            sum += M[i][j];\n        }\n        sums[i] = {sum, i};\n    }\n    std::sort(sums.begin(), sums.end());\n    for (int i = 0; i < n; ++i) {\n        res[i] = M[sums[i].second];\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    long sum = 0;\n    for (int i = 0; i < M.size(); i++) {\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n        sum = 0;\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(sums.begin(), sums.end());\n    std::vector<std::vector<long>> res;\n    for (int i = 0; i < sums.size(); i++) {\n        res.push_back(sums[i].second);\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for (int i = 0; i < M.size(); i++) {\n        int min_index = i;\n        for (int j = i + 1; j < M.size(); j++) {\n            if (sums[j] < sums[min_index]) {\n                min_index = j;\n            }\n        }\n        std::swap(sums[i], sums[min_index]);\n        std::swap(M[i], M[min_index]);\n    }\n    return M;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::pair<int, int>> v;\n    for(int i=0;i<M.size();i++){\n        int sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        v.push_back(std::make_pair(sum, i));\n    }\n    std::sort(v.begin(), v.end());\n    std::vector<std::vector<long>> res;\n    for(int i=0;i<v.size();i++){\n        res.push_back(M[v[i].second]);\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::sort(sums.begin(),sums.end());\n    for(int i=0;i<sums.size();i++){\n        for(int j=0;j<M.size();j++){\n            long sum=0;\n            for(int k=0;k<M[j].size();k++){\n                sum+=M[j][k];\n            }\n            if(sum==sums[i]){\n                res.push_back(M[j]);\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto v : M) {\n        long sum = 0;\n        for (auto i : v) {\n            sum += i;\n        }\n        sums.push_back(std::make_pair(sum, v));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (auto p : sums) {\n        res.push_back(p.second);\n    }\n    return res;",
    "    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sums.begin(), sums.end());\n    std::vector<std::vector<long>> result;\n    for (auto pair : sums) {\n        result.push_back(pair.second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for (int i = 0; i < sums.size(); i++) {\n        int min = i;\n        for (int j = i + 1; j < sums.size(); j++) {\n            if (sums[j] < sums[min]) {\n                min = j;\n            }\n        }\n        if (min != i) {\n            std::swap(sums[i], sums[min]);\n            std::swap(M[i], M[min]);\n        }\n    }\n    return M;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++)\n    {\n        long sum=0;\n        for(int j=0;j<M[i].size();j++)\n        {\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums=sums;\n    std::sort(sorted_sums.begin(),sorted_sums.end());\n    for(int i=0;i<sorted_sums.size();i++)\n    {\n        for(int j=0;j<sums.size();j++)\n        {\n            if(sorted_sums[i]==sums[j])\n            {\n                res.push_back(M[j]);\n                sums[j]=-1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for (int i = 0; i < M.size(); i++) {\n        int min_index = i;\n        for (int j = i + 1; j < M.size(); j++) {\n            if (sums[j] < sums[min_index]) {\n                min_index = j;\n            }\n        }\n        std::swap(sums[i], sums[min_index]);\n        std::swap(M[i], M[min_index]);\n    }\n    return M;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::pair<long, std::vector<long>>> v;\n    for(int i=0;i<M.size();i++) {\n        long sum = 0;\n        for(int j=0;j<M[i].size();j++) {\n            sum += M[i][j];\n        }\n        v.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(v.begin(), v.end());\n    std::vector<std::vector<long>> ans;\n    for(int i=0;i<v.size();i++) {\n        ans.push_back(v[i].second);\n    }\n    return ans;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, std::vector<long>>> sum_row;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sum_row.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(sum_row.begin(), sum_row.end());\n    for (int i = 0; i < sum_row.size(); i++) {\n        res.push_back(sum_row[i].second);\n    }\n    return res;",
    "    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(sums.begin(), sums.end());\n    std::vector<std::vector<long>> result;\n    for (int i = 0; i < sums.size(); i++) {\n        result.push_back(sums[i].second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto el : row) {\n            sum += el;\n        }\n        sums.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (auto pair : sums) {\n        res.push_back(pair.second);\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for (int i = 0; i < sums.size(); i++) {\n        int min_index = i;\n        for (int j = i + 1; j < sums.size(); j++) {\n            if (sums[j] < sums[min_index]) {\n                min_index = j;\n            }\n        }\n        long temp = sums[min_index];\n        sums[min_index] = sums[i];\n        sums[i] = temp;\n        std::vector<long> temp_vec = M[min_index];\n        M[min_index] = M[i];\n        M[i] = temp_vec;\n    }\n    return M;",
    "  std::vector<std::vector<long>> sorted_M;\n  std::vector<long> row_sum;\n  for (int i = 0; i < M.size(); i++) {\n    long sum = 0;\n    for (int j = 0; j < M[i].size(); j++) {\n      sum += M[i][j];\n    }\n    row_sum.push_back(sum);\n  }\n  std::vector<long> sorted_row_sum = row_sum;\n  std::sort(sorted_row_sum.begin(), sorted_row_sum.end());\n  for (int i = 0; i < sorted_row_sum.size(); i++) {\n    int index = std::find(row_sum.begin(), row_sum.end(), sorted_row_sum[i]) - row_sum.begin();\n    sorted_M.push_back(M[index]);\n  }\n  return sorted_M;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums=sums;\n    std::sort(sorted_sums.begin(),sorted_sums.end());\n    for(int i=0;i<sorted_sums.size();i++){\n        for(int j=0;j<sums.size();j++){\n            if(sorted_sums[i]==sums[j]){\n                res.push_back(M[j]);\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> row_sum;\n    for(int i=0;i<M.size();i++){\n        long sum = 0;\n        for(int j=0;j<M[0].size();j++){\n            sum += M[i][j];\n        }\n        row_sum.push_back(sum);\n    }\n    std::vector<long> sorted_row_sum = row_sum;\n    std::sort(sorted_row_sum.begin(),sorted_row_sum.end());\n    for(int i=0;i<sorted_row_sum.size();i++){\n        for(int j=0;j<row_sum.size();j++){\n            if(sorted_row_sum[i] == row_sum[j]){\n                result.push_back(M[j]);\n                row_sum[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++)\n    {\n        long sum=0;\n        for(int j=0;j<M[i].size();j++)\n        {\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums=sums;\n    std::sort(sorted_sums.begin(),sorted_sums.end());\n    for(int i=0;i<sorted_sums.size();i++)\n    {\n        for(int j=0;j<sums.size();j++)\n        {\n            if(sorted_sums[i]==sums[j])\n            {\n                result.push_back(M[j]);\n                sums[j]=-1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> ret;\n    std::vector<std::pair<long, std::vector<long>>> sum_row;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sum_row.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sum_row.begin(), sum_row.end());\n    for (auto row : sum_row) {\n        ret.push_back(row.second);\n    }\n    return ret;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> sums;\n    std::vector<std::vector<long>> result;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(sum);\n    }\n    for (int i = 0; i < M.size(); i++) {\n        long min = sums[i];\n        int min_index = i;\n        for (int j = i + 1; j < M.size(); j++) {\n            if (sums[j] < min) {\n                min = sums[j];\n                min_index = j;\n            }\n        }\n        if (min_index != i) {\n            std::swap(sums[i], sums[min_index]);\n            std::swap(M[i], M[min_index]);\n        }\n    }\n    return M;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<int> indices = sort_indices(sums);\n    for (int i = 0; i < indices.size(); i++) {\n        result.push_back(M[indices[i]]);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (auto sum : sorted_sums) {\n        for (int i = 0; i < sums.size(); i++) {\n            if (sums[i] == sum) {\n                res.push_back(M[i]);\n                sums[i] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    long sum = 0;\n    for (int i = 0; i < M.size(); i++) {\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n        sum = 0;\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<int> indices(M.size());\n    std::iota(indices.begin(),indices.end(),0);\n    std::sort(indices.begin(),indices.end(),[&sums](int i1,int i2){return sums[i1]<sums[i2];});\n    for(int i=0;i<M.size();i++){\n        result.push_back(M[indices[i]]);\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(auto i: M) {\n        long sum = 0;\n        for(auto j: i) {\n            sum += j;\n        }\n        sums.push_back(sum);\n    }\n    std::vector<int> indices(sums.size());\n    std::iota(indices.begin(), indices.end(), 0);\n    std::sort(indices.begin(), indices.end(), [&sums](int i, int j) {\n        return sums[i] < sums[j];\n    });\n    for(auto i: indices) {\n        res.push_back(M[i]);\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (auto sum : sorted_sums) {\n        for (int i = 0; i < sums.size(); i++) {\n            if (sums[i] == sum) {\n                result.push_back(M[i]);\n                sums[i] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<int> indices(M.size());\n    std::iota(indices.begin(), indices.end(), 0);\n    std::sort(indices.begin(), indices.end(), [&sums](int i1, int i2) { return sums[i1] < sums[i2]; });\n    for (int i = 0; i < indices.size(); i++) {\n        res.push_back(M[indices[i]]);\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, std::vector<long>>> v;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        v.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(v.begin(), v.end());\n    for (int i = 0; i < v.size(); i++) {\n        res.push_back(v[i].second);\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> sorted_M;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                sorted_M.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_M;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++)\n    {\n        long sum=0;\n        for(int j=0;j<M[i].size();j++)\n        {\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sums_copy=sums;\n    std::sort(sums_copy.begin(),sums_copy.end());\n    for(int i=0;i<sums_copy.size();i++)\n    {\n        for(int j=0;j<sums.size();j++)\n        {\n            if(sums_copy[i]==sums[j])\n            {\n                res.push_back(M[j]);\n                sums[j]=INT_MAX;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++)\n    {\n        long sum=0;\n        for(int j=0;j<M[0].size();j++)\n        {\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums=sums;\n    std::sort(sorted_sums.begin(),sorted_sums.end());\n    for(int i=0;i<sorted_sums.size();i++)\n    {\n        for(int j=0;j<sums.size();j++)\n        {\n            if(sorted_sums[i]==sums[j])\n            {\n                result.push_back(M[j]);\n                sums[j]=-1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for(int i = 0; i < sums.size(); i++) {\n        int min_index = i;\n        for(int j = i; j < sums.size(); j++) {\n            if(sums[j] < sums[min_index]) {\n                min_index = j;\n            }\n        }\n        std::swap(sums[i], sums[min_index]);\n        std::swap(M[i], M[min_index]);\n    }\n    return M;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, std::vector<long>>> v;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        v.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(v.begin(), v.end());\n    for(int i = 0; i < v.size(); i++) {\n        res.push_back(v[i].second);\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<int> indices(M.size());\n    std::iota(indices.begin(), indices.end(), 0);\n    std::sort(indices.begin(), indices.end(), [&sums](int i1, int i2) { return sums[i1] < sums[i2]; });\n    for (int i = 0; i < indices.size(); i++) {\n        res.push_back(M[indices[i]]);\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++) {\n        long sum = 0;\n        for(int j=0;j<M[i].size();j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(),sorted_sums.end());\n    for(int i=0;i<sorted_sums.size();i++) {\n        for(int j=0;j<sums.size();j++) {\n            if(sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for (int i = 0; i < M.size(); i++) {\n        int min = i;\n        for (int j = i + 1; j < M.size(); j++) {\n            if (sums[j] < sums[min]) {\n                min = j;\n            }\n        }\n        if (min != i) {\n            std::swap(sums[i], sums[min]);\n            std::swap(M[i], M[min]);\n        }\n    }\n    return M;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto el : row) {\n            sum += el;\n        }\n        sums.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (auto row : sums) {\n        result.push_back(row.second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++)\n    {\n        long sum=0;\n        for(int j=0;j<M[i].size();j++)\n        {\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for(int i=0;i<M.size();i++)\n    {\n        long min=INT_MAX;\n        int index=0;\n        for(int j=0;j<sums.size();j++)\n        {\n            if(sums[j]<min)\n            {\n                min=sums[j];\n                index=j;\n            }\n        }\n        result.push_back(M[index]);\n        sums[index]=INT_MAX;\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, std::vector<long>>> temp;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        temp.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        result.push_back(temp[i].second);\n    }\n    return result;",
    "    std::vector<std::pair<long, int>> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, i));\n    }\n    std::sort(sums.begin(), sums.end());\n    std::vector<std::vector<long>> sorted_matrix;\n    for(int i = 0; i < sums.size(); i++) {\n        sorted_matrix.push_back(M[sums[i].second]);\n    }\n    return sorted_matrix;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (int i = 0; i < sums.size(); i++) {\n        result.push_back(sums[i].second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, long>> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, i));\n    }\n    std::sort(sums.begin(), sums.end());\n    for(int i = 0; i < sums.size(); i++) {\n        res.push_back(M[sums[i].second]);\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    // Write your code here\n    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums=sums;\n    std::sort(sorted_sums.begin(),sorted_sums.end());\n    for(int i=0;i<sorted_sums.size();i++){\n        for(int j=0;j<sums.size();j++){\n            if(sorted_sums[i]==sums[j]){\n                res.push_back(M[j]);\n                sums[j]=INT_MAX;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "\tstd::vector<std::vector<long>> res;\n\tstd::vector<long> sums;\n\tfor (int i = 0; i < M.size(); i++) {\n\t\tlong sum = 0;\n\t\tfor (int j = 0; j < M[i].size(); j++) {\n\t\t\tsum += M[i][j];\n\t\t}\n\t\tsums.push_back(sum);\n\t}\n\tstd::vector<long> sorted_sums = sums;\n\tstd::sort(sorted_sums.begin(), sorted_sums.end());\n\tfor (int i = 0; i < sorted_sums.size(); i++) {\n\t\tfor (int j = 0; j < sums.size(); j++) {\n\t\t\tif (sorted_sums[i] == sums[j]) {\n\t\t\t\tres.push_back(M[j]);\n\t\t\t\tsums[j] = -1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "  std::vector<std::pair<long, std::vector<long>>> sums;\n  for (int i = 0; i < M.size(); i++) {\n    long sum = 0;\n    for (int j = 0; j < M[i].size(); j++) {\n      sum += M[i][j];\n    }\n    sums.push_back(std::make_pair(sum, M[i]));\n  }\n  std::sort(sums.begin(), sums.end());\n  std::vector<std::vector<long>> sorted_matrix;\n  for (int i = 0; i < sums.size(); i++) {\n    sorted_matrix.push_back(sums[i].second);\n  }\n  return sorted_matrix;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (auto pair : sums) {\n        result.push_back(pair.second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums=sums;\n    std::sort(sorted_sums.begin(),sorted_sums.end());\n    for(int i=0;i<sorted_sums.size();i++){\n        for(int j=0;j<sums.size();j++){\n            if(sorted_sums[i]==sums[j]){\n                res.push_back(M[j]);\n                sums[j]=0;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sum_of_rows;\n    for(int i=0;i<M.size();i++)\n    {\n        long sum=0;\n        for(int j=0;j<M[i].size();j++)\n        {\n            sum+=M[i][j];\n        }\n        sum_of_rows.push_back(sum);\n    }\n    std::vector<long> sorted_sum_of_rows=sum_of_rows;\n    std::sort(sorted_sum_of_rows.begin(),sorted_sum_of_rows.end());\n    for(int i=0;i<sorted_sum_of_rows.size();i++)\n    {\n        for(int j=0;j<sum_of_rows.size();j++)\n        {\n            if(sorted_sum_of_rows[i]==sum_of_rows[j])\n            {\n                result.push_back(M[j]);\n                sum_of_rows[j]=INT_MAX;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sums.begin(), sums.end());\n    std::vector<std::vector<long>> result;\n    for (auto pair : sums) {\n        result.push_back(pair.second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums=sums;\n    std::sort(sorted_sums.begin(),sorted_sums.end());\n    for(int i=0;i<sorted_sums.size();i++){\n        for(int j=0;j<sums.size();j++){\n            if(sorted_sums[i]==sums[j]){\n                result.push_back(M[j]);\n                sums[j]=0;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::map<long, std::vector<long>> m;\n    for(int i=0;i<M.size();i++) {\n        long sum = 0;\n        for(int j=0;j<M[i].size();j++) {\n            sum += M[i][j];\n        }\n        m[sum] = M[i];\n    }\n    for(auto it = m.begin();it!=m.end();it++) {\n        res.push_back(it->second);\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (auto sum : sums) {\n        res.push_back(sum.second);\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, int>> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, i));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (int i = 0; i < sums.size(); i++) {\n        result.push_back(M[sums[i].second]);\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums=sums;\n    std::sort(sorted_sums.begin(),sorted_sums.end());\n    for(int i=0;i<sorted_sums.size();i++){\n        for(int j=0;j<sums.size();j++){\n            if(sorted_sums[i]==sums[j]){\n                res.push_back(M[j]);\n                sums[j]=-1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> row_sum;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        row_sum.push_back(sum);\n    }\n    std::vector<long> temp=row_sum;\n    std::sort(temp.begin(),temp.end());\n    for(int i=0;i<temp.size();i++){\n        for(int j=0;j<row_sum.size();j++){\n            if(temp[i]==row_sum[j]){\n                res.push_back(M[j]);\n                row_sum[j]=-1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(sums.begin(), sums.end());\n    for(int i = 0; i < sums.size(); i++) {\n        res.push_back(sums[i].second);\n    }\n    return res;",
    "    std::vector<std::pair<long, std::vector<long>>> v;\n    for (auto i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (auto j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        v.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(v.begin(), v.end());\n    std::vector<std::vector<long>> res;\n    for (auto i = 0; i < v.size(); i++) {\n        res.push_back(v[i].second);\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> sorted_M;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for (int i = 0; i < M.size(); i++) {\n        int min_index = i;\n        for (int j = i; j < M.size(); j++) {\n            if (sums[j] < sums[min_index]) {\n                min_index = j;\n            }\n        }\n        std::swap(sums[i], sums[min_index]);\n        std::swap(M[i], M[min_index]);\n    }\n    return M;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> row_sum;\n    for(int i=0;i<M.size();i++){\n        long sum = 0;\n        for(int j=0;j<M[i].size();j++){\n            sum += M[i][j];\n        }\n        row_sum.push_back(sum);\n    }\n    std::vector<long> row_sum_copy = row_sum;\n    std::sort(row_sum_copy.begin(),row_sum_copy.end());\n    for(int i=0;i<row_sum_copy.size();i++){\n        for(int j=0;j<row_sum.size();j++){\n            if(row_sum_copy[i] == row_sum[j]){\n                result.push_back(M[j]);\n                row_sum[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, long>> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, i));\n    }\n    std::sort(sums.begin(), sums.end());\n    for(int i = 0; i < sums.size(); i++) {\n        res.push_back(M[sums[i].second]);\n    }\n    return res;",
    "    std::vector<std::vector<long>> sorted_matrix;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for(int i = 0; i < M.size(); i++) {\n        int min = i;\n        for(int j = i + 1; j < M.size(); j++) {\n            if(sums[j] < sums[min]) {\n                min = j;\n            }\n        }\n        if(min != i) {\n            std::swap(sums[i], sums[min]);\n            std::swap(M[i], M[min]);\n        }\n    }\n    return M;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> row_sum;\n    for(int i=0; i<M.size(); i++) {\n        long sum = 0;\n        for(int j=0; j<M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        row_sum.push_back(sum);\n    }\n    std::vector<long> temp = row_sum;\n    std::sort(temp.begin(), temp.end());\n    for(int i=0; i<temp.size(); i++) {\n        for(int j=0; j<row_sum.size(); j++) {\n            if(temp[i] == row_sum[j]) {\n                result.push_back(M[j]);\n                row_sum[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for (int i = 0; i < M.size(); i++) {\n        int min_index = i;\n        for (int j = i + 1; j < M.size(); j++) {\n            if (sums[j] < sums[min_index]) {\n                min_index = j;\n            }\n        }\n        std::swap(M[i], M[min_index]);\n        std::swap(sums[i], sums[min_index]);\n    }\n    return M;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (int i = 0; i < sums.size(); i++) {\n        res.push_back(sums[i].second);\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++) {\n        long sum = 0;\n        for(int j=0;j<M[i].size();j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(),sorted_sums.end());\n    for(int i=0;i<sorted_sums.size();i++) {\n        for(int j=0;j<sums.size();j++) {\n            if(sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (int i = 0; i < sums.size(); i++) {\n        result.push_back(sums[i].second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<int> indices;\n    for (int i = 0; i < sums.size(); i++) {\n        indices.push_back(i);\n    }\n    std::sort(indices.begin(), indices.end(), [&sums](int i1, int i2) {\n        return sums[i1] < sums[i2];\n    });\n    for (int i = 0; i < indices.size(); i++) {\n        result.push_back(M[indices[i]]);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(auto row : M) {\n        long sum = 0;\n        for(auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(sum);\n    }\n    std::vector<int> indices(sums.size());\n    std::iota(indices.begin(), indices.end(), 0);\n    std::sort(indices.begin(), indices.end(), [&sums](int i1, int i2) {\n        return sums[i1] < sums[i2];\n    });\n    for(auto i : indices) {\n        result.push_back(M[i]);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, std::vector<long>>> temp;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        temp.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(temp.begin(), temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        result.push_back(temp[i].second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for (int i = 0; i < M.size(); i++) {\n        int min = i;\n        for (int j = i + 1; j < M.size(); j++) {\n            if (sums[j] < sums[min]) {\n                min = j;\n            }\n        }\n        std::swap(sums[i], sums[min]);\n        std::swap(M[i], M[min]);\n    }\n    return M;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (auto sum : sums) {\n        result.push_back(sum.second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++) {\n        long sum = 0;\n        for(int j=0;j<M[i].size();j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i=0;i<sorted_sums.size();i++) {\n        for(int j=0;j<sums.size();j++) {\n            if(sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "  std::vector<std::vector<long>> sorted_matrix;\n  std::vector<long> row_sum;\n  for (int i = 0; i < M.size(); i++) {\n    long sum = 0;\n    for (int j = 0; j < M[i].size(); j++) {\n      sum += M[i][j];\n    }\n    row_sum.push_back(sum);\n  }\n  std::vector<long> sorted_row_sum = row_sum;\n  std::sort(sorted_row_sum.begin(), sorted_row_sum.end());\n  for (int i = 0; i < sorted_row_sum.size(); i++) {\n    for (int j = 0; j < row_sum.size(); j++) {\n      if (sorted_row_sum[i] == row_sum[j]) {\n        sorted_matrix.push_back(M[j]);\n        row_sum[j] = -1;\n        break;\n      }\n    }\n  }\n  return sorted_matrix;",
    "\tstd::vector<std::vector<long>> res;\n\tstd::vector<long> sums;\n\tfor (int i = 0; i < M.size(); i++) {\n\t\tlong sum = 0;\n\t\tfor (int j = 0; j < M[i].size(); j++) {\n\t\t\tsum += M[i][j];\n\t\t}\n\t\tsums.push_back(sum);\n\t}\n\tstd::vector<long> sorted_sums = sums;\n\tstd::sort(sorted_sums.begin(), sorted_sums.end());\n\tfor (int i = 0; i < sorted_sums.size(); i++) {\n\t\tfor (int j = 0; j < sums.size(); j++) {\n\t\t\tif (sorted_sums[i] == sums[j]) {\n\t\t\t\tres.push_back(M[j]);\n\t\t\t\tsums[j] = -1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;",
    "    std::vector<std::vector<long>> sorted_matrix;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for(int i = 0; i < M.size(); i++) {\n        long min = sums[i];\n        int min_index = i;\n        for(int j = i; j < M.size(); j++) {\n            if(sums[j] < min) {\n                min = sums[j];\n                min_index = j;\n            }\n        }\n        std::swap(sums[i], sums[min_index]);\n        std::swap(M[i], M[min_index]);\n    }\n    return M;",
    "  std::vector<std::vector<long>> res;\n  std::vector<long> sums;\n  for (int i = 0; i < M.size(); i++) {\n    long sum = 0;\n    for (int j = 0; j < M[i].size(); j++) {\n      sum += M[i][j];\n    }\n    sums.push_back(sum);\n  }\n  std::vector<long> sorted_sums = sums;\n  std::sort(sorted_sums.begin(), sorted_sums.end());\n  for (int i = 0; i < sorted_sums.size(); i++) {\n    for (int j = 0; j < sums.size(); j++) {\n      if (sorted_sums[i] == sums[j]) {\n        res.push_back(M[j]);\n        sums[j] = -1;\n        break;\n      }\n    }\n  }\n  return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<int> indices(M.size());\n    std::iota(indices.begin(), indices.end(), 0);\n    std::sort(indices.begin(), indices.end(), [&sums](int i1, int i2) {\n        return sums[i1] < sums[i2];\n    });\n    for(int i = 0; i < indices.size(); i++) {\n        result.push_back(M[indices[i]]);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for(int i = 0; i < sums.size(); i++) {\n        int index = i;\n        for(int j = i + 1; j < sums.size(); j++) {\n            if(sums[j] < sums[index]) {\n                index = j;\n            }\n        }\n        std::swap(sums[i], sums[index]);\n        std::swap(M[i], M[index]);\n    }\n    return M;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for(int i=0;i<M.size();i++){\n        long min=sums[i];\n        int index=i;\n        for(int j=i+1;j<M.size();j++){\n            if(sums[j]<min){\n                min=sums[j];\n                index=j;\n            }\n        }\n        std::swap(sums[i],sums[index]);\n        std::swap(M[i],M[index]);\n    }\n    return M;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (auto i : M) {\n        long sum = 0;\n        for (auto j : i) {\n            sum += j;\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (auto i : sorted_sums) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (i == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for(int i = 0; i < sums.size(); i++) {\n        int min_index = i;\n        for(int j = i; j < sums.size(); j++) {\n            if(sums[j] < sums[min_index]) {\n                min_index = j;\n            }\n        }\n        std::swap(sums[i], sums[min_index]);\n        std::swap(M[i], M[min_index]);\n    }\n    return M;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for (int i = 0; i < sums.size(); i++) {\n        for (int j = i + 1; j < sums.size(); j++) {\n            if (sums[i] > sums[j]) {\n                long temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                std::vector<long> temp_row = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++)\n    {\n        long sum=0;\n        for(int j=0;j<M[i].size();j++)\n        {\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for(int i=0;i<sums.size();i++)\n    {\n        for(int j=i+1;j<sums.size();j++)\n        {\n            if(sums[i]>sums[j])\n            {\n                long temp=sums[i];\n                sums[i]=sums[j];\n                sums[j]=temp;\n                std::vector<long> temp2=M[i];\n                M[i]=M[j];\n                M[j]=temp2;\n            }\n        }\n    }\n    return M;",
    "    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sums.begin(), sums.end());\n    std::vector<std::vector<long>> result;\n    for (auto pair : sums) {\n        result.push_back(pair.second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> ret;\n    std::vector<std::pair<long, long>> sum_index;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sum_index.push_back(std::make_pair(sum, i));\n    }\n    std::sort(sum_index.begin(), sum_index.end());\n    for (int i = 0; i < sum_index.size(); i++) {\n        ret.push_back(M[sum_index[i].second]);\n    }\n    return ret;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (auto sum : sorted_sums) {\n        for (int i = 0; i < sums.size(); i++) {\n            if (sum == sums[i]) {\n                result.push_back(M[i]);\n                sums[i] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++) {\n        long sum = 0;\n        for(int j=0;j<M[i].size();j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> copy = sums;\n    std::sort(copy.begin(), copy.end());\n    for(int i=0;i<copy.size();i++) {\n        for(int j=0;j<sums.size();j++) {\n            if(copy[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> temp;\n    std::vector<long> sum;\n    for(int i=0;i<M.size();i++)\n    {\n        long sum_row=0;\n        for(int j=0;j<M[0].size();j++)\n        {\n            sum_row+=M[i][j];\n        }\n        sum.push_back(sum_row);\n    }\n    for(int i=0;i<sum.size();i++)\n    {\n        for(int j=i+1;j<sum.size();j++)\n        {\n            if(sum[i]>sum[j])\n            {\n                long temp_sum=sum[i];\n                sum[i]=sum[j];\n                sum[j]=temp_sum;\n                for(int k=0;k<M[0].size();k++)\n                {\n                    long temp_row=M[i][k];\n                    M[i][k]=M[j][k];\n                    M[j][k]=temp_row;\n                }\n            }\n        }\n    }\n    return M;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (auto sum : sorted_sums) {\n        for (int i = 0; i < sums.size(); i++) {\n            if (sums[i] == sum) {\n                res.push_back(M[i]);\n                sums[i] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < M.size(); i++) {\n        for (int j = 0; j < M[i].size(); j++) {\n            long sum = 0;\n            for (int k = 0; k < M[i].size(); k++) {\n                sum += M[i][k];\n            }\n            int index = std::find(sorted_sums.begin(), sorted_sums.end(), sum) - sorted_sums.begin();\n            result.push_back(M[index]);\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n\n    for (int i = 0; i < sums.size(); i++) {\n        int min = i;\n        for (int j = i + 1; j < sums.size(); j++) {\n            if (sums[j] < sums[min]) {\n                min = j;\n            }\n        }\n        long temp = sums[i];\n        sums[i] = sums[min];\n        sums[min] = temp;\n        std::vector<long> temp_vec = M[i];\n        M[i] = M[min];\n        M[min] = temp_vec;\n    }\n\n    return M;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> row_sum;\n    for(int i=0;i<M.size();i++)\n    {\n        long sum=0;\n        for(int j=0;j<M[i].size();j++)\n        {\n            sum+=M[i][j];\n        }\n        row_sum.push_back(sum);\n    }\n    std::vector<long> row_sum_copy=row_sum;\n    std::sort(row_sum_copy.begin(),row_sum_copy.end());\n    for(int i=0;i<row_sum_copy.size();i++)\n    {\n        for(int j=0;j<row_sum.size();j++)\n        {\n            if(row_sum_copy[i]==row_sum[j])\n            {\n                result.push_back(M[j]);\n                row_sum[j]=INT_MAX;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<int> indices = sort_indices(sums);\n    for (int i = 0; i < indices.size(); i++) {\n        result.push_back(M[indices[i]]);\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<int> indices(M.size());\n    std::iota(indices.begin(), indices.end(), 0);\n    std::sort(indices.begin(), indices.end(), [&sums](int i1, int i2) {return sums[i1] < sums[i2];});\n    for (int i = 0; i < indices.size(); i++) {\n        res.push_back(M[indices[i]]);\n    }\n    return res;",
    "    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sums.begin(), sums.end());\n    std::vector<std::vector<long>> result;\n    for (auto pair : sums) {\n        result.push_back(pair.second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for(int i = 0; i < sums.size(); i++) {\n        int min = i;\n        for(int j = i + 1; j < sums.size(); j++) {\n            if(sums[j] < sums[min]) {\n                min = j;\n            }\n        }\n        if(min != i) {\n            std::swap(sums[i], sums[min]);\n            std::swap(M[i], M[min]);\n        }\n    }\n    return M;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (auto pair : sums) {\n        res.push_back(pair.second);\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back({sum, row});\n    }\n    std::sort(sums.begin(), sums.end());\n    for (auto sum : sums) {\n        res.push_back(sum.second);\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[0].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, std::vector<long>>> sum_matrix;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[0].size(); j++) {\n            sum += M[i][j];\n        }\n        sum_matrix.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(sum_matrix.begin(), sum_matrix.end());\n    for(int i = 0; i < sum_matrix.size(); i++) {\n        result.push_back(sum_matrix[i].second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::map<long, std::vector<long>> map;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        map[sum] = M[i];\n    }\n    for(auto it = map.begin(); it != map.end(); it++) {\n        result.push_back(it->second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for(auto row : M) {\n        long sum = 0;\n        for(auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back({sum, row});\n    }\n    std::sort(sums.begin(), sums.end());\n    for(auto sum : sums) {\n        result.push_back(sum.second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> temp = sums;\n    std::sort(temp.begin(), temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(temp[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sums_copy = sums;\n    std::sort(sums_copy.begin(), sums_copy.end());\n    for(int i = 0; i < sums_copy.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sums_copy[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> row_sums;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        row_sums.push_back(sum);\n    }\n    for(int i=0;i<M.size();i++){\n        long min=INT_MAX;\n        int min_index=0;\n        for(int j=0;j<row_sums.size();j++){\n            if(row_sums[j]<min){\n                min=row_sums[j];\n                min_index=j;\n            }\n        }\n        result.push_back(M[min_index]);\n        row_sums[min_index]=INT_MAX;\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for (int i = 0; i < sums.size(); i++) {\n        for (int j = i + 1; j < sums.size(); j++) {\n            if (sums[i] > sums[j]) {\n                std::swap(sums[i], sums[j]);\n                std::swap(M[i], M[j]);\n            }\n        }\n    }\n    return M;",
    "    std::vector<std::vector<long>> sorted_matrix;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                sorted_matrix.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<int> indices(M.size());\n    std::iota(indices.begin(), indices.end(), 0);\n    std::sort(indices.begin(), indices.end(), [&sums](int i1, int i2) {return sums[i1] < sums[i2];});\n    for (int i = 0; i < indices.size(); i++) {\n        res.push_back(M[indices[i]]);\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> row_sums;\n    std::vector<long> row_indexes;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        row_sums.push_back(sum);\n        row_indexes.push_back(i);\n    }\n    for(int i = 0; i < row_sums.size(); i++) {\n        for(int j = i; j < row_sums.size(); j++) {\n            if(row_sums[i] > row_sums[j]) {\n                long temp = row_sums[i];\n                row_sums[i] = row_sums[j];\n                row_sums[j] = temp;\n                temp = row_indexes[i];\n                row_indexes[i] = row_indexes[j];\n                row_indexes[j] = temp;\n            }\n        }\n    }\n    for(int i = 0; i < row_indexes.size(); i++) {\n        result.push_back(M[row_indexes[i]]);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    for (int i = 0; i < sums.size(); i++) {\n        int min_index = i;\n        for (int j = i + 1; j < sums.size(); j++) {\n            if (sums[j] < sums[min_index]) {\n                min_index = j;\n            }\n        }\n        std::swap(sums[i], sums[min_index]);\n        std::swap(M[i], M[min_index]);\n    }\n    return M;",
    "    std::vector<std::vector<long>> sorted_M;\n    std::vector<long> row_sum;\n    std::vector<long> row_index;\n    long sum = 0;\n    for (long i = 0; i < M.size(); i++) {\n        sum = 0;\n        for (long j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        row_sum.push_back(sum);\n        row_index.push_back(i);\n    }\n    for (long i = 0; i < row_sum.size(); i++) {\n        for (long j = i + 1; j < row_sum.size(); j++) {\n            if (row_sum[i] > row_sum[j]) {\n                std::swap(row_sum[i], row_sum[j]);\n                std::swap(row_index[i], row_index[j]);\n            }\n        }\n    }\n    for (long i = 0; i < row_index.size(); i++) {\n        sorted_M.push_back(M[row_index[i]]);\n    }\n    return sorted_M;",
    "    std::vector<std::pair<long, std::vector<long>>> sum_row;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sum_row.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(sum_row.begin(), sum_row.end());\n    std::vector<std::vector<long>> res;\n    for (int i = 0; i < sum_row.size(); i++) {\n        res.push_back(sum_row[i].second);\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, long>> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, i));\n    }\n    std::sort(sums.begin(), sums.end());\n    for(int i = 0; i < sums.size(); i++) {\n        result.push_back(M[sums[i].second]);\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, int>> sums;\n    for(int i = 0; i < M.size(); ++i) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); ++j) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, i));\n    }\n    std::sort(sums.begin(), sums.end());\n    for(int i = 0; i < sums.size(); ++i) {\n        res.push_back(M[sums[i].second]);\n    }\n    return res;"
  ]
}