{
  "name": "mbpp_106_add_lists",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to append the given list to the given tuples.\nlong add_lists(std::vector<long> test_list, long test_tup) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = add_lists;\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7})), std::make_tuple(9, 10)) == std::make_tuple(9, 10, 5, 6, 7));\n    assert(candidate((std::vector<long>({(long)6, (long)7, (long)8})), std::make_tuple(10, 11)) == std::make_tuple(10, 11, 6, 7, 8));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9})), std::make_tuple(11, 12)) == std::make_tuple(11, 12, 7, 8, 9));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long result = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        result = result * 10 + test_list[i];\n    }\n    result = result * 10 + test_tup;\n    return result;",
    "    long result = 0;\n    for(long i = 0; i < test_list.size(); i++) {\n        result = result * 10 + test_list[i];\n    }\n    result = result * 10 + test_tup;\n    return result;",
    "    long result = test_tup;\n    for (long i = 0; i < test_list.size(); i++) {\n        result = result * 10 + test_list[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        result += test_list[i] * pow(10, i);\n    }\n    result += test_tup;\n    return result;",
    "    long result = test_tup;\n    for (long i = 0; i < test_list.size(); i++) {\n        result = result * 10 + test_list[i];\n    }\n    return result;",
    "    long result = test_tup;\n    for (long i = 0; i < test_list.size(); i++) {\n        result = result * 10 + test_list[i];\n    }\n    return result;",
    "    // Your code here\n    long sum = 0;\n    for(int i = 0; i < test_list.size(); i++)\n    {\n        sum = sum + test_list[i];\n    }\n    sum = sum + test_tup;\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i] * pow(10, i);\n    }\n    return sum + test_tup;",
    "    long result = test_tup;\n    for (int i = 0; i < test_list.size(); i++) {\n        result = result * 10 + test_list[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        result += test_list[i] * pow(10, i);\n    }\n    result += test_tup;\n    return result;",
    "    long result = test_tup;\n    for (long i = 0; i < test_list.size(); i++) {\n        result = result * 10 + test_list[i];\n    }\n    return result;",
    "    long result = test_tup;\n    for (long i = 0; i < test_list.size(); i++) {\n        result = result * 10 + test_list[i];\n    }\n    return result;",
    "    long sum = 0;\n    long multiplier = 1;\n    for (long i = test_list.size() - 1; i >= 0; i--) {\n        sum += test_list[i] * multiplier;\n        multiplier *= 10;\n    }\n    sum += test_tup;\n    return sum;",
    "    long result = test_tup;\n    for (long i = 0; i < test_list.size(); i++) {\n        result = result * 10 + test_list[i];\n    }\n    return result;",
    "    long result = test_tup;\n    for (int i = 0; i < test_list.size(); i++) {\n        result = result * 10 + test_list[i];\n    }\n    return result;",
    "    // Your code here\n    std::vector<long> tup_list;\n    while(test_tup != 0){\n        tup_list.push_back(test_tup%10);\n        test_tup /= 10;\n    }\n    std::reverse(tup_list.begin(), tup_list.end());\n    for(int i = 0; i < test_list.size(); i++){\n        tup_list.push_back(test_list[i]);\n    }\n    long res = 0;\n    for(int i = 0; i < tup_list.size(); i++){\n        res = res*10 + tup_list[i];\n    }\n    return res;",
    "    long result = 0;\n    long multiplier = 1;\n    for (auto it = test_list.rbegin(); it != test_list.rend(); ++it) {\n        result += (*it) * multiplier;\n        multiplier *= 10;\n    }\n    result += test_tup;\n    return result;",
    "    long result = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        result += test_list[i] * pow(10, i);\n    }\n    result += test_tup;\n    return result;",
    "    int len = test_list.size();\n    long sum = 0;\n    for (int i = 0; i < len; i++) {\n        sum += test_list[i] * pow(10, len - i - 1);\n    }\n    sum += test_tup;\n    return sum;",
    "    std::vector<long> tup_list;\n    long tup_size = 0;\n    while (test_tup != 0) {\n        tup_list.push_back(test_tup % 10);\n        test_tup /= 10;\n        tup_size++;\n    }\n    long list_size = test_list.size();\n    long new_tup = 0;\n    for (long i = 0; i < tup_size; i++) {\n        new_tup = new_tup * 10 + tup_list[i];\n    }\n    for (long i = 0; i < list_size; i++) {\n        new_tup = new_tup * 10 + test_list[i];\n    }\n    return new_tup;"
  ]
}