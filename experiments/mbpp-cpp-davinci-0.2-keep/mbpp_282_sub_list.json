{
  "name": "mbpp_282_sub_list",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to subtract two lists element-wise.\nstd::vector<long> sub_list(std::vector<long> nums1, std::vector<long> nums2) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = sub_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)4, (long)5, (long)6}))) == (std::vector<long>({(long)-3, (long)-3, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (std::vector<long>({(long)3, (long)4}))) == (std::vector<long>({(long)-2, (long)-2})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<long>({(long)40, (long)50})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "  std::vector<long> result;\n  for (int i = 0; i < nums1.size(); i++) {\n    result.push_back(nums1[i] - nums2[i]);\n  }\n  return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;"
  ]
}