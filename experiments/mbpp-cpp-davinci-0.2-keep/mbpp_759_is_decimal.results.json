{
  "name": "mbpp_759_is_decimal",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int index = num.find('.');\n    if(index == -1) {\n        return true;\n    }\n    if(index + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "tmpcpbbja2v: /tmp/tmpcpbbja2v.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(index == num.size() - 1) {\n            return false;\n        }\n        if(index == num.size() - 3) {\n            return true;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "tmp9kn96642: /tmp/tmp9kn96642.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int i = 0;\n    while (i < num.size() && num[i] != '.') {\n        i++;\n    }\n    if (i == num.size()) {\n        return true;\n    }\n    if (i + 3 > num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "tmpwpyk85jc: /tmp/tmpwpyk85jc.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            dot_count++;\n        }\n        if(dot_count > 1) {\n            return false;\n        }\n        if(num[i] == '.') {\n            if(i == num.length() - 1) {\n                return false;\n            }\n            if(i == num.length() - 2) {\n                return true;\n            }\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "tmpy9z1boaz: /tmp/tmpy9z1boaz.cpp:27: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == std::string::npos) {\n        return true;\n    }\n    if(dot_index == num.length() - 1) {\n        return false;\n    }\n    if(dot_index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "tmpfdebi8y8: /tmp/tmpfdebi8y8.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmp_vze8ok2: /tmp/tmp_vze8ok2.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if (dot_pos == std::string::npos) {\n        return true;\n    }\n    if (dot_pos + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "tmpwtcb16dd: /tmp/tmpwtcb16dd.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if (num.size() == 0) {\n        return false;\n    }\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count_decimal = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count_decimal++;\n        } else if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return count_decimal <= 1;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "tmplxdrvg7j: /tmp/tmplxdrvg7j.cpp:26: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index + 3 < num.size()) {\n            return false;\n        }\n    }\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "tmpm_6k4jk2: /tmp/tmpm_6k4jk2.cpp:29: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(num[i] == '.' && (i == 0 || i == num.length() - 1)) {\n            return false;\n        }\n        if(num[i] != '.' && !isdigit(num[i])) {\n            return false;\n        }\n    }\n    if(count == 0) {\n        return false;\n    }\n    int index = num.find('.');\n    if(index == num.length() - 1) {\n        return false;\n    }\n    if(num.length() - index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == -1) {\n        return true;\n    }\n    if (dot_index == num.length() - 1) {\n        return false;\n    }\n    if (dot_index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "tmp5kyt6b0z: /tmp/tmp5kyt6b0z.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (num.size() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "tmpy_wrd_km: /tmp/tmpy_wrd_km.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index == num.size() - 1) {\n            return false;\n        }\n        if (index == num.size() - 3) {\n            return true;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "tmp3ribpzjg: /tmp/tmp3ribpzjg.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int n = num.size();\n    if(n == 0) return false;\n    int i = 0;\n    if(num[i] == '-') i++;\n    if(i == n) return false;\n    int count = 0;\n    while(i < n && num[i] != '.') {\n        if(num[i] < '0' || num[i] > '9') return false;\n        i++;\n    }\n    if(i == n) return false;\n    i++;\n    while(i < n) {\n        if(num[i] < '0' || num[i] > '9') return false;\n        i++;\n        count++;\n    }\n    return count == 2;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int count_decimal = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            break;\n        }\n        count_decimal++;\n    }\n    if (count_decimal > 2) {\n        return false;\n    }\n    int count_after_decimal = 0;\n    for (int i = num.length() - 1; i >= 0; i--) {\n        if (num[i] == '.') {\n            break;\n        }\n        count_after_decimal++;\n    }\n    if (count_after_decimal > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "tmp8ue6ats0: /tmp/tmp8ue6ats0.cpp:38: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    int len = num.length();\n    if(num[0] == '-') {\n        i = 1;\n    }\n    int count = 0;\n    for(; i < len; i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "tmpn2lx9av1: /tmp/tmpn2lx9av1.cpp:28: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if(num[0] == '-') {\n        num = num.substr(1);\n    }\n    int n = num.length();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if(index == n - 1) {\n        return false;\n    }\n    if(index == n - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "tmpqrj54gm_: /tmp/tmpqrj54gm_.cpp:33: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count_decimal = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count_decimal++;\n        }\n    }\n    if (count_decimal > 1) {\n        return false;\n    }\n    if (num[0] == '.') {\n        return false;\n    }\n    if (num[num.size() - 1] == '.') {\n        return false;\n    }\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            if (num.size() - i - 1 > 2) {\n                return false;\n            }\n            break;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "tmpocexvmaz: /tmp/tmpocexvmaz.cpp:33: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index == num.length() - 1) {\n            return false;\n        }\n        if (index == num.length() - 3) {\n            return true;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "tmp7lld5gtw: /tmp/tmp7lld5gtw.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    if (count == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "tmpb698c_lz: /tmp/tmpb698c_lz.cpp:28: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(index == num.length() - 1) {\n            return false;\n        }\n        if(index == num.length() - 3) {\n            return true;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmpz0kaq7te: /tmp/tmpz0kaq7te.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(num.size() - index - 1 == 2) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpi41gaadi: /tmp/tmpi41gaadi.cpp:22: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] != '.' && !isdigit(num[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmp3tbl6b60: /tmp/tmp3tbl6b60.cpp:27: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n    }\n    if (count == 0) {\n        return true;\n    }\n    std::string after_decimal = num.substr(num.find('.') + 1);\n    if (after_decimal.size() == 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpokiki480: /tmp/tmpokiki480.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index + 3 < num.size()) {\n            return false;\n        }\n    }\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int count2 = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            break;\n        }\n        count2++;\n    }\n    if(count2 > 3) {\n        return false;\n    }\n    int count3 = 0;\n    for(int i = num.length() - 1; i >= 0; i--) {\n        if(num[i] == '.') {\n            break;\n        }\n        count3++;\n    }\n    if(count3 > 3) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    int digit_count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            dot_count++;\n        }\n        else if (num[i] >= '0' && num[i] <= '9') {\n            digit_count++;\n        }\n        else {\n            return false;\n        }\n    }\n    if (dot_count == 1 && digit_count == 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpg7w1oqke: /tmp/tmpg7w1oqke.cpp:25: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int index = num.find('.');\n    if (index == -1) {\n        return true;\n    }\n    if (index == num.length() - 1) {\n        return false;\n    }\n    if (index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpnmlbibbi: /tmp/tmpnmlbibbi.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == -1) {\n        return true;\n    }\n    if (dot_index + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmpmnep1eeu: /tmp/tmpmnep1eeu.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == -1) {\n        return false;\n    }\n    if(dot_index == num.length() - 1) {\n        return false;\n    }\n    if(dot_index == 0) {\n        return false;\n    }\n    if(dot_index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpmq0zkc49: /tmp/tmpmq0zkc49.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(index + 3 < num.length()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmp4_vc16ao: /tmp/tmp4_vc16ao.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmp_vze8ok2: /tmp/tmp_vze8ok2.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int count_after_dot = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            break;\n        }\n        count_after_dot++;\n    }\n    if(count_after_dot > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmppyvmgiq8: /tmp/tmppyvmgiq8.cpp:28: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') i++;\n    int count = 0;\n    while (num[i] != '\\0') {\n        if (num[i] == '.') {\n            count++;\n            if (count > 1) return false;\n        }\n        else if (num[i] < '0' || num[i] > '9') return false;\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpa_0xhnty: /tmp/tmpa_0xhnty.cpp:22: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == -1) {\n        return true;\n    }\n    if (dot_index == num.size() - 1) {\n        return false;\n    }\n    if (num.size() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpktpbeluo: /tmp/tmpktpbeluo.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if (dot_pos == std::string::npos) {\n        return true;\n    }\n    if (dot_pos + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmp6q3mri57: /tmp/tmp6q3mri57.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    int count = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index + 3 < num.size()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmp__ofyrd_: /tmp/tmp__ofyrd_.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n\n    if (num[i] == '.') {\n        return false;\n    }\n\n    int count_decimal = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count_decimal++;\n        }\n    }\n\n    if (count_decimal > 1) {\n        return false;\n    }\n\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpgrz7fowd: /tmp/tmpgrz7fowd.cpp:30: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == -1) {\n        return true;\n    }\n    if (num.length() - dot_index > 3) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmpbztsckfx: /tmp/tmpbztsckfx.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n\tint count = 0;\n\tfor (int i = 0; i < num.size(); i++) {\n\t\tif (num[i] == '.') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count > 1) {\n\t\treturn false;\n\t}\n\tfor (int i = 0; i < num.size(); i++) {\n\t\tif (num[i] == '.') {\n\t\t\tif (num.size() - i > 3) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpx46w6yos: /tmp/tmpx46w6yos.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int count1 = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            break;\n        }\n        count1++;\n    }\n    int count2 = 0;\n    for(int i = num.length() - 1; i >= 0; i--) {\n        if(num[i] == '.') {\n            break;\n        }\n        count2++;\n    }\n    if(count1 + count2 > 3) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpu6qt_ryc: /tmp/tmpu6qt_ryc.cpp:35: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count == 1) {\n        for(int i = 0; i < num.length(); i++) {\n            if(num[i] == '.') {\n                if(num.length() - i - 1 == 2) {\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123011,
      "stdout": "",
      "stderr": "tmp_w5zoqw_: /tmp/tmp_w5zoqw_.cpp:30: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[0] == '-') {\n        i = 1;\n    }\n    int count = 0;\n    for(; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmpgux56h_d: /tmp/tmpgux56h_d.cpp:27: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index + 3 < num.size()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmpv_o05i2c: /tmp/tmpv_o05i2c.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if (dot_pos == std::string::npos) {\n        return true;\n    }\n    if (num.size() - dot_pos - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmptcl6z5a8: /tmp/tmptcl6z5a8.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n  int count = 0;\n  for (int i = 0; i < num.size(); i++) {\n    if (num[i] == '.') {\n      count++;\n    }\n  }\n  if (count > 1) {\n    return false;\n  }\n  int index = num.find('.');\n  if (index == -1) {\n    return true;\n  }\n  if (index == num.size() - 1) {\n    return false;\n  }\n  if (index == num.size() - 3) {\n    return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpq9osc3_9: /tmp/tmpq9osc3_9.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (num.length() - index - 1 > 2) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpvvr9j58f: /tmp/tmpvvr9j58f.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    bool decimal_point_found = false;\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            if(decimal_point_found) {\n                return false;\n            }\n            decimal_point_found = true;\n        } else if(num[i] < '0' || num[i] > '9') {\n            return false;\n        } else {\n            if(decimal_point_found) {\n                count++;\n            }\n        }\n    }\n    return count <= 2;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n\tint count = 0;\n\tfor(int i = 0; i < num.size(); i++) {\n\t\tif(num[i] == '.') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > 1) {\n\t\treturn false;\n\t}\n\tfor(int i = 0; i < num.size(); i++) {\n\t\tif(num[i] == '.') {\n\t\t\tif(num.size() - i - 1 > 2) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmp5gbqjv2t: /tmp/tmp5gbqjv2t.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int count_decimal = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            break;\n        }\n        count_decimal++;\n    }\n    if (count_decimal > 3) {\n        return false;\n    }\n    int count_precision = 0;\n    for (int i = num.length() - 1; i >= 0; i--) {\n        if (num[i] == '.') {\n            break;\n        }\n        count_precision++;\n    }\n    if (count_precision > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if(num.length() == 0) {\n        return false;\n    }\n    int i = 0;\n    if(num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    std::string s = num.substr(num.find('.') + 1);\n    if(s.length() > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if(index+3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123011,
      "stdout": "",
      "stderr": "tmpbrufnhaq: /tmp/tmpbrufnhaq.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int decimal_count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            decimal_count++;\n        }\n    }\n    if (decimal_count > 1) {\n        return false;\n    }\n    if (decimal_count == 1) {\n        int decimal_index = num.find('.');\n        if (num.size() - decimal_index > 3) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123011,
      "stdout": "",
      "stderr": "tmptxbt1qxk: /tmp/tmptxbt1qxk.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = -1;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            dot_index = i;\n            break;\n        }\n    }\n    if (dot_index == -1) {\n        return true;\n    }\n    if (num.size() - dot_index > 3) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmpbahl3jv7: /tmp/tmpbahl3jv7.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    int len = num.length();\n    if(num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < len; i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    std::string after_decimal = num.substr(num.find('.') + 1);\n    if(after_decimal.length() > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    int len = num.length();\n    if (num[i] == '-') {\n        i++;\n    }\n    if (num[i] == '.') {\n        i++;\n    }\n    int count = 0;\n    while (i < len) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmprxhuopz1: /tmp/tmprxhuopz1.cpp:30: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(index + 3 < num.size()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmphga0739e: /tmp/tmphga0739e.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(num.size() - index - 1 > 2) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmp1ezutaoj: /tmp/tmp1ezutaoj.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == std::string::npos) {\n        return false;\n    }\n    if(dot_index + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpz6p_03jm: /tmp/tmpz6p_03jm.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    int digit_count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            dot_count++;\n        } else if (isdigit(num[i])) {\n            digit_count++;\n        } else {\n            return false;\n        }\n    }\n    if (dot_count > 1 || digit_count > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmp7x5jeori: /tmp/tmp7x5jeori.cpp:23: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if(num.size() == 0) {\n        return false;\n    }\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    if(i == num.size()) {\n        return false;\n    }\n    int count_decimal = 0;\n    while(i < num.size()) {\n        if(num[i] == '.') {\n            count_decimal++;\n        }\n        if(count_decimal > 1) {\n            return false;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmptq9hwktl: /tmp/tmptq9hwktl.cpp:32: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if (index + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmp5fy0wbl0: /tmp/tmp5fy0wbl0.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            break;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    if(i == num.size()) {\n        return true;\n    }\n    i++;\n    if(i == num.size()) {\n        return false;\n    }\n    for(; i < num.size(); i++) {\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpe_fm3z7s: /tmp/tmpe_fm3z7s.cpp:44: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    if(num[num.size()-1] == '.') {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if(num.size() - dot_pos - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmp9my891l8: /tmp/tmp9my891l8.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int count1 = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            break;\n        }\n        count1++;\n    }\n    int count2 = 0;\n    for (int i = num.size() - 1; i >= 0; i--) {\n        if (num[i] == '.') {\n            break;\n        }\n        count2++;\n    }\n    if (count1 + count2 - 1 == 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpceniftq7: /tmp/tmpceniftq7.cpp:35: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    while (num[i] != '\\0') {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] != '.' && (num[i] < '0' || num[i] > '9')) {\n            return false;\n        }\n        i++;\n    }\n    if (count == 0) {\n        return true;\n    }\n    int len = num.length();\n    int dot_pos = num.find('.');\n    if (dot_pos == len - 1 || dot_pos == len - 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpib40b_4i: /tmp/tmpib40b_4i.cpp:36: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int count_after_decimal = 0;\n    for (int i = num.size() - 1; i >= 0; i--) {\n        if (num[i] == '.') {\n            break;\n        }\n        count_after_decimal++;\n    }\n    if (count_after_decimal > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpo9b0xnhi: /tmp/tmpo9b0xnhi.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (dot_index == num.length() - 1) {\n        return false;\n    }\n    if (dot_index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmppapshr3_: /tmp/tmppapshr3_.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') i++;\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n            continue;\n        }\n        if (count > 1) return false;\n        if (num[i] < '0' || num[i] > '9') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpd76dl8vk: /tmp/tmpd76dl8vk.cpp:22: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    std::stringstream ss(num);\n    float f;\n    ss >> f;\n    if (ss.fail() || ss.bad()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpoefscrii: /tmp/tmpoefscrii.cpp:26: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if (dot_pos == -1) {\n        return true;\n    }\n    if (dot_pos == num.length() - 1) {\n        return false;\n    }\n    if (dot_pos == num.length() - 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpj3q5s7vk: /tmp/tmpj3q5s7vk.cpp:28: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            if (num.size() - i > 3) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmps365cmv7: /tmp/tmps365cmv7.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    if(num[i-1] == '.') {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpn2dypxk7: /tmp/tmpn2dypxk7.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    int digit_count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            dot_count++;\n        } else if (num[i] >= '0' && num[i] <= '9') {\n            digit_count++;\n        } else {\n            return false;\n        }\n    }\n    if (dot_count == 1 && digit_count == 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmp4o1i53yo: /tmp/tmp4o1i53yo.cpp:23: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int index = num.find('.');\n    if(index == std::string::npos) {\n        return true;\n    }\n    if(num.length() - index > 3) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmp1cj0fd2_: /tmp/tmp1cj0fd2_.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(num[i] == '.') {\n            continue;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpgvldwia2: /tmp/tmpgvldwia2.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmplxj0o33b: /tmp/tmplxj0o33b.cpp:25: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    bool is_decimal = false;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            is_decimal = true;\n            continue;\n        }\n        if(is_decimal) {\n            count++;\n        }\n    }\n    return count <= 2;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmph0zr7pe4: /tmp/tmph0zr7pe4.cpp:21: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if(num.size() == 0) {\n        return false;\n    }\n    int i = 0;\n    if(num[0] == '-') {\n        i = 1;\n    }\n    int count = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if(index == num.size() - 1) {\n        return false;\n    }\n    if(num.size() - index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if(dot_pos == std::string::npos) {\n        return true;\n    }\n    if(dot_pos + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmp05aiwh22: /tmp/tmp05aiwh22.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int index = num.find('.');\n    if(index == -1) {\n        return true;\n    }\n    if(num.length() - index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmpxmh5mq07: /tmp/tmpxmh5mq07.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    int len = num.length();\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < len; i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] != '.' && (num[i] < '0' || num[i] > '9')) {\n            return false;\n        }\n    }\n    if (count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if (index + 3 < len) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if(index == std::string::npos) {\n        return true;\n    }\n    if(num.size() - index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if(num.size() == 0) {\n        return false;\n    }\n    int i = 0;\n    if(num[0] == '-') {\n        i++;\n    }\n    int count_decimal = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count_decimal++;\n        }\n        if(count_decimal > 1) {\n            return false;\n        }\n        if(num[i] != '.' && (num[i] < '0' || num[i] > '9')) {\n            return false;\n        }\n    }\n    if(count_decimal == 0) {\n        return false;\n    }\n    int decimal_index = num.find('.');\n    if(num.size() - decimal_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if(index == num.length() - 1) {\n        return false;\n    }\n    if(index == num.length() - 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmp83g_do8w: /tmp/tmp83g_do8w.cpp:28: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    bool is_decimal = false;\n    if (num[0] == '-') {\n        i++;\n    }\n    for (; i < num.length(); i++) {\n        if (num[i] == '.') {\n            is_decimal = true;\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    if (is_decimal) {\n        int dot_index = num.find('.');\n        if (dot_index + 3 == num.length()) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    bool decimal_found = false;\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            if(decimal_found) {\n                return false;\n            }\n            decimal_found = true;\n        } else if(num[i] < '0' || num[i] > '9') {\n            return false;\n        } else if(decimal_found) {\n            count++;\n        }\n    }\n    return count <= 2;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if (index == num.size() - 1) {\n        return false;\n    }\n    if (index == num.size() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmp_kj_qa77: /tmp/tmp_kj_qa77.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count == 1) {\n        for(int i = 0; i < num.size(); i++) {\n            if(num[i] == '.') {\n                if(num.size() - i - 1 == 2) {\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpq4x17ml7: /tmp/tmpq4x17ml7.cpp:30: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    int digit_count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            dot_count++;\n        } else if (isdigit(num[i])) {\n            digit_count++;\n        } else {\n            return false;\n        }\n    }\n    if (dot_count == 1 && digit_count == 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpdx1xqwfl: /tmp/tmpdx1xqwfl.cpp:23: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    else {\n        int count = 0;\n        for(int i = 0; i < num.size(); i++) {\n            if(num[i] == '.') {\n                break;\n            }\n            count++;\n        }\n        if(count == num.size()) {\n            return true;\n        }\n        else {\n            if(num[num.size() - 1] == '.') {\n                return false;\n            }\n            else {\n                int count = 0;\n                for(int i = num.size() - 1; i >= 0; i--) {\n                    if(num[i] == '.') {\n                        break;\n                    }\n                    count++;\n                }\n                if(count == 2) {\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpnmv3xrxc: /tmp/tmpnmv3xrxc.cpp:50: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    int count = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index + 3 < num.size()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmp__ofyrd_: /tmp/tmp__ofyrd_.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == -1) {\n        return true;\n    }\n    if(dot_index + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpfgb8a9wl: /tmp/tmpfgb8a9wl.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int pos = num.find('.');\n    if (pos == -1) {\n        return true;\n    }\n    if (pos == num.length() - 1) {\n        return false;\n    }\n    if (pos == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpo56mlhku: /tmp/tmpo56mlhku.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index + 3 < num.size()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmpv_o05i2c: /tmp/tmpv_o05i2c.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    int digit_count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            dot_count++;\n        } else if (isdigit(num[i])) {\n            digit_count++;\n        } else {\n            return false;\n        }\n    }\n    return (dot_count == 1 && digit_count == 3);\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmp4jtzqyz1: /tmp/tmp4jtzqyz1.cpp:20: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i = 1;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int dot_index = num.find('.');\n        if (num.size() - dot_index > 3) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpshf28hkc: /tmp/tmpshf28hkc.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if(num.size() == 0) {\n        return false;\n    }\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpg5xoj_lt: /tmp/tmpg5xoj_lt.cpp:28: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if (dot_pos == std::string::npos) {\n        return true;\n    }\n    if (num.length() - dot_pos - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmp6noxo6u7: /tmp/tmp6noxo6u7.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int index = num.find('.');\n    if(index == -1) {\n        return true;\n    }\n    if(num.length() - index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmpxmh5mq07: /tmp/tmpxmh5mq07.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if(dot_pos == std::string::npos) {\n        return true;\n    }\n    if(dot_pos + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpangexjxb: /tmp/tmpangexjxb.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            if(num.size() - i - 1 > 2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpgiem8gwf: /tmp/tmpgiem8gwf.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            break;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    if (i == num.size()) {\n        return true;\n    }\n    i++;\n    if (i == num.size()) {\n        return false;\n    }\n    int count_after_decimal = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n        count_after_decimal++;\n    }\n    if (count_after_decimal > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if (num.length() == 0) return false;\n    int i = 0;\n    if (num[0] == '-') i++;\n    int count = 0;\n    while (i < num.length()) {\n        if (num[i] == '.') {\n            count++;\n            if (count > 1) return false;\n        } else if (!isdigit(num[i])) {\n            return false;\n        }\n        i++;\n    }\n    if (count == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpu4q2wkjm: /tmp/tmpu4q2wkjm.cpp:25: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if (index == num.size() - 1) {\n        return false;\n    }\n    if (index == num.size() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmp_kj_qa77: /tmp/tmp_kj_qa77.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int index = num.find('.');\n    if(index == -1) {\n        return true;\n    }\n    if(index == num.length() - 1) {\n        return false;\n    }\n    if(index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "tmp506coplz: /tmp/tmp506coplz.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n  int count = 0;\n  for (int i = 0; i < num.size(); i++) {\n    if (num[i] == '.') {\n      count++;\n    }\n  }\n  if (count > 1) {\n    return false;\n  }\n  int dot_pos = num.find('.');\n  if (dot_pos == std::string::npos) {\n    return true;\n  }\n  if (dot_pos + 3 < num.size()) {\n    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpjl9op1z_: /tmp/tmpjl9op1z_.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int pos = num.find('.');\n    if (pos == std::string::npos) {\n        return true;\n    }\n    if (pos + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpqbab0av2: /tmp/tmpqbab0av2.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if(num.size() == 0) return false;\n    bool decimal_point_seen = false;\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            if(decimal_point_seen) return false;\n            decimal_point_seen = true;\n        } else if(num[i] < '0' || num[i] > '9') {\n            return false;\n        } else {\n            count++;\n        }\n    }\n    return count == 2;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "tmpk16oyw7p: /tmp/tmpk16oyw7p.cpp:22: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') i++;\n    if (num[i] == '.') return false;\n    int count_decimal = 0;\n    while (num[i] != '\\0') {\n        if (num[i] == '.') {\n            count_decimal++;\n            if (count_decimal > 1) return false;\n        } else if (num[i] < '0' || num[i] > '9') return false;\n        i++;\n    }\n    return count_decimal == 1;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "tmpxibotvtw: /tmp/tmpxibotvtw.cpp:22: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if(num.size() == 0) {\n        return false;\n    }\n    int i = 0;\n    if(num[0] == '-') {\n        i = 1;\n    }\n    int count = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        else if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "tmpozesaqqm: /tmp/tmpozesaqqm.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (num.size() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "tmpy_wrd_km: /tmp/tmpy_wrd_km.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    if(num[i] == '.') {\n        i++;\n    }\n    int count = 0;\n    while(i < num.length()) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!isdigit(num[i])) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmpsn99d3_m: /tmp/tmpsn99d3_m.cpp:29: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i = 1;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmpud4o_ocm: /tmp/tmpud4o_ocm.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    if (count == 0) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmpl8b4tcia: /tmp/tmpl8b4tcia.cpp:33: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n  int i = 0;\n  if (num[i] == '-') {\n    i++;\n  }\n  int count = 0;\n  for (; i < num.size(); i++) {\n    if (num[i] == '.') {\n      count++;\n    }\n    if (count > 1) {\n      return false;\n    }\n    if (!isdigit(num[i]) && num[i] != '.') {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmpl5to792k: /tmp/tmpl5to792k.cpp:27: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmplxj0o33b: /tmp/tmplxj0o33b.cpp:25: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == -1) {\n        return true;\n    }\n    if(num.size() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmpdccutdo8: /tmp/tmpdccutdo8.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if (dot_pos == std::string::npos) {\n        return true;\n    }\n    if (num.size() - dot_pos - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmptcl6z5a8: /tmp/tmptcl6z5a8.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = -1;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            dot_index = i;\n            break;\n        }\n    }\n    if (dot_index == -1) {\n        return true;\n    }\n    if (num.size() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmpqtm70d_v: /tmp/tmpqtm70d_v.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int index = num.find('.');\n    if(index == -1) {\n        return true;\n    }\n    if(index == num.length() - 1) {\n        return false;\n    }\n    if(index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "tmp506coplz: /tmp/tmp506coplz.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(index + 3 < num.length()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmp4_vc16ao: /tmp/tmp4_vc16ao.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            dot_count++;\n        }\n    }\n    if (dot_count > 1) {\n        return false;\n    }\n    if (num[0] == '.') {\n        return false;\n    }\n    if (num[num.length() - 1] == '.') {\n        return false;\n    }\n    int dot_index = -1;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            dot_index = i;\n            break;\n        }\n    }\n    if (dot_index == -1) {\n        return true;\n    }\n    if (num.length() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmp8kvx5t1k: /tmp/tmp8kvx5t1k.cpp:38: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        else if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmprz1s9a4d: /tmp/tmprz1s9a4d.cpp:27: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            if (num.length() - i > 3) {\n                return false;\n            }\n            break;\n        }\n    }\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(num.length() - index - 1 > 2) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmpsv6epcmq: /tmp/tmpsv6epcmq.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    for (; i < num.length(); i++) {\n        if (num[i] == '.') {\n            i++;\n            break;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    if (i == num.length()) {\n        return true;\n    }\n    for (; i < num.length(); i++) {\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmpf22rrh_r: /tmp/tmpf22rrh_r.cpp:41: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(index + 3 != num.length()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmpy_bcl0lh: /tmp/tmpy_bcl0lh.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index + 3 < num.length()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpro2k82pq: /tmp/tmpro2k82pq.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if(index + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmpac7pg66s: /tmp/tmpac7pg66s.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); ++i) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index == num.size() - 1) {\n            return false;\n        }\n        if (index == num.size() - 3) {\n            return true;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmpjwigp7sv: /tmp/tmpjwigp7sv.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if(num.length() - index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmp2c1k0kfv: /tmp/tmp2c1k0kfv.cpp:32: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(num.length() - index - 1 > 2) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmpsv6epcmq: /tmp/tmpsv6epcmq.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (dot_index + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpg2iw9i8p: /tmp/tmpg2iw9i8p.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if (index == num.size() - 1) {\n        return false;\n    }\n    if (index == num.size() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmp_kj_qa77: /tmp/tmp_kj_qa77.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            if (num.length() - i - 1 > 2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmppq1lq2rd: /tmp/tmppq1lq2rd.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index + 3 < num.size()) {\n            return false;\n        }\n    }\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    while (num[i] != '\\0') {\n        if (num[i] == '.') {\n            count++;\n        }\n        i++;\n    }\n    if (count > 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmptafq3mw9: /tmp/tmptafq3mw9.cpp:24: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(num[i] == '.') {\n            continue;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmphxi3rrp6: /tmp/tmphxi3rrp6.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if(dot_pos == -1) {\n        return true;\n    }\n    if(dot_pos + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmpz367fcnd: /tmp/tmpz367fcnd.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (dot_index + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpg2iw9i8p: /tmp/tmpg2iw9i8p.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = -1;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            dot_index = i;\n            break;\n        }\n    }\n    if (dot_index == -1) {\n        return true;\n    }\n    if (num.size() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmpqtm70d_v: /tmp/tmpqtm70d_v.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    while (num[i] != '\\0') {\n        if (num[i] == '.') {\n            count++;\n        }\n        i++;\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (num.length() - index - 1 > 2) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmpajij3qkf: /tmp/tmpajij3qkf.cpp:30: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    if(num[i] == '.') {\n        return false;\n    }\n    int count = 0;\n    while(num[i] != '\\0') {\n        if(num[i] == '.') {\n            count++;\n        }\n        i++;\n    }\n    if(count > 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmp2y1wj22k: /tmp/tmp2y1wj22k.cpp:27: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if (num.length() - index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmp5ujkgmdq: /tmp/tmp5ujkgmdq.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmp_vze8ok2: /tmp/tmp_vze8ok2.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (num.size() - dot_index > 3) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "tmpz2o25hg0: /tmp/tmpz2o25hg0.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int index = num.find('.');\n    if(index == -1) {\n        return true;\n    }\n    if(num.size() - index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmpmolmbfdc: /tmp/tmpmolmbfdc.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int count_after_decimal = 0;\n    for(int i = num.size() - 1; i >= 0; i--) {\n        if(num[i] == '.') {\n            break;\n        }\n        count_after_decimal++;\n    }\n    if(count_after_decimal > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmpjstmk62w: /tmp/tmpjstmk62w.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = -1;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            dot_index = i;\n            break;\n        }\n    }\n    if(dot_index == -1) {\n        return true;\n    }\n    if(dot_index == num.size() - 1) {\n        return false;\n    }\n    if(dot_index == num.size() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmp_mraecvb: /tmp/tmp_mraecvb.cpp:35: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i = 1;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmpud4o_ocm: /tmp/tmpud4o_ocm.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == -1) {\n        return true;\n    }\n    if (dot_index + 3 == num.length()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmp4rvtecys: /tmp/tmp4rvtecys.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n  int count = 0;\n  for (int i = 0; i < num.size(); i++) {\n    if (num[i] == '.') {\n      count++;\n    }\n  }\n  if (count > 1) {\n    return false;\n  }\n  for (int i = 0; i < num.size(); i++) {\n    if (num[i] == '.') {\n      if (num.size() - i - 1 > 2) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmpkqsjzgbf: /tmp/tmpkqsjzgbf.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == std::string::npos) {\n        return false;\n    }\n    if(dot_index + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmpyw9ly857: /tmp/tmpyw9ly857.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if(index == num.length() - 1 || index == 0) {\n        return false;\n    }\n    if(num.length() - index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmp58l3a12v: /tmp/tmp58l3a12v.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count != 1) {\n        return false;\n    }\n    int i = 0;\n    for(i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            break;\n        }\n    }\n    if(i == num.length() - 1) {\n        return false;\n    }\n    if(i == num.length() - 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmp_86l49o0: /tmp/tmp_86l49o0.cpp:30: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = -1;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            dot_index = i;\n            break;\n        }\n    }\n    if (dot_index == -1) {\n        return true;\n    }\n    if (num.size() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmpqtm70d_v: /tmp/tmpqtm70d_v.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n\tint count = 0;\n\tfor (int i = 0; i < num.length(); i++) {\n\t\tif (num[i] == '.') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count > 1) {\n\t\treturn false;\n\t}\n\tint dot = num.find('.');\n\tif (dot == std::string::npos) {\n\t\treturn true;\n\t}\n\tif (dot + 3 < num.length()) {\n\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmplroef3nu: /tmp/tmplroef3nu.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if (index == num.length() - 1) {\n        return false;\n    }\n    if (index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmp0kjpnp0g: /tmp/tmp0kjpnp0g.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[0] == '-') {\n        i = 1;\n    }\n    int count = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(num[i] != '.' && (num[i] < '0' || num[i] > '9')) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmp3c35via1: /tmp/tmp3c35via1.cpp:27: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    while(num[i] != '\\0') {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmp7fia31pb: /tmp/tmp7fia31pb.cpp:26: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if (index + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmpyk2grxcd: /tmp/tmpyk2grxcd.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (num.length() - index - 1 > 2) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpvvr9j58f: /tmp/tmpvvr9j58f.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    while(num[i] != '\\0') {\n        if(num[i] == '.') {\n            count++;\n        }\n        i++;\n    }\n    if(count == 0 || count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if(dot_pos == -1) {\n        return false;\n    }\n    if(dot_pos == num.size() - 1) {\n        return false;\n    }\n    if(dot_pos == num.size() - 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmp5_5p7pi1: /tmp/tmp5_5p7pi1.cpp:33: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index == num.length() - 1) {\n            return false;\n        }\n        if (index == num.length() - 3) {\n            return true;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmpf9q21irq: /tmp/tmpf9q21irq.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if (num.size() == 0) return false;\n    int i = 0;\n    if (num[0] == '-') i++;\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n            if (count > 1) return false;\n        } else if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    if (count == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmpdij1ds80: /tmp/tmpdij1ds80.cpp:24: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    while (num[i] != '\\0') {\n        if (num[i] == '.') {\n            count++;\n        }\n        i++;\n    }\n    if (count > 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmptafq3mw9: /tmp/tmptafq3mw9.cpp:24: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int len = num.length();\n    if (len == 0) return false;\n    int i = 0;\n    if (num[i] == '-') i++;\n    if (i == len) return false;\n    int count = 0;\n    while (i < len) {\n        if (num[i] == '.') {\n            count++;\n            if (count > 1) return false;\n        } else if (!isdigit(num[i])) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmpofowjch9: /tmp/tmpofowjch9.cpp:26: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (num[i] == '.' && count > 1) {\n            return false;\n        }\n        if (num[i] == '.' && count == 1) {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    if (count == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmpfi8hibp4: /tmp/tmpfi8hibp4.cpp:33: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    int count = 0;\n    if(num[0] == '-') {\n        i++;\n    }\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n            continue;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmp38d1iocl: /tmp/tmp38d1iocl.cpp:28: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if(num.empty()) {\n        return false;\n    }\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    while(i < num.size()) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!std::isdigit(num[i])) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmpmh254y0x: /tmp/tmpmh254y0x.cpp:29: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    bool is_decimal = false;\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            is_decimal = true;\n            continue;\n        }\n        if (is_decimal) {\n            count++;\n        }\n        if (count > 2) {\n            return false;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index == num.length() - 1) {\n            return false;\n        }\n        if (index == num.length() - 3) {\n            return true;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmpf9q21irq: /tmp/tmpf9q21irq.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == -1) {\n        return false;\n    }\n    if(dot_index + 3 < num.length()) {\n        return false;\n    }\n    for(int i = 0; i < num.length(); i++) {\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    int count = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmplug16a24: /tmp/tmplug16a24.cpp:27: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = -1;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            dot_index = i;\n            break;\n        }\n    }\n    if(dot_index == -1) {\n        return true;\n    }\n    if(num.size() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "tmpqa7cq6c7: /tmp/tmpqa7cq6c7.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if (dot_pos == -1) {\n        return true;\n    }\n    if (dot_pos == num.length() - 1) {\n        return false;\n    }\n    if (dot_pos == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmp5q169c0i: /tmp/tmp5q169c0i.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (num.size() - index - 1 > 2) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmpz8n44s5a: /tmp/tmpz8n44s5a.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i=0; i<num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == std::string::npos) {\n        return true;\n    }\n    if(dot_index == num.length()-1) {\n        return false;\n    }\n    if(dot_index == num.length()-3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmplqptni6p: /tmp/tmplqptni6p.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if(index == num.size()-1) {\n        return false;\n    }\n    if(index == num.size()-3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmp6_ohvkfb: /tmp/tmp6_ohvkfb.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == -1) {\n        return true;\n    }\n    if(num.length() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmpuzri0sk4: /tmp/tmpuzri0sk4.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == -1) {\n        return true;\n    }\n    if(dot_index == num.length() - 1) {\n        return false;\n    }\n    if(dot_index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmpm118xqdk: /tmp/tmpm118xqdk.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    for (int i = 0; i < num.size(); ++i) {\n        if (num[i] == '.') {\n            dot_count++;\n        }\n        if (!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    if (dot_count > 1) {\n        return false;\n    }\n    if (dot_count == 1) {\n        int dot_index = num.find('.');\n        if (dot_index + 3 < num.size()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    int n = num.length();\n    if(num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < n; i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(num[i] != '.' && !isdigit(num[i])) {\n            return false;\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    int dot_pos = num.find('.');\n    if(dot_pos + 3 < n) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n  int i = 0;\n  if (num[0] == '-') {\n    i++;\n  }\n  int count = 0;\n  for (; i < num.size(); i++) {\n    if (num[i] == '.') {\n      count++;\n    }\n    if (count > 1) {\n      return false;\n    }\n    if (num[i] < '0' || num[i] > '9') {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmpvf8db5_t: /tmp/tmpvf8db5_t.cpp:25: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    int len = num.length();\n    int count = 0;\n    while(i < len && num[i] != '.') {\n        i++;\n    }\n    if(i == len) {\n        return false;\n    }\n    i++;\n    while(i < len) {\n        count++;\n        i++;\n    }\n    if(count == 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmp4fy5fc7f: /tmp/tmp4fy5fc7f.cpp:27: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    int digit_count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            dot_count++;\n        } else if (num[i] >= '0' && num[i] <= '9') {\n            digit_count++;\n        } else {\n            return false;\n        }\n    }\n    if (dot_count == 1 && digit_count == num.size() - 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmp9mpyyn34: /tmp/tmp9mpyyn34.cpp:25: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n  int count = 0;\n  for (int i = 0; i < num.length(); i++) {\n    if (num[i] == '.') {\n      count++;\n    }\n  }\n  if (count > 1) {\n    return false;\n  }\n  int dot_index = num.find('.');\n  if (dot_index == -1) {\n    return true;\n  }\n  if (dot_index + 3 < num.length()) {\n    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmpeux68k43: /tmp/tmpeux68k43.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if (index + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmpyk2grxcd: /tmp/tmpyk2grxcd.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    for (i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            if (num[i + 1] == '.') {\n                return false;\n            }\n            if (num[i + 2] == '.') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmptlxf_o66: /tmp/tmptlxf_o66.cpp:33: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(index == num.length() - 1) {\n            return false;\n        }\n        if(index == num.length() - 3) {\n            return true;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmpz0kaq7te: /tmp/tmpz0kaq7te.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return count == 1;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmpv5oe9v12: /tmp/tmpv5oe9v12.cpp:25: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if(dot_pos == -1) {\n        return true;\n    }\n    if(dot_pos + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmpm_4qv1ue: /tmp/tmpm_4qv1ue.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    while (num[i] != '\\0') {\n        if (num[i] == '.') {\n            count++;\n        }\n        i++;\n    }\n    if (count > 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "tmptafq3mw9: /tmp/tmptafq3mw9.cpp:24: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int index = num.find('.');\n    if (index == -1) {\n        return true;\n    }\n    if (num.size() - index > 3) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmpwoc1t_lk: /tmp/tmpwoc1t_lk.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if (index == num.length() - 1) {\n        return false;\n    }\n    if (index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmp0kjpnp0g: /tmp/tmp0kjpnp0g.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if (index + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "tmpyk2grxcd: /tmp/tmpyk2grxcd.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (dot_index + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpg2iw9i8p: /tmp/tmpg2iw9i8p.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if (dot_pos == std::string::npos) {\n        return true;\n    }\n    if (num.size() - dot_pos > 3) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmpeocg2nkz: /tmp/tmpeocg2nkz.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == -1) {\n        return true;\n    }\n    if (num.size() - dot_index > 3) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmpva2k1q9_: /tmp/tmpva2k1q9_.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}