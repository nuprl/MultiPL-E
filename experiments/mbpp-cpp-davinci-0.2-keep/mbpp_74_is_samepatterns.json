{
  "name": "mbpp_74_is_samepatterns",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether it follows the sequence given in the patterns array.\nbool is_samepatterns(std::vector<std::string> colors, std::vector<std::string> patterns) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = is_samepatterns;\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"green\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\"}))) == (true));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"greenn\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\"}))) == (false));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"greenn\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "\t// Write your code here.\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.count(colors[i]) == 0) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    } else {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < colors.size(); i++) {\n        m[colors[i]] = patterns[i];\n    }\n    std::vector<std::string> v;\n    for (int i = 0; i < colors.size(); i++) {\n        v.push_back(m[colors[i]]);\n    }\n    if (v == patterns) {\n        return true;\n    }\n    return false;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        m[colors[i]]=patterns[i];\n    }\n    for(int i=0;i<colors.size();i++){\n        if(m[colors[i]]!=patterns[i]){\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        if(m.find(colors[i])==m.end()){\n            m[colors[i]]=patterns[i];\n        }\n        else{\n            if(m[colors[i]]!=patterns[i]){\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    for(auto x : patterns) {\n        if(x == \"red\") {\n            if(colors[i] != \"red\") {\n                return false;\n            }\n        }\n        else if(x == \"blue\") {\n            if(colors[i] != \"blue\") {\n                return false;\n            }\n        }\n        else if(x == \"green\") {\n            if(colors[i] != \"green\") {\n                return false;\n            }\n        }\n        else if(x == \"yellow\") {\n            if(colors[i] != \"yellow\") {\n                return false;\n            }\n        }\n        else if(x == \"orange\") {\n            if(colors[i] != \"orange\") {\n                return false;\n            }\n        }\n        else if(x == \"white\") {\n            if(colors[i] != \"white\") {\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        if(m.find(colors[i])==m.end()){\n            m[colors[i]] = patterns[i];\n        }\n        else{\n            if(m[colors[i]]!=patterns[i]){\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    std::vector<std::string>::iterator itr1 = colors.begin();\n    std::vector<std::string>::iterator itr2 = patterns.begin();\n    while(itr2 != patterns.end()) {\n        if(*itr1 == *itr2) {\n            itr1++;\n            itr2++;\n        }\n        else {\n            itr1++;\n        }\n    }\n    if(itr2 == patterns.end()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "\t// Write your code here\n\tstd::string s = \"\";\n\tfor (int i = 0; i < colors.size(); i++)\n\t{\n\t\ts += colors[i];\n\t}\n\tstd::string p = \"\";\n\tfor (int i = 0; i < patterns.size(); i++)\n\t{\n\t\tp += patterns[i];\n\t}\n\tstd::string::size_type n = p.find(s);\n\tif (n != std::string::npos)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}",
    "    int i = 0;\n    int j = 0;\n    while (i < colors.size() && j < patterns.size()) {\n        if (colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == patterns.size()) {\n        return true;\n    } else {\n        return false;\n    }",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++)\n    {\n        if(m.find(colors[i])==m.end())\n        {\n            m[colors[i]]=patterns[i];\n        }\n        else\n        {\n            if(m[colors[i]]!=patterns[i])\n            {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < colors.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "\t// Write your code here\n\tint i,j;\n\tint n=colors.size();\n\tint m=patterns.size();\n\tfor(i=0;i<n;i++)\n\t{\n\t\tfor(j=0;j<m;j++)\n\t\t{\n\t\t\tif(colors[i]==patterns[j])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(j==m)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
    "    int i = 0;\n    int j = 0;\n    while (i < colors.size() && j < patterns.size()) {\n        if (colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == patterns.size()) {\n        return true;\n    } else {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < patterns.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    int n = colors.size();\n    int m = patterns.size();\n    while(i < n && j < m) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    return false;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < colors.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < colors.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n = colors.size();\n    int m = patterns.size();\n    std::map<std::string, std::string> mp;\n    for(int i = 0; i < n; i++) {\n        if(mp.find(colors[i]) == mp.end()) {\n            mp[colors[i]] = patterns[i];\n        }\n        else {\n            if(mp[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tm[colors[i]] = patterns[i];\n\t}\n\tfor (int i = 0; i < colors.size() - 1; i++) {\n\t\tif (m[colors[i]] != m[colors[i + 1]]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < patterns.size(); i++) {\n\t\tif (m.find(patterns[i]) == m.end()) {\n\t\t\tm[patterns[i]] = colors[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[patterns[i]] != colors[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "\tstd::vector<std::string>::iterator it;\n\tstd::vector<std::string>::iterator it1;\n\tint count = 0;\n\tfor (it = colors.begin(), it1 = patterns.begin(); it != colors.end(); it++, it1++) {\n\t\tif (*it == *it1) {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count == patterns.size()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < patterns.size(); i++) {\n\t\tif (m.count(colors[i]) == 0) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    // Write your code here\n    std::map<std::string,std::string> m;\n    for(int i=0;i<colors.size();i++){\n        m[colors[i]]=patterns[i];\n    }\n    for(int i=0;i<colors.size()-1;i++){\n        if(m[colors[i]]==m[colors[i+1]]){\n            return false;\n        }\n    }\n    return true;",
    "    int i=0;\n    int j=0;\n    while(i<colors.size() && j<patterns.size()) {\n        if(colors[i]==patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j==patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < patterns.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "\tstd::vector<std::string>::iterator itr1 = colors.begin();\n\tstd::vector<std::string>::iterator itr2 = patterns.begin();\n\twhile(itr1 != colors.end() && itr2 != patterns.end()) {\n\t\tif(*itr1 == *itr2) {\n\t\t\titr1++;\n\t\t\titr2++;\n\t\t}\n\t\telse {\n\t\t\titr1++;\n\t\t}\n\t}\n\tif(itr2 == patterns.end()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "    int i = 0;\n    int j = 0;\n    while (i < colors.size() && j < patterns.size()) {\n        if (colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == patterns.size()) {\n        return true;\n    }\n    return false;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        if(m.find(colors[i])==m.end()){\n            m[colors[i]]=patterns[i];\n        }\n        else{\n            if(m[colors[i]]!=patterns[i]){\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i=0;\n    for(auto x:colors)\n    {\n        if(x==patterns[i])\n        {\n            i++;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    return true;",
    "    int i = 0;\n    for (std::string color : colors) {\n        if (color == patterns[i]) {\n            i++;\n        }\n        if (i == patterns.size()) {\n            return true;\n        }\n    }\n    return false;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    std::map<std::string, std::string> map;\n    for(int i = 0; i < colors.size(); i++) {\n        map[colors[i]] = patterns[i];\n    }\n    for(int i = 0; i < colors.size(); i++) {\n        if(map[colors[i]] != patterns[i])\n            return false;\n    }\n    return true;",
    "    // Write your code here\n    int i = 0;\n    int j = 0;\n    int n = colors.size();\n    int m = patterns.size();\n    while(i<n && j<m){\n        if(colors[i] == patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == m){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    return false;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < patterns.size(); i++) {\n\t\tif (m.find(patterns[i]) == m.end()) {\n\t\t\tm[patterns[i]] = colors[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[patterns[i]] != colors[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        m[colors[i]] = patterns[i];\n    }\n    for(int i = 0; i < colors.size(); i++) {\n        if(m[colors[i]] != patterns[i]) {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++)\n    {\n        if(m.find(colors[i])==m.end())\n        {\n            m[colors[i]]=patterns[i];\n        }\n        else\n        {\n            if(m[colors[i]]!=patterns[i])\n            {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    return false;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        if(m.find(colors[i])==m.end()){\n            m[colors[i]]=patterns[i];\n        }\n        else{\n            if(m[colors[i]]!=patterns[i]){\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "\tstd::map<std::string, std::string> color_pattern;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (color_pattern.find(colors[i]) == color_pattern.end()) {\n\t\t\tcolor_pattern[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (color_pattern[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < patterns.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < colors.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "\tstd::vector<std::string>::iterator it;\n\tstd::vector<std::string>::iterator it2;\n\tfor (it = colors.begin(), it2 = patterns.begin(); it != colors.end(); it++, it2++) {\n\t\tif (*it != *it2) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    std::map<std::string,std::string> m;\n    for(int i=0;i<colors.size();i++)\n    {\n        m[colors[i]]=patterns[i];\n    }\n    for(int i=0;i<colors.size();i++)\n    {\n        if(m[colors[i]]!=patterns[i])\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        m[colors[i]] = patterns[i];\n    }\n    for(int i=0;i<colors.size();i++){\n        if(m[colors[i]] != patterns[i]){\n            return false;\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0; i<colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++) {\n        m[colors[i]] = patterns[i];\n    }\n    for(int i=0;i<colors.size();i++) {\n        if(m[colors[i]] != patterns[i]) {\n            return false;\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    } else {\n        return false;\n    }",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0; i<colors.size(); i++){\n        m[colors[i]] = patterns[i];\n    }\n    for(int i=0; i<colors.size(); i++){\n        if(m[colors[i]] != patterns[i]){\n            return false;\n        }\n    }\n    return true;",
    "    int i = 0;\n    for(auto pattern : patterns) {\n        if(pattern == \"red\") {\n            if(colors[i] != \"red\") {\n                return false;\n            }\n            i++;\n        }\n        else if(pattern == \"green\") {\n            if(colors[i] != \"green\") {\n                return false;\n            }\n            i++;\n        }\n        else if(pattern == \"blue\") {\n            if(colors[i] != \"blue\") {\n                return false;\n            }\n            i++;\n        }\n        else if(pattern == \"yellow\") {\n            if(colors[i] != \"yellow\") {\n                return false;\n            }\n            i++;\n        }\n        else if(pattern == \"orange\") {\n            if(colors[i] != \"orange\") {\n                return false;\n            }\n            i++;\n        }\n        else if(pattern == \"white\") {\n            if(colors[i] != \"white\") {\n                return false;\n            }\n            i++;\n        }\n    }\n    return true;",
    "\t// Write your code here\n\tint n = colors.size();\n\tint m = patterns.size();\n\tstd::map<std::string, std::string> mp;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (mp.count(patterns[i]) == 0) {\n\t\t\tmp[patterns[i]] = colors[i];\n\t\t}\n\t\telse {\n\t\t\tif (mp[patterns[i]] != colors[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        m[colors[i]] = patterns[i];\n    }\n    for(int i=0;i<colors.size()-1;i++){\n        if(m[colors[i]] == m[colors[i+1]]){\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < patterns.size(); i++) {\n        if(m.find(patterns[i]) == m.end()) {\n            m[patterns[i]] = colors[i];\n        } else {\n            if(m[patterns[i]] != colors[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while (i < colors.size() && j < patterns.size()) {\n        if (colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == patterns.size()) {\n        return true;\n    } else {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < colors.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    } else {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < patterns.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < colors.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    for(auto color : colors) {\n        if(color == patterns[i]) {\n            i++;\n        }\n        if(i == patterns.size()) {\n            return true;\n        }\n    }\n    return false;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    int k=0;\n    int l=0;\n    int m=0;\n    int n=0;\n    int o=0;\n    int p=0;\n    int q=0;\n    int r=0;\n    int s=0;\n    int t=0;\n    int u=0;\n    int v=0;\n    int w=0;\n    int x=0;\n    int y=0;\n    int z=0;\n    int aa=0;\n    int bb=0;\n    int cc=0;\n    int dd=0;\n    int ee=0;\n    int ff=0;\n    int gg=0;\n    int hh=0;\n    int ii=0;\n    int jj=0;\n    int kk=0;\n    int ll=0;\n    int mm=0;\n    int nn=0;\n    int oo=0;\n    int pp=0;\n    int qq=0;\n    int rr=0;\n    int ss=0;\n    int tt=0;\n    int uu=0;\n    int vv=0;\n    int ww=0;\n    int xx=0;\n    int yy=0;\n    int zz=0;\n    int aaa=0;\n    int bbb=0;\n    int ccc=0;\n    int ddd=0;\n    int eee=0;\n    int fff=0;\n    int ggg=0;\n    int hhh=0;\n    int iii=0;\n    int jjj=0;\n    int kkk=0;\n    int lll=0;\n    int mmm=0;\n    int nnn=0;\n    int ooo=0;\n    int ppp=0;\n    int qqq=0;\n    int rrr=0;\n    int sss=0;\n    int ttt=0;\n    int uuu=0;\n    int vvv=0;\n    int www=",
    "    int n = colors.size();\n    int m = patterns.size();\n    int i = 0, j = 0;\n    while(i < n && j < m) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == m) {\n        return true;\n    } else {\n        return false;\n    }",
    "\t// Write your code here\n\tstd::map<std::string, std::string> map;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (map.find(colors[i]) == map.end()) {\n\t\t\tmap[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (map[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "\tif (colors.size() != patterns.size())\n\t\treturn false;\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end())\n\t\t\tm[colors[i]] = patterns[i];\n\t\telse if (m[colors[i]] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;",
    "    int i,j,k;\n    std::string temp;\n    for(i=0;i<patterns.size();i++)\n    {\n        temp=patterns[i];\n        for(j=0;j<colors.size();j++)\n        {\n            if(temp==colors[j])\n            {\n                patterns.erase(patterns.begin()+i);\n                colors.erase(colors.begin()+j);\n                i--;\n                break;\n            }\n        }\n    }\n    if(patterns.size()==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < colors.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "\tint i=0;\n\tfor(auto x:colors)\n\t{\n\t\tif(x==patterns[i])\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
    "\t// Write your code here\n\tint i = 0;\n\tint j = 0;\n\twhile (i < colors.size() && j < patterns.size()) {\n\t\tif (colors[i] == patterns[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (j == patterns.size()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "\tint i = 0;\n\tint j = 0;\n\twhile (i < colors.size() && j < patterns.size()) {\n\t\tif (colors[i] == patterns[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (j == patterns.size()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        m[colors[i]]=patterns[i];\n    }\n    for(int i=0;i<colors.size();i++){\n        if(m[colors[i]]!=patterns[i]){\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n=colors.size();\n    int m=patterns.size();\n    int i=0,j=0;\n    while(i<n && j<m)\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==m)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.count(colors[i]) == 0) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t} else {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    int i,j,k;\n    int n = colors.size();\n    int m = patterns.size();\n    if(n!=m) return false;\n    std::map<std::string,int> mp;\n    for(i=0;i<n;i++) {\n        if(mp.find(colors[i])==mp.end()) {\n            mp[colors[i]] = i;\n        }\n    }\n    for(i=0;i<n;i++) {\n        if(mp[colors[i]]!=patterns[i]) return false;\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < patterns.size(); i++) {\n        if (m.find(patterns[i]) == m.end()) {\n            m[patterns[i]] = colors[i];\n        }\n        else {\n            if (m[patterns[i]] != colors[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    } else {\n        return false;\n    }",
    "\tstd::map<std::string, std::string> m;\n\tfor(int i = 0; i < colors.size(); i++) {\n\t\tm[colors[i]] = patterns[i];\n\t}\n\tfor(int i = 0; i < colors.size(); i++) {\n\t\tif(m[colors[i]] != patterns[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++)\n    {\n        if(m.find(colors[i])==m.end())\n        {\n            m[colors[i]]=patterns[i];\n        }\n        else\n        {\n            if(m[colors[i]]!=patterns[i])\n            {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    for(int i=0;i<colors.size();i++){\n        if(colors[i]!=patterns[i]){\n            return false;\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < patterns.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    return false;",
    "    // Write your code here\n    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it1;\n    int i=0;\n    for(it=colors.begin();it!=colors.end();it++)\n    {\n        if(i<patterns.size())\n        {\n            if(*it==patterns[i])\n            {\n                i++;\n            }\n        }\n    }\n    if(i==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "\t// Write your code here\n\tstd::vector<std::string>::iterator it;\n\tstd::vector<std::string>::iterator it1;\n\tstd::vector<std::string>::iterator it2;\n\tstd::vector<std::string>::iterator it3;\n\tstd::vector<std::string>::iterator it4;\n\tstd::vector<std::string>::iterator it5;\n\tstd::vector<std::string>::iterator it6;\n\tstd::vector<std::string>::iterator it7;\n\tstd::vector<std::string>::iterator it8;\n\tstd::vector<std::string>::iterator it9;\n\tstd::vector<std::string>::iterator it10;\n\tstd::vector<std::string>::iterator it11;\n\tstd::vector<std::string>::iterator it12;\n\tstd::vector<std::string>::iterator it13;\n\tstd::vector<std::string>::iterator it14;\n\tstd::vector<std::string>::iterator it15;\n\tstd::vector<std::string>::iterator it16;\n\tstd::vector<std::string>::iterator it17;\n\tstd::vector<std::string>::iterator it18;\n\tstd::vector<std::string>::iterator it19;\n\tstd::vector<std::string>::iterator it20;\n\tstd::vector<std::string>::iterator it21;\n\tstd::vector<std::string>::iterator it22;\n\tstd::vector<std::string>::iterator it23;\n\tstd::vector<std::string>::iterator it24;\n\tstd::vector<std::string>::iterator it25;\n\tstd::vector<std::string>::iterator it26;\n\tstd::vector<std::string>::iterator it27;\n\tstd::vector<std::string>::iterator it28;\n\tstd::vector<std::string>::iterator it29;\n\tstd::vector<std::string>::iterator it30;\n\tstd::vector<std::string>::iterator it31;\n\tstd::vector<std::string>::iterator it32;\n\tstd::vector<std::string>::",
    "  // Write your code here\n  std::map<std::string, std::string> m;\n  for(int i=0;i<colors.size();i++)\n  {\n      if(m.find(colors[i])==m.end())\n      {\n          m[colors[i]]=patterns[i];\n      }\n      else\n      {\n          if(m[colors[i]]!=patterns[i])\n          {\n              return false;\n          }\n      }\n  }\n  return true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        m[colors[i]] = patterns[i];\n    }\n    for(int i = 0; i < colors.size(); i++) {\n        if(m[colors[i]] != patterns[i]) {\n            return false;\n        }\n    }\n    return true;",
    "\t// Write your code here\n\tint n = colors.size();\n\tint m = patterns.size();\n\tint i = 0;\n\tint j = 0;\n\twhile (i < n && j < m) {\n\t\tif (colors[i] == patterns[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (j == m) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "    std::map<std::string, std::string> m;\n    for(int i=0; i<colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n=colors.size();\n    int m=patterns.size();\n    if(n!=m)\n    {\n        return false;\n    }\n    for(int i=0;i<n;i++)\n    {\n        if(colors[i]==patterns[i])\n        {\n            return false;\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    int n = colors.size();\n    int m = patterns.size();\n    while(i < n && j < m) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    return false;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        if(m.find(colors[i])==m.end()){\n            m[colors[i]] = patterns[i];\n        }\n        else{\n            if(m[colors[i]]!=patterns[i]){\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    int k=0;\n    int l=0;\n    int m=0;\n    int n=0;\n    int o=0;\n    int p=0;\n    int q=0;\n    int r=0;\n    int s=0;\n    int t=0;\n    int u=0;\n    int v=0;\n    int w=0;\n    int x=0;\n    int y=0;\n    int z=0;\n    int a=0;\n    int b=0;\n    int c=0;\n    int d=0;\n    int e=0;\n    int f=0;\n    int g=0;\n    int h=0;\n    int ii=0;\n    int jj=0;\n    int kk=0;\n    int ll=0;\n    int mm=0;\n    int nn=0;\n    int oo=0;\n    int pp=0;\n    int qq=0;\n    int rr=0;\n    int ss=0;\n    int tt=0;\n    int uu=0;\n    int vv=0;\n    int ww=0;\n    int xx=0;\n    int yy=0;\n    int zz=0;\n    int aa=0;\n    int bb=0;\n    int cc=0;\n    int dd=0;\n    int ee=0;\n    int ff=0;\n    int gg=0;\n    int hh=0;\n    int iii=0;\n    int jjj=0;\n    int kkk=0;\n    int lll=0;\n    int mmm=0;\n    int nnn=0;\n    int ooo=0;\n    int ppp=0;\n    int qqq=0;\n    int rrr=0;\n    int sss=0;\n    int ttt=0;\n    int uuu=0;\n    int vvv=0;\n    int www=0;\n    int xxx=",
    "    // Write your code here\n    int n=colors.size();\n    int m=patterns.size();\n    int i=0,j=0;\n    while(i<n && j<m){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==m){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < patterns.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "\t// Write your code here\n\tstd::vector<std::string>::iterator it;\n\tstd::vector<std::string>::iterator it1;\n\tint count = 0;\n\tfor (it = colors.begin(); it != colors.end(); it++) {\n\t\tfor (it1 = patterns.begin(); it1 != patterns.end(); it1++) {\n\t\t\tif (*it == *it1) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tif (count == patterns.size()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "\tint i = 0;\n\tint j = 0;\n\twhile (i < colors.size() && j < patterns.size()) {\n\t\tif (colors[i] == patterns[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (j == patterns.size()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < patterns.size(); i++) {\n        if(m.find(patterns[i]) == m.end()) {\n            m[patterns[i]] = colors[i];\n        } else {\n            if(m[patterns[i]] != colors[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int n = colors.size();\n    int m = patterns.size();\n    if(n != m) return false;\n    std::map<std::string, std::string> mp;\n    for(int i = 0; i < n; i++) {\n        if(mp.find(colors[i]) == mp.end()) {\n            mp[colors[i]] = patterns[i];\n        } else {\n            if(mp[colors[i]] != patterns[i]) return false;\n        }\n    }\n    return true;",
    "    if(colors.size() != patterns.size())\n        return false;\n    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i])\n                return false;\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < colors.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    if(colors.size() != patterns.size()) return false;\n    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) return false;\n        }\n    }\n    return true;",
    "  /*\n  Write your code here.\n  */\n  std::map<std::string,std::string> m;\n  for(int i=0;i<colors.size();i++)\n  {\n      if(m.find(colors[i])==m.end())\n      {\n          m[colors[i]]=patterns[i];\n      }\n      else\n      {\n          if(m[colors[i]]!=patterns[i])\n          {\n              return false;\n          }\n      }\n  }\n  return true;",
    "    int j = 0;\n    for (int i = 0; i < colors.size(); i++) {\n        if (colors[i] == patterns[j]) {\n            j++;\n        }\n        if (j == patterns.size()) {\n            return true;\n        }\n    }\n    return false;",
    "\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < patterns.size(); i++) {\n\t\tif (m.find(patterns[i]) == m.end()) {\n\t\t\tm[patterns[i]] = colors[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[patterns[i]] != colors[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t} else {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    // Write your code here\n    std::vector<std::string>::iterator itr;\n    std::vector<std::string>::iterator itr1;\n    std::vector<std::string>::iterator itr2;\n    std::vector<std::string>::iterator itr3;\n    std::vector<std::string>::iterator itr4;\n    std::vector<std::string>::iterator itr5;\n    std::vector<std::string>::iterator itr6;\n    std::vector<std::string>::iterator itr7;\n    std::vector<std::string>::iterator itr8;\n    std::vector<std::string>::iterator itr9;\n    std::vector<std::string>::iterator itr10;\n    std::vector<std::string>::iterator itr11;\n    std::vector<std::string>::iterator itr12;\n    std::vector<std::string>::iterator itr13;\n    std::vector<std::string>::iterator itr14;\n    std::vector<std::string>::iterator itr15;\n    std::vector<std::string>::iterator itr16;\n    std::vector<std::string>::iterator itr17;\n    std::vector<std::string>::iterator itr18;\n    std::vector<std::string>::iterator itr19;\n    std::vector<std::string>::iterator itr20;\n    std::vector<std::string>::iterator itr21;\n    std::vector<std::string>::iterator itr22;\n    std::vector<std::string>::iterator itr23;\n    std::vector<std::string>::iterator itr24;\n    std::vector<std::string>::iterator itr25;\n    std::vector<std::string>::iterator itr26;\n    std::vector<std::string>::iterator itr27;\n    std::vector<std::string>::iterator itr28;\n    std::vector<std::string>::iterator itr29;\n    std::vector<std::string>::iterator itr30;\n    std::vector<std::string>",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < colors.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "\t// Write your code here\n\tint i,j,k;\n\tint n=colors.size();\n\tint m=patterns.size();\n\tint count=0;\n\tfor(i=0;i<n;i++)\n\t{\n\t\tfor(j=0;j<m;j++)\n\t\t{\n\t\t\tif(colors[i]==patterns[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif(count==n)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < patterns.size(); i++) {\n        if(m.find(patterns[i]) == m.end()) {\n            m[patterns[i]] = colors[i];\n        }\n        else {\n            if(m[patterns[i]] != colors[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "\tint i = 0, j = 0;\n\twhile (i < colors.size() && j < patterns.size()) {\n\t\tif (colors[i] == patterns[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (j == patterns.size()) {\n\t\treturn true;\n\t}\n\treturn false;",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        m[colors[i]]=patterns[i];\n    }\n    for(int i=0;i<colors.size()-1;i++){\n        if(m[colors[i]]==m[colors[i+1]]){\n            return false;\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    int i = 0;\n    int j = 0;\n    int n = colors.size();\n    int m = patterns.size();\n    while(i < n && j < m) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    return false;",
    "    int i = 0, j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    return false;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < patterns.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else if(m[colors[i]] != patterns[i]) {\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        m[colors[i]] = patterns[i];\n    }\n    for(int i = 0; i < colors.size(); i++) {\n        if(m[colors[i]] != patterns[i]) {\n            return false;\n        }\n    }\n    return true;",
    "    std::vector<std::string>::iterator itr = patterns.begin();\n    std::vector<std::string>::iterator itr1 = colors.begin();\n    while(itr != patterns.end() && itr1 != colors.end()) {\n        if(*itr == \"*\") {\n            itr++;\n            itr1++;\n        }\n        else if(*itr == *itr1) {\n            itr++;\n            itr1++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;",
    "    int i = 0;\n    for(auto color : colors) {\n        if(color == patterns[i]) {\n            i++;\n        }\n        if(i == patterns.size()) {\n            return true;\n        }\n    }\n    return false;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++)\n    {\n        m[colors[i]]=patterns[i];\n    }\n    for(int i=0;i<colors.size()-1;i++)\n    {\n        if(m[colors[i]]==m[colors[i+1]])\n        {\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i=0; i<colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    int count = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n            count++;\n        } else {\n            i++;\n        }\n    }\n    if(count == patterns.size()) {\n        return true;\n    }\n    return false;",
    "\t// Write your code here\n\tstd::vector<std::string> v;\n\tfor (int i = 0; i < patterns.size(); i++) {\n\t\tif (patterns[i] == \"a\") {\n\t\t\tv.push_back(colors[0]);\n\t\t}\n\t\telse if (patterns[i] == \"b\") {\n\t\t\tv.push_back(colors[1]);\n\t\t}\n\t\telse if (patterns[i] == \"c\") {\n\t\t\tv.push_back(colors[2]);\n\t\t}\n\t\telse if (patterns[i] == \"d\") {\n\t\t\tv.push_back(colors[3]);\n\t\t}\n\t\telse if (patterns[i] == \"e\") {\n\t\t\tv.push_back(colors[4]);\n\t\t}\n\t\telse if (patterns[i] == \"f\") {\n\t\t\tv.push_back(colors[5]);\n\t\t}\n\t\telse if (patterns[i] == \"g\") {\n\t\t\tv.push_back(colors[6]);\n\t\t}\n\t\telse if (patterns[i] == \"h\") {\n\t\t\tv.push_back(colors[7]);\n\t\t}\n\t\telse if (patterns[i] == \"i\") {\n\t\t\tv.push_back(colors[8]);\n\t\t}\n\t\telse if (patterns[i] == \"j\") {\n\t\t\tv.push_back(colors[9]);\n\t\t}\n\t\telse if (patterns[i] == \"k\") {\n\t\t\tv.push_back(colors[10]);\n\t\t}\n\t\telse if (patterns[i] == \"l\") {\n\t\t\tv.push_back(colors[11]);\n\t\t}\n\t\telse if (patterns[i] == \"m\") {\n\t\t\tv.push_back(colors[12]);\n\t\t}\n\t\telse if (patterns[i] == \"n\") {\n\t\t\tv",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse if (m[colors[i]] != patterns[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
    "\t// Write your code here\n\tint i = 0;\n\tint j = 0;\n\twhile (i < colors.size() && j < patterns.size()) {\n\t\tif (colors[i] == patterns[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (j == patterns.size()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "\tint i,j,k,l,m,n;\n\tstd::vector<std::string>::iterator itr1,itr2;\n\tstd::vector<std::string>::iterator itr3,itr4;\n\tfor(i=0;i<patterns.size();i++)\n\t{\n\t\titr1=std::find(colors.begin(),colors.end(),patterns[i]);\n\t\tif(itr1==colors.end())\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\titr2=std::find(colors.begin(),colors.end(),patterns[i]);\n\t\t\titr3=std::find(patterns.begin(),patterns.end(),patterns[i]);\n\t\t\titr4=std::find(patterns.begin(),patterns.end(),patterns[i]);\n\t\t\tif(itr2-itr1!=itr4-itr3)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tm[colors[i]] = patterns[i];\n\t}\n\tfor (int i = 0; i < colors.size() - 1; i++) {\n\t\tif (m[colors[i]] == m[colors[i + 1]]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
    "    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    if(colors.size() != patterns.size())\n        return false;\n    for(int i = 0; i < patterns.size(); i++) {\n        if(patterns[i] == \"odd\" && colors[i] % 2 == 0)\n            return false;\n        if(patterns[i] == \"even\" && colors[i] % 2 != 0)\n            return false;\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        m[colors[i]] = patterns[i];\n    }\n    for(int i=0;i<colors.size();i++){\n        if(m[colors[i]] != patterns[i]){\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i=0;\n    int j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i = 0; i < patterns.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    std::vector<std::string>::iterator itr1;\n    std::vector<std::string>::iterator itr2;\n    for(itr1=colors.begin(),itr2=patterns.begin();itr1!=colors.end()&&itr2!=patterns.end();itr1++,itr2++)\n    {\n        if(*itr1==*itr2)\n        {\n            continue;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    return true;",
    "    int i,j;\n    for(i=0;i<colors.size();i++)\n    {\n        for(j=0;j<patterns.size();j++)\n        {\n            if(colors[i]==patterns[j])\n            {\n                patterns.erase(patterns.begin()+j);\n                break;\n            }\n        }\n        if(j==patterns.size())\n        {\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < colors.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    } else {\n        return false;\n    }",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        m[colors[i]] = patterns[i];\n    }\n    std::string prev = \"\";\n    for(int i=0;i<colors.size();i++){\n        if(prev == \"\"){\n            prev = m[colors[i]];\n        }\n        else{\n            if(m[colors[i]] != prev){\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> color_pattern;\n    for (int i = 0; i < colors.size(); i++) {\n        color_pattern[colors[i]] = patterns[i];\n    }\n    for (int i = 0; i < colors.size(); i++) {\n        if (color_pattern[colors[i]] != patterns[i]) {\n            return false;\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < colors.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "\tstd::map<std::string, std::string> m;\n\tfor(int i=0;i<colors.size();i++) {\n\t\tif(m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif(m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    std::vector<std::string>::iterator itr = patterns.begin();\n    std::vector<std::string>::iterator itr1 = colors.begin();\n    while(itr != patterns.end() && itr1 != colors.end()) {\n        if(*itr == \"*\") {\n            itr++;\n            itr1++;\n        }\n        else if(*itr == *itr1) {\n            itr++;\n            itr1++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    std::map<std::string,std::string> m;\n    for(int i=0;i<colors.size();i++)\n    {\n        if(m.find(colors[i])==m.end())\n        {\n            m[colors[i]]=patterns[i];\n        }\n        else\n        {\n            if(m[colors[i]]!=patterns[i])\n            {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i=0;\n    for(auto x:patterns)\n    {\n        if(x==\"red\")\n        {\n            if(colors[i]!=\"red\")\n            {\n                return false;\n            }\n        }\n        else if(x==\"green\")\n        {\n            if(colors[i]!=\"green\")\n            {\n                return false;\n            }\n        }\n        else if(x==\"blue\")\n        {\n            if(colors[i]!=\"blue\")\n            {\n                return false;\n            }\n        }\n        else if(x==\"orange\")\n        {\n            if(colors[i]!=\"orange\")\n            {\n                return false;\n            }\n        }\n        else if(x==\"yellow\")\n        {\n            if(colors[i]!=\"yellow\")\n            {\n                return false;\n            }\n        }\n        else if(x==\"white\")\n        {\n            if(colors[i]!=\"white\")\n            {\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;",
    "    std::vector<std::string>::iterator it;\n    for(it=patterns.begin();it!=patterns.end();it++)\n    {\n        if(std::find(colors.begin(),colors.end(),*it)==colors.end())\n        {\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < patterns.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "\tint i = 0;\n\tint j = 0;\n\twhile (i < colors.size() && j < patterns.size()) {\n\t\tif (colors[i] == patterns[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (j == patterns.size()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    for (auto color : colors) {\n        if (color == patterns[i]) {\n            i++;\n        }\n    }\n    return i == patterns.size();",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    return false;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < patterns.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n = colors.size();\n    int m = patterns.size();\n    int i = 0;\n    int j = 0;\n    while(i < n && j < m) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++)\n    {\n        if(m.find(colors[i])==m.end())\n        {\n            m[colors[i]]=patterns[i];\n        }\n        else\n        {\n            if(m[colors[i]]!=patterns[i])\n            {\n                return false;\n            }\n        }\n    }\n    return true;",
    "\tint i = 0;\n\tint j = 0;\n\twhile (i < colors.size() && j < patterns.size()) {\n\t\tif (colors[i] == patterns[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (j == patterns.size()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "\tstd::vector<std::string>::iterator it;\n\tstd::vector<std::string>::iterator it2;\n\tfor (it = colors.begin(), it2 = patterns.begin(); it != colors.end() && it2 != patterns.end(); ++it, ++it2) {\n\t\tif (*it != *it2) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
    "\tstd::vector<std::string>::iterator it = colors.begin();\n\tstd::vector<std::string>::iterator it1 = patterns.begin();\n\tfor (; it != colors.end(); it++) {\n\t\tif (*it == *it1) {\n\t\t\tit1++;\n\t\t}\n\t\telse {\n\t\t\tit1 = patterns.begin();\n\t\t\tif (*it == *it1) {\n\t\t\t\tit1++;\n\t\t\t}\n\t\t}\n\t}\n\tif (it1 == patterns.end()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "    // Write your code here\n    int j=0;\n    for(int i=0;i<colors.size();i++){\n        if(colors[i]==patterns[j]){\n            j++;\n        }\n        if(j==patterns.size()){\n            return true;\n        }\n    }\n    return false;",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i,j;\n    for(i=0;i<colors.size();i++)\n    {\n        for(j=0;j<patterns.size();j++)\n        {\n            if(colors[i]==patterns[j])\n            {\n                patterns.erase(patterns.begin()+j);\n                break;\n            }\n        }\n        if(j==patterns.size())\n            return false;\n    }\n    return true;",
    "    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it1;\n    for(it = patterns.begin(), it1 = colors.begin(); it != patterns.end(), it1 != colors.end(); it++, it1++) {\n        if(*it == \"*\") {\n            continue;\n        }\n        else if(*it == *it1) {\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;"
  ]
}