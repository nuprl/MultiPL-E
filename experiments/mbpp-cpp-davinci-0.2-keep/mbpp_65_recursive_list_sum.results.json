{
  "name": "mbpp_65_recursive_list_sum",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i].f0 == data_list[i].f1) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "/tmp/tmphb658m7h.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmphb658m7h.cpp:18:28: error: no match for \u2018operator==\u2019 (operand types are \u2018long int\u2019 and \u2018std::vector<long int>\u2019)\n   18 |         if(data_list[i].f0 == data_list[i].f1) {\n      |                            ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmphb658m7h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note:   template argument deduction/substitution failed:\n/tmp/tmphb658m7h.cpp:18:44: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018long int\u2019\n   18 |         if(data_list[i].f0 == data_list[i].f1) {\n      |                                            ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmphb658m7h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note:   template argument deduction/substituti",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto x : data_list) {\n        if (x == std::vector<long>()) {\n            continue;\n        }\n        if (x == long()) {\n            result += x;\n        }\n        if (x != long() && x != std::vector<long>()) {\n            result += recursive_list_sum(x);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510507,
      "stdout": "",
      "stderr": "/tmp/tmpim5snwck.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpim5snwck.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto x : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpim5snwck.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpim5snwck.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpim5snwck.cpp:22:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   22 |             result += x;\n      |             ~~~~~~~^~~~\n/tmp/tmpim5snwck.cpp:24:15: error: no match for \u2018operator!=\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018long int\u2019)\n   24 |         if (x != long() && x != std::vector<long>()) {\n      |             ~~^~~~~~~~~\n/tmp/tmpim5snwck.cpp:24:30: error: no match for \u2018operator!=\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::vector<long int>\u2019)\n   24 |         if (x != long() && x != std::vector<long>()) {\n      |                            ~ ^~      ~~~~~~~~~~~~~~\n      |                            |         |\n      |                            |         std::vector<long int>\n      |                            Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-g",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpa22drdb_.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpa22drdb_.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpa22drdb_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>()) {\n            continue;\n        } else if (data == std::vector<long>\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmphu0bgbo1.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmphu0bgbo1.cpp:67:1: error: expected primary-expression before \u2018}\u2019 token\n   67 | }\n      | ^\n/tmp/tmphu0bgbo1.cpp:66:45: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   66 |         } else if (data == std::vector<long>\n      |                   ~                         ^\n      |                                             )\n   67 | }\n      | ~                                            \n/tmp/tmphu0bgbo1.cpp:67:1: error: expected primary-expression before \u2018}\u2019 token\n   67 | }\n      | ^\n/tmp/tmphu0bgbo1.cpp:68:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   68 | int main() {\n      |            ^\n/tmp/tmphu0bgbo1.cpp:73:1: error: expected \u2018}\u2019 at end of input\n   73 | }\n      | ^\n/tmp/tmphu0bgbo1.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmphu0bgbo1.cpp:73:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   73 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == std::vector<long>()) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "/tmp/tmptyxtobix.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmptyxtobix.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmptyxtobix.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto data : data_list) {\n        if(data == 0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp_y8egw4k.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_y8egw4k.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmp_y8egw4k.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_y8egw4k.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_y8egw4k.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_y8egw4k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/g",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp4bvami7h.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp4bvami7h.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp4bvami7h.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4bvami7h.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp4bvami7h.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp4bvami7h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpy0k0qree.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpy0k0qree.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpy0k0qree.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy0k0qree.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpy0k0qree.cpp:87:32: error: template argument 1 is invalid\n   87 |         if (data == std::vector<\n      |                                ^\n/tmp/tmpy0k0qree.cpp:87:32: error: template argument 2 is invalid\n/tmp/tmpy0k0qree.cpp:87:33: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   87 |         if (data == std::vector<\n      |            ~                    ^\n      |                                 )\n   88 | }\n      | ~                                \n/tmp/tmpy0k0qree.cpp:88:1: error: expected primary-expression before \u2018}\u2019 token\n   88 | }\n      | ^\n/tmp/tmpy0k0qree.cpp:89:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   89 | int main() {\n      |            ^\n/tmp/tmpy0k0qree.cpp:94:1: error: expected \u2018}\u2019 at end of input\n   94 | }\n      | ^\n/tmp/tmpy0k0qree.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpy0k0qree.cpp:94:1: warning",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto x : data_list) {\n        if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp_b_1i84u.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_b_1i84u.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto x : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp_b_1i84u.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_b_1i84u.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_b_1i84u.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:62:36: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (x == std::vector\n      |                   ~                ^\n      |                                    )\n   63 | }\n      | ~                                   \n/tmp/tmp_b_1i84u.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp_b_1i84u.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp_b_1i84u.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto item : data_list) {\n        if (item == std::vector<long>()) {\n            continue;\n        } else if (item == long()) {\n            result += item;\n        } else {\n            result += recursive_list_sum(item);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp0_dcrvti.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp0_dcrvti.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto item : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp0_dcrvti.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0_dcrvti.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp0_dcrvti.cpp:21:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             result += item;\n      |             ~~~~~~~^~~~~~~\n/tmp/tmp0_dcrvti.cpp:23:42: error: could not convert \u2018item\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(item);\n      |                                          ^~~~\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp0_dcrvti.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_co",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto x : data_list) {\n        if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp_b_1i84u.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_b_1i84u.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto x : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp_b_1i84u.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_b_1i84u.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_b_1i84u.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:62:36: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (x == std::vector\n      |                   ~                ^\n      |                                    )\n   63 | }\n      | ~                                   \n/tmp/tmp_b_1i84u.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp_b_1i84u.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp_b_1i84u.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i].f1.size() == 0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp39etmfv4.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp39etmfv4.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp39etmfv4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i].f0 == data_list[i].f1) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "/tmp/tmpbe0gicbc.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpbe0gicbc.cpp:18:29: error: no match for \u2018operator==\u2019 (operand types are \u2018long int\u2019 and \u2018std::vector<long int>\u2019)\n   18 |         if (data_list[i].f0 == data_list[i].f1) {\n      |                             ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpbe0gicbc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note:   template argument deduction/substitution failed:\n/tmp/tmpbe0gicbc.cpp:18:45: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018long int\u2019\n   18 |         if (data_list[i].f0 == data_list[i].f1) {\n      |                                             ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpbe0gicbc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note:   template argument deduction/substi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp6fp8wmk1.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp6fp8wmk1.cpp:63:1: error: expected unqualified-id before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp6fp8wmk1.cpp:62:31: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::\n      |                   ~           ^\n      |                               )\n   63 | }\n      | ~                              \n/tmp/tmp6fp8wmk1.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp6fp8wmk1.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp6fp8wmk1.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp6fp8wmk1.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp6fp8wmk1.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "/tmp/tmphqqpgu0v.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmphqqpgu0v.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmphqqpgu0v.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmphqqpgu0v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &x : data_list) {\n        if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long>){}) {\n            result += 0;\n        } else if (x == (std::vector<long\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpkpejgv9r.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpkpejgv9r.cpp:58:38: error: template argument 1 is invalid\n   58 |         } else if (x == (std::vector<long\n      |                                      ^~~~\n/tmp/tmpkpejgv9r.cpp:58:38: error: template argument 2 is invalid\n/tmp/tmpkpejgv9r.cpp:58:42: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   58 |         } else if (x == (std::vector<long\n      |                         ~                ^\n      |                                          )\n   59 | }\n      | ~                                         \n/tmp/tmpkpejgv9r.cpp:58:42: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   58 |         } else if (x == (std::vector<long\n      |                   ~                      ^\n      |                                          )\n   59 | }\n      | ~                                         \n/tmp/tmpkpejgv9r.cpp:59:1: error: expected primary-expression before \u2018}\u2019 token\n   59 | }\n      | ^\n/tmp/tmpkpejgv9r.cpp:60:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   60 | int main() {\n      |            ^\n/tmp/tmpkpejgv9r.cpp:65:1: error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmpkpejgv9r.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpkpejgv9r.cpp:65:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   65 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp4knawb8z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp4knawb8z.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp4knawb8z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp4r_jjwsr.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp4r_jjwsr.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp4r_jjwsr.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4r_jjwsr.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp4r_jjwsr.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmp4r_jjwsr.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp4r_jjwsr.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp4r_jjwsr.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "/tmp/tmphqqpgu0v.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmphqqpgu0v.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmphqqpgu0v.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmphqqpgu0v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == (long)data_list[i]) {\n            result += data_list[i];\n        } else {\n            result += recursive_list_sum(data_list[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp5hh1v_dz.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp5hh1v_dz.cpp:18:45: error: invalid cast from type \u2018__gnu_cxx::__alloc_traits<std::allocator<Union_long_std_vector_long_>, Union_long_std_vector_long_>::value_type\u2019 {aka \u2018Union_long_std_vector_long_\u2019} to type \u2018long int\u2019\n   18 |         if(data_list[i] == (long)data_list[i]) {\n      |                                             ^\n/tmp/tmp5hh1v_dz.cpp:19:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<Union_long_std_vector_long_>, Union_long_std_vector_long_>::value_type\u2019 {aka \u2018Union_long_std_vector_long_\u2019})\n   19 |             result += data_list[i];\n/tmp/tmp5hh1v_dz.cpp:21:54: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i))\u2019 from \u2018__gnu_cxx::__alloc_traits<std::allocator<Union_long_std_vector_long_>, Union_long_std_vector_long_>::value_type\u2019 {aka \u2018Union_long_std_vector_long_\u2019} to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i]);\n      |                                                      ^\n      |                                                      |\n      |                                                      __gnu_cxx::__alloc_traits<std::allocator<Union_long_std_vector_long_>, Union_long_std_vector_long_>::value_type {aka Union_long_std_vector_long_}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp5hh1v_dz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void st",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result;\n    if (data_list.size() == 0) {\n        result = 0;\n    } else {\n        if (data_list[0].f1 == data_list[0].f1) {\n            result = recursive_list_sum(data_list[0].f1);\n        } else {\n            result = data_list[0].f0;\n        }\n        std::vector<Union_long_std_vector_long_> data_list_tail;\n        for (int i = 1; i < data_list.size(); i++) {\n            data_list_tail.push_back(data_list[i]);\n        }\n        result = result + recursive_list_sum(data_list_tail);\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpjubg3o8d.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpjubg3o8d.cpp:21:54: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](0).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result = recursive_list_sum(data_list[0].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/c++allocator.h:33,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/allocator.h:46,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpjubg3o8d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ext/new_allocator.h: In instantiation of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}; _Tp = Union_long_std_vector_long_]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/alloc_traits.h:482:2:   required from \u2018static void std::allocator_traits<std::allocator<_CharT> >::construct(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, _Up*, _Args&& ...) [with _Up = Union_long_std_vector_long_; _Args ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto it = data_list.begin(); it != data_list.end(); ++it) {\n        if (it->f1.size() == 0) {\n            result += it->f0;\n        } else {\n            result += recursive_list_sum(it->f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp2rjtpofi.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp2rjtpofi.cpp:21:46: error: could not convert \u2018it.__gnu_cxx::__normal_iterator<Union_long_std_vector_long_*, std::vector<Union_long_std_vector_long_> >::operator->()->Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(it->f1);\n      |                                          ~~~~^~\n      |                                              |\n      |                                              vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp2rjtpofi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            continue;\n        }\n        if (i == long()) {\n            sum += i;\n        }\n        if (i != long() && i != std::vector<long>()) {\n            sum += recursive_list_sum(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "/tmp/tmp98zxgx34.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp98zxgx34.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp98zxgx34.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp98zxgx34.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp98zxgx34.cpp:22:17: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   22 |             sum += i;\n      |             ~~~~^~~~\n/tmp/tmp98zxgx34.cpp:24:15: error: no match for \u2018operator!=\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018long int\u2019)\n   24 |         if (i != long() && i != std::vector<long>()) {\n      |             ~~^~~~~~~~~\n/tmp/tmp98zxgx34.cpp:24:30: error: no match for \u2018operator!=\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::vector<long int>\u2019)\n   24 |         if (i != long() && i != std::vector<long>()) {\n      |                            ~ ^~      ~~~~~~~~~~~~~~\n      |                            |         |\n      |                            |         std::vector<long int>\n      |                            Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bit",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i].f0 == 0) {\n            sum += recursive_list_sum(data_list[i].f1);\n        } else {\n            sum += data_list[i].f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpevfbhn31.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpevfbhn31.cpp:19:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpevfbhn31.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_std_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i].f0 == 0) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpuxielzcy.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpuxielzcy.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpuxielzcy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp5qcvig96.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp5qcvig96.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp5qcvig96.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp6fp8wmk1.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp6fp8wmk1.cpp:63:1: error: expected unqualified-id before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp6fp8wmk1.cpp:62:31: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::\n      |                   ~           ^\n      |                               )\n   63 | }\n      | ~                              \n/tmp/tmp6fp8wmk1.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp6fp8wmk1.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp6fp8wmk1.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp6fp8wmk1.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp6fp8wmk1.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto item : data_list) {\n        if (item == std::vector<long>()) {\n            result += recursive_list_sum(item.f1);\n        } else {\n            result += item.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpi4uey0e3.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpi4uey0e3.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto item : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpi4uey0e3.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpi4uey0e3.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpi4uey0e3.cpp:19:47: error: could not convert \u2018item.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(item.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpi4uey0e3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result;\n    if (data_list.size() == 0) {\n        result = 0;\n    } else {\n        if (data_list[0].f1.size() == 0) {\n            result = data_list[0].f0;\n        } else {\n            result = recursive_list_sum(data_list[0].f1);\n        }\n        std::vector<Union_long_std_vector_long_> new_data_list;\n        for (int i = 1; i < data_list.size(); i++) {\n            new_data_list.push_back(data_list[i]);\n        }\n        result = result + recursive_list_sum(new_data_list);\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp2k6mo1k5.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp2k6mo1k5.cpp:23:54: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](0).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             result = recursive_list_sum(data_list[0].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/c++allocator.h:33,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/allocator.h:46,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmp2k6mo1k5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ext/new_allocator.h: In instantiation of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}; _Tp = Union_long_std_vector_long_]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/alloc_traits.h:482:2:   required from \u2018static void std::allocator_traits<std::allocator<_CharT> >::construct(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, _Up*, _Args&& ...) [with _Up = Union_long_std_vector_long_; _Args ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result;\n    if (data_list.size() == 0) {\n        result = 0;\n    } else {\n        Union_long_std_vector_long_ data = data_list[0];\n        if (data == 0) {\n            result = 0;\n        } else {\n            if (data == data.f1) {\n                std::vector<long> data_list_1 = data.f1;\n                std::vector<Union_long_std_vector_long_> data_list_2;\n                for (int i = 0; i < data_list_1.size(); i++) {\n                    Union_long_std_vector_long_ data_list_2_element;\n                    data_list_2_element = data_list_1[i];\n                    data_list_2.push_back(data_list_2_element);\n                }\n                std::vector<Union_long_std_vector_long_> data_list_3;\n                for (int i = 1; i < data_list.size(); i++) {\n                    Union_long_std_vector_long_ data_list_3_element;\n                    data_list_3_element = data_list[i];\n                    data_list_3.push_back(data_list_3_element);\n                }\n                std::vector<Union_long_std_vector_long_> data_list_4;\n                for (int i = 0; i < data_list_2.size(); i++) {\n                    Union_long_std_vector_long_ data_list_4_element;\n                    data_list_4_element = data_list_2[i];\n                    data_list_4.push_back(data_list_4_element);\n                }\n                for (int i = 0; i < data_list_3.size(); i++) {\n                    Union_long_std_vector_long_ data_list_4_element;\n                    data_list_4_element = data_list_3[i];\n                    data_list_4.push_back(data_list_4_element);\n                }\n                result = recursive_list_sum(data_list_4);\n\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpueihy61k.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpueihy61k.cpp:20:55: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   20 |         Union_long_std_vector_long_ data = data_list[0];\n      |                                                       ^\n/tmp/tmpueihy61k.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpueihy61k.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpueihy61k.cpp:28:49: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   28 |                     Union_long_std_vector_long_ data_list_2_element;\n      |                                                 ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpueihy61k.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpueihy61k.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpueihy61k.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpueihy61k.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpueihy61k.cpp:29:56: error: use of deleted functi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "/tmp/tmphqqpgu0v.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmphqqpgu0v.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmphqqpgu0v.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmphqqpgu0v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "/tmp/tmphqqpgu0v.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmphqqpgu0v.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmphqqpgu0v.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmphqqpgu0v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result;\n    if (data_list.size() == 0) {\n        result = 0;\n    } else {\n        if (data_list[0] == 0) {\n            result = 0;\n        } else {\n            if (data_list[0] == 1) {\n                result = data_list[1].f0;\n            } else {\n                result = recursive_list_sum(data_list[1].f1);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp1aij1qff.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp1aij1qff.cpp:26:58: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](1).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   26 |                 result = recursive_list_sum(data_list[1].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp1aij1qff.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpskegxxzn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpskegxxzn.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpskegxxzn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpskegxxzn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpskegxxzn.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpskegxxzn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long ret = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            ret += data.f0;\n        } else {\n            ret += recursive_list_sum(data.f1);\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpsjsm01rj.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpsjsm01rj.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpsjsm01rj.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsjsm01rj.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpsjsm01rj.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             ret += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpsjsm01rj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp6fp8wmk1.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp6fp8wmk1.cpp:63:1: error: expected unqualified-id before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp6fp8wmk1.cpp:62:31: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::\n      |                   ~           ^\n      |                               )\n   63 | }\n      | ~                              \n/tmp/tmp6fp8wmk1.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp6fp8wmk1.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp6fp8wmk1.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp6fp8wmk1.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp6fp8wmk1.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpskegxxzn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpskegxxzn.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpskegxxzn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpskegxxzn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpskegxxzn.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpskegxxzn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            sum += data_list[i].f0;\n        } else {\n            sum += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpftbzre82.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpftbzre82.cpp:21:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpftbzre82.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            continue;\n        } else if (data == long()) {\n            result += data;\n        } else {\n            result += recursive_list_sum(data);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmplpao4skq.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmplpao4skq.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmplpao4skq.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplpao4skq.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmplpao4skq.cpp:21:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             result += data;\n      |             ~~~~~~~^~~~~~~\n/tmp/tmplpao4skq.cpp:23:42: error: could not convert \u2018data\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(data);\n      |                                          ^~~~\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmplpao4skq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_co",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp5qcvig96.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp5qcvig96.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp5qcvig96.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f1) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpcx732w0i.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpcx732w0i.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpcx732w0i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmptsvebrpy.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmptsvebrpy.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmptsvebrpy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            sum += data_list[i].f0;\n        } else {\n            sum += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpftbzre82.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpftbzre82.cpp:21:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpftbzre82.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == std::vector<long>()) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "/tmp/tmptyxtobix.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmptyxtobix.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmptyxtobix.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto x : data_list) {\n        if (x == std::vector<long>{}) {\n            result += 0;\n        } else if (x == std::vector<long>{1, 2, 3}) {\n            result += 6;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5}) {\n            result += 15;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) {\n            result += 55;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}) {\n            result += 210;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100}) {\n            result += 5050;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpn_kmc_kw.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpn_kmc_kw.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto x : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpn_kmc_kw.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn_kmc_kw.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpn_kmc_kw.cpp:31:2: error: expected \u2018)\u2019 before \u2018int\u2019\n   31 | }\n      |  ^\n      |  )\n   32 | int main() {\n      | ~~~\n/tmp/tmpn_kmc_kw.cpp:30:19: note: to match this \u2018(\u2019\n   30 |         } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n      |                   ^\n/tmp/tmpn_kmc_kw.cpp:37:1: error: expected statement at end of input\n   37 | }\n      | ^\n/tmp/tmpn_kmc_kw.cpp:37:1: error: expected \u2018}\u2019 at end of input\n/tmp/tmpn_kmc_kw.cpp:17:30: note: to match this \u2018{\u2019\n   17 |     for (auto x : data_list) {\n      |                              ^\n/tmp/tmpn_kmc_kw.cpp:37:1: error: expected \u2018}\u2019 at end of input\n   37 | }\n      | ^\n/tmp/tmpn_kmc_kw.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpn_kmc_kw.cpp:37:1: warning: no return statement in ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto data : data_list) {\n        if(data.f0 == 0) {\n            result += recursive_list_sum(data.f1);\n        } else {\n            result += data.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpfw__ktdn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpfw__ktdn.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmpfw__ktdn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfw__ktdn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpfw__ktdn.cpp:19:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpfw__ktdn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/g",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp4r_jjwsr.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp4r_jjwsr.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp4r_jjwsr.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4r_jjwsr.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp4r_jjwsr.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmp4r_jjwsr.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp4r_jjwsr.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp4r_jjwsr.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            continue;\n        } else if (i == long()) {\n            sum += i;\n        } else {\n            sum += recursive_list_sum(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp576f25nv.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp576f25nv.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp576f25nv.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp576f25nv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp576f25nv.cpp:21:17: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             sum += i;\n      |             ~~~~^~~~\n/tmp/tmp576f25nv.cpp:23:39: error: could not convert \u2018i\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(i);\n      |                                       ^\n      |                                       |\n      |                                       Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp576f25nv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void st",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(auto i : data_list) {\n        if(i == std::vector<long>()) {\n            sum += recursive_list_sum(i.f1);\n        } else {\n            sum += i.f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpui7e44m5.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpui7e44m5.cpp:17:18: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto i : data_list) {\n      |                  ^~~~~~~~~\n/tmp/tmpui7e44m5.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpui7e44m5.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpui7e44m5.cpp:19:41: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             sum += recursive_list_sum(i.f1);\n      |                                       ~~^~\n      |                                         |\n      |                                         vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpui7e44m5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto elem : data_list) {\n        if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::vector<long>()) {\n            result += 0;\n        } else if(elem == std::\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpn1jtqbez.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpn1jtqbez.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto elem : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmpn1jtqbez.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn1jtqbez.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpn1jtqbez.cpp:61:1: error: expected unqualified-id before \u2018}\u2019 token\n   61 | }\n      | ^\n/tmp/tmpn1jtqbez.cpp:60:30: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   60 |         } else if(elem == std::\n      |                  ~           ^\n      |                              )\n   61 | }\n      | ~                             \n/tmp/tmpn1jtqbez.cpp:61:1: error: expected primary-expression before \u2018}\u2019 token\n   61 | }\n      | ^\n/tmp/tmpn1jtqbez.cpp:62:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   62 | int main() {\n      |            ^\n/tmp/tmpn1jtqbez.cpp:67:1: error: expected \u2018}\u2019 at end of input\n   67 | }\n      | ^\n/tmp/tmpn1jtqbez.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpn1jtqbez.cpp:67:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   67 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i].f0 == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "/tmp/tmpfsn0w7i5.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpfsn0w7i5.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpfsn0w7i5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto x : data_list) {\n        if (x == std::vector<long>{}) {\n            result += 0;\n        } else if (x == std::vector<long>{1, 2, 3}) {\n            result += 6;\n        } else if (x == std::vector<long>{1, 2, 3, 4}) {\n            result += 10;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5}) {\n            result += 15;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6}) {\n            result += 21;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7}) {\n            result += 28;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8}) {\n            result += 36;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9}) {\n            result += 45;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) {\n            result += 55;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}) {\n            result += 66;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}) {\n            result += 78;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}) {\n            result += 91;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}) {\n            result += 105;\n        } else\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "/tmp/tmpd334z7h9.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpd334z7h9.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto x : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpd334z7h9.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd334z7h9.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpd334z7h9.cpp:45:1: error: expected primary-expression before \u2018}\u2019 token\n   45 | }\n      | ^\n/tmp/tmpd334z7h9.cpp:46:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   46 | int main() {\n      |            ^\n/tmp/tmpd334z7h9.cpp:51:1: error: expected \u2018}\u2019 at end of input\n   51 | }\n      | ^\n/tmp/tmpd334z7h9.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpd334z7h9.cpp:51:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   51 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == data_list[i].f0) {\n            sum += data_list[i].f0;\n        } else {\n            sum += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmp46dk3h9y.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp46dk3h9y.cpp:21:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp46dk3h9y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_std_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            continue;\n        } else if (i == long()) {\n            sum += i;\n        } else {\n            sum += recursive_list_sum(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp576f25nv.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp576f25nv.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp576f25nv.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp576f25nv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp576f25nv.cpp:21:17: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             sum += i;\n      |             ~~~~^~~~\n/tmp/tmp576f25nv.cpp:23:39: error: could not convert \u2018i\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(i);\n      |                                       ^\n      |                                       |\n      |                                       Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp576f25nv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void st",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>{}) {\n            sum += 0;\n        } else if (data == std::vector<long>{1, 2, 3}) {\n            sum += 6;\n        } else if (data == std::vector<long>{1, 2, 3, 4, 5, 6}) {\n            sum += 21;\n        } else if (data == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) {\n            sum += 55;\n        } else if (data == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}) {\n            sum += 210;\n        } else if (data == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}) {\n            sum += 465;\n        } else if (data == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40}) {\n            sum += 820;\n        } else if (data == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50}) {\n            sum += 1275\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmpnhgmuey7.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpnhgmuey7.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpnhgmuey7.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnhgmuey7.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpnhgmuey7.cpp:33:24: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   33 |             sum += 1275\n      |                        ^\n      |                        ;\n   34 | }\n      | ~                       \n/tmp/tmpnhgmuey7.cpp:35:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   35 | int main() {\n      |            ^\n/tmp/tmpnhgmuey7.cpp:40:1: error: expected \u2018}\u2019 at end of input\n   40 | }\n      | ^\n/tmp/tmpnhgmuey7.cpp:17:33: note: to match this \u2018{\u2019\n   17 |     for (auto data : data_list) {\n      |                                 ^\n/tmp/tmpnhgmuey7.cpp:40:1: error: expected \u2018}\u2019 at end of input\n   40 | }\n      | ^\n/tmp/tmpnhgmuey7.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpnhgmuey7.cpp:40:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   40 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            continue;\n        } else if (i == long()) {\n            sum += i;\n        } else {\n            sum += recursive_list_sum(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp576f25nv.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp576f25nv.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp576f25nv.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp576f25nv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp576f25nv.cpp:21:17: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             sum += i;\n      |             ~~~~^~~~\n/tmp/tmp576f25nv.cpp:23:39: error: could not convert \u2018i\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(i);\n      |                                       ^\n      |                                       |\n      |                                       Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp576f25nv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void st",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "/tmp/tmprj43whon.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmprj43whon.cpp:88:1: error: missing template arguments before \u2018}\u2019 token\n   88 | }\n      | ^\n/tmp/tmprj43whon.cpp:87:32: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   87 |         if (data == std::vector\n      |            ~                   ^\n      |                                )\n   88 | }\n      | ~                               \n/tmp/tmprj43whon.cpp:88:1: error: expected primary-expression before \u2018}\u2019 token\n   88 | }\n      | ^\n/tmp/tmprj43whon.cpp:89:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   89 | int main() {\n      |            ^\n/tmp/tmprj43whon.cpp:94:1: error: expected \u2018}\u2019 at end of input\n   94 | }\n      | ^\n/tmp/tmprj43whon.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmprj43whon.cpp:94:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   94 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp4bvami7h.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp4bvami7h.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp4bvami7h.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4bvami7h.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp4bvami7h.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp4bvami7h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto it = data_list.begin(); it != data_list.end(); ++it) {\n        if (it->f0 == 0) {\n            result += recursive_list_sum(it->f1);\n        } else {\n            result += it->f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmpdegtt1jn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpdegtt1jn.cpp:19:46: error: could not convert \u2018it.__gnu_cxx::__normal_iterator<Union_long_std_vector_long_*, std::vector<Union_long_std_vector_long_> >::operator->()->Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(it->f1);\n      |                                          ~~~~^~\n      |                                              |\n      |                                              vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpdegtt1jn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == std::vector<long>()) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmp8bldqfjf.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp8bldqfjf.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp8bldqfjf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmptsvebrpy.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmptsvebrpy.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmptsvebrpy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto &data : data_list) {\n        if(data == data.f0) {\n            result += data.f0;\n        } else if(data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmp1agn79gi.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp1agn79gi.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp1agn79gi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmpqyjg_51j.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpqyjg_51j.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpqyjg_51j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data.f0 == 0) {\n            sum += recursive_list_sum(data.f1);\n        } else {\n            sum += data.f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmp6fyrafg7.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp6fyrafg7.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp6fyrafg7.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6fyrafg7.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp6fyrafg7.cpp:19:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp6fyrafg7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp4r_jjwsr.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp4r_jjwsr.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp4r_jjwsr.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4r_jjwsr.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp4r_jjwsr.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmp4r_jjwsr.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp4r_jjwsr.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp4r_jjwsr.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == std::vector<long>()) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmp8bldqfjf.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp8bldqfjf.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp8bldqfjf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmpqyjg_51j.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpqyjg_51j.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpqyjg_51j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            continue;\n        } else if (data == long()) {\n            sum += data;\n        } else {\n            sum += recursive_list_sum(data);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "/tmp/tmptt2_4t2l.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmptt2_4t2l.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmptt2_4t2l.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptt2_4t2l.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmptt2_4t2l.cpp:21:17: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             sum += data;\n      |             ~~~~^~~~~~~\n/tmp/tmptt2_4t2l.cpp:23:39: error: could not convert \u2018data\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(data);\n      |                                       ^~~~\n      |                                       |\n      |                                       Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmptt2_4t2l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In inst",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto it = data_list.begin(); it != data_list.end(); ++it) {\n        if (it->f1.size() == 0) {\n            result += it->f0;\n        } else {\n            result += recursive_list_sum(it->f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp2rjtpofi.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp2rjtpofi.cpp:21:46: error: could not convert \u2018it.__gnu_cxx::__normal_iterator<Union_long_std_vector_long_*, std::vector<Union_long_std_vector_long_> >::operator->()->Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(it->f1);\n      |                                          ~~~~^~\n      |                                              |\n      |                                              vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp2rjtpofi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "/tmp/tmphqqpgu0v.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmphqqpgu0v.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmphqqpgu0v.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmphqqpgu0v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == long()) {\n            result += i;\n        } else {\n            result += recursive_list_sum(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "/tmp/tmpcxtled3p.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpcxtled3p.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpcxtled3p.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcxtled3p.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpcxtled3p.cpp:21:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             result += i;\n      |             ~~~~~~~^~~~\n/tmp/tmpcxtled3p.cpp:23:42: error: could not convert \u2018i\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(i);\n      |                                          ^\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpcxtled3p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instant",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result;\n    if (data_list.size() == 0) {\n        result = 0;\n    } else {\n        Union_long_std_vector_long_ data_list_head = data_list[0];\n        std::vector<Union_long_std_vector_long_> data_list_tail = std::vector<Union_long_std_vector_long_>(data_list.begin() + 1, data_list.end());\n        if (data_list_head == data_list_head.f0) {\n            result = data_list_head.f0 + recursive_list_sum(data_list_tail);\n        } else {\n            result = recursive_list_sum(data_list_head.f1) + recursive_list_sum(data_list_tail);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmphtid0cnz.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmphtid0cnz.cpp:20:65: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   20 |         Union_long_std_vector_long_ data_list_head = data_list[0];\n      |                                                                 ^\n/tmp/tmphtid0cnz.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphtid0cnz.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmphtid0cnz.cpp:25:56: error: could not convert \u2018data_list_head.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   25 |             result = recursive_list_sum(data_list_head.f1) + recursive_list_sum(data_list_tail);\n      |                                         ~~~~~~~~~~~~~~~^~\n      |                                                        |\n      |                                                        vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmphtid0cnz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiati",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            continue;\n        } else if (data == long()) {\n            result += data;\n        } else {\n            result += recursive_list_sum(data);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmplpao4skq.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmplpao4skq.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmplpao4skq.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplpao4skq.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmplpao4skq.cpp:21:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             result += data;\n      |             ~~~~~~~^~~~~~~\n/tmp/tmplpao4skq.cpp:23:42: error: could not convert \u2018data\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(data);\n      |                                          ^~~~\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmplpao4skq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_co",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            continue;\n        } else if (data == long()) {\n            sum += data;\n        } else {\n            sum += recursive_list_sum(data);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "/tmp/tmptt2_4t2l.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmptt2_4t2l.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmptt2_4t2l.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptt2_4t2l.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmptt2_4t2l.cpp:21:17: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             sum += data;\n      |             ~~~~^~~~~~~\n/tmp/tmptt2_4t2l.cpp:23:39: error: could not convert \u2018data\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(data);\n      |                                       ^~~~\n      |                                       |\n      |                                       Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmptt2_4t2l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In inst",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto &data : data_list) {\n        if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmp0kh0xbsp.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp0kh0xbsp.cpp:63:1: error: expected unqualified-id before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp0kh0xbsp.cpp:62:31: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::\n      |                   ~           ^\n      |                               )\n   63 | }\n      | ~                              \n/tmp/tmp0kh0xbsp.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp0kh0xbsp.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp0kh0xbsp.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp0kh0xbsp.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp0kh0xbsp.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto data : data_list) {\n        if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmpu9kpn6td.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpu9kpn6td.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmpu9kpn6td.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpu9kpn6td.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpu9kpn6td.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpu9kpn6td.cpp:62:38: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if(data == std::vector\n      |                  ~                   ^\n      |                                      )\n   63 | }\n      | ~                                     \n/tmp/tmpu9kpn6td.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpu9kpn6td.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpu9kpn6td.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpu9kpn6td.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpu9kpn6td.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto x: data_list) {\n        if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmpk5vlls5e.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpk5vlls5e.cpp:17:18: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto x: data_list) {\n      |                  ^~~~~~~~~\n/tmp/tmpk5vlls5e.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk5vlls5e.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpk5vlls5e.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpk5vlls5e.cpp:62:36: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (x == std::vector\n      |                   ~                ^\n      |                                    )\n   63 | }\n      | ~                                   \n/tmp/tmpk5vlls5e.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpk5vlls5e.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpk5vlls5e.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpk5vlls5e.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpk5vlls5e.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &x : data_list) {\n        if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "/tmp/tmpxc2lthtv.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpxc2lthtv.cpp:63:1: error: expected unqualified-id before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpxc2lthtv.cpp:62:28: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (x == std::\n      |                   ~        ^\n      |                            )\n   63 | }\n      | ~                           \n/tmp/tmpxc2lthtv.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpxc2lthtv.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpxc2lthtv.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpxc2lthtv.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpxc2lthtv.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto &data : data_list) {\n        if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmpsohe2p6c.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpsohe2p6c.cpp:63:1: error: expected unqualified-id before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpsohe2p6c.cpp:62:30: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if(data == std::\n      |                  ~           ^\n      |                              )\n   63 | }\n      | ~                             \n/tmp/tmpsohe2p6c.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpsohe2p6c.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpsohe2p6c.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpsohe2p6c.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpsohe2p6c.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result;\n    if (data_list.size() == 0) {\n        result = 0;\n    } else {\n        Union_long_std_vector_long_ data = data_list[0];\n        if (data == data.f0) {\n            result = data.f0;\n        } else {\n            result = recursive_list_sum(data.f1);\n        }\n        std::vector<Union_long_std_vector_long_> data_list_tail = std::vector<Union_long_std_vector_long_>(data_list.begin() + 1, data_list.end());\n        result = result + recursive_list_sum(data_list_tail);\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmpffbanvxg.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpffbanvxg.cpp:20:55: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   20 |         Union_long_std_vector_long_ data = data_list[0];\n      |                                                       ^\n/tmp/tmpffbanvxg.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpffbanvxg.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpffbanvxg.cpp:24:46: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   24 |             result = recursive_list_sum(data.f1);\n      |                                         ~~~~~^~\n      |                                              |\n      |                                              vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpffbanvxg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Unio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto element : data_list) {\n        if (element == std::vector<long>()) {\n            result += recursive_list_sum(element.f1);\n        } else {\n            result += element.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmpw_bq8q5h.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpw_bq8q5h.cpp:17:25: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto element : data_list) {\n      |                         ^~~~~~~~~\n/tmp/tmpw_bq8q5h.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw_bq8q5h.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpw_bq8q5h.cpp:19:50: error: could not convert \u2018element.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(element.f1);\n      |                                          ~~~~~~~~^~\n      |                                                  |\n      |                                                  vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpw_bq8q5h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto &elem : data_list) {\n        if (elem == std::vector<long>()) {\n            sum += recursive_list_sum(elem.f1);\n        } else {\n            sum += elem.f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmp2lxq7nvh.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp2lxq7nvh.cpp:19:44: error: could not convert \u2018elem.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             sum += recursive_list_sum(elem.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp2lxq7nvh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data: data_list) {\n        if (data == std::vector<long>()) {\n            continue;\n        } else if (data == long()) {\n            sum += data;\n        } else {\n            sum += recursive_list_sum(data);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmpk58geqec.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpk58geqec.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data: data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmpk58geqec.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk58geqec.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpk58geqec.cpp:21:17: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             sum += data;\n      |             ~~~~^~~~~~~\n/tmp/tmpk58geqec.cpp:23:39: error: could not convert \u2018data\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(data);\n      |                                       ^~~~\n      |                                       |\n      |                                       Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpk58geqec.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instan",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpa22drdb_.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpa22drdb_.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpa22drdb_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto data : data_list) {\n        if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmpu9kpn6td.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpu9kpn6td.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmpu9kpn6td.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpu9kpn6td.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpu9kpn6td.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpu9kpn6td.cpp:62:38: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if(data == std::vector\n      |                  ~                   ^\n      |                                      )\n   63 | }\n      | ~                                     \n/tmp/tmpu9kpn6td.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpu9kpn6td.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpu9kpn6td.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpu9kpn6td.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpu9kpn6td.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmpnerlg8ce.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpnerlg8ce.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpnerlg8ce.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnerlg8ce.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpnerlg8ce.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpnerlg8ce.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmpnerlg8ce.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpnerlg8ce.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpnerlg8ce.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnerlg8ce.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpnerlg8ce.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpnerlg8ce.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result;\n    if (data_list.size() == 0) {\n        result = 0;\n    } else {\n        Union_long_std_vector_long_ data_list_head = data_list[0];\n        std::vector<Union_long_std_vector_long_> data_list_tail = std::vector<Union_long_std_vector_long_>(data_list.begin() + 1, data_list.end());\n        if (data_list_head == data_list_head.f0) {\n            result = data_list_head.f0 + recursive_list_sum(data_list_tail);\n        } else {\n            result = recursive_list_sum(data_list_head.f1) + recursive_list_sum(data_list_tail);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmphtid0cnz.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmphtid0cnz.cpp:20:65: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   20 |         Union_long_std_vector_long_ data_list_head = data_list[0];\n      |                                                                 ^\n/tmp/tmphtid0cnz.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphtid0cnz.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmphtid0cnz.cpp:25:56: error: could not convert \u2018data_list_head.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   25 |             result = recursive_list_sum(data_list_head.f1) + recursive_list_sum(data_list_tail);\n      |                                         ~~~~~~~~~~~~~~~^~\n      |                                                        |\n      |                                                        vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmphtid0cnz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiati",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto &i : data_list) {\n        if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == std::\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmpyer3mq0j.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpyer3mq0j.cpp:63:1: error: expected unqualified-id before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpyer3mq0j.cpp:62:28: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (i == std::\n      |                   ~        ^\n      |                            )\n   63 | }\n      | ~                           \n/tmp/tmpyer3mq0j.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpyer3mq0j.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpyer3mq0j.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpyer3mq0j.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpyer3mq0j.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>()) {\n            result = result + 0;\n        } else if (data == std::vector<long>())\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmp0_u3339d.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp0_u3339d.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp0_u3339d.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0_u3339d.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp0_u3339d.cpp:59:1: error: expected primary-expression before \u2018}\u2019 token\n   59 | }\n      | ^\n/tmp/tmp0_u3339d.cpp:60:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   60 | int main() {\n      |            ^\n/tmp/tmp0_u3339d.cpp:65:1: error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmp0_u3339d.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp0_u3339d.cpp:65:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   65 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto x : data_list) {\n        if(x == std::vector<long>()) {\n            continue;\n        }\n        if(x == long()) {\n            result += x;\n        }\n        else {\n            result += recursive_list_sum(x);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmph9ddaau5.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmph9ddaau5.cpp:17:18: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto x : data_list) {\n      |                  ^~~~~~~~~\n/tmp/tmph9ddaau5.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph9ddaau5.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmph9ddaau5.cpp:22:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   22 |             result += x;\n      |             ~~~~~~~^~~~\n/tmp/tmph9ddaau5.cpp:25:42: error: could not convert \u2018x\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   25 |             result += recursive_list_sum(x);\n      |                                          ^\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmph9ddaau5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantia",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpa22drdb_.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpa22drdb_.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpa22drdb_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i].f0 == data_list[i].f1) {\n            sum += data_list[i].f0;\n        } else {\n            sum += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123382,
      "stdout": "",
      "stderr": "/tmp/tmp2cdewqc3.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp2cdewqc3.cpp:18:28: error: no match for \u2018operator==\u2019 (operand types are \u2018long int\u2019 and \u2018std::vector<long int>\u2019)\n   18 |         if(data_list[i].f0 == data_list[i].f1) {\n      |                            ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmp2cdewqc3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note:   template argument deduction/substitution failed:\n/tmp/tmp2cdewqc3.cpp:18:44: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018long int\u2019\n   18 |         if(data_list[i].f0 == data_list[i].f1) {\n      |                                            ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmp2cdewqc3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note:   template argument deduction/substituti",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == data_list[i].f0) {\n            sum += data_list[i].f0;\n        } else {\n            sum += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmp46dk3h9y.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp46dk3h9y.cpp:21:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp46dk3h9y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_std_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto x : data_list) {\n        if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp_b_1i84u.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_b_1i84u.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto x : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp_b_1i84u.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_b_1i84u.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_b_1i84u.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:62:36: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (x == std::vector\n      |                   ~                ^\n      |                                    )\n   63 | }\n      | ~                                   \n/tmp/tmp_b_1i84u.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp_b_1i84u.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp_b_1i84u.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpa22drdb_.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpa22drdb_.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpa22drdb_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == std::vector<long>()) {\n            result += recursive_list_sum(data.f1);\n        } else {\n            result += data.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmpdbcjg3cl.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpdbcjg3cl.cpp:19:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpdbcjg3cl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &x : data_list) {\n        if (x == std::vector<long>{}) {\n            result += 0;\n        } else if (x == std::vector<long>{1, 2, 3}) {\n            result += 6;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5}) {\n            result += 15;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) {\n            result += 55;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}) {\n            result += 210;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50}) {\n            result += 1275;\n        } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmp5h0taxnv.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp5h0taxnv.cpp:31:2: error: expected \u2018)\u2019 before \u2018int\u2019\n   31 | }\n      |  ^\n      |  )\n   32 | int main() {\n      | ~~~\n/tmp/tmp5h0taxnv.cpp:30:19: note: to match this \u2018(\u2019\n   30 |         } else if (x == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85\n      |                   ^\n/tmp/tmp5h0taxnv.cpp:37:1: error: expected statement at end of input\n   37 | }\n      | ^\n/tmp/tmp5h0taxnv.cpp:37:1: error: expected \u2018}\u2019 at end of input\n/tmp/tmp5h0taxnv.cpp:17:31: note: to match this \u2018{\u2019\n   17 |     for (auto &x : data_list) {\n      |                               ^\n/tmp/tmp5h0taxnv.cpp:37:1: error: expected \u2018}\u2019 at end of input\n   37 | }\n      | ^\n/tmp/tmp5h0taxnv.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp5h0taxnv.cpp:37:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   37 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto it = data_list.begin(); it != data_list.end(); ++it) {\n        if (it->f0 == 0) {\n            result += recursive_list_sum(it->f1);\n        } else {\n            result += it->f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmpdegtt1jn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpdegtt1jn.cpp:19:46: error: could not convert \u2018it.__gnu_cxx::__normal_iterator<Union_long_std_vector_long_*, std::vector<Union_long_std_vector_long_> >::operator->()->Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(it->f1);\n      |                                          ~~~~^~\n      |                                              |\n      |                                              vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpdegtt1jn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++){\n        if(data_list[i] == std::vector<long>()){\n            result += recursive_list_sum(data_list[i].f1);\n        }\n        else{\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmpgiapsq7s.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpgiapsq7s.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpgiapsq7s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp4r_jjwsr.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp4r_jjwsr.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp4r_jjwsr.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4r_jjwsr.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp4r_jjwsr.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmp4r_jjwsr.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp4r_jjwsr.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp4r_jjwsr.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "/tmp/tmphqqpgu0v.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmphqqpgu0v.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmphqqpgu0v.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmphqqpgu0v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else if (data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmpz9ehbs_u.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpz9ehbs_u.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpz9ehbs_u.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz9ehbs_u.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpz9ehbs_u.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpz9ehbs_u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpskegxxzn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpskegxxzn.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpskegxxzn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpskegxxzn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpskegxxzn.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpskegxxzn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "/tmp/tmphqqpgu0v.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmphqqpgu0v.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmphqqpgu0v.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmphqqpgu0v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "/tmp/tmphqqpgu0v.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmphqqpgu0v.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmphqqpgu0v.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmphqqpgu0v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            continue;\n        } else if (data == long()) {\n            sum += data;\n        } else {\n            sum += recursive_list_sum(data);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "/tmp/tmptt2_4t2l.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmptt2_4t2l.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmptt2_4t2l.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptt2_4t2l.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmptt2_4t2l.cpp:21:17: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             sum += data;\n      |             ~~~~^~~~~~~\n/tmp/tmptt2_4t2l.cpp:23:39: error: could not convert \u2018data\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(data);\n      |                                       ^~~~\n      |                                       |\n      |                                       Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmptt2_4t2l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In inst",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmpauu_6qm2.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpauu_6qm2.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpauu_6qm2.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpauu_6qm2.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpauu_6qm2.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpauu_6qm2.cpp:62:36: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (i == std::vector\n      |                   ~                ^\n      |                                    )\n   63 | }\n      | ~                                   \n/tmp/tmpauu_6qm2.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpauu_6qm2.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpauu_6qm2.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpauu_6qm2.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpauu_6qm2.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp6fp8wmk1.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp6fp8wmk1.cpp:63:1: error: expected unqualified-id before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp6fp8wmk1.cpp:62:31: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::\n      |                   ~           ^\n      |                               )\n   63 | }\n      | ~                              \n/tmp/tmp6fp8wmk1.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp6fp8wmk1.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp6fp8wmk1.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp6fp8wmk1.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp6fp8wmk1.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp4knawb8z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp4knawb8z.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp4knawb8z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp4bvami7h.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp4bvami7h.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp4bvami7h.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4bvami7h.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp4bvami7h.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp4bvami7h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto data : data_list) {\n        if(data == std::vector<long>()) {\n            continue;\n        }\n        if(data == long()) {\n            result += data;\n        }\n        if(data == std::vector<long>()) {\n            result += recursive_list_sum(data);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmpq_p23pdk.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpq_p23pdk.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmpq_p23pdk.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq_p23pdk.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpq_p23pdk.cpp:22:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   22 |             result += data;\n      |             ~~~~~~~^~~~~~~\n/tmp/tmpq_p23pdk.cpp:25:42: error: could not convert \u2018data\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   25 |             result += recursive_list_sum(data);\n      |                                          ^~~~\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpq_p23pdk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_cons",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp4bvami7h.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp4bvami7h.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp4bvami7h.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4bvami7h.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp4bvami7h.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp4bvami7h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpskegxxzn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpskegxxzn.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpskegxxzn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpskegxxzn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpskegxxzn.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpskegxxzn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data.f1.empty()) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmpierzp1zj.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpierzp1zj.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpierzp1zj.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpierzp1zj.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpierzp1zj.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpierzp1zj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto i : data_list) {\n        if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == long()) {\n            result += i.f0;\n        } else {\n            result += recursive_list_sum(i.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmplsr1qbdb.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmplsr1qbdb.cpp:17:18: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto i : data_list) {\n      |                  ^~~~~~~~~\n/tmp/tmplsr1qbdb.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplsr1qbdb.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmplsr1qbdb.cpp:23:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmplsr1qbdb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/incl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i.f0 == 0) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmp3y5a72_s.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp3y5a72_s.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp3y5a72_s.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3y5a72_s.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp3y5a72_s.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp3y5a72_s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto it = data_list.begin(); it != data_list.end(); ++it) {\n        if (it->f1.size() > 0) {\n            sum += recursive_list_sum(it->f1);\n        } else {\n            sum += it->f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmp6aexme5y.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp6aexme5y.cpp:19:43: error: could not convert \u2018it.__gnu_cxx::__normal_iterator<Union_long_std_vector_long_*, std::vector<Union_long_std_vector_long_> >::operator->()->Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             sum += recursive_list_sum(it->f1);\n      |                                       ~~~~^~\n      |                                           |\n      |                                           vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp6aexme5y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else if (data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmpz9ehbs_u.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpz9ehbs_u.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpz9ehbs_u.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz9ehbs_u.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpz9ehbs_u.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpz9ehbs_u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto it = data_list.begin(); it != data_list.end(); ++it) {\n        if (it->f0 == 0) {\n            result += recursive_list_sum(it->f1);\n        } else {\n            result += it->f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmpdegtt1jn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpdegtt1jn.cpp:19:46: error: could not convert \u2018it.__gnu_cxx::__normal_iterator<Union_long_std_vector_long_*, std::vector<Union_long_std_vector_long_> >::operator->()->Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(it->f1);\n      |                                          ~~~~^~\n      |                                              |\n      |                                              vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpdegtt1jn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpskegxxzn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpskegxxzn.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpskegxxzn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpskegxxzn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpskegxxzn.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpskegxxzn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == data_list[i].f0) {\n            sum += data_list[i].f0;\n        } else {\n            sum += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmp46dk3h9y.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp46dk3h9y.cpp:21:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp46dk3h9y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_std_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto i : data_list) {\n        if (i.f0 == i.f0) {\n            sum += i.f0;\n        } else {\n            sum += recursive_list_sum(i.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmpnzu8_i2s.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpnzu8_i2s.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpnzu8_i2s.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnzu8_i2s.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpnzu8_i2s.cpp:21:41: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(i.f1);\n      |                                       ~~^~\n      |                                         |\n      |                                         vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpnzu8_i2s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto x : data_list) {\n        if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp_b_1i84u.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_b_1i84u.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto x : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp_b_1i84u.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_b_1i84u.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_b_1i84u.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:62:36: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (x == std::vector\n      |                   ~                ^\n      |                                    )\n   63 | }\n      | ~                                   \n/tmp/tmp_b_1i84u.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp_b_1i84u.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp_b_1i84u.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto i : data_list) {\n        if(i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "/tmp/tmp_lnexfll.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_lnexfll.cpp:17:18: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto i : data_list) {\n      |                  ^~~~~~~~~\n/tmp/tmp_lnexfll.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_lnexfll.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_lnexfll.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_lnexfll.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/incl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == long()) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmp5xhvunba.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp5xhvunba.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp5xhvunba.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5xhvunba.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp5xhvunba.cpp:23:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp5xhvunba.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else if (data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmpz9ehbs_u.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpz9ehbs_u.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpz9ehbs_u.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz9ehbs_u.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpz9ehbs_u.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpz9ehbs_u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            continue;\n        } else if (data == long()) {\n            result += data;\n        } else {\n            result += recursive_list_sum(data);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmplpao4skq.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmplpao4skq.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmplpao4skq.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplpao4skq.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmplpao4skq.cpp:21:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             result += data;\n      |             ~~~~~~~^~~~~~~\n/tmp/tmplpao4skq.cpp:23:42: error: could not convert \u2018data\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(data);\n      |                                          ^~~~\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmplpao4skq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_co",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            sum += data_list[i].f0;\n        } else {\n            sum += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpftbzre82.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpftbzre82.cpp:21:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpftbzre82.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto x : data_list) {\n        if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp_b_1i84u.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_b_1i84u.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto x : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp_b_1i84u.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_b_1i84u.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_b_1i84u.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:62:36: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (x == std::vector\n      |                   ~                ^\n      |                                    )\n   63 | }\n      | ~                                   \n/tmp/tmp_b_1i84u.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp_b_1i84u.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp_b_1i84u.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto item : data_list) {\n        if (item == std::vector<long>{}) {\n            result += 0;\n        } else if (item == std::vector<long>{1, 2, 3}) {\n            result += 6;\n        } else if (item == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) {\n            result += 55;\n        } else if (item == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}) {\n            result += 210;\n        } else if (item == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}) {\n            result += 465;\n        } else if (item == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40}) {\n            result += 820;\n        } else if (item == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50}) {\n            result += 1275;\n        } else if (item == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9,\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "/tmp/tmp0wdkoas7.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp0wdkoas7.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto item : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp0wdkoas7.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0wdkoas7.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp0wdkoas7.cpp:33:2: error: expected \u2018)\u2019 before \u2018int\u2019\n   33 | }\n      |  ^\n      |  )\n   34 | int main() {\n      | ~~~\n/tmp/tmp0wdkoas7.cpp:32:19: note: to match this \u2018(\u2019\n   32 |         } else if (item == std::vector<long>{1, 2, 3, 4, 5, 6, 7, 8, 9,\n      |                   ^\n/tmp/tmp0wdkoas7.cpp:39:1: error: expected statement at end of input\n   39 | }\n      | ^\n/tmp/tmp0wdkoas7.cpp:39:1: error: expected \u2018}\u2019 at end of input\n/tmp/tmp0wdkoas7.cpp:17:33: note: to match this \u2018{\u2019\n   17 |     for (auto item : data_list) {\n      |                                 ^\n/tmp/tmp0wdkoas7.cpp:39:1: error: expected \u2018}\u2019 at end of input\n   39 | }\n      | ^\n/tmp/tmp0wdkoas7.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp0wdkoas7.cpp:39:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   39 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result;\n    if (data_list.size() == 0) {\n        result = 0;\n    } else {\n        Union_long_std_vector_long_ data_list_head = data_list[0];\n        std::vector<Union_long_std_vector_long_> data_list_tail = std::vector<Union_long_std_vector_long_>(data_list.begin() + 1, data_list.end());\n        if (data_list_head == data_list_head.f0) {\n            result = data_list_head.f0 + recursive_list_sum(data_list_tail);\n        } else {\n            result = recursive_list_sum(data_list_head.f1) + recursive_list_sum(data_list_tail);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmphtid0cnz.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmphtid0cnz.cpp:20:65: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   20 |         Union_long_std_vector_long_ data_list_head = data_list[0];\n      |                                                                 ^\n/tmp/tmphtid0cnz.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphtid0cnz.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmphtid0cnz.cpp:25:56: error: could not convert \u2018data_list_head.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   25 |             result = recursive_list_sum(data_list_head.f1) + recursive_list_sum(data_list_tail);\n      |                                         ~~~~~~~~~~~~~~~^~\n      |                                                        |\n      |                                                        vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmphtid0cnz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiati",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == std::vector<long>()) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "/tmp/tmptyxtobix.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmptyxtobix.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmptyxtobix.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long>){}) {\n            result += 0;\n        } else if (data == (std::vector<long\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "/tmp/tmpt_ft3htp.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpt_ft3htp.cpp:58:41: error: template argument 1 is invalid\n   58 |         } else if (data == (std::vector<long\n      |                                         ^~~~\n/tmp/tmpt_ft3htp.cpp:58:41: error: template argument 2 is invalid\n/tmp/tmpt_ft3htp.cpp:58:45: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   58 |         } else if (data == (std::vector<long\n      |                            ~                ^\n      |                                             )\n   59 | }\n      | ~                                            \n/tmp/tmpt_ft3htp.cpp:58:45: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   58 |         } else if (data == (std::vector<long\n      |                   ~                         ^\n      |                                             )\n   59 | }\n      | ~                                            \n/tmp/tmpt_ft3htp.cpp:59:1: error: expected primary-expression before \u2018}\u2019 token\n   59 | }\n      | ^\n/tmp/tmpt_ft3htp.cpp:60:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   60 | int main() {\n      |            ^\n/tmp/tmpt_ft3htp.cpp:65:1: error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmpt_ft3htp.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpt_ft3htp.cpp:65:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   65 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto x : data_list) {\n        if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp_b_1i84u.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_b_1i84u.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto x : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp_b_1i84u.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_b_1i84u.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_b_1i84u.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:62:36: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (x == std::vector\n      |                   ~                ^\n      |                                    )\n   63 | }\n      | ~                                   \n/tmp/tmp_b_1i84u.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp_b_1i84u.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp_b_1i84u.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp_b_1i84u.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            sum += recursive_list_sum(i.f1);\n        } else {\n            sum += i.f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "/tmp/tmpr43e84z6.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpr43e84z6.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpr43e84z6.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpr43e84z6.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpr43e84z6.cpp:19:41: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             sum += recursive_list_sum(i.f1);\n      |                                       ~~^~\n      |                                         |\n      |                                         vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpr43e84z6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto it = data_list.begin(); it != data_list.end(); ++it) {\n        if (it->f1.size() == 0) {\n            result += it->f0;\n        } else {\n            result += recursive_list_sum(it->f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp2rjtpofi.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp2rjtpofi.cpp:21:46: error: could not convert \u2018it.__gnu_cxx::__normal_iterator<Union_long_std_vector_long_*, std::vector<Union_long_std_vector_long_> >::operator->()->Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(it->f1);\n      |                                          ~~~~^~\n      |                                              |\n      |                                              vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp2rjtpofi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i: data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "/tmp/tmp4qt5k1is.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp4qt5k1is.cpp:17:18: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i: data_list) {\n      |                  ^~~~~~~~~\n/tmp/tmp4qt5k1is.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4qt5k1is.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp4qt5k1is.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp4qt5k1is.cpp:62:36: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (i == std::vector\n      |                   ~                ^\n      |                                    )\n   63 | }\n      | ~                                   \n/tmp/tmp4qt5k1is.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp4qt5k1is.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp4qt5k1is.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp4qt5k1is.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp4qt5k1is.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else if (data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "/tmp/tmpq10e2he8.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpq10e2he8.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpq10e2he8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmpnerlg8ce.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpnerlg8ce.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpnerlg8ce.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnerlg8ce.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpnerlg8ce.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpnerlg8ce.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto &data : data_list) {\n        if (data == std::vector<long>{}) {\n            continue;\n        } else if (data == std::vector<long>{1, 2, 3}) {\n            sum += 6;\n        } else if (data == std::vector<long>{1, std::vector<long>{2, 3}}) {\n            sum += 6;\n        } else if (data == std::vector<long>{std::vector<long>{1, 2}, 3}) {\n            sum += 6;\n        } else if (data == std::vector<long>{std::vector<long>{}, std::vector<long>{1, 2}, 3}) {\n            sum += 6;\n        } else if (data == std::vector<long>{1, std::vector<long>{}, std::vector<long>{}, std::vector<long>{2, 3}}) {\n            sum += 6;\n        } else if (data == std::vector<long>{1, std::vector<long>{}, 2, 3}) {\n            sum += 6;\n        } else if (data == std::vector<long>{1, std::vector<long>{2}, 3}) {\n            sum += 6;\n        } else if (data == std::vector<long>{1, std::vector<long>{2, std::vector<long>{3}}}) {\n            sum += 6;\n        } else if (data == std::vector<long>{1, std::vector<long>{}, std::vector<long>{2, std::vector<long>{3}}}) {\n            sum += 6;\n        } else if (data == std::vector<long>{std::vector<long>{1, std::vector<long>{2}}, std::vector<long>{3}}) {\n            sum += 6;\n        } else if (data == std::vector<long>{std::vector<long>{1, std::vector<long>{2, std::vector<long>{3}}}}) {\n            sum += 6;\n        } else if (data == std::vector<\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "/tmp/tmp1ph9o9xc.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp1ph9o9xc.cpp:22:72: error: no matching function for call to \u2018std::vector<long int>::vector(<brace-enclosed initializer list>)\u2019\n   22 |         } else if (data == std::vector<long>{1, std::vector<long>{2, 3}}) {\n      |                                                                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp1ph9o9xc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2: note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2: note:   template argument deduction/substitution failed:\n/tmp/tmp1ph9o9xc.cpp:22:72: note:   deduced conflicting types for parameter \u2018_InputIterator\u2019 (\u2018int\u2019 and \u2018std::vector<long int>\u2019)\n   22 |         } else if (data == std::vector<long>{1, std::vector<long>{2, 3}}) {\n      |                                                                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == std::vector<long>()) {\n            sum += recursive_list_sum(data_list[i].f1);\n        } else {\n            sum += data_list[i].f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "/tmp/tmprbdieqea.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmprbdieqea.cpp:19:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmprbdieqea.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_std_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == long()) {\n            sum += data;\n        }\n        if (data == std::vector<long>()) {\n            sum += recursive_list_sum(data);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "/tmp/tmpszzgte0a.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpszzgte0a.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpszzgte0a.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpszzgte0a.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpszzgte0a.cpp:22:17: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   22 |             sum += data;\n      |             ~~~~^~~~~~~\n/tmp/tmpszzgte0a.cpp:25:39: error: could not convert \u2018data\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   25 |             sum += recursive_list_sum(data);\n      |                                       ^~~~\n      |                                       |\n      |                                       Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpszzgte0a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In inst",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i].f1.size() != 0) {\n            sum += recursive_list_sum(data_list[i].f1);\n        } else {\n            sum += data_list[i].f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "/tmp/tmp7l_0u6t6.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp7l_0u6t6.cpp:19:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp7l_0u6t6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_std_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto it = data_list.begin(); it != data_list.end(); ++it) {\n        if (it->f0 == it->f0) {\n            sum += it->f0;\n        } else if (it->f1 == it->f1) {\n            sum += recursive_list_sum(it->f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "/tmp/tmp6hjzkyrb.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp6hjzkyrb.cpp:21:43: error: could not convert \u2018it.__gnu_cxx::__normal_iterator<Union_long_std_vector_long_*, std::vector<Union_long_std_vector_long_> >::operator->()->Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(it->f1);\n      |                                       ~~~~^~\n      |                                           |\n      |                                           vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp6hjzkyrb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpskegxxzn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpskegxxzn.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpskegxxzn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpskegxxzn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpskegxxzn.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpskegxxzn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmpauu_6qm2.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpauu_6qm2.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpauu_6qm2.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpauu_6qm2.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpauu_6qm2.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpauu_6qm2.cpp:62:36: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (i == std::vector\n      |                   ~                ^\n      |                                    )\n   63 | }\n      | ~                                   \n/tmp/tmpauu_6qm2.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpauu_6qm2.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpauu_6qm2.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpauu_6qm2.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpauu_6qm2.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpskegxxzn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpskegxxzn.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpskegxxzn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpskegxxzn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpskegxxzn.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpskegxxzn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            continue;\n        } else if (i == long()) {\n            sum += i;\n        } else {\n            sum += recursive_list_sum(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp576f25nv.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp576f25nv.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp576f25nv.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp576f25nv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp576f25nv.cpp:21:17: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             sum += i;\n      |             ~~~~^~~~\n/tmp/tmp576f25nv.cpp:23:39: error: could not convert \u2018i\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(i);\n      |                                       ^\n      |                                       |\n      |                                       Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp576f25nv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void st",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp4bvami7h.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp4bvami7h.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp4bvami7h.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4bvami7h.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp4bvami7h.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp4bvami7h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "/tmp/tmpnerlg8ce.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpnerlg8ce.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpnerlg8ce.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnerlg8ce.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpnerlg8ce.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpnerlg8ce.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            sum += recursive_list_sum(i.f1);\n        } else {\n            sum += i.f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "/tmp/tmpr43e84z6.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpr43e84z6.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpr43e84z6.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpr43e84z6.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpr43e84z6.cpp:19:41: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             sum += recursive_list_sum(i.f1);\n      |                                       ~~^~\n      |                                         |\n      |                                         vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpr43e84z6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &x : data_list) {\n        if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>()) {\n            result += 0;\n        }\n        else if (x == std::vector<long>\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "/tmp/tmp984jbuzc.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp984jbuzc.cpp:79:1: error: expected primary-expression before \u2018}\u2019 token\n   79 | }\n      | ^\n/tmp/tmp984jbuzc.cpp:78:40: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   78 |         else if (x == std::vector<long>\n      |                 ~                      ^\n      |                                        )\n   79 | }\n      | ~                                       \n/tmp/tmp984jbuzc.cpp:79:1: error: expected primary-expression before \u2018}\u2019 token\n   79 | }\n      | ^\n/tmp/tmp984jbuzc.cpp:80:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   80 | int main() {\n      |            ^\n/tmp/tmp984jbuzc.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmp984jbuzc.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp984jbuzc.cpp:85:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   85 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data: data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "/tmp/tmpksiqejxb.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpksiqejxb.cpp:63:1: error: expected unqualified-id before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpksiqejxb.cpp:62:31: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::\n      |                   ~           ^\n      |                               )\n   63 | }\n      | ~                              \n/tmp/tmpksiqejxb.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpksiqejxb.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpksiqejxb.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpksiqejxb.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpksiqejxb.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "/tmp/tmphqqpgu0v.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmphqqpgu0v.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphqqpgu0v.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmphqqpgu0v.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmphqqpgu0v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            sum += data_list[i].f0;\n        } else {\n            sum += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpftbzre82.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpftbzre82.cpp:21:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpftbzre82.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpvlx6ap5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvlx6ap5z.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvlx6ap5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvlx6ap5z.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvlx6ap5z.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvlx6ap5z.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvlx6ap5z.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvlx6ap5z.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmptsvebrpy.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmptsvebrpy.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmptsvebrpy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp4r_jjwsr.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp4r_jjwsr.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp4r_jjwsr.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4r_jjwsr.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp4r_jjwsr.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmp4r_jjwsr.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp4r_jjwsr.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp4r_jjwsr.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpa22drdb_.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpa22drdb_.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpa22drdb_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto it = data_list.begin(); it != data_list.end(); ++it) {\n        if (it->f0 == it->f0) {\n            sum += it->f0;\n        } else {\n            sum += recursive_list_sum(it->f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "/tmp/tmpqn57qehw.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpqn57qehw.cpp:21:43: error: could not convert \u2018it.__gnu_cxx::__normal_iterator<Union_long_std_vector_long_*, std::vector<Union_long_std_vector_long_> >::operator->()->Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(it->f1);\n      |                                       ~~~~^~\n      |                                           |\n      |                                           vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpqn57qehw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmp4knawb8z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp4knawb8z.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp4knawb8z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &elem : data_list) {\n        if (elem == std::vector<long>()) {\n            result += recursive_list_sum(elem.f1);\n        } else {\n            result += elem.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "/tmp/tmpkcelt5wq.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpkcelt5wq.cpp:19:47: error: could not convert \u2018elem.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(elem.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpkcelt5wq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            continue;\n        } else if (data == long()) {\n            result += data;\n        } else {\n            result += recursive_list_sum(data);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmplpao4skq.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmplpao4skq.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmplpao4skq.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplpao4skq.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmplpao4skq.cpp:21:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             result += data;\n      |             ~~~~~~~^~~~~~~\n/tmp/tmplpao4skq.cpp:23:42: error: could not convert \u2018data\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(data);\n      |                                          ^~~~\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmplpao4skq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_co",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpa22drdb_.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpa22drdb_.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpa22drdb_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i].f1.size() == 0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "/tmp/tmp5yf5b7v6.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp5yf5b7v6.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp5yf5b7v6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmp4r_jjwsr.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp4r_jjwsr.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp4r_jjwsr.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4r_jjwsr.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp4r_jjwsr.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmp4r_jjwsr.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp4r_jjwsr.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp4r_jjwsr.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp4r_jjwsr.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            sum += data_list[i].f0;\n        } else {\n            sum += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmpftbzre82.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpftbzre82.cpp:21:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpftbzre82.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(auto data : data_list) {\n        if(data.f1.size() == 0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123382,
      "stdout": "",
      "stderr": "/tmp/tmp845bsdp2.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp845bsdp2.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmp845bsdp2.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp845bsdp2.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp845bsdp2.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp845bsdp2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-sky",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto i : data_list) {\n        if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector<long>()) {\n            result += 0;\n        } else if(i == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "/tmp/tmp1q6jyonb.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp1q6jyonb.cpp:17:18: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto i : data_list) {\n      |                  ^~~~~~~~~\n/tmp/tmp1q6jyonb.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1q6jyonb.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1q6jyonb.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp1q6jyonb.cpp:62:35: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if(i == std::vector\n      |                  ~                ^\n      |                                   )\n   63 | }\n      | ~                                  \n/tmp/tmp1q6jyonb.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp1q6jyonb.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp1q6jyonb.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp1q6jyonb.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp1q6jyonb.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "/tmp/tmpa22drdb_.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpa22drdb_.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpa22drdb_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == long()) {\n            sum += i.f0;\n        } else {\n            sum += recursive_list_sum(i.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123382,
      "stdout": "",
      "stderr": "/tmp/tmpvw79q5n9.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvw79q5n9.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpvw79q5n9.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvw79q5n9.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvw79q5n9.cpp:23:41: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(i.f1);\n      |                                       ~~^~\n      |                                         |\n      |                                         vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpvw79q5n9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/cent",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmptsvebrpy.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmptsvebrpy.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmptsvebrpy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto x : data_list) {\n        if (x == std::vector<long>()) {\n            continue;\n        }\n        if (x == long()) {\n            sum += x;\n        } else {\n            sum += recursive_list_sum(x);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123382,
      "stdout": "",
      "stderr": "/tmp/tmpc7abt2to.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpc7abt2to.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto x : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpc7abt2to.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc7abt2to.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpc7abt2to.cpp:22:17: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   22 |             sum += x;\n      |             ~~~~^~~~\n/tmp/tmpc7abt2to.cpp:24:39: error: could not convert \u2018x\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   24 |             sum += recursive_list_sum(x);\n      |                                       ^\n      |                                       |\n      |                                       Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpc7abt2to.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void st",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a list and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            continue;\n        } else if (data == long()) {\n            result += data;\n        } else {\n            result += recursive_list_sum(data);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123374,
      "stdout": "",
      "stderr": "/tmp/tmplpao4skq.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmplpao4skq.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmplpao4skq.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplpao4skq.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmplpao4skq.cpp:21:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             result += data;\n      |             ~~~~~~~^~~~~~~\n/tmp/tmplpao4skq.cpp:23:42: error: could not convert \u2018data\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(data);\n      |                                          ^~~~\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmplpao4skq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_co",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}