{
  "name": "mbpp_100_next_smallest_palindrome",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    if (num < 0) {\n        return -1;\n    }\n    if (num < 10) {\n        return num;\n    }\n    std::string str = std::to_string(num);\n    int len = str.length();\n    int mid = len / 2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && str[i] == str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || str[i] < str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        str[j] = str[i];\n        i--;\n        j++;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2 == 1) {\n            int num = str[mid] - '0' + carry;\n            carry = num / 10;\n            num %= 10;\n            str[mid] = '0' + num;\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int num = str[i] - '0' + carry;\n            carry = num / 10;\n            num %= 10;\n            str[i] = str[j] = '0' + num;\n            i--;\n            j++;\n        }\n    }\n    return std::stol(str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmpopz7ennv: /tmp/tmpopz7ennv.cpp:54: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    else {\n        return next_smallest_palindrome(num + 1);\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmpnxet0sd9: /tmp/tmpnxet0sd9.cpp:21: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    int n = num;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n    int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n    int aa = 0;\n    int bb = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n    int gg = 0;\n    int hh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int ppp = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt = 0;\n    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n    int xxx = 0;\n    int yyy\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "/tmp/tmp17v4qtp6.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmp17v4qtp6.cpp:74:1: error: expected initializer before \u2018}\u2019 token\n   74 | }\n      | ^\n/tmp/tmp17v4qtp6.cpp:74:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    std::string s = std::to_string(num);\n    int n = s.size();\n    int mid = n/2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (n%2)? mid + 1 : mid;\n    while(i >= 0 && s[i] == s[j]) {\n        i--;\n        j++;\n    }\n    if(i < 0 || s[i] < s[j]) {\n        left_smaller = true;\n    }\n    while(i >= 0) {\n        s[j] = s[i];\n        i--;\n        j++;\n    }\n    if(left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if(n%2) {\n            int x = s[mid] - '0';\n            x += carry;\n            carry = x/10;\n            s[mid] = (x%10) + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while(i >= 0) {\n            int x = s[i] - '0';\n            x += carry;\n            carry = x/10;\n            s[i] = (x%10) + '0';\n            s[j++] = s[i--];\n        }\n    }\n    return std::stol(s);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmp2s31ljx8: /tmp/tmp2s31ljx8.cpp:48: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // TODO: Write - Your - Code\n    std::string s = std::to_string(num);\n    int n = s.length();\n    int mid = n/2;\n    int i = mid-1;\n    int j = (n%2)?mid+1:mid;\n    while(i>=0 && s[i]==s[j]){\n        i--;\n        j++;\n    }\n    bool left_smaller = false;\n    if(i<0 || s[i]<s[j]){\n        left_smaller = true;\n    }\n    while(i>=0){\n        s[j] = s[i];\n        i--;\n        j++;\n    }\n    if(left_smaller){\n        int carry = 1;\n        i = mid-1;\n        if(n%2){\n            int num = s[mid]-'0'+carry;\n            s[mid] = (num%10)+'0';\n            carry = num/10;\n            j = mid+1;\n        }else{\n            j = mid;\n        }\n        while(i>=0){\n            int num = s[i]-'0'+carry;\n            s[i] = (num%10)+'0';\n            carry = num/10;\n            s[j++] = s[i--];\n        }\n    }\n    return stol(s);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmps9b_xg91: /tmp/tmps9b_xg91.cpp:46: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp>0)\n    {\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(rev==num)\n    {\n        return num;\n    }\n    else\n    {\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmpk0nah5_k: /tmp/tmpk0nah5_k.cpp:24: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long n = num;\n    int len = 0;\n    while(n) {\n        n /= 10;\n        len++;\n    }\n    if(len == 1) {\n        if(num == 9)\n            return 11;\n        else\n            return num + 1;\n    }\n    int mid = len / 2;\n    int left = mid - 1;\n    int right = (len % 2) ? mid + 1 : mid;\n    bool left_smaller = false;\n    while(left >= 0 && num / (int)pow(10, left) == num % 10) {\n        left--;\n        right++;\n    }\n    if(left < 0 || num / (int)pow(10, left) < num % 10)\n        left_smaller = true;\n    while(left >= 0) {\n        num = num - (num / (int)pow(10, left)) * (int)pow(10, left);\n        num = num + (num % 10) * (int)pow(10, right);\n        left--;\n        right++;\n    }\n    if(left_smaller) {\n        int carry = 1;\n        left = mid - 1;\n        if(len % 2) {\n            int mid_digit = (num / (int)pow(10, mid)) % 10;\n            if(mid_digit == 9)\n                carry = 1;\n            else\n                carry = 0;\n            num = num + carry * (int)pow(10, mid);\n            mid_digit = (num / (int)pow(10, mid)) % 10;\n            right = mid + 1;\n        }\n        else\n            right = mid;\n        while(left >= 0) {\n            int left_digit = (num / (int)pow(10, left)) % 10;\n            if(left_digit == 9)\n                carry = 1;\n            else\n                carry = 0;\n            num = num + carry * (int)pow(10, left);\n            left_digit = (num / (int)pow(10, left)) % 10;\n            num = num -\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "/tmp/tmpcdsxi6i7.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmpcdsxi6i7.cpp:58:1: error: expected primary-expression before \u2018}\u2019 token\n   58 | }\n      | ^\n/tmp/tmpcdsxi6i7.cpp:59:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmpcdsxi6i7.cpp:64:1: error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpcdsxi6i7.cpp:34:22: note: to match this \u2018{\u2019\n   34 |     if(left_smaller) {\n      |                      ^\n/tmp/tmpcdsxi6i7.cpp:64:1: error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpcdsxi6i7.cpp:4:41: note: to match this \u2018{\u2019\n    4 | long next_smallest_palindrome(long num) {\n      |                                         ^\n/tmp/tmpcdsxi6i7.cpp:64:1: warning: control reaches end of non-void function [-Wreturn-type]\n   64 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    if (num < 0) return -1;\n    if (num < 10) return num;\n    std::string str = std::to_string(num);\n    int len = str.length();\n    int mid = len / 2;\n    bool is_odd = len % 2;\n    int left = mid - 1;\n    int right = is_odd ? mid + 1 : mid;\n    bool left_smaller = false;\n    while (left >= 0 && str[left] == str[right]) {\n        left--;\n        right++;\n    }\n    if (left < 0 || str[left] < str[right]) {\n        left_smaller = true;\n    }\n    while (left >= 0) {\n        str[right++] = str[left--];\n    }\n    if (left_smaller) {\n        int carry = 1;\n        left = mid - 1;\n        if (is_odd) {\n            int num = str[mid] - '0' + carry;\n            carry = num / 10;\n            str[mid] = (num % 10) + '0';\n            right = mid + 1;\n        } else {\n            right = mid;\n        }\n        while (left >= 0) {\n            int num = str[left] - '0' + carry;\n            carry = num / 10;\n            str[left] = (num % 10) + '0';\n            str[right++] = str[left--];\n        }\n    }\n    return std::stol(str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmp038ed7kv: /tmp/tmp038ed7kv.cpp:46: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    if(num<10)\n        return num;\n    std::string num_str = std::to_string(num);\n    int len = num_str.length();\n    int mid = len/2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (len%2)? mid+1 : mid;\n    while(i>=0 && num_str[i]==num_str[j]) {\n        i--;\n        j++;\n    }\n    if(i<0 || num_str[i]<num_str[j])\n        left_smaller = true;\n    while(i>=0) {\n        num_str[j] = num_str[i];\n        i--;\n        j++;\n    }\n    if(left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if(len%2) {\n            int num = num_str[mid] - '0' + carry;\n            carry = num/10;\n            num_str[mid] = (num%10) + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while(i>=0) {\n            int num = num_str[i] - '0' + carry;\n            carry = num/10;\n            num_str[i] = (num%10) + '0';\n            num_str[j] = num_str[i];\n            i--;\n            j++;\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmp9yad4tte: /tmp/tmp9yad4tte.cpp:48: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    if(num<0)\n        return -1;\n    if(num<10)\n        return num;\n    std::string s = std::to_string(num);\n    int i=0, j=s.size()-1;\n    while(i<j){\n        if(s[i]!=s[j]){\n            s[j] = s[i];\n        }\n        i++; j--;\n    }\n    long next_palindrome = std::stol(s);\n    if(next_palindrome<num)\n        return next_smallest_palindrome(next_palindrome+1);\n    return next_palindrome;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmpyzgskzov: /tmp/tmpyzgskzov.cpp:24: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(num == rev) {\n        return num;\n    }\n    long next_pal = num;\n    while(next_pal <= rev) {\n        next_pal++;\n        temp = next_pal;\n        rev = 0;\n        while(temp > 0) {\n            rev = rev*10 + temp%10;\n            temp /= 10;\n        }\n        if(next_pal == rev) {\n            return next_pal;\n        }\n    }\n    return next_pal;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmpzzuxs1az: /tmp/tmpzzuxs1az.cpp:31: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0)\n    {\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(rev==num)\n    {\n        return num;\n    }\n    else\n    {\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmpzbn_gw3b: /tmp/tmpzbn_gw3b.cpp:24: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string s = std::to_string(num);\n    int n = s.size();\n    int mid = n/2;\n    int i = mid - 1;\n    int j = (n%2)? mid + 1 : mid;\n    while(i>=0 && s[i] == s[j]) {\n        i--;\n        j++;\n    }\n    if(i < 0 || s[i] < s[j]) {\n        bool left_smaller = (i < 0 || s[i] < s[j]);\n        while(i>=0) {\n            s[j++] = s[i--];\n        }\n        if(left_smaller) {\n            int carry = 1;\n            i = mid - 1;\n            if(n%2 == 1) {\n                int x = s[mid] - '0';\n                x += carry;\n                carry = x/10;\n                s[mid] = (x%10) + '0';\n                j = mid + 1;\n            } else {\n                j = mid;\n            }\n            while(i>=0) {\n                int x = s[i] - '0';\n                x += carry;\n                carry = x/10;\n                s[i] = (x%10) + '0';\n                s[j++] = s[i--];\n            }\n        }\n    }\n    return std::stol(s);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmpgaabokj0: /tmp/tmpgaabokj0.cpp:44: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    int digits = 0;\n    while(temp > 0) {\n        digits++;\n        temp /= 10;\n    }\n    long palindrome = num;\n    int i = 0;\n    while(i < digits/2) {\n        palindrome += pow(10, i) * (palindrome % 10);\n        palindrome /= 10;\n        i++;\n    }\n    if(palindrome <= num) {\n        palindrome = num + pow(10, digits/2);\n        i = 0;\n        while(i < digits/2) {\n            palindrome += pow(10, i) * (palindrome % 10);\n            palindrome /= 10;\n            i++;\n        }\n    }\n    return palindrome;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmpoz5esvyc: /tmp/tmpoz5esvyc.cpp:32: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n  long temp = num;\n  long rev = 0;\n  while(temp > 0) {\n    rev = rev * 10 + temp % 10;\n    temp /= 10;\n  }\n  if(rev == num) {\n    return num;\n  }\n  if(rev > num) {\n    return rev;\n  }\n  long pal = num;\n  while(pal <= rev) {\n    pal++;\n    temp = pal;\n    rev = 0;\n    while(temp > 0) {\n      rev = rev * 10 + temp % 10;\n      temp /= 10;\n    }\n    if(rev == pal) {\n      return rev;\n    }\n  }\n  return -1;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmp9yhqg6zq: /tmp/tmp9yhqg6zq.cpp:34: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    else {\n        return next_smallest_palindrome(num + 1);\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmpnxet0sd9: /tmp/tmpnxet0sd9.cpp:21: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // TODO: Write your code here\n    long temp = num;\n    long reverse = 0;\n    while(temp > 0){\n        reverse = reverse*10 + temp%10;\n        temp = temp/10;\n    }\n    if(reverse == num)\n        return num;\n    else if(reverse > num)\n        return reverse;\n    else{\n        long temp = num;\n        long reverse = 0;\n        while(temp > 0){\n            reverse = reverse*10 + temp%10;\n            temp = temp/10;\n        }\n        if(reverse == num)\n            return num;\n        else if(reverse > num)\n            return reverse;\n        else{\n            long temp = num;\n            long reverse = 0;\n            while(temp > 0){\n                reverse = reverse*10 + temp%10;\n                temp = temp/10;\n            }\n            if(reverse == num)\n                return num;\n            else if(reverse > num)\n                return reverse;\n            else{\n                long temp = num;\n                long reverse = 0;\n                while(temp > 0){\n                    reverse = reverse*10 + temp%10;\n                    temp = temp/10;\n                }\n                if(reverse == num)\n                    return num;\n                else if(reverse > num)\n                    return reverse;\n                else{\n                    long temp = num;\n                    long reverse = 0;\n                    while(temp > 0){\n                        reverse = reverse*10 + temp%10;\n                        temp = temp/10;\n                    }\n                    if(reverse == num)\n                        return num;\n                    else if(reverse > num)\n                        return reverse;\n                    else{\n                        long temp = num;\n                        long reverse = 0;\n                        while(temp > 0){\n                            reverse = reverse*10 + temp%10;\n                            temp = temp/10;\n                        }\n                        if(reverse == num)\n                            return num;\n                        else if(reverse > num)\n                            return reverse;\n                        else{\n                            long temp = num;\n                            long reverse = 0;\n                            while(temp > 0){\n                                reverse = reverse*10 + temp%10;\n                                temp\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "/tmp/tmpo_ze0r5i.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmpo_ze0r5i.cpp:76:37: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   76 |                                 temp\n      |                                     ^\n      |                                     ;\n   77 | }\n      | ~                                    \n/tmp/tmpo_ze0r5i.cpp:78:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   78 | int main() {\n      |            ^\n/tmp/tmpo_ze0r5i.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpo_ze0r5i.cpp:71:29: note: to match this \u2018{\u2019\n   71 |                         else{\n      |                             ^\n/tmp/tmpo_ze0r5i.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpo_ze0r5i.cpp:60:25: note: to match this \u2018{\u2019\n   60 |                     else{\n      |                         ^\n/tmp/tmpo_ze0r5i.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpo_ze0r5i.cpp:49:21: note: to match this \u2018{\u2019\n   49 |                 else{\n      |                     ^\n/tmp/tmpo_ze0r5i.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpo_ze0r5i.cpp:38:17: note: to match this \u2018{\u2019\n   38 |             else{\n      |                 ^\n/tmp/tmpo_ze0r5i.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpo_ze0r5i.cpp:27:13: note: to match this \u2018{\u2019\n   27 |         else{\n      |             ^\n/tmp/tmpo_ze0r5i.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpo_ze0r5i.cpp:16:9: note: to match this \u2018{\u2019\n   16 |     else{\n      |         ^\n/tmp/tmpo_ze0r5i.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpo_ze0r5i.cpp:4:41: note: to match this \u2018{\u2019\n    4 | long next_smallest_palindrome(long num) {\n      |                                         ^\n/tmp/tmpo_ze0r5i.cpp:83:1: warning: control reaches end of non-void function [-Wreturn-type]\n   83 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long n = num;\n    long rev = 0;\n    while(n > 0){\n        rev = rev*10 + n%10;\n        n = n/10;\n    }\n    if(rev == num) return num;\n    else{\n        long temp = num;\n        long temp_rev = rev;\n        while(temp != temp_rev){\n            temp++;\n            temp_rev = 0;\n            n = temp;\n            while(n > 0){\n                temp_rev = temp_rev*10 + n%10;\n                n = n/10;\n            }\n        }\n        return temp;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmp0m6ybt_3: /tmp/tmp0m6ybt_3.cpp:30: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string str = std::to_string(num);\n    int len = str.length();\n    int mid = len/2;\n    bool leftsmaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && str[i] == str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || str[i] < str[j]) {\n        leftsmaller = true;\n    }\n    while (i >= 0) {\n        str[j] = str[i];\n        i--;\n        j++;\n    }\n    if (leftsmaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2 == 1) {\n            int x = str[mid] - '0';\n            x += carry;\n            carry = x / 10;\n            x = x % 10;\n            str[mid] = (char)(x + '0');\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int x = str[i] - '0';\n            x += carry;\n            carry = x / 10;\n            x = x % 10;\n            str[i] = (char)(x + '0');\n            str[j++] = str[i--];\n        }\n    }\n    return std::stol(str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmpx_c1snkn: /tmp/tmpx_c1snkn.cpp:49: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0)\n    {\n        rev=rev*10+temp%10;\n        temp=temp/10;\n    }\n    if(rev==num)\n    {\n        return num;\n    }\n    else\n    {\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmpb74flquv: /tmp/tmpb74flquv.cpp:24: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev > num)\n        return rev;\n    else {\n        long temp = num;\n        long rev = 0;\n        while(temp != 0) {\n            rev = rev*10 + temp%10;\n            temp /= 10;\n        }\n        if(rev > num)\n            return rev;\n        else {\n            long temp = num;\n            long rev = 0;\n            while(temp != 0) {\n                rev = rev*10 + temp%10;\n                temp /= 10;\n            }\n            if(rev > num)\n                return rev;\n            else {\n                long temp = num;\n                long rev = 0;\n                while(temp != 0) {\n                    rev = rev*10 + temp%10;\n                    temp /= 10;\n                }\n                if(rev > num)\n                    return rev;\n                else {\n                    long temp = num;\n                    long rev = 0;\n                    while(temp != 0) {\n                        rev = rev*10 + temp%10;\n                        temp /= 10;\n                    }\n                    if(rev > num)\n                        return rev;\n                    else {\n                        long temp = num;\n                        long rev = 0;\n                        while(temp != 0) {\n                            rev = rev*10 + temp%10;\n                            temp /= 10;\n                        }\n                        if(rev > num)\n                            return rev;\n                        else {\n                            long temp = num;\n                            long rev = 0;\n                            while(temp != 0) {\n                                rev = rev*10 + temp%10;\n                                temp /= 10;\n                            }\n                            if(rev > num)\n                                return rev;\n                            else {\n                                long temp = num;\n                                long rev = 0;\n                                while(temp != 0) {\n                                    rev = rev*10 + temp%10;\n                                    temp /= 10;\n                                }\n                                if(rev > num\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "/tmp/tmpqv7fnyyg.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmpqv7fnyyg.cpp:75:45: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   75 |                                 if(rev > num\n      |                                   ~         ^\n      |                                             )\n   76 | }\n      | ~                                            \n/tmp/tmpqv7fnyyg.cpp:76:1: error: expected primary-expression before \u2018}\u2019 token\n   76 | }\n      | ^\n/tmp/tmpqv7fnyyg.cpp:77:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   77 | int main() {\n      |            ^\n/tmp/tmpqv7fnyyg.cpp:82:1: error: expected \u2018}\u2019 at end of input\n   82 | }\n      | ^\n/tmp/tmpqv7fnyyg.cpp:59:30: note: to match this \u2018{\u2019\n   59 |                         else {\n      |                              ^\n/tmp/tmpqv7fnyyg.cpp:82:1: error: expected \u2018}\u2019 at end of input\n   82 | }\n      | ^\n/tmp/tmpqv7fnyyg.cpp:50:26: note: to match this \u2018{\u2019\n   50 |                     else {\n      |                          ^\n/tmp/tmpqv7fnyyg.cpp:82:1: error: expected \u2018}\u2019 at end of input\n   82 | }\n      | ^\n/tmp/tmpqv7fnyyg.cpp:41:22: note: to match this \u2018{\u2019\n   41 |                 else {\n      |                      ^\n/tmp/tmpqv7fnyyg.cpp:82:1: error: expected \u2018}\u2019 at end of input\n   82 | }\n      | ^\n/tmp/tmpqv7fnyyg.cpp:32:18: note: to match this \u2018{\u2019\n   32 |             else {\n      |                  ^\n/tmp/tmpqv7fnyyg.cpp:82:1: error: expected \u2018}\u2019 at end of input\n   82 | }\n      | ^\n/tmp/tmpqv7fnyyg.cpp:23:14: note: to match this \u2018{\u2019\n   23 |         else {\n      |              ^\n/tmp/tmpqv7fnyyg.cpp:82:1: error: expected \u2018}\u2019 at end of input\n   82 | }\n      | ^\n/tmp/tmpqv7fnyyg.cpp:14:10: note: to match this \u2018{\u2019\n   14 |     else {\n      |          ^\n/tmp/tmpqv7fnyyg.cpp:82:1: error: expected \u2018}\u2019 at end of input\n   82 | }\n      | ^\n/tmp/tmpqv7fnyyg.cpp:4:41: note: to match this \u2018{\u2019\n    4 | long next_smallest_palindrome(long num) {\n      |                 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    if(num<0)\n        return -1;\n    if(num<10)\n        return num;\n    long temp=num;\n    int n=0;\n    while(temp>0){\n        n++;\n        temp/=10;\n    }\n    int mid=n/2;\n    long left=0,right=0;\n    long div=1;\n    for(int i=0;i<mid;i++){\n        left=left*10+num/div%10;\n        div*=10;\n    }\n    if(n%2==0){\n        right=left;\n    }\n    else{\n        right=left/10;\n    }\n    long ans=0;\n    div=1;\n    for(int i=0;i<mid;i++){\n        ans=ans*10+right%10;\n        right/=10;\n    }\n    if(n%2==0)\n        ans=ans*10+ans%10;\n    else\n        ans=ans*10+num/div%10;\n    if(ans>num)\n        return ans;\n    if(n%2==0){\n        left++;\n        right=left;\n    }\n    else{\n        right=left/10;\n        left=left/10;\n        left++;\n    }\n    ans=0;\n    div=1;\n    for(int i=0;i<mid;i++){\n        ans=ans*10+right%10;\n        right/=10;\n    }\n    if(n%2==0)\n        ans=ans*10+ans%10;\n    else\n        ans=ans*10+left%10;\n    return ans;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmpukmjmv67: /tmp/tmpukmjmv67.cpp:64: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    int n=0;\n    while(temp)\n    {\n        n++;\n        temp=temp/10;\n    }\n    int i=0;\n    int j=n-1;\n    int flag=0;\n    int mid=n/2;\n    while(i<=j)\n    {\n        if(i==j)\n        {\n            if(num%10==9)\n            {\n                num=num+2;\n                flag=1;\n            }\n            else\n            {\n                num=num+1;\n                flag=1;\n            }\n            break;\n        }\n        if(i==mid)\n        {\n            i++;\n            continue;\n        }\n        if(num%10<(num/(int)pow(10,j))%10)\n        {\n            num=num+pow(10,j)-(num/(int)pow(10,j))%10;\n            flag=1;\n            break;\n        }\n        else if(num%10>(num/(int)pow(10,j))%10)\n        {\n            flag=1;\n            break;\n        }\n        num=num/10;\n        j--;\n        i++;\n    }\n    if(flag==0)\n    {\n        num=num+1;\n    }\n    temp=num;\n    i=0;\n    j=n-1;\n    while(i<=j)\n    {\n        if(i==j)\n        {\n            break;\n        }\n        if(i==mid)\n        {\n            i++;\n            continue;\n        }\n        num=num+pow(10,j)*(temp%10);\n        temp=temp/10;\n        j--;\n        i++;\n    }\n    return num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmp_16b3m6u: /tmp/tmp_16b3m6u.cpp:80: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    string s = to_string(num);\n    int n = s.length();\n    int mid = n/2;\n    bool leftsmaller = false;\n    int i = mid - 1;\n    int j = (n%2)? mid + 1 : mid;\n    while(i >= 0 && s[i] == s[j]){\n        i--;\n        j++;\n    }\n    if(i < 0 || s[i] < s[j]){\n        leftsmaller = true;\n    }\n    while(i >= 0){\n        s[j] = s[i];\n        i--;\n        j++;\n    }\n    if(leftsmaller){\n        int carry = 1;\n        i = mid - 1;\n        if(n%2){\n            s[mid] += 1;\n            carry = s[mid]/10;\n            s[mid] %= 10;\n        }\n        j = (n%2)? mid + 1 : mid;\n        while(i >= 0){\n            s[i] += carry;\n            carry = s[i]/10;\n            s[i] %= 10;\n            s[j] = s[i];\n            i--;\n            j++;\n        }\n    }\n    return stol(s);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "/tmp/tmp1nvv_l5w.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmp1nvv_l5w.cpp:6:5: error: \u2018string\u2019 was not declared in this scope\n    6 |     string s = to_string(num);\n      |     ^~~~~~\n/tmp/tmp1nvv_l5w.cpp:6:5: note: suggested alternatives:\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmp1nvv_l5w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33: note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n      |                                 ^~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmp1nvv_l5w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:67:11: note:   \u2018std::pmr::string\u2019\n   67 |     using string    =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long temp1 = num;\n    long temp2 = rev;\n    while(temp1 > 0 && temp2 > 0) {\n        if(temp1 % 10 != temp2 % 10) {\n            break;\n        }\n        temp1 /= 10;\n        temp2 /= 10;\n    }\n    if(temp1 == 0 && temp2 == 0) {\n        return num;\n    }\n    temp1 = num;\n    temp2 = rev;\n    long temp3 = 0;\n    long temp4 = 0;\n    while(temp1 > 0) {\n        temp3 = temp3 * 10 + temp1 % 10;\n        temp4 = temp4 * 10 + temp2 % 10;\n        temp1 /= 10;\n        temp2 /= 10;\n    }\n    if(temp3 > temp4) {\n        return num;\n    }\n    temp1 = num;\n    temp2 = rev;\n    long temp5 = 0;\n    long temp6 = 0;\n    while(temp1 > 0) {\n        temp5 = temp5 * 10 + temp1 % 10;\n        temp6 = temp6 * 10 + temp2 % 10;\n        temp1 /= 10;\n        temp2 /= 10;\n    }\n    if(temp5 < temp6) {\n        return num;\n    }\n    temp1 = num;\n    temp2 = rev;\n    long temp7 = 0;\n    long temp8 = 0;\n    while(temp1 > 0) {\n        temp7 = temp7 * 10 + temp1 % 10;\n        temp8 = temp8 * 10 + temp2 % 10;\n        temp1 /= 10;\n        temp2 /= 10;\n    }\n    if(temp7 == temp8) {\n        return num;\n    }\n    temp1 = num;\n    temp2 = rev;\n    long temp9 = 0;\n    long temp10 = 0;\n\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmp753au40_: /tmp/tmp753au40_.cpp:73: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    int digits = 0;\n    while(temp) {\n        digits++;\n        temp /= 10;\n    }\n    int mid = digits/2;\n    long left = num;\n    long right = 0;\n    for(int i = 0; i < mid; i++) {\n        right = right * 10 + left % 10;\n        left /= 10;\n    }\n    if(digits % 2 == 1) {\n        left /= 10;\n    }\n    if(left == right) {\n        left = num - 1;\n        right = 0;\n        for(int i = 0; i < mid; i++) {\n            right = right * 10 + left % 10;\n            left /= 10;\n        }\n        if(digits % 2 == 1) {\n            left /= 10;\n        }\n    }\n    while(left != right) {\n        left--;\n        right = 0;\n        long temp = left;\n        for(int i = 0; i < mid; i++) {\n            right = right * 10 + temp % 10;\n            temp /= 10;\n        }\n        if(digits % 2 == 1) {\n            temp /= 10;\n        }\n    }\n    long result = 0;\n    for(int i = 0; i < mid; i++) {\n        result = result * 10 + left % 10;\n        left /= 10;\n    }\n    if(digits % 2 == 1) {\n        result = result * 10 + left % 10;\n    }\n    for(int i = 0; i < mid; i++) {\n        result = result * 10 + right % 10;\n        right /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmpktbcbph3: /tmp/tmpktbcbph3.cpp:60: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string num_str = std::to_string(num);\n    int len = num_str.length();\n    int mid = len / 2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && num_str[i] == num_str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || num_str[i] < num_str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        num_str[j] = num_str[i];\n        j++;\n        i--;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2 == 1) {\n            int num = num_str[mid] - '0';\n            num = num + carry;\n            carry = num / 10;\n            num = num % 10;\n            num_str[mid] = num + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int num = num_str[i] - '0';\n            num = num + carry;\n            carry = num / 10;\n            num = num % 10;\n            num_str[i] = num + '0';\n            num_str[j++] = num_str[i--];\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmprgz6yhpt: /tmp/tmprgz6yhpt.cpp:49: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // TODO: Write - Your - Code\n    std::string num_str = std::to_string(num);\n    int len = num_str.length();\n    int mid = len/2;\n    int i = mid-1;\n    int j = (len%2)? mid+1:mid;\n    bool left_smaller = false;\n    while(i>=0 && num_str[i]==num_str[j]){\n        i--;\n        j++;\n    }\n    if(i<0 || num_str[i]<num_str[j]){\n        left_smaller = true;\n    }\n    while(i>=0){\n        num_str[j] = num_str[i];\n        i--;\n        j++;\n    }\n    if(left_smaller){\n        int carry = 1;\n        i = mid-1;\n        if(len%2){\n            int mid_num = num_str[mid]-'0';\n            mid_num += carry;\n            carry = mid_num/10;\n            mid_num = mid_num%10;\n            num_str[mid] = mid_num+'0';\n            j = mid+1;\n        }\n        else{\n            j = mid;\n        }\n        while(i>=0){\n            int num = num_str[i]-'0';\n            num += carry;\n            carry = num/10;\n            num = num%10;\n            num_str[i] = num+'0';\n            num_str[j] = num_str[i];\n            i--;\n            j++;\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmp24bb7ikc: /tmp/tmp24bb7ikc.cpp:53: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    if (num < 0) {\n        return -1;\n    }\n    if (num < 10) {\n        return num;\n    }\n    std::string str = std::to_string(num);\n    int len = str.length();\n    int mid = len / 2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && str[i] == str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || str[i] < str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        str[j] = str[i];\n        j++;\n        i--;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2 == 1) {\n            int num = str[mid] - '0';\n            num += carry;\n            carry = num / 10;\n            num = num % 10;\n            str[mid] = num + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int num = str[i] - '0';\n            num += carry;\n            carry = num / 10;\n            num = num % 10;\n            str[i] = num + '0';\n            str[j] = str[i];\n            j++;\n            i--;\n        }\n    }\n    return std::stol(str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmpadyd76r5: /tmp/tmpadyd76r5.cpp:57: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long num_copy = num;\n    int num_digits = 0;\n    while(num_copy > 0) {\n        num_digits++;\n        num_copy /= 10;\n    }\n    int mid = num_digits / 2;\n    long left_half = num / (long)pow(10, mid);\n    long right_half = num % (long)pow(10, mid);\n    long left_half_copy = left_half;\n    long right_half_copy = right_half;\n    long left_half_reverse = 0;\n    while(left_half_copy > 0) {\n        left_half_reverse = left_half_reverse * 10 + left_half_copy % 10;\n        left_half_copy /= 10;\n    }\n    long right_half_reverse = 0;\n    while(right_half_copy > 0) {\n        right_half_reverse = right_half_reverse * 10 + right_half_copy % 10;\n        right_half_copy /= 10;\n    }\n    if(left_half == left_half_reverse && right_half == right_half_reverse) {\n        return num;\n    }\n    long next_palindrome = 0;\n    if(left_half == left_half_reverse) {\n        next_palindrome = left_half * (long)pow(10, mid) + right_half_reverse;\n    } else {\n        next_palindrome = left_half_reverse * (long)pow(10, mid) + right_half_reverse;\n    }\n    return next_palindrome;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmp6v1auchz: /tmp/tmp6v1auchz.cpp:40: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Implement this placeholder.\n    return 0;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "tmpzotmbc7t: /tmp/tmpzotmbc7t.cpp:10: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    else {\n        return next_smallest_palindrome(num + 1);\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmpgo0b91jl: /tmp/tmpgo0b91jl.cpp:21: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    int i=0;\n    while(temp!=0){\n        temp=temp/10;\n        i++;\n    }\n    int j=0;\n    long num1=num;\n    long num2=num;\n    while(j<i/2){\n        num1=num1/10;\n        num2=num2%(long)pow(10,i-j-1);\n        if(num1>num2){\n            num=num+((long)pow(10,i-j-1)-num2);\n            num=num+((long)pow(10,j)-(num/((long)pow(10,i-j-1))))*((long)pow(10,i-j-1));\n            return num;\n        }\n        else if(num1<num2){\n            num=num+((long)pow(10,i-j-1)-num2);\n            num=num+((long)pow(10,j)-(num/((long)pow(10,i-j-1))))*((long)pow(10,i-j-1));\n            return num;\n        }\n        num1=num1%10;\n        num2=num2/10;\n        j++;\n    }\n    return num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmp41_w5mp2: /tmp/tmp41_w5mp2.cpp:36: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    if(num < 10)\n        return num;\n    int n = num;\n    int digits = 0;\n    while(n > 0) {\n        n /= 10;\n        digits++;\n    }\n    int mid = digits / 2;\n    int left = mid - 1;\n    int right = digits % 2 ? mid + 1 : mid;\n    bool left_smaller = false;\n    while(left >= 0 && num / (int)pow(10, left) == num % 10) {\n        left--;\n        right++;\n    }\n    if(left < 0 || num / (int)pow(10, left) < num % 10)\n        left_smaller = true;\n    while(left >= 0) {\n        num = num - (num / (int)pow(10, left)) * (int)pow(10, left) - (num % (int)pow(10, right)) + (num / (int)pow(10, left)) * (int)pow(10, right) + (num % (int)pow(10, right)) * (int)pow(10, left);\n        left--;\n        right++;\n    }\n    if(left_smaller) {\n        int carry = 1;\n        left = mid - 1;\n        if(digits % 2 == 1) {\n            num = num + (int)pow(10, mid);\n            carry = (num / (int)pow(10, mid)) / 10;\n            num = num - (int)pow(10, mid) + (num / (int)pow(10, mid)) % 10 * (int)pow(10, mid);\n        }\n        while(left >= 0) {\n            num = num + (int)pow(10, left) + carry * (int)pow(10, left);\n            carry = (num / (int)pow(10, left)) / 10;\n            num = num - (int)pow(10, left) + (num / (int)pow(10, left)) % 10 * (int)pow(10, left);\n            left--;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "/tmp/tmp9lej6iin.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmp9lej6iin.cpp:43:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   43 | int main() {\n      |            ^\n/tmp/tmp9lej6iin.cpp:48:1: error: expected \u2018}\u2019 at end of input\n   48 | }\n      | ^\n/tmp/tmp9lej6iin.cpp:29:22: note: to match this \u2018{\u2019\n   29 |     if(left_smaller) {\n      |                      ^\n/tmp/tmp9lej6iin.cpp:48:1: error: expected \u2018}\u2019 at end of input\n   48 | }\n      | ^\n/tmp/tmp9lej6iin.cpp:4:41: note: to match this \u2018{\u2019\n    4 | long next_smallest_palindrome(long num) {\n      |                                         ^\n/tmp/tmp9lej6iin.cpp:48:1: warning: control reaches end of non-void function [-Wreturn-type]\n   48 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long reverse = 0;\n    while(temp != 0) {\n        reverse = reverse * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(reverse == num) {\n        return num;\n    }\n    if(reverse < num) {\n        num++;\n    }\n    while(true) {\n        temp = num;\n        reverse = 0;\n        while(temp != 0) {\n            reverse = reverse * 10 + temp % 10;\n            temp /= 10;\n        }\n        if(reverse == num) {\n            return num;\n        }\n        num++;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmp8v8vi85n: /tmp/tmp8v8vi85n.cpp:33: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    if(rev < num) {\n        return rev;\n    }\n    long temp1 = num;\n    long temp2 = rev;\n    long temp3 = 0;\n    while(temp1 > 0) {\n        temp3 = temp3 * 10 + temp1 % 10;\n        temp1 /= 10;\n    }\n    if(temp3 == temp2) {\n        return temp2;\n    }\n    temp1 = num;\n    temp2 = rev;\n    temp3 = 0;\n    while(temp1 > 0) {\n        temp3 = temp3 * 10 + temp1 % 10;\n        temp1 /= 10;\n    }\n    if(temp3 == temp2) {\n        return temp2;\n    }\n    return temp3;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmpl6kull8_: /tmp/tmpl6kull8_.cpp:42: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0){\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    if(rev == num){\n        return num;\n    }\n    else{\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmpgxkijc8k: /tmp/tmpgxkijc8k.cpp:21: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    int digits = 0;\n    while(temp > 0) {\n        digits++;\n        temp /= 10;\n    }\n    if(digits == 1) {\n        return num;\n    }\n    int mid = digits / 2;\n    long left = num / pow(10, mid);\n    long right = num % (long)pow(10, mid);\n    if(left == right) {\n        return num;\n    }\n    long left_copy = left;\n    long right_copy = right;\n    long left_rev = 0;\n    long right_rev = 0;\n    while(left_copy > 0) {\n        left_rev = left_rev * 10 + left_copy % 10;\n        left_copy /= 10;\n    }\n    while(right_copy > 0) {\n        right_rev = right_rev * 10 + right_copy % 10;\n        right_copy /= 10;\n    }\n    if(left_rev == right_rev) {\n        return num;\n    }\n    if(left_rev > right_rev) {\n        return left * pow(10, mid) + left_rev;\n    }\n    else {\n        left++;\n        left_rev = 0;\n        while(left > 0) {\n            left_rev = left_rev * 10 + left % 10;\n            left /= 10;\n        }\n        return left_rev * pow(10, mid) + left_rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmp3xpemfxy: /tmp/tmp3xpemfxy.cpp:51: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp>0){\n        rev = rev*10 + temp%10;\n        temp/=10;\n    }\n    if(rev == num)\n        return num;\n    else{\n        long temp = num;\n        long rev = 0;\n        while(temp>0){\n            rev = rev*10 + temp%10;\n            temp/=10;\n        }\n        if(rev > num)\n            return rev;\n        else{\n            long temp = num;\n            long rev = 0;\n            while(temp>0){\n                rev = rev*10 + temp%10;\n                temp/=10;\n            }\n            return rev;\n        }\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmprv69yn18: /tmp/tmprv69yn18.cpp:36: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string num_str = std::to_string(num);\n    int len = num_str.length();\n    int mid = len / 2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && num_str[i] == num_str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || num_str[i] < num_str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        num_str[j] = num_str[i];\n        j++;\n        i--;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2) {\n            int num = num_str[mid] - '0' + carry;\n            carry = num / 10;\n            num_str[mid] = (num % 10) + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int num = num_str[i] - '0' + carry;\n            carry = num / 10;\n            num_str[i] = (num % 10) + '0';\n            num_str[j++] = num_str[i--];\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "tmp7tojmw8q: /tmp/tmp7tojmw8q.cpp:45: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long num_copy = num;\n    long num_copy_rev = 0;\n    long num_copy_rev_copy = 0;\n    long num_copy_rev_copy_copy = 0;\n    long num_copy_rev_copy_copy_copy = 0;\n    long num_copy_rev_copy_copy_copy_copy = 0;\n    long num_copy_rev_copy_copy_copy_copy_copy = 0;\n    long num_copy_rev_copy_copy_copy_copy_copy_copy = 0;\n    long num_copy_rev_copy_copy_copy_copy_copy_copy_copy = 0;\n    long num_copy_rev_copy_copy_copy_copy_copy_copy_copy_copy = 0;\n    long num_copy_rev_copy_copy_copy_copy_copy_copy_copy_copy_copy = 0;\n    long num_copy_rev_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = 0;\n    long num_copy_rev_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = 0;\n    long num_copy_rev_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = 0;\n    long num_copy_rev_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = 0;\n    long num_copy_rev_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = 0;\n    long num_copy_rev_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = 0;\n    long num_copy_rev_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = 0;\n    long num_copy_rev_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "/tmp/tmp0kow92qa.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmp0kow92qa.cpp:25:1: error: expected initializer before \u2018}\u2019 token\n   25 | }\n      | ^\n/tmp/tmp0kow92qa.cpp:25:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long temp1 = num;\n    long temp2 = rev;\n    while(temp1 != 0) {\n        temp1 /= 10;\n        temp2 /= 10;\n    }\n    if(temp1 == temp2) {\n        return rev;\n    }\n    else {\n        return num + 1;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmpauoc748k: /tmp/tmpauoc748k.cpp:29: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string str = std::to_string(num);\n    int n = str.size();\n    int mid = n/2;\n    int left = mid - 1;\n    int right = (n % 2) ? mid + 1 : mid;\n    bool left_smaller = false;\n    while (left >= 0 && str[left] == str[right]) {\n        left--;\n        right++;\n    }\n    if (left < 0 || str[left] < str[right]) {\n        left_smaller = true;\n    }\n    while (left >= 0) {\n        str[right++] = str[left--];\n    }\n    if (left_smaller) {\n        int carry = 1;\n        left = mid - 1;\n        if (n % 2 == 1) {\n            int num = str[mid] - '0' + carry;\n            carry = num / 10;\n            str[mid] = (num % 10) + '0';\n            right = mid + 1;\n        } else {\n            right = mid;\n        }\n        while (left >= 0) {\n            int num = str[left] - '0' + carry;\n            carry = num / 10;\n            str[left] = (num % 10) + '0';\n            str[right++] = str[left--];\n        }\n    }\n    return std::stol(str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmpr35yrgla: /tmp/tmpr35yrgla.cpp:43: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // TODO: Write your code here\n    long num1=num;\n    long num2=num;\n    long num3=num;\n    long num4=num;\n    long num5=num;\n    long num6=num;\n    long num7=num;\n    long num8=num;\n    long num9=num;\n    long num10=num;\n    long num11=num;\n    long num12=num;\n    long num13=num;\n    long num14=num;\n    long num15=num;\n    long num16=num;\n    long num17=num;\n    long num18=num;\n    long num19=num;\n    long num20=num;\n    long num21=num;\n    long num22=num;\n    long num23=num;\n    long num24=num;\n    long num25=num;\n    long num26=num;\n    long num27=num;\n    long num28=num;\n    long num29=num;\n    long num30=num;\n    long num31=num;\n    long num32=num;\n    long num33=num;\n    long num34=num;\n    long num35=num;\n    long num36=num;\n    long num37=num;\n    long num38=num;\n    long num39=num;\n    long num40=num;\n    long num41=num;\n    long num42=num;\n    long num43=num;\n    long num44=num;\n    long num45=num;\n    long num46=num;\n    long num47=num;\n    long num48=num;\n    long num49=num;\n    long num50=num;\n    long num51=num;\n    long num52=num;\n    long num53=num;\n    long num54=num;\n    long num55=num;\n    long num56=num;\n    long num57=num;\n    long num58=num;\n    long num59=num;\n    long num60=num;\n    long num61=num;\n    long num62=num;\n    long num63=\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "/tmp/tmpvdv01yk5.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmpvdv01yk5.cpp:69:1: error: expected primary-expression before \u2018}\u2019 token\n   69 | }\n      | ^\n/tmp/tmpvdv01yk5.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp>0)\n    {\n        rev=rev*10+temp%10;\n        temp=temp/10;\n    }\n    if(rev==num)\n    {\n        return num;\n    }\n    else\n    {\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123125,
      "stdout": "",
      "stderr": "tmp8rrbl5m8: /tmp/tmp8rrbl5m8.cpp:24: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long n = num;\n    int digits = 0;\n    while (n > 0) {\n        n /= 10;\n        digits++;\n    }\n    int mid = digits / 2;\n    long left = 0;\n    long right = 0;\n    long div = 1;\n    for (int i = 0; i < mid; i++) {\n        div *= 10;\n    }\n    for (int i = 0; i < mid; i++) {\n        left = left * 10 + (num / div) % 10;\n        right = right * 10 + (num % 10);\n        num /= 10;\n        div /= 10;\n    }\n    if (left < right) {\n        left = left * 10 + (num % 10);\n        num /= 10;\n        div /= 10;\n        for (int i = 0; i < mid; i++) {\n            left = left * 10 + (num % 10);\n            num /= 10;\n            div /= 10;\n        }\n    } else {\n        left = left * 10 + (num % 10) + 1;\n        num /= 10;\n        div /= 10;\n        for (int i = 0; i < mid; i++) {\n            left = left * 10 + (num % 10);\n            num /= 10;\n            div /= 10;\n        }\n    }\n    return left;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmpvafrfckg: /tmp/tmpvafrfckg.cpp:47: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    int n = 0;\n    while(temp > 0) {\n        temp /= 10;\n        n++;\n    }\n    if(n == 1) {\n        if(num == 9) {\n            return 11;\n        }\n        return num + 1;\n    }\n    if(n % 2 == 0) {\n        long left = num / pow(10, n/2);\n        long right = num % (long)pow(10, n/2);\n        long left_rev = 0;\n        while(left > 0) {\n            left_rev = left_rev * 10 + left % 10;\n            left /= 10;\n        }\n        if(left_rev > right) {\n            return num + pow(10, n/2);\n        }\n        else if(left_rev == right) {\n            return num + pow(10, n/2) + 1;\n        }\n        else {\n            return num + pow(10, n/2) + pow(10, n/2) - right;\n        }\n    }\n    else {\n        long left = num / pow(10, n/2 + 1);\n        long mid = (num / (long)pow(10, n/2)) % 10;\n        long right = num % (long)pow(10, n/2);\n        long left_rev = 0;\n        while(left > 0) {\n            left_rev = left_rev * 10 + left % 10;\n            left /= 10;\n        }\n        if(left_rev > right) {\n            return num + pow(10, n/2);\n        }\n        else if(left_rev == right) {\n            if(mid == 9) {\n                return num + pow(10, n/2) + 1;\n            }\n            return num + pow(10, n/2) + pow(10, n/2 - 1);\n        }\n        else {\n            return num + pow(10, n/2) + pow(10, n/2) - right;\n        }\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmpb722n5f4: /tmp/tmpb722n5f4.cpp:61: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    // return the next smallest palindrome\n    long temp = num;\n    int len = 0;\n    while(temp) {\n        temp /= 10;\n        len++;\n    }\n    int mid = len/2;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while(i >= 0 && num / pow(10, i) == num % 10) {\n        i--;\n        j++;\n    }\n    if(i < 0 || num / pow(10, i) < num % 10) {\n        i = mid - 1;\n        int carry = 1;\n        while(i >= 0) {\n            int digit = (num / pow(10, i)) % 10;\n            digit += carry;\n            carry = digit / 10;\n            digit %= 10;\n            num += pow(10, i) * (digit - (num / pow(10, i)) % 10);\n            i--;\n        }\n    }\n    while(i >= 0) {\n        num += pow(10, i) * ((num / pow(10, j)) % 10 - (num / pow(10, i)) % 10);\n        i--;\n        j++;\n    }\n    return num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123157,
      "stdout": "",
      "stderr": "/tmp/tmppjajj18m.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmppjajj18m.cpp:24:44: error: invalid operands of types \u2018double\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   24 |             int digit = (num / pow(10, i)) % 10;\n      |                         ~~~~~~~~~~~~~~~~~~ ^ ~~\n      |                              |               |\n      |                              double          int\n/tmp/tmppjajj18m.cpp:28:61: error: invalid operands of types \u2018double\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   28 |             num += pow(10, i) * (digit - (num / pow(10, i)) % 10);\n      |                                          ~~~~~~~~~~~~~~~~~~ ^ ~~\n      |                                               |               |\n      |                                               double          int\n/tmp/tmppjajj18m.cpp:33:49: error: invalid operands of types \u2018double\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   33 |         num += pow(10, i) * ((num / pow(10, j)) % 10 - (num / pow(10, i)) % 10);\n      |                              ~~~~~~~~~~~~~~~~~~ ^ ~~\n      |                                   |               |\n      |                                   double          int\n/tmp/tmppjajj18m.cpp:33:75: error: invalid operands of types \u2018double\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   33 |         num += pow(10, i) * ((num / pow(10, j)) % 10 - (num / pow(10, i)) % 10);\n      |                                                        ~~~~~~~~~~~~~~~~~~ ^ ~~\n      |                                                             |               |\n      |                                                             double          int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    // If all 9s, simply o/p 1 followed by n-1 0s followed by 1.\n    std::string num_str = std::to_string(num);\n    int n = num_str.length();\n    std::vector<int> num_vec(n);\n    for(int i = 0; i < n; i++) {\n        num_vec[i] = num_str[i] - '0';\n    }\n    int mid = n/2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (n % 2)? mid + 1 : mid;\n    while(i >= 0 && num_vec[i] == num_vec[j]) {\n        i--;\n        j++;\n    }\n    if(i < 0 || num_vec[i] < num_vec[j]) {\n        left_smaller = true;\n    }\n    while(i >= 0) {\n        num_vec[j] = num_vec[i];\n        j++;\n        i--;\n    }\n    if(left_smaller == true) {\n        int carry = 1;\n        i = mid - 1;\n        if(n % 2 == 1) {\n            num_vec[mid] += carry;\n            carry = num_vec[mid] / 10;\n            num_vec[mid] %= 10;\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while(i >= 0) {\n            num_vec[i] += carry;\n            carry = num_vec[i] / 10;\n            num_vec[i] %= 10;\n            num_vec[j++] = num_vec[i--];\n        }\n    }\n    long result = 0;\n    for(int i = 0; i < n; i++) {\n        result = result * 10 + num_vec[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmp8wpvgrm_: /tmp/tmp8wpvgrm_.cpp:55: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n  // your code here\n  long temp=num;\n  long rev=0;\n  while(temp!=0)\n  {\n      rev=rev*10+temp%10;\n      temp=temp/10;\n  }\n  if(num==rev)\n  {\n      return num;\n  }\n  else\n  {\n      num++;\n      return next_smallest_palindrome(num);\n  }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmp8dphr_8h: /tmp/tmp8dphr_8h.cpp:25: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string s = std::to_string(num);\n    int n = s.size();\n    int mid = n/2;\n    bool leftsmaller = false;\n    int i = mid - 1;\n    int j = (n % 2) ? mid + 1 : mid;\n    while (i >= 0 && s[i] == s[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || s[i] < s[j]) {\n        leftsmaller = true;\n    }\n    while (i >= 0) {\n        s[j] = s[i];\n        i--;\n        j++;\n    }\n    if (leftsmaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (n % 2 == 1) {\n            int x = s[mid] - '0';\n            x += carry;\n            carry = x / 10;\n            s[mid] = (x % 10) + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int x = s[i] - '0';\n            x += carry;\n            carry = x / 10;\n            s[i] = (x % 10) + '0';\n            s[j++] = s[i--];\n        }\n    }\n    return std::stol(s);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmpkbfbgkpq: /tmp/tmpkbfbgkpq.cpp:47: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(num > 0) {\n        rev = rev*10 + num%10;\n        num = num/10;\n    }\n    if(rev > temp)\n        return rev;\n    if(temp%10 == 0) {\n        while(temp%10 == 0)\n            temp = temp/10;\n        temp = temp - 1;\n        rev = 0;\n        while(temp > 0) {\n            rev = rev*10 + temp%10;\n            temp = temp/10;\n        }\n        return rev;\n    }\n    temp = temp + 1;\n    rev = 0;\n    while(temp > 0) {\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    return rev;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmp19tdokqh: /tmp/tmp19tdokqh.cpp:34: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string num_str = std::to_string(num);\n    long len = num_str.length();\n    int mid = len / 2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && num_str[i] == num_str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || num_str[i] < num_str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        num_str[j] = num_str[i];\n        i--;\n        j++;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2) {\n            num_str[mid] += carry;\n            carry = num_str[mid] / 10;\n            num_str[mid] %= 10;\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            num_str[i] += carry;\n            carry = num_str[i] / 10;\n            num_str[i] %= 10;\n            num_str[j++] = num_str[i--];\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::invalid_argument'\n  what():  stol\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long n = num;\n    long rev = 0;\n    while(n != 0) {\n        rev = rev * 10 + n % 10;\n        n /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long n1 = num;\n    long n2 = rev;\n    long n3 = 0;\n    while(n1 != 0) {\n        n3 = n3 * 10 + n1 % 10;\n        n1 /= 10;\n    }\n    if(n2 == n3) {\n        return num;\n    }\n    long n4 = num;\n    long n5 = rev;\n    long n6 = 0;\n    while(n4 != 0) {\n        n6 = n6 * 10 + n4 % 10;\n        n4 /= 10;\n    }\n    if(n5 == n6) {\n        return num;\n    }\n    long n7 = num;\n    long n8 = rev;\n    long n9 = 0;\n    while(n7 != 0) {\n        n9 = n9 * 10 + n7 % 10;\n        n7 /= 10;\n    }\n    if(n8 == n9) {\n        return num;\n    }\n    long n10 = num;\n    long n11 = rev;\n    long n12 = 0;\n    while(n10 != 0) {\n        n12 = n12 * 10 + n10 % 10;\n        n10 /= 10;\n    }\n    if(n11 == n12) {\n        return num;\n    }\n    long n13 = num;\n    long n14 = rev;\n    long n15 = 0;\n    while(n13 != 0) {\n        n15 = n15 * 10 + n13 % 10;\n        n13 /= 10;\n    }\n    if(n14 == n15) {\n        return num;\n    }\n    long n16 = num;\n    long n17 = rev;\n    long n18 = 0;\n    while(n16 != 0) {\n        n18 = n18 * 10 + n16 % 10;\n        n16 /=\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmp3dm012n2.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmp3dm012n2.cpp:70:1: error: expected primary-expression before \u2018}\u2019 token\n   70 | }\n      | ^\n/tmp/tmp3dm012n2.cpp:71:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   71 | int main() {\n      |            ^\n/tmp/tmp3dm012n2.cpp:76:1: error: expected \u2018}\u2019 at end of input\n   76 | }\n      | ^\n/tmp/tmp3dm012n2.cpp:4:41: note: to match this \u2018{\u2019\n    4 | long next_smallest_palindrome(long num) {\n      |                                         ^\n/tmp/tmp3dm012n2.cpp:76:1: warning: control reaches end of non-void function [-Wreturn-type]\n   76 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string num_str = std::to_string(num);\n    int len = num_str.length();\n    int mid = len / 2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && num_str[i] == num_str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || num_str[i] < num_str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        num_str[j] = num_str[i];\n        j++;\n        i--;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2 == 1) {\n            int num = num_str[mid] - '0' + carry;\n            carry = num / 10;\n            num_str[mid] = (num % 10) + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int num = num_str[i] - '0' + carry;\n            carry = num / 10;\n            num_str[i] = (num % 10) + '0';\n            num_str[j++] = num_str[i--];\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmpf6_v4_mk: /tmp/tmpf6_v4_mk.cpp:45: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    if(rev > num) {\n        return rev;\n    }\n    long temp2 = num;\n    long rev2 = 0;\n    while(temp2 > 0) {\n        rev2 = rev2*10 + temp2%10;\n        temp2 /= 10;\n    }\n    if(rev2 > num) {\n        return rev2;\n    }\n    return num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmprcaajw8r: /tmp/tmprcaajw8r.cpp:30: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long next_palindrome = num;\n    while(next_palindrome < rev) {\n        next_palindrome++;\n        temp = next_palindrome;\n        rev = 0;\n        while(temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n    }\n    return next_palindrome;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmp7uvbecdp: /tmp/tmp7uvbecdp.cpp:28: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n    long a,b,c,d,e,f,g,h,ii,jj,kk,ll,mm,nn,oo,pp,qq,rr,ss,tt,uu,vv,ww,xx,yy,zz;\n    long aa,bb,cc,dd,ee,ff,gg,hh,ii2,jj2,kk2,ll2,mm2,nn2,oo2,pp2,qq2,rr2,ss2,tt2,uu2,vv2,ww2,xx2,yy2,zz2;\n    long aaa,bbb,ccc,ddd,eee,fff,ggg,hhh,iii,jjj,kkk,lll,mmm,nnn,ooo,ppp,qqq,rrr,sss,ttt,uuu,vvv,www,xxx,yyy,zzz;\n    long aaaa,bbbb,cccc,dddd,eeee,ffff,gggg,hhhh,iiii,jjjj,kkkk,llll,mmmm,nnnn,oooo,pppp,qqqq,rrrr,ssss,tttt,uuuu,vvvv,wwww,xxxx,yyyy,zzzz;\n    long aaaaa,bbbbb,ccccc,ddddd,eeeee,fffff,ggggg,hhhhh,iiiii,jjjjj,kkkkk,lllll,mmmmm,nnnnn,ooooo,ppppp,qqqqq,rrrrr,sssss,ttttt,uuuuu,vvvvv,wwwww,xxxxx,yyyyy,zzzzz;\n    long aaaaaa,bbbbbb,cccccc,dddddd,eeeeee,ffffff,gggggg,hhhhhh,iiiiii,jjjjjj,kkkkkk,llllll,mmmmmm,nnnnnn,oooooo,pppppp,qqqqqq,rrrrrr,ssssss,tttttt,uuuuuu,vvvvvv,wwwwww,\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmpt__ghhv2.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmpt__ghhv2.cpp:13:1: error: expected unqualified-id before \u2018}\u2019 token\n   13 | }\n      | ^\n/tmp/tmpt__ghhv2.cpp:13:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0)\n    {\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(rev==num)\n    {\n        num++;\n        temp=num;\n        rev=0;\n        while(temp!=0)\n        {\n            rev=rev*10+temp%10;\n            temp/=10;\n        }\n        return rev;\n    }\n    else\n    {\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmp1wzg5juo: /tmp/tmp1wzg5juo.cpp:32: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    else {\n        return next_smallest_palindrome(num + 1);\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmpgo0b91jl: /tmp/tmpgo0b91jl.cpp:21: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long n = num;\n    int digits = 0;\n    while(n > 0) {\n        digits++;\n        n /= 10;\n    }\n    if(digits == 1) {\n        return num;\n    }\n    long left = num;\n    long right = 0;\n    for(int i = 0; i < digits/2; i++) {\n        right = right * 10 + left % 10;\n        left /= 10;\n    }\n    if(digits % 2 == 1) {\n        left /= 10;\n    }\n    if(left == right) {\n        return num;\n    }\n    if(left < right) {\n        left = num / pow(10, digits/2) + 1;\n        right = 0;\n    } else {\n        right = 0;\n    }\n    for(int i = 0; i < digits/2; i++) {\n        right = right * 10 + left % 10;\n        left /= 10;\n    }\n    return left * pow(10, digits) + right;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmpkjoulfj1: /tmp/tmpkjoulfj1.cpp:41: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    int n = num;\n    int digits = 0;\n    while(n > 0) {\n        n /= 10;\n        digits++;\n    }\n    int mid = digits/2;\n    int i = mid - 1;\n    int j = (digits % 2) ? mid + 1 : mid;\n    bool leftsmaller = false;\n    while(i >= 0 && num/pow(10, i) == num%10) {\n        i--;\n        j++;\n    }\n    if(i < 0 || num/pow(10, i) < num%10) {\n        leftsmaller = true;\n    }\n    while(i >= 0) {\n        num += (num/pow(10, i) - num%10)*pow(10, i);\n        num += (num/pow(10, j) - num%10)*pow(10, j);\n        i--;\n        j++;\n    }\n    if(leftsmaller) {\n        int carry = 1;\n        i = mid - 1;\n        if(digits % 2) {\n            num += pow(10, mid);\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while(i >= 0) {\n            num += (carry*pow(10, i));\n            carry = (num/pow(10, i))/10;\n            num += (carry*pow(10, j));\n            carry = (num/pow(10, j))/10;\n            i--;\n            j++;\n        }\n    }\n    return num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmpz0knro5t: /tmp/tmpz0knro5t.cpp:51: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string str = std::to_string(num);\n    int n = str.length();\n    int mid = n/2;\n    bool leftsmaller = false;\n    int i = mid - 1;\n    int j = (n % 2) ? mid + 1 : mid;\n    while (i >= 0 && str[i] == str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || str[i] < str[j]) {\n        leftsmaller = true;\n    }\n    while (i >= 0) {\n        str[j] = str[i];\n        j++;\n        i--;\n    }\n    if (leftsmaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (n % 2 == 1) {\n            int x = str[mid] - '0';\n            x += carry;\n            carry = x / 10;\n            x %= 10;\n            str[mid] = (char)(x + '0');\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int x = str[i] - '0';\n            x += carry;\n            carry = x / 10;\n            x %= 10;\n            str[i] = (char)(x + '0');\n            str[j++] = str[i--];\n        }\n    }\n    return std::stol(str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmpoola_l93: /tmp/tmpoola_l93.cpp:49: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0)\n    {\n        rev=rev*10+temp%10;\n        temp=temp/10;\n    }\n    if(num==rev)\n    {\n        return num;\n    }\n    else\n    {\n        return rev;\n    }\n    \n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmpqegiwvi1: /tmp/tmpqegiwvi1.cpp:25: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    int n=0;\n    while(temp>0){\n        temp=temp/10;\n        n++;\n    }\n    int mid=n/2;\n    int i=mid-1;\n    int j=(n%2==0)?mid:mid+1;\n    while(i>=0 && num/(long)pow(10,j)==num%10){\n        i--;\n        j++;\n    }\n    bool left_smaller=false;\n    if(i<0 || num/(long)pow(10,j)<num%10){\n        left_smaller=true;\n    }\n    while(i>=0){\n        num+=(long)pow(10,j)*(num/(long)pow(10,j));\n        j++;\n        i--;\n    }\n    if(left_smaller==true){\n        int carry=1;\n        i=mid-1;\n        if(n%2==1){\n            num+=(long)pow(10,mid);\n            i=mid-2;\n        }\n        while(i>=0){\n            num+=(long)pow(10,j)*carry;\n            carry=(int)(num/(long)pow(10,j))/10;\n            j++;\n            i--;\n        }\n    }\n    return num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmpedbxdmsn: /tmp/tmpedbxdmsn.cpp:46: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // TODO: Write - Your - Code\n    long temp = num;\n    int n = 0;\n    while(temp > 0){\n        temp /= 10;\n        n++;\n    }\n    int mid = n/2;\n    int left = mid - 1;\n    int right = (n % 2 == 0) ? mid : mid + 1;\n    while(left >= 0 && num / pow(10, left) == num % 10){\n        left--;\n        right++;\n    }\n    if(left < 0 || num / pow(10, left) < num % 10){\n        left = mid - 1;\n        right = (n % 2 == 0) ? mid : mid + 1;\n        int carry = 1;\n        while(left >= 0){\n            int sum = (num / pow(10, left)) % 10 + carry;\n            carry = sum / 10;\n            num = num - (num / pow(10, left)) % 10 * pow(10, left) + sum % 10 * pow(10, left);\n            left--;\n            right++;\n        }\n    }\n    while(left >= 0){\n        num = num - (num / pow(10, left)) % 10 * pow(10, left) + (num / pow(10, left)) % 10 * pow(10, right);\n        left--;\n        right++;\n    }\n    return num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmpa65nc0x_.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmpa65nc0x_.cpp:24:45: error: invalid operands of types \u2018double\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   24 |             int sum = (num / pow(10, left)) % 10 + carry;\n      |                       ~~~~~~~~~~~~~~~~~~~~~ ^ ~~\n      |                            |                  |\n      |                            double             int\n/tmp/tmpa65nc0x_.cpp:26:47: error: invalid operands of types \u2018double\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   26 |             num = num - (num / pow(10, left)) % 10 * pow(10, left) + sum % 10 * pow(10, left);\n      |                         ~~~~~~~~~~~~~~~~~~~~~ ^ ~~\n      |                              |                  |\n      |                              double             int\n/tmp/tmpa65nc0x_.cpp:32:43: error: invalid operands of types \u2018double\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   32 |         num = num - (num / pow(10, left)) % 10 * pow(10, left) + (num / pow(10, left)) % 10 * pow(10, right);\n      |                     ~~~~~~~~~~~~~~~~~~~~~ ^ ~~\n      |                          |                  |\n      |                          double             int\n/tmp/tmpa65nc0x_.cpp:32:88: error: invalid operands of types \u2018double\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   32 |         num = num - (num / pow(10, left)) % 10 * pow(10, left) + (num / pow(10, left)) % 10 * pow(10, right);\n      |                                                                  ~~~~~~~~~~~~~~~~~~~~~ ^ ~~\n      |                                                                       |                  |\n      |                                                                       double             int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long temp1 = num;\n    long temp2 = rev;\n    while(temp1 % 10 == temp2 % 10) {\n        temp1 /= 10;\n        temp2 /= 10;\n    }\n    if(temp1 < temp2) {\n        return rev;\n    }\n    long temp3 = num;\n    long temp4 = rev;\n    while(temp3 > 0) {\n        temp3 /= 10;\n        temp4 /= 10;\n    }\n    if(temp3 == temp4) {\n        return num;\n    }\n    long temp5 = num;\n    long temp6 = rev;\n    while(temp5 % 10 == temp6 % 10) {\n        temp5 /= 10;\n        temp6 /= 10;\n    }\n    if(temp5 > temp6) {\n        return rev;\n    }\n    return num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmp3z0cawoy: /tmp/tmp3z0cawoy.cpp:45: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string num_str = std::to_string(num);\n    int len = num_str.size();\n    int mid = len / 2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && num_str[i] == num_str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || num_str[i] < num_str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        num_str[j] = num_str[i];\n        i--;\n        j++;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2) {\n            int num = num_str[mid] - '0' + carry;\n            num_str[mid] = (num % 10) + '0';\n            carry = num / 10;\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int num = num_str[i] - '0' + carry;\n            num_str[i] = (num % 10) + '0';\n            num_str[j] = num_str[i];\n            carry = num / 10;\n            i--;\n            j++;\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmpww9v40bh: /tmp/tmpww9v40bh.cpp:47: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long temp1 = num;\n    long temp2 = rev;\n    long i = 0;\n    while(temp1 > 0) {\n        if(temp1%10 != temp2%10) {\n            break;\n        }\n        temp1 /= 10;\n        temp2 /= 10;\n        i++;\n    }\n    long temp3 = num;\n    long temp4 = rev;\n    long j = 0;\n    while(temp3 > 0) {\n        if(temp3%10 != temp4%10) {\n            break;\n        }\n        temp3 /= 10;\n        temp4 /= 10;\n        j++;\n    }\n    long temp5 = num;\n    long temp6 = rev;\n    long k = 0;\n    while(temp5 > 0) {\n        if(temp5%10 != temp6%10) {\n            break;\n        }\n        temp5 /= 10;\n        temp6 /= 10;\n        k++;\n    }\n    long temp7 = num;\n    long temp8 = rev;\n    long l = 0;\n    while(temp7 > 0) {\n        if(temp7%10 != temp8%10) {\n            break;\n        }\n        temp7 /= 10;\n        temp8 /= 10;\n        l++;\n    }\n    long temp9 = num;\n    long temp10 = rev;\n    long m = 0;\n    while(temp9 > 0) {\n        if(temp9%10 != temp10%10) {\n            break;\n        }\n        temp9 /= 10;\n        temp10 /= 10;\n        m++;\n    }\n    long temp11 = num;\n    long temp12 = rev;\n    long n = 0;\n    while(temp11 > 0) {\n        if(temp11%10 != temp12%10) {\n            break;\n\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmpzwa6mg0a.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmpzwa6mg0a.cpp:78:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   78 | int main() {\n      |            ^\n/tmp/tmpzwa6mg0a.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpzwa6mg0a.cpp:73:23: note: to match this \u2018{\u2019\n   73 |     while(temp11 > 0) {\n      |                       ^\n/tmp/tmpzwa6mg0a.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpzwa6mg0a.cpp:4:41: note: to match this \u2018{\u2019\n    4 | long next_smallest_palindrome(long num) {\n      |                                         ^\n/tmp/tmpzwa6mg0a.cpp:83:1: warning: control reaches end of non-void function [-Wreturn-type]\n   83 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0){\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev == num)\n        return num;\n    else if(rev > num){\n        return rev;\n    }\n    else{\n        long temp = num;\n        long rev = 0;\n        while(temp > 0){\n            rev = rev*10 + temp%10;\n            temp /= 10;\n        }\n        if(rev == num)\n            return num;\n        else if(rev > num){\n            return rev;\n        }\n        else{\n            long temp = num;\n            long rev = 0;\n            while(temp > 0){\n                rev = rev*10 + temp%10;\n                temp /= 10;\n            }\n            if(rev == num)\n                return num;\n            else if(rev > num){\n                return rev;\n            }\n            else{\n                long temp = num;\n                long rev = 0;\n                while(temp > 0){\n                    rev = rev*10 + temp%10;\n                    temp /= 10;\n                }\n                if(rev == num)\n                    return num;\n                else if(rev > num){\n                    return rev;\n                }\n                else{\n                    long temp = num;\n                    long rev = 0;\n                    while(temp > 0){\n                        rev = rev*10 + temp%10;\n                        temp /= 10;\n                    }\n                    if(rev == num)\n                        return num;\n                    else if(rev > num){\n                        return rev;\n                    }\n                    else{\n                        long temp = num;\n                        long rev = 0;\n                        while(temp > 0){\n                            rev = rev*10 + temp%10;\n                            temp /= 10;\n                        }\n                        if(rev == num)\n                            return num;\n                        else if(rev > num){\n                            return rev;\n                        }\n                        else{\n                            long temp = num;\n                            long rev = 0;\n                            while(temp > 0){\n                                rev = rev*10\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmptw0ffrkd.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmptw0ffrkd.cpp:81:45: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   81 |                                 rev = rev*10\n      |                                             ^\n      |                                             ;\n   82 | }\n      | ~                                            \n/tmp/tmptw0ffrkd.cpp:83:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   83 | int main() {\n      |            ^\n/tmp/tmptw0ffrkd.cpp:88:1: error: expected \u2018}\u2019 at end of input\n   88 | }\n      | ^\n/tmp/tmptw0ffrkd.cpp:77:29: note: to match this \u2018{\u2019\n   77 |                         else{\n      |                             ^\n/tmp/tmptw0ffrkd.cpp:88:1: error: expected \u2018}\u2019 at end of input\n   88 | }\n      | ^\n/tmp/tmptw0ffrkd.cpp:65:25: note: to match this \u2018{\u2019\n   65 |                     else{\n      |                         ^\n/tmp/tmptw0ffrkd.cpp:88:1: error: expected \u2018}\u2019 at end of input\n   88 | }\n      | ^\n/tmp/tmptw0ffrkd.cpp:53:21: note: to match this \u2018{\u2019\n   53 |                 else{\n      |                     ^\n/tmp/tmptw0ffrkd.cpp:88:1: error: expected \u2018}\u2019 at end of input\n   88 | }\n      | ^\n/tmp/tmptw0ffrkd.cpp:41:17: note: to match this \u2018{\u2019\n   41 |             else{\n      |                 ^\n/tmp/tmptw0ffrkd.cpp:88:1: error: expected \u2018}\u2019 at end of input\n   88 | }\n      | ^\n/tmp/tmptw0ffrkd.cpp:29:13: note: to match this \u2018{\u2019\n   29 |         else{\n      |             ^\n/tmp/tmptw0ffrkd.cpp:88:1: error: expected \u2018}\u2019 at end of input\n   88 | }\n      | ^\n/tmp/tmptw0ffrkd.cpp:17:9: note: to match this \u2018{\u2019\n   17 |     else{\n      |         ^\n/tmp/tmptw0ffrkd.cpp:88:1: error: expected \u2018}\u2019 at end of input\n   88 | }\n      | ^\n/tmp/tmptw0ffrkd.cpp:4:41: note: to match this \u2018{\u2019\n    4 | long next_smallest_palindrome(long num) {\n      |                                         ^\n/tmp/tmptw0ffrkd.cpp:88:1: warning: control reaches end of non-void function [-Wreturn-type]\n   88 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // TODO: Write - Your - Code\n    long temp = num;\n    int n = 0;\n    while(temp){\n        n++;\n        temp /= 10;\n    }\n    temp = num;\n    long first_half = 0;\n    for(int i = 0; i < n/2; i++){\n        first_half = first_half * 10 + temp % 10;\n        temp /= 10;\n    }\n    long second_half = 0;\n    for(int i = 0; i < n/2; i++){\n        second_half = second_half * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(first_half > second_half){\n        return num;\n    }\n    else{\n        if(n % 2 == 0){\n            return first_half * pow(10, n/2) + first_half;\n        }\n        else{\n            return first_half * pow(10, n/2 + 1) + first_half;\n        }\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmpb5hi3kmx: /tmp/tmpb5hi3kmx.cpp:37: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n    long a,b,c,d,e,f,g,h;\n    long arr[100000];\n    long arr1[100000];\n    long arr2[100000];\n    long arr3[100000];\n    long arr4[100000];\n    long arr5[100000];\n    long arr6[100000];\n    long arr7[100000];\n    long arr8[100000];\n    long arr9[100000];\n    long arr10[100000];\n    long arr11[100000];\n    long arr12[100000];\n    long arr13[100000];\n    long arr14[100000];\n    long arr15[100000];\n    long arr16[100000];\n    long arr17[100000];\n    long arr18[100000];\n    long arr19[100000];\n    long arr20[100000];\n    long arr21[100000];\n    long arr22[100000];\n    long arr23[100000];\n    long arr24[100000];\n    long arr25[100000];\n    long arr26[100000];\n    long arr27[100000];\n    long arr28[100000];\n    long arr29[100000];\n    long arr30[100000];\n    long arr31[100000];\n    long arr32[100000];\n    long arr33[100000];\n    long arr34[100000];\n    long arr35[100000];\n    long arr36[100000];\n    long arr37[100000];\n    long arr38[100000];\n    long arr39[100000];\n    long arr40[100000];\n    long arr41[100000];\n    long arr42[100000];\n    long arr43[100000];\n    long arr44[100000];\n    long arr45[100000];\n    long arr46[100000];\n    long arr47[100000];\n    long arr48[100000];\n    long arr49[100\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "/tmp/tmpjw_6c8vn.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmpjw_6c8vn.cpp:57:19: error: expected \u2018]\u2019 before \u2018}\u2019 token\n   57 |     long arr49[100\n      |                   ^\n      |                   ]\n   58 | }\n      | ~                  \n/tmp/tmpjw_6c8vn.cpp:58:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   58 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long temp1 = num;\n    long temp2 = rev;\n    long temp3 = num;\n    long temp4 = rev;\n    long count = 0;\n    while(temp1 != 0) {\n        temp1 /= 10;\n        count++;\n    }\n    long div = pow(10, count / 2);\n    long div1 = pow(10, count / 2 + 1);\n    long div2 = pow(10, count / 2 - 1);\n    long div3 = pow(10, count / 2);\n    long div4 = pow(10, count / 2 + 1);\n    long div5 = pow(10, count / 2 - 1);\n    long div6 = pow(10, count / 2);\n    long div7 = pow(10, count / 2 + 1);\n    long div8 = pow(10, count / 2 - 1);\n    long div9 = pow(10, count / 2);\n    long div10 = pow(10, count / 2 + 1);\n    long div11 = pow(10, count / 2 - 1);\n    long div12 = pow(10, count / 2);\n    long div13 = pow(10, count / 2 + 1);\n    long div14 = pow(10, count / 2 - 1);\n    long div15 = pow(10, count / 2);\n    long div16 = pow(10, count / 2 + 1);\n    long div17 = pow(10, count / 2 - 1);\n    long div18 = pow(10, count / 2);\n    long div19 = pow(10, count / 2 + 1);\n    long div20 = pow(10, count / 2 - 1);\n    long div21 = pow(10, count / 2);\n    long div22 = pow(10, count / 2 + 1);\n    long div23 = pow(10, count / 2 - 1);\n    long div24 = pow(10, count /\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "/tmp/tmpbw9lw107.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmpbw9lw107.cpp:49:1: error: expected primary-expression before \u2018}\u2019 token\n   49 | }\n      | ^\n/tmp/tmpbw9lw107.cpp:49:1: warning: control reaches end of non-void function [-Wreturn-type]\n   49 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    if(rev > num) {\n        return rev;\n    }\n    long n = num;\n    int digits = 0;\n    while(n > 0) {\n        digits++;\n        n /= 10;\n    }\n    long divisor = pow(10, digits / 2);\n    long first_half = num / divisor;\n    long second_half = num % divisor;\n    long next_palindrome = first_half * divisor + first_half;\n    if(next_palindrome > num) {\n        return next_palindrome;\n    }\n    if(digits % 2 == 1) {\n        first_half = first_half / 10;\n    }\n    first_half++;\n    next_palindrome = first_half * divisor + first_half;\n    next_palindrome = next_palindrome / divisor;\n    return next_palindrome;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "tmpmfyf_1yx: /tmp/tmpmfyf_1yx.cpp:40: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    if (num < 0) {\n        return -1;\n    }\n    if (num < 10) {\n        return num;\n    }\n    std::string num_str = std::to_string(num);\n    int len = num_str.length();\n    int mid = len / 2;\n    bool is_even = (len % 2 == 0);\n    int left = mid - 1;\n    int right = (is_even) ? mid : mid + 1;\n    bool left_smaller = false;\n    while (left >= 0 && num_str[left] == num_str[right]) {\n        left--;\n        right++;\n    }\n    if (left < 0 || num_str[left] < num_str[right]) {\n        left_smaller = true;\n    }\n    while (left >= 0) {\n        num_str[right++] = num_str[left--];\n    }\n    if (left_smaller) {\n        int carry = 1;\n        if (is_even) {\n            int mid_left = mid - 1;\n            int mid_right = mid;\n            while (mid_left >= 0) {\n                int sum = (num_str[mid_left] - '0') + carry;\n                carry = sum / 10;\n                sum = sum % 10;\n                num_str[mid_left] = sum + '0';\n                num_str[mid_right] = sum + '0';\n                mid_left--;\n                mid_right++;\n            }\n        } else {\n            int mid_digit = mid;\n            while (mid_digit >= 0) {\n                int sum = (num_str[mid_digit] - '0') + carry;\n                carry = sum / 10;\n                sum = sum % 10;\n                num_str[mid_digit] = sum + '0';\n                num_str[mid_digit] = sum + '0';\n                mid_digit--;\n            }\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "tmpzla9685y: /tmp/tmpzla9685y.cpp:58: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    if(rev < num) {\n        return rev;\n    }\n    long num_digits = 0;\n    temp = num;\n    while(temp != 0) {\n        num_digits++;\n        temp /= 10;\n    }\n    long left = num_digits/2;\n    long right = (num_digits%2 == 0) ? left : left+1;\n    long left_num = num/(long)pow(10, right);\n    long right_num = num%(long)pow(10, right);\n    long left_rev = 0;\n    temp = left_num;\n    while(temp != 0) {\n        left_rev = left_rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(left_rev > right_num) {\n        return left_num*pow(10, right) + left_rev;\n    }\n    else {\n        left_num++;\n        left_rev = 0;\n        temp = left_num;\n        while(temp != 0) {\n            left_rev = left_rev*10 + temp%10;\n            temp /= 10;\n        }\n        return left_num*pow(10, right) + left_rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "tmpcccdg0co: /tmp/tmpcccdg0co.cpp:49: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    int len=0;\n    while(temp>0){\n        temp/=10;\n        len++;\n    }\n    int mid=len/2;\n    int i=mid-1;\n    int j=len%2==0?mid:mid+1;\n    while(i>=0 && num/(int)pow(10,i)==num%10){\n        i--;\n        j++;\n    }\n    if(i<0){\n        return num;\n    }\n    long left=num/(long)pow(10,j);\n    long right=num%(long)pow(10,i+1);\n    long inc=left+1;\n    long dec=left-1;\n    long inc_pal=inc*(long)pow(10,j)+reverse(inc,j);\n    long dec_pal=dec*(long)pow(10,j)+reverse(dec,j);\n    if(abs(num-inc_pal)<abs(num-dec_pal)){\n        return inc_pal;\n    }\n    else{\n        return dec_pal;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "/tmp/tmpdk08jrly.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmpdk08jrly.cpp:26:38: error: \u2018reverse\u2019 was not declared in this scope; did you mean \u2018std::reverse\u2019?\n   26 |     long inc_pal=inc*(long)pow(10,j)+reverse(inc,j);\n      |                                      ^~~~~~~\n      |                                      std::reverse\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpdk08jrly.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:249:1: note: \u2018std::reverse\u2019 declared here\n  249 | reverse(_ExecutionPolicy&& __exec, _BidirectionalIterator __first, _BidirectionalIterator __last);\n      | ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    std::string str = std::to_string(num);\n    int n = str.length();\n    int mid = n/2;\n    bool leftsmaller = false;\n    int i = mid - 1;\n    int j = (n%2)? mid + 1 : mid;\n    while(i >= 0 && str[i] == str[j]){\n        i--;\n        j++;\n    }\n    if(i < 0 || str[i] < str[j]){\n        leftsmaller = true;\n    }\n    while(i >= 0){\n        str[j] = str[i];\n        i--;\n        j++;\n    }\n    if(leftsmaller){\n        int carry = 1;\n        i = mid - 1;\n        if(n%2 == 1){\n            int x = str[mid] - '0';\n            x += carry;\n            carry = x/10;\n            x = x%10;\n            str[mid] = (char)(x + '0');\n            j = mid + 1;\n        }else{\n            j = mid;\n        }\n        while(i >= 0){\n            int x = str[i] - '0';\n            x += carry;\n            carry = x/10;\n            x = x%10;\n            str[i] = (char)(x + '0');\n            str[j] = str[i];\n            i--;\n            j++;\n        }\n    }\n    return std::stol(str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "tmpz12awd7k: /tmp/tmpz12awd7k.cpp:52: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    if (num < 0) return -1;\n    if (num < 10) return num;\n    std::string s = std::to_string(num);\n    int len = s.length();\n    int mid = len / 2;\n    bool is_odd = len % 2;\n    int i = mid - 1;\n    int j = (is_odd) ? mid + 1 : mid;\n    bool left_smaller = false;\n    while (i >= 0 && s[i] == s[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || s[i] < s[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        s[j] = s[i];\n        i--;\n        j++;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (is_odd) {\n            int num = s[mid] - '0' + carry;\n            carry = num / 10;\n            s[mid] = (num % 10) + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int num = s[i] - '0' + carry;\n            carry = num / 10;\n            s[i] = (num % 10) + '0';\n            s[j++] = s[i--];\n        }\n    }\n    return std::stol(s);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "tmpoon4hlzx: /tmp/tmpoon4hlzx.cpp:48: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0)\n    {\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(rev==num)\n    {\n        return num;\n    }\n    else\n    {\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmpzbn_gw3b: /tmp/tmpzbn_gw3b.cpp:24: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(num==rev){\n        num++;\n    }\n    while(num!=rev){\n        num++;\n        temp=num;\n        rev=0;\n        while(temp!=0){\n            rev=rev*10+temp%10;\n            temp/=10;\n        }\n    }\n    return num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Implement this placeholder.\n    return 0;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "tmpzotmbc7t: /tmp/tmpzotmbc7t.cpp:10: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0){\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev == num)\n        return num;\n    else{\n        long temp = num;\n        long rev = 0;\n        while(temp > 0){\n            rev = rev*10 + temp%10;\n            temp /= 10;\n        }\n        if(rev > num){\n            return rev;\n        }\n        else{\n            temp = num;\n            rev = 0;\n            while(temp > 0){\n                rev = rev*10 + temp%10;\n                temp /= 10;\n            }\n            return rev;\n        }\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "tmp3vc4f7bd: /tmp/tmp3vc4f7bd.cpp:37: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp>0)\n    {\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(rev==num)\n    {\n        return num;\n    }\n    else\n    {\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmpk0nah5_k: /tmp/tmpk0nah5_k.cpp:24: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // your code here\n    long temp = num;\n    int digits = 0;\n    while(temp > 0) {\n        temp = temp / 10;\n        digits++;\n    }\n    if(digits == 1) {\n        if(num == 9) {\n            return 11;\n        }\n        return num + 1;\n    }\n    int mid = digits / 2;\n    long left = num / pow(10, mid);\n    long right = num % (long)pow(10, mid);\n    long left_copy = left;\n    long right_copy = right;\n    long reverse_right = 0;\n    while(right_copy > 0) {\n        reverse_right = reverse_right * 10 + right_copy % 10;\n        right_copy = right_copy / 10;\n    }\n    long new_num = left * pow(10, mid) + reverse_right;\n    if(new_num > num) {\n        return new_num;\n    }\n    if(left == pow(10, mid) - 1) {\n        return pow(10, digits) + 1;\n    }\n    left++;\n    right_copy = right;\n    reverse_right = 0;\n    while(right_copy > 0) {\n        reverse_right = reverse_right * 10 + right_copy % 10;\n        right_copy = right_copy / 10;\n    }\n    new_num = left * pow(10, mid) + reverse_right;\n    return new_num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "tmpnse96di8: /tmp/tmpnse96di8.cpp:48: int main(): Assertion `candidate((1221)) == (1331)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    int n = num;\n    int digits = 0;\n    while(n > 0) {\n        n /= 10;\n        digits++;\n    }\n    int mid = digits/2;\n    int left = mid-1;\n    int right = digits%2 == 0 ? mid : mid+1;\n    bool left_smaller = false;\n    while(left >= 0 && num/(int)pow(10, left) == num%10) {\n        left--;\n        right++;\n    }\n    if(left < 0 || num/(int)pow(10, left) < num%10) {\n        left_smaller = true;\n    }\n    while(left >= 0) {\n        num += (num/(int)pow(10, left))*(int)pow(10, right);\n        left--;\n        right++;\n    }\n    if(left_smaller) {\n        int carry = 1;\n        left = mid-1;\n        if(digits%2 == 1) {\n            num += (num/(int)pow(10, mid))*(int)pow(10, mid);\n            carry = (num/(int)pow(10, mid))/10;\n            left = mid-2;\n        }\n        while(left >= 0) {\n            num += carry*(int)pow(10, left);\n            carry = (num/(int)pow(10, left))/10;\n            left--;\n        }\n    }\n    return num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "tmpkkdjzt7j: /tmp/tmpkkdjzt7j.cpp:46: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp>0){\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    if(rev == num)\n        return num;\n    else if(rev > num)\n        return rev;\n    else{\n        long temp = num;\n        long rev = 0;\n        while(temp>0){\n            rev = rev*10 + temp%10;\n            temp = temp/10;\n        }\n        if(rev == num)\n            return num;\n        else if(rev > num)\n            return rev;\n        else{\n            long temp = num;\n            long rev = 0;\n            while(temp>0){\n                rev = rev*10 + temp%10;\n                temp = temp/10;\n            }\n            if(rev == num)\n                return num;\n            else if(rev > num)\n                return rev;\n            else{\n                long temp = num;\n                long rev = 0;\n                while(temp>0){\n                    rev = rev*10 + temp%10;\n                    temp = temp/10;\n                }\n                if(rev == num)\n                    return num;\n                else if(rev > num)\n                    return rev;\n                else{\n                    long temp = num;\n                    long rev = 0;\n                    while(temp>0){\n                        rev = rev*10 + temp%10;\n                        temp = temp/10;\n                    }\n                    if(rev == num)\n                        return num;\n                    else if(rev > num)\n                        return rev;\n                    else{\n                        long temp = num;\n                        long rev = 0;\n                        while(temp>0){\n                            rev = rev*10 + temp%10;\n                            temp = temp/10;\n                        }\n                        if(rev == num)\n                            return num;\n                        else if(rev > num)\n                            return rev;\n                        else{\n                            long temp = num;\n                            long rev = 0;\n                            while(temp>0){\n                                rev = rev*10 + temp%10;\n                                temp = temp/\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "/tmp/tmpwfhqw8_1.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmpwfhqw8_1.cpp:77:1: error: expected primary-expression before \u2018}\u2019 token\n   77 | }\n      | ^\n/tmp/tmpwfhqw8_1.cpp:78:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   78 | int main() {\n      |            ^\n/tmp/tmpwfhqw8_1.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpwfhqw8_1.cpp:71:29: note: to match this \u2018{\u2019\n   71 |                         else{\n      |                             ^\n/tmp/tmpwfhqw8_1.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpwfhqw8_1.cpp:60:25: note: to match this \u2018{\u2019\n   60 |                     else{\n      |                         ^\n/tmp/tmpwfhqw8_1.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpwfhqw8_1.cpp:49:21: note: to match this \u2018{\u2019\n   49 |                 else{\n      |                     ^\n/tmp/tmpwfhqw8_1.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpwfhqw8_1.cpp:38:17: note: to match this \u2018{\u2019\n   38 |             else{\n      |                 ^\n/tmp/tmpwfhqw8_1.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpwfhqw8_1.cpp:27:13: note: to match this \u2018{\u2019\n   27 |         else{\n      |             ^\n/tmp/tmpwfhqw8_1.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpwfhqw8_1.cpp:16:9: note: to match this \u2018{\u2019\n   16 |     else{\n      |         ^\n/tmp/tmpwfhqw8_1.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpwfhqw8_1.cpp:4:41: note: to match this \u2018{\u2019\n    4 | long next_smallest_palindrome(long num) {\n      |                                         ^\n/tmp/tmpwfhqw8_1.cpp:83:1: warning: control reaches end of non-void function [-Wreturn-type]\n   83 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n  long temp = num;\n  long digits = 0;\n  while (temp > 0) {\n    digits++;\n    temp /= 10;\n  }\n  long half_digits = digits / 2;\n  long left_half = num / pow(10, half_digits);\n  long right_half = num % (long)pow(10, half_digits);\n  long left_half_copy = left_half;\n  long right_half_copy = right_half;\n  long left_half_reverse = 0;\n  long right_half_reverse = 0;\n  while (left_half_copy > 0) {\n    left_half_reverse = left_half_reverse * 10 + left_half_copy % 10;\n    left_half_copy /= 10;\n  }\n  while (right_half_copy > 0) {\n    right_half_reverse = right_half_reverse * 10 + right_half_copy % 10;\n    right_half_copy /= 10;\n  }\n  if (left_half == left_half_reverse && right_half == right_half_reverse) {\n    return num;\n  }\n  if (left_half < left_half_reverse) {\n    left_half++;\n    right_half = left_half_reverse;\n  } else {\n    right_half = left_half_reverse;\n  }\n  long result = left_half * pow(10, half_digits) + right_half;\n  return result;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "tmpwvx092aj: /tmp/tmpwvx092aj.cpp:40: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Implement this placeholder.\n    return 0;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "tmpzotmbc7t: /tmp/tmpzotmbc7t.cpp:10: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n  std::string num_str = std::to_string(num);\n  int len = num_str.length();\n  int mid = len/2;\n  bool left_smaller = false;\n  int i = mid - 1;\n  int j = (len % 2)? mid + 1 : mid;\n  while(i >= 0 && num_str[i] == num_str[j]) {\n    i--;\n    j++;\n  }\n  if(i < 0 || num_str[i] < num_str[j]) {\n    left_smaller = true;\n  }\n  while(i >= 0) {\n    num_str[j] = num_str[i];\n    j++;\n    i--;\n  }\n  if(left_smaller) {\n    int carry = 1;\n    i = mid - 1;\n    if(len % 2 == 1) {\n      int num = num_str[mid] - '0';\n      num = num + carry;\n      carry = num / 10;\n      num = num % 10;\n      num_str[mid] = num + '0';\n      j = mid + 1;\n    } else {\n      j = mid;\n    }\n    while(i >= 0) {\n      int num = num_str[i] - '0';\n      num = num + carry;\n      carry = num / 10;\n      num = num % 10;\n      num_str[i] = num + '0';\n      num_str[j++] = num_str[i--];\n    }\n  }\n  return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "tmparzj6ewz: /tmp/tmparzj6ewz.cpp:49: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long temp1 = num;\n    long temp2 = rev;\n    while(temp1 > 0) {\n        if(temp1 % 10 != temp2 % 10) {\n            break;\n        }\n        temp1 /= 10;\n        temp2 /= 10;\n    }\n    if(temp1 == 0) {\n        return num;\n    }\n    long temp3 = num;\n    long temp4 = rev;\n    long temp5 = 0;\n    while(temp3 > 0) {\n        if(temp3 % 10 != temp4 % 10) {\n            temp5 = temp3 % 10;\n            break;\n        }\n        temp3 /= 10;\n        temp4 /= 10;\n    }\n    long temp6 = num;\n    long temp7 = rev;\n    long temp8 = 0;\n    while(temp6 > 0) {\n        if(temp6 % 10 != temp7 % 10) {\n            temp8 = temp6 % 10;\n            break;\n        }\n        temp6 /= 10;\n        temp7 /= 10;\n    }\n    if(temp5 < temp8) {\n        return num;\n    }\n    long temp9 = num;\n    long temp10 = rev;\n    long temp11 = 0;\n    while(temp9 > 0) {\n        if(temp9 % 10 != temp10 % 10) {\n            temp11 = temp9 % 10;\n            break;\n        }\n        temp9 /= 10;\n        temp10 /= 10;\n    }\n    long temp12 = num;\n    long temp13 = rev;\n    long temp14 = 0;\n    while(temp12 > 0) {\n        if(temp12 % 10 != temp13 % 10) {\n            temp14 = temp12 % 10;\n            break;\n        }\n        temp12 /= 10;\n        temp13 /= 10;\n   \n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "/tmp/tmp7n67tw9s.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmp7n67tw9s.cpp:75:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   75 | int main() {\n      |            ^\n/tmp/tmp7n67tw9s.cpp:80:1: error: expected \u2018}\u2019 at end of input\n   80 | }\n      | ^\n/tmp/tmp7n67tw9s.cpp:4:41: note: to match this \u2018{\u2019\n    4 | long next_smallest_palindrome(long num) {\n      |                                         ^\n/tmp/tmp7n67tw9s.cpp:80:1: warning: control reaches end of non-void function [-Wreturn-type]\n   80 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long num_copy = num;\n    long rev = 0;\n    while(num_copy) {\n        rev = rev*10 + num_copy%10;\n        num_copy /= 10;\n    }\n    if(rev > num) {\n        return rev;\n    }\n    long num_copy2 = num;\n    long rev2 = 0;\n    while(num_copy2) {\n        rev2 = rev2*10 + num_copy2%10;\n        num_copy2 /= 10;\n    }\n    if(rev2 > num) {\n        return rev2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "tmpcoce9dvo: /tmp/tmpcoce9dvo.cpp:28: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    std::string s = std::to_string(num);\n    int n = s.size();\n    int mid = n/2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (n % 2)? mid + 1 : mid;\n    while (i >= 0 && s[i] == s[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || s[i] < s[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        s[j] = s[i];\n        i--;\n        j++;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (n % 2 == 1) {\n            int x = s[mid] - '0';\n            x += carry;\n            carry = x / 10;\n            s[mid] = (x % 10) + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int x = s[i] - '0';\n            x += carry;\n            carry = x / 10;\n            s[i] = (x % 10) + '0';\n            s[j++] = s[i--];\n        }\n    }\n    return std::stol(s);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "tmpzn7_nt15: /tmp/tmpzn7_nt15.cpp:48: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // TODO: Write your code here\n    int n = num;\n    int digits = 0;\n    while(n) {\n        digits++;\n        n = n/10;\n    }\n    int mid = digits/2;\n    int left = mid-1;\n    int right = digits%2 == 0 ? mid : mid+1;\n    bool left_smaller = false;\n    while(left >= 0 && num/pow(10, left) == num%10) {\n        left--;\n        right++;\n    }\n    if(left < 0 || num/pow(10, left) < num%10) {\n        left_smaller = true;\n    }\n    while(left >= 0) {\n        num = num + (num/pow(10, left) - num%10)*pow(10, right);\n        num = num - (num/pow(10, right) - num%10)*pow(10, left);\n        left--;\n        right++;\n    }\n    if(left_smaller) {\n        int carry = 1;\n        left = mid-1;\n        if(digits%2 == 1) {\n            num = num + carry*pow(10, mid);\n            carry = (num/pow(10, mid))/10;\n            num = num - (num/pow(10, mid))%10*pow(10, mid);\n        }\n        right = digits%2 == 0 ? mid : mid+1;\n        while(left >= 0) {\n            num = num + carry*pow(10, left);\n            carry = (num/pow(10, left))/10;\n            num = num - (num/pow(10, left))%10*pow(10, left);\n            num = num + carry*pow(10, right);\n            carry = (num/pow(10, right))/10;\n            num = num - (num/pow(10, right))%10*pow(10, right);\n            left--;\n            right++;\n        }\n    }\n    return num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "/tmp/tmppj_hbacb.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmppj_hbacb.cpp:35:43: error: invalid operands of types \u2018double\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   35 |             num = num - (num/pow(10, mid))%10*pow(10, mid);\n      |                         ~~~~~~~~~~~~~~~~~~^~~\n      |                             |              |\n      |                             double         int\n/tmp/tmppj_hbacb.cpp:41:44: error: invalid operands of types \u2018double\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   41 |             num = num - (num/pow(10, left))%10*pow(10, left);\n      |                         ~~~~~~~~~~~~~~~~~~~^~~\n      |                             |               |\n      |                             double          int\n/tmp/tmppj_hbacb.cpp:44:45: error: invalid operands of types \u2018double\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   44 |             num = num - (num/pow(10, right))%10*pow(10, right);\n      |                         ~~~~~~~~~~~~~~~~~~~~^~~\n      |                             |                |\n      |                             double           int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(rev==num){\n        return num;\n    }\n    else{\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "tmp73vubx5u: /tmp/tmp73vubx5u.cpp:21: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0){\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(num == rev)\n        return num;\n    else{\n        num++;\n        temp = num;\n        rev = 0;\n        while(temp > 0){\n            rev = rev*10 + temp%10;\n            temp /= 10;\n        }\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "tmpp20a2r_4: /tmp/tmpp20a2r_4.cpp:27: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    int n = num;\n    int digits = 0;\n    while(n>0)\n    {\n        digits++;\n        n/=10;\n    }\n    int mid = digits/2;\n    int i = mid-1;\n    int j = (digits%2)?mid+1:mid;\n    bool leftsmaller = false;\n    while(i>=0 && num/pow(10,i)==num%10)\n    {\n        i--;\n        j++;\n    }\n    if(i<0 || num/pow(10,i)<num%10)\n        leftsmaller = true;\n    while(i>=0)\n    {\n        num += (pow(10,j)*(num/pow(10,i)));\n        j++;\n        i--;\n    }\n    if(leftsmaller)\n    {\n        int carry = 1;\n        i = mid-1;\n        if(digits%2)\n        {\n            num += pow(10,mid);\n            j = mid+1;\n        }\n        else\n        {\n            j = mid;\n        }\n        while(i>=0)\n        {\n            num += (carry*pow(10,i));\n            carry = (int)(num/pow(10,j));\n            num %= (int)pow(10,j);\n            i--;\n            j++;\n        }\n    }\n    return num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "tmpum26x3bk: /tmp/tmpum26x3bk.cpp:56: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string num_str = std::to_string(num);\n    std::string num_str_rev = num_str;\n    std::reverse(num_str_rev.begin(), num_str_rev.end());\n    if (num_str == num_str_rev) {\n        return num;\n    }\n    int i = 0;\n    int j = num_str.size() - 1;\n    while (i < j) {\n        if (num_str[i] != num_str[j]) {\n            break;\n        }\n        i++;\n        j--;\n    }\n    if (i >= j) {\n        return num;\n    }\n    int k = i;\n    int l = j;\n    while (k < l) {\n        num_str[l] = num_str[k];\n        k++;\n        l--;\n    }\n    long num_rev = std::stol(num_str);\n    if (num_rev > num) {\n        return num_rev;\n    }\n    int carry = 1;\n    k = i;\n    l = j;\n    while (k >= 0) {\n        int sum = num_str[k] - '0' + carry;\n        carry = sum / 10;\n        num_str[k] = (sum % 10) + '0';\n        num_str[l] = num_str[k];\n        k--;\n        l++;\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "tmpwvi51_mg: /tmp/tmpwvi51_mg.cpp:49: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0){\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev == num)\n        return num;\n    else{\n        while(rev < num){\n            num++;\n            temp = num;\n            rev = 0;\n            while(temp > 0){\n                rev = rev*10 + temp%10;\n                temp /= 10;\n            }\n        }\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "tmpq426u5d2: /tmp/tmpq426u5d2.cpp:29: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n  std::string str = std::to_string(num);\n  std::string str_copy = str;\n  std::reverse(str_copy.begin(), str_copy.end());\n  if (str == str_copy) {\n    return num;\n  }\n  int len = str.length();\n  int mid = len / 2;\n  int i = mid - 1;\n  int j = (len % 2) ? mid + 1 : mid;\n  while (i >= 0 && str[i] == str[j]) {\n    i--;\n    j++;\n  }\n  bool left_smaller = false;\n  if (i < 0 || str[i] < str[j]) {\n    left_smaller = true;\n  }\n  while (i >= 0) {\n    str[j] = str[i];\n    j++;\n    i--;\n  }\n  if (left_smaller) {\n    int carry = 1;\n    i = mid - 1;\n    if (len % 2 == 1) {\n      int num = str[mid] - '0';\n      num += carry;\n      carry = num / 10;\n      num = num % 10;\n      str[mid] = num + '0';\n      j = mid + 1;\n    } else {\n      j = mid;\n    }\n    while (i >= 0) {\n      int num = str[i] - '0';\n      num += carry;\n      carry = num / 10;\n      num = num % 10;\n      str[i] = num + '0';\n      str[j] = str[i];\n      i--;\n      j++;\n    }\n  }\n  return std::stol(str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123161,
      "stdout": "",
      "stderr": "tmpy0q_bt9u: /tmp/tmpy0q_bt9u.cpp:56: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string s = std::to_string(num);\n    int n = s.size();\n    int mid = n/2;\n    bool leftSmaller = false;\n    int i = mid - 1;\n    int j = (n%2)? mid + 1 : mid;\n    while(i >= 0 && s[i] == s[j]) {\n        i--;\n        j++;\n    }\n    if(i < 0 || s[i] < s[j]) {\n        leftSmaller = true;\n    }\n    while(i >= 0) {\n        s[j] = s[i];\n        j++;\n        i--;\n    }\n    if(leftSmaller) {\n        int carry = 1;\n        i = mid - 1;\n        if(n%2 == 1) {\n            int x = s[mid] - '0';\n            x += carry;\n            carry = x/10;\n            s[mid] = (x%10) + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while(i >= 0) {\n            int x = s[i] - '0';\n            x += carry;\n            carry = x/10;\n            s[i] = (x%10) + '0';\n            s[j++] = s[i--];\n        }\n    }\n    return std::stol(s);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "tmp7d8dv1bp: /tmp/tmp7d8dv1bp.cpp:47: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    int n = num;\n    int len = 0;\n    while(n) {\n        len++;\n        n = n/10;\n    }\n    int mid = len/2;\n    int start = mid - 1;\n    int end = (len % 2) ? mid + 1 : mid;\n    while(start >= 0 && (num / (int)pow(10, start)) % 10 == (num / (int)pow(10, end)) % 10) {\n        start--;\n        end++;\n    }\n    bool left_smaller = false;\n    if(start < 0 || (num / (int)pow(10, start)) % 10 < (num / (int)pow(10, end)) % 10) {\n        left_smaller = true;\n    }\n    while(start >= 0) {\n        num = num - (num / (int)pow(10, end)) % 10 * (int)pow(10, end);\n        num = num + (num / (int)pow(10, start)) % 10 * (int)pow(10, end);\n        end++;\n        start--;\n    }\n    if(left_smaller) {\n        int carry = 1;\n        start = mid - 1;\n        if(len % 2 == 1) {\n            num = num + (num / (int)pow(10, mid)) % 10 * (int)pow(10, mid);\n            carry = (num / (int)pow(10, mid)) % 10 / 9;\n            num = num - (num / (int)pow(10, mid)) % 10 * (int)pow(10, mid);\n            num = num + carry * (int)pow(10, mid);\n            start--;\n        }\n        while(start >= 0) {\n            num = num + (num / (int)pow(10, start)) % 10 * (int)pow(10, start + 1);\n            carry = (num / (int)pow(10, start)) % 10 / 9;\n            num = num - (num / (int)pow(10, start)) %\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "/tmp/tmpcm9rkgxr.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmpcm9rkgxr.cpp:43:1: error: expected primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpcm9rkgxr.cpp:44:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   44 | int main() {\n      |            ^\n/tmp/tmpcm9rkgxr.cpp:49:1: error: expected \u2018}\u2019 at end of input\n   49 | }\n      | ^\n/tmp/tmpcm9rkgxr.cpp:29:22: note: to match this \u2018{\u2019\n   29 |     if(left_smaller) {\n      |                      ^\n/tmp/tmpcm9rkgxr.cpp:49:1: error: expected \u2018}\u2019 at end of input\n   49 | }\n      | ^\n/tmp/tmpcm9rkgxr.cpp:4:41: note: to match this \u2018{\u2019\n    4 | long next_smallest_palindrome(long num) {\n      |                                         ^\n/tmp/tmpcm9rkgxr.cpp:49:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   49 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long n = num;\n    int digits = 0;\n    while(n) {\n        n /= 10;\n        digits++;\n    }\n    // cout << digits << endl;\n    long left = num;\n    long right = 0;\n    for(int i = 0; i < digits / 2; i++) {\n        right = right * 10 + left % 10;\n        left /= 10;\n    }\n    if(digits % 2)\n        left /= 10;\n    if(left == right) {\n        left = num;\n        right = 0;\n        for(int i = 0; i < digits / 2; i++) {\n            right = right * 10 + left % 10;\n            left /= 10;\n        }\n        if(digits % 2)\n            left /= 10;\n        left++;\n        right = 0;\n        for(int i = 0; i < digits / 2; i++) {\n            right = right * 10 + left % 10;\n            left /= 10;\n        }\n        if(digits % 2)\n            left /= 10;\n        return left * pow(10, digits / 2) + right;\n    }\n    if(left > right) {\n        right = 0;\n        for(int i = 0; i < digits / 2; i++) {\n            right = right * 10 + left % 10;\n            left /= 10;\n        }\n        if(digits % 2)\n            left /= 10;\n        return left * pow(10, digits / 2) + right;\n    }\n    if(left < right) {\n        left++;\n        right = 0;\n        for(int i = 0; i < digits / 2; i++) {\n            right = right * 10 + left % 10;\n            left /= 10;\n        }\n        if(digits % 2)\n            left /= 10;\n        return left * pow(10, digits / 2) + right;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmphhumjruy: /tmp/tmphhumjruy.cpp:64: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n  // Write your code here\n  long temp = num;\n  long rev = 0;\n  while(temp != 0) {\n    rev = rev * 10 + temp % 10;\n    temp /= 10;\n  }\n  if(rev == num) {\n    return num;\n  }\n  return next_smallest_palindrome(num + 1);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmphtnp8sgs: /tmp/tmphtnp8sgs.cpp:19: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0)\n    {\n        rev=rev*10+temp%10;\n        temp=temp/10;\n    }\n    if(rev==num)\n    {\n        return num;\n    }\n    else\n    {\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "tmpb74flquv: /tmp/tmpb74flquv.cpp:24: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string num_str = std::to_string(num);\n    int len = num_str.length();\n    int mid = len / 2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && num_str[i] == num_str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || num_str[i] < num_str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        num_str[j] = num_str[i];\n        i--;\n        j++;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2) {\n            num_str[mid] += carry;\n            carry = num_str[mid] / 10;\n            num_str[mid] %= 10;\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            num_str[i] += carry;\n            carry = num_str[i] / 10;\n            num_str[i] %= 10;\n            num_str[j++] = num_str[i--];\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::invalid_argument'\n  what():  stol\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string num_str = std::to_string(num);\n    int len = num_str.length();\n    int mid = len/2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && num_str[i] == num_str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || num_str[i] < num_str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        num_str[j] = num_str[i];\n        j++;\n        i--;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2 == 1) {\n            int num = num_str[mid] - '0';\n            num += carry;\n            carry = num / 10;\n            num %= 10;\n            num_str[mid] = num + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int num = num_str[i] - '0';\n            num += carry;\n            carry = num / 10;\n            num %= 10;\n            num_str[i] = num + '0';\n            num_str[j++] = num_str[i--];\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmpifll0bkl: /tmp/tmpifll0bkl.cpp:49: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    if(rev > num) {\n        return rev;\n    }\n    long n = num;\n    int len = 0;\n    while(n != 0) {\n        len++;\n        n /= 10;\n    }\n    long div = 1;\n    for(int i = 0; i < len / 2; i++) {\n        div *= 10;\n    }\n    long left = num / div;\n    long right = num % div;\n    if(left < right) {\n        left++;\n    }\n    long res = left * div + left / 10;\n    return res;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmpe58xst5l: /tmp/tmpe58xst5l.cpp:37: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string s = std::to_string(num);\n    int n = s.length();\n    int mid = n/2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (n%2)? mid + 1 : mid;\n    while(i >= 0 && s[i] == s[j]) {\n        i--;\n        j++;\n    }\n    if(i < 0 || s[i] < s[j]) {\n        left_smaller = true;\n    }\n    while(i >= 0) {\n        s[j] = s[i];\n        i--;\n        j++;\n    }\n    if(left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if(n%2 == 1) {\n            int x = s[mid] - '0';\n            x += carry;\n            carry = x/10;\n            s[mid] = (x%10) + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while(i >= 0) {\n            int x = s[i] - '0';\n            x += carry;\n            carry = x/10;\n            s[i] = (x%10) + '0';\n            s[j++] = s[i--];\n        }\n    }\n    return std::stol(s);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmp6aotpj_b: /tmp/tmp6aotpj_b.cpp:47: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // TODO: Write - Your - Code\n    std::string str = std::to_string(num);\n    int n = str.length();\n    int mid = n/2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (n % 2)? mid + 1 : mid;\n    while(i >= 0 && str[i] == str[j]) {\n        i--;\n        j++;\n    }\n    if(i < 0 || str[i] < str[j]) {\n        left_smaller = true;\n    }\n    while(i >= 0) {\n        str[j] = str[i];\n        i--;\n        j++;\n    }\n    if(left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if(n % 2) {\n            int num = str[mid] - '0' + carry;\n            str[mid] = (num % 10) + '0';\n            carry = num / 10;\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while(i >= 0) {\n            int num = str[i] - '0' + carry;\n            str[i] = (num % 10) + '0';\n            str[j] = str[i];\n            carry = num / 10;\n            i--;\n            j++;\n        }\n    }\n    return std::stol(str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmpc9lfk9i2: /tmp/tmpc9lfk9i2.cpp:48: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here.\n    long n = num;\n    int len = 0;\n    while(n > 0){\n        n = n/10;\n        len++;\n    }\n    n = num;\n    int mid = len/2;\n    int i = 0;\n    int j = len-1;\n    int arr[len];\n    while(n > 0){\n        arr[i++] = n%10;\n        n = n/10;\n    }\n    while(i < len){\n        arr[i++] = 0;\n    }\n    while(i > mid){\n        arr[j--] = arr[i--];\n    }\n    while(i >= 0){\n        if(arr[i] > arr[j]){\n            arr[j] = arr[i];\n            break;\n        }\n        else if(arr[i] < arr[j]){\n            arr[j] = arr[i];\n            int carry = 1;\n            int k = mid-1;\n            while(carry > 0 && k >= 0){\n                arr[k] += carry;\n                if(arr[k] > 9){\n                    arr[k] = 0;\n                    carry = 1;\n                }\n                else{\n                    carry = 0;\n                }\n                k--;\n            }\n            break;\n        }\n        i--;\n        j++;\n    }\n    long ans = 0;\n    for(int i = 0; i < len; i++){\n        ans = ans*10 + arr[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmpe6z86da8: /tmp/tmpe6z86da8.cpp:60: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    if (num == 0) return 1;\n    if (num == 9) return 11;\n    if (num < 9) return num;\n\n    std::string num_str = std::to_string(num);\n    int len = num_str.length();\n    int mid = len / 2;\n    bool is_odd = len % 2;\n    int left_mid = mid - 1;\n    int right_mid = (is_odd) ? mid + 1 : mid;\n\n    while (left_mid >= 0 && num_str[left_mid] == num_str[right_mid]) {\n        left_mid--;\n        right_mid++;\n    }\n\n    if (left_mid < 0 || num_str[left_mid] < num_str[right_mid]) {\n        left_mid = mid - 1;\n        int carry = 1;\n        if (is_odd) {\n            int mid_num = num_str[mid] - '0';\n            mid_num += carry;\n            carry = mid_num / 10;\n            mid_num %= 10;\n            num_str[mid] = (char)(mid_num + '0');\n            right_mid = mid + 1;\n        }\n        while (left_mid >= 0) {\n            int left_num = num_str[left_mid] - '0';\n            left_num += carry;\n            carry = left_num / 10;\n            left_num %= 10;\n            num_str[left_mid] = (char)(left_num + '0');\n            num_str[right_mid] = num_str[left_mid];\n            left_mid--;\n            right_mid++;\n        }\n    } else {\n        while (left_mid >= 0) {\n            num_str[right_mid] = num_str[left_mid];\n            left_mid--;\n            right_mid++;\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmp702s3uxq: /tmp/tmp702s3uxq.cpp:53: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp>0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(rev==num)\n        return num;\n    else{\n        long temp=num;\n        long rev=0;\n        while(temp>0){\n            rev=rev*10+temp%10;\n            temp/=10;\n        }\n        if(rev<num){\n            return rev;\n        }\n        else{\n            long temp=num+1;\n            long rev=0;\n            while(temp>0){\n                rev=rev*10+temp%10;\n                temp/=10;\n            }\n            return rev;\n        }\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmp258vhul_: /tmp/tmp258vhul_.cpp:37: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string s = std::to_string(num);\n    int n = s.length();\n    std::vector<int> v(n);\n    for(int i = 0; i < n; i++) {\n        v[i] = s[i] - '0';\n    }\n    int mid = n / 2;\n    bool leftsmaller = false;\n    int i = mid - 1;\n    int j = (n % 2) ? mid + 1 : mid;\n    while(i >= 0 && v[i] == v[j]) {\n        i--;\n        j++;\n    }\n    if(i < 0 || v[i] < v[j]) {\n        leftsmaller = true;\n    }\n    while(i >= 0) {\n        v[j] = v[i];\n        j++;\n        i--;\n    }\n    if(leftsmaller) {\n        int carry = 1;\n        i = mid - 1;\n        if(n % 2 == 1) {\n            v[mid] += carry;\n            carry = v[mid] / 10;\n            v[mid] %= 10;\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while(i >= 0) {\n            v[i] += carry;\n            carry = v[i] / 10;\n            v[i] %= 10;\n            v[j++] = v[i--];\n        }\n    }\n    long ans = 0;\n    for(int i = 0; i < n; i++) {\n        ans = ans * 10 + v[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmpxb7m2bfk: /tmp/tmpxb7m2bfk.cpp:53: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0){\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    if(rev == num){\n        return num;\n    }\n    else{\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "tmpgxkijc8k: /tmp/tmpgxkijc8k.cpp:21: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0){\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev == num){\n        return num;\n    }\n    else{\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmptsxrkz7h: /tmp/tmptsxrkz7h.cpp:21: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long next_palindrome = rev;\n    if(num > rev) {\n        next_palindrome = rev + 1;\n    }\n    return next_palindrome;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmph6ipzzxf: /tmp/tmph6ipzzxf.cpp:22: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long temp1 = num;\n    long temp2 = rev;\n    while(temp1 != temp2) {\n        temp1++;\n        temp2 = 0;\n        temp = temp1;\n        while(temp > 0) {\n            temp2 = temp2 * 10 + temp % 10;\n            temp /= 10;\n        }\n    }\n    return temp1;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmpmd9jlxkc: /tmp/tmpmd9jlxkc.cpp:30: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string num_str = std::to_string(num);\n    int num_len = num_str.length();\n    int mid = num_len / 2;\n    int left_mid = mid - 1;\n    int right_mid = (num_len % 2) ? mid + 1 : mid;\n    bool left_smaller = false;\n    while (left_mid >= 0 && num_str[left_mid] == num_str[right_mid]) {\n        left_mid--;\n        right_mid++;\n    }\n    if (left_mid < 0 || num_str[left_mid] < num_str[right_mid]) {\n        left_smaller = true;\n    }\n    while (left_mid >= 0) {\n        num_str[right_mid++] = num_str[left_mid--];\n    }\n    if (left_smaller) {\n        int carry = 1;\n        left_mid = mid - 1;\n        if (num_len % 2) {\n            int num = num_str[mid] - '0' + carry;\n            carry = num / 10;\n            num_str[mid] = (num % 10) + '0';\n            right_mid = mid + 1;\n        } else {\n            right_mid = mid;\n        }\n        while (left_mid >= 0) {\n            int num = num_str[left_mid] - '0' + carry;\n            carry = num / 10;\n            num_str[left_mid] = (num % 10) + '0';\n            num_str[right_mid] = num_str[left_mid];\n            left_mid--;\n            right_mid++;\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmp750bknso: /tmp/tmp750bknso.cpp:45: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long n = num;\n    int digits = 0;\n    while (n > 0) {\n        digits++;\n        n /= 10;\n    }\n    if (digits == 1) {\n        return num;\n    }\n    long left = num / pow(10, digits / 2);\n    long right = num % (long) pow(10, digits / 2);\n    long new_left = left;\n    long new_right = 0;\n    if (digits % 2 == 0) {\n        new_right = right;\n    } else {\n        new_right = right / 10;\n    }\n    while (new_left > 0) {\n        new_right = new_right * 10 + new_left % 10;\n        new_left /= 10;\n    }\n    if (new_right > right) {\n        return num;\n    } else {\n        left++;\n        new_left = left;\n        new_right = 0;\n        if (digits % 2 == 0) {\n            new_right = right;\n        } else {\n            new_right = right / 10;\n        }\n        while (new_left > 0) {\n            new_right = new_right * 10 + new_left % 10;\n            new_left /= 10;\n        }\n        return new_right + left * pow(10, digits / 2);\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmpyeim1iyc: /tmp/tmpyeim1iyc.cpp:47: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n  if (num == 0) {\n    return 1;\n  }\n  if (num < 0) {\n    return -1;\n  }\n  std::string num_str = std::to_string(num);\n  int len = num_str.length();\n  int mid = len / 2;\n  bool is_odd = len % 2;\n  int left_mid = mid - 1;\n  int right_mid = (is_odd) ? mid + 1 : mid;\n  bool is_left_smaller = false;\n  while (left_mid >= 0 && num_str[left_mid] == num_str[right_mid]) {\n    left_mid--;\n    right_mid++;\n  }\n  if (left_mid < 0 || num_str[left_mid] < num_str[right_mid]) {\n    is_left_smaller = true;\n  }\n  while (left_mid >= 0) {\n    num_str[right_mid++] = num_str[left_mid--];\n  }\n  if (is_left_smaller) {\n    int carry = 1;\n    if (is_odd) {\n      int mid_digit = num_str[mid] - '0';\n      mid_digit += carry;\n      carry = mid_digit / 10;\n      num_str[mid] = (mid_digit % 10) + '0';\n      right_mid = mid + 1;\n    } else {\n      right_mid = mid;\n    }\n    while (left_mid >= 0) {\n      int digit = num_str[left_mid] - '0';\n      digit += carry;\n      carry = digit / 10;\n      num_str[left_mid] = (digit % 10) + '0';\n      num_str[right_mid] = num_str[left_mid];\n      left_mid--;\n      right_mid++;\n    }\n  }\n  return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmp4cmv_g03: /tmp/tmp4cmv_g03.cpp:53: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp=temp/10;\n    }\n    if(rev==num){\n        return num;\n    }\n    else{\n        return num+1;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmpe_kmkzvn: /tmp/tmpe_kmkzvn.cpp:21: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp != 0)\n    {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev == num)\n        return rev;\n    else\n    {\n        long temp = num;\n        long rev = 0;\n        while(temp != 0)\n        {\n            rev = rev*10 + temp%10;\n            temp /= 10;\n        }\n        if(rev == num)\n            return rev;\n        else\n        {\n            long temp = num;\n            long rev = 0;\n            while(temp != 0)\n            {\n                rev = rev*10 + temp%10;\n                temp /= 10;\n            }\n            if(rev == num)\n                return rev;\n            else\n            {\n                long temp = num;\n                long rev = 0;\n                while(temp != 0)\n                {\n                    rev = rev*10 + temp%10;\n                    temp /= 10;\n                }\n                if(rev == num)\n                    return rev;\n                else\n                {\n                    long temp = num;\n                    long rev = 0;\n                    while(temp != 0)\n                    {\n                        rev = rev*10 + temp%10;\n                        temp /= 10;\n                    }\n                    if(rev == num)\n                        return rev;\n                    else\n                    {\n                        long temp = num;\n                        long rev = 0;\n                        while(temp != 0)\n                        {\n                            rev = rev*10 + temp%10;\n                            temp /= 10;\n                        }\n                        if(rev == num)\n                            return rev;\n                        else\n                        {\n                            long temp = num;\n                            long rev = 0;\n                            while(temp != 0)\n                            {\n                                rev = rev*10 + temp%10;\n                                temp /= 10;\n                            }\n                            if(rev == num)\n                                return rev;\n                            else\n                            {\n                                long temp = num;\n                                long rev = 0;\n                                while(temp != 0)\n                                {\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "/tmp/tmp36hkpboj.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmp36hkpboj.cpp:88:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   88 | int main() {\n      |            ^\n/tmp/tmp36hkpboj.cpp:93:1: error: expected \u2018}\u2019 at end of input\n   93 | }\n      | ^\n/tmp/tmp36hkpboj.cpp:82:29: note: to match this \u2018{\u2019\n   82 |                             {\n      |                             ^\n/tmp/tmp36hkpboj.cpp:93:1: error: expected \u2018}\u2019 at end of input\n   93 | }\n      | ^\n/tmp/tmp36hkpboj.cpp:71:25: note: to match this \u2018{\u2019\n   71 |                         {\n      |                         ^\n/tmp/tmp36hkpboj.cpp:93:1: error: expected \u2018}\u2019 at end of input\n   93 | }\n      | ^\n/tmp/tmp36hkpboj.cpp:60:21: note: to match this \u2018{\u2019\n   60 |                     {\n      |                     ^\n/tmp/tmp36hkpboj.cpp:93:1: error: expected \u2018}\u2019 at end of input\n   93 | }\n      | ^\n/tmp/tmp36hkpboj.cpp:49:17: note: to match this \u2018{\u2019\n   49 |                 {\n      |                 ^\n/tmp/tmp36hkpboj.cpp:93:1: error: expected \u2018}\u2019 at end of input\n   93 | }\n      | ^\n/tmp/tmp36hkpboj.cpp:38:13: note: to match this \u2018{\u2019\n   38 |             {\n      |             ^\n/tmp/tmp36hkpboj.cpp:93:1: error: expected \u2018}\u2019 at end of input\n   93 | }\n      | ^\n/tmp/tmp36hkpboj.cpp:27:9: note: to match this \u2018{\u2019\n   27 |         {\n      |         ^\n/tmp/tmp36hkpboj.cpp:93:1: error: expected \u2018}\u2019 at end of input\n   93 | }\n      | ^\n/tmp/tmp36hkpboj.cpp:16:5: note: to match this \u2018{\u2019\n   16 |     {\n      |     ^\n/tmp/tmp36hkpboj.cpp:93:1: error: expected \u2018}\u2019 at end of input\n   93 | }\n      | ^\n/tmp/tmp36hkpboj.cpp:4:41: note: to match this \u2018{\u2019\n    4 | long next_smallest_palindrome(long num) {\n      |                                         ^\n/tmp/tmp36hkpboj.cpp:93:1: warning: control reaches end of non-void function [-Wreturn-type]\n   93 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n\t// Write your code here\n\tlong num1 = num;\n\tlong num2 = num;\n\tlong rev = 0;\n\tlong rem = 0;\n\twhile (num1 != 0) {\n\t\trem = num1 % 10;\n\t\trev = rev * 10 + rem;\n\t\tnum1 = num1 / 10;\n\t}\n\tif (rev == num) {\n\t\treturn num;\n\t}\n\telse {\n\t\tnum2 = num2 + 1;\n\t\tlong num3 = num2;\n\t\tlong rev1 = 0;\n\t\tlong rem1 = 0;\n\t\twhile (num3 != 0) {\n\t\t\trem1 = num3 % 10;\n\t\t\trev1 = rev1 * 10 + rem1;\n\t\t\tnum3 = num3 / 10;\n\t\t}\n\t\tif (rev1 == num2) {\n\t\t\treturn num2;\n\t\t}\n\t\telse {\n\t\t\treturn next_smallest_palindrome(num2);\n\t\t}\n\t}\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmp46g7hfm4: /tmp/tmp46g7hfm4.cpp:38: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0)\n    {\n        rev=rev*10+temp%10;\n        temp=temp/10;\n    }\n    if(rev==num)\n    {\n        return rev;\n    }\n    else\n    {\n        num++;\n        while(true)\n        {\n            temp=num;\n            rev=0;\n            while(temp!=0)\n            {\n                rev=rev*10+temp%10;\n                temp=temp/10;\n            }\n            if(rev==num)\n            {\n                return rev;\n            }\n            num++;\n        }\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "tmps22p9vby: /tmp/tmps22p9vby.cpp:39: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(rev==num){\n        num++;\n        temp=num;\n        rev=0;\n        while(temp!=0){\n            rev=rev*10+temp%10;\n            temp/=10;\n        }\n        return rev;\n    }\n    return rev;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123165,
      "stdout": "",
      "stderr": "tmp3d6qs24y: /tmp/tmp3d6qs24y.cpp:26: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // TODO: Write your code here\n    std::string str = std::to_string(num);\n    int n = str.length();\n    int mid = n/2;\n    int left = mid - 1;\n    int right = (n%2)? mid + 1 : mid;\n    bool leftSmaller = false;\n    while(left >= 0 && str[left] == str[right]) {\n        left--;\n        right++;\n    }\n    if(left < 0 || str[left] < str[right])\n        leftSmaller = true;\n    while(left >= 0) {\n        str[right++] = str[left--];\n    }\n    if(leftSmaller) {\n        int carry = 1;\n        left = mid - 1;\n        if(n%2 == 1) {\n            int num = str[mid] - '0';\n            num += carry;\n            carry = num/10;\n            num = num%10;\n            str[mid] = num + '0';\n            right = mid + 1;\n        } else {\n            right = mid;\n        }\n        while(left >= 0) {\n            int num = str[left] - '0';\n            num += carry;\n            carry = num/10;\n            num = num%10;\n            str[left] = num + '0';\n            str[right] = str[left];\n            left--;\n            right++;\n        }\n    }\n    return std::stol(str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmph6amd3lr: /tmp/tmph6amd3lr.cpp:49: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if (num == rev) {\n        return num;\n    }\n    if (num > rev) {\n        num = rev;\n    }\n    while (true) {\n        num++;\n        long temp = num;\n        long rev = 0;\n        while (temp != 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        if (num == rev) {\n            return num;\n        }\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmp8wg4_mix: /tmp/tmp8wg4_mix.cpp:32: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long temp2 = num;\n    long temp3 = rev;\n    long temp4 = num;\n    long temp5 = rev;\n    long temp6 = num;\n    long temp7 = rev;\n    long temp8 = num;\n    long temp9 = rev;\n    long temp10 = num;\n    long temp11 = rev;\n    long temp12 = num;\n    long temp13 = rev;\n    long temp14 = num;\n    long temp15 = rev;\n    long temp16 = num;\n    long temp17 = rev;\n    long temp18 = num;\n    long temp19 = rev;\n    long temp20 = num;\n    long temp21 = rev;\n    long temp22 = num;\n    long temp23 = rev;\n    long temp24 = num;\n    long temp25 = rev;\n    long temp26 = num;\n    long temp27 = rev;\n    long temp28 = num;\n    long temp29 = rev;\n    long temp30 = num;\n    long temp31 = rev;\n    long temp32 = num;\n    long temp33 = rev;\n    long temp34 = num;\n    long temp35 = rev;\n    long temp36 = num;\n    long temp37 = rev;\n    long temp38 = num;\n    long temp39 = rev;\n    long temp40 = num;\n    long temp41 = rev;\n    long temp42 = num;\n    long temp43 = rev;\n    long temp44 = num;\n    long temp45 = rev;\n    long temp46 = num;\n    long temp47 = rev;\n    long temp48 = num;\n    long temp49 = rev;\n    long temp50 = num;\n    long temp51 = rev;\n    long temp52 = num;\n    long temp53 = rev;\n    long temp54 = num;\n    long temp55 = rev;\n    long temp56 = num;\n    long temp57 = rev;\n    long temp\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "/tmp/tmpqkk0j8cg.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmpqkk0j8cg.cpp:71:1: error: expected initializer before \u2018}\u2019 token\n   71 | }\n      | ^\n/tmp/tmpqkk0j8cg.cpp:71:1: warning: control reaches end of non-void function [-Wreturn-type]\n   71 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    std::string str = std::to_string(num);\n    int len = str.length();\n    int mid = len/2;\n    int left = mid - 1;\n    int right = (len%2)? mid+1 : mid;\n    bool left_smaller = false;\n    while(left >= 0 && str[left] == str[right]){\n        left--;\n        right++;\n    }\n    if(left < 0 || str[left] < str[right]){\n        left_smaller = true;\n    }\n    while(left >= 0){\n        str[right++] = str[left--];\n    }\n    if(left_smaller){\n        int carry = 1;\n        left = mid - 1;\n        if(len%2){\n            int num = str[mid] - '0' + carry;\n            str[mid] = (num%10) + '0';\n            carry = num/10;\n            right = mid + 1;\n        }\n        else{\n            right = mid;\n        }\n        while(left >= 0){\n            int num = str[left] - '0' + carry;\n            str[left] = (num%10) + '0';\n            str[right] = str[left];\n            carry = num/10;\n            left--;\n            right++;\n        }\n    }\n    return std::stol(str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmpmce75wjk: /tmp/tmpmce75wjk.cpp:47: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    int n=0;\n    while(temp>0){\n        temp=temp/10;\n        n++;\n    }\n    int i=0;\n    int j=n-1;\n    int flag=0;\n    while(i<j){\n        if(num%10!=num/pow(10,j)){\n            flag=1;\n            break;\n        }\n        num=num%(long)pow(10,j);\n        num=num/10;\n        i++;\n        j--;\n    }\n    if(flag==0){\n        num=num*pow(10,n)+num;\n        return num;\n    }\n    else{\n        num=num+1;\n        return num;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmplswis81b: /tmp/tmplswis81b.cpp:36: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Implement this placeholder.\n    return 0;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "tmpzotmbc7t: /tmp/tmpzotmbc7t.cpp:10: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0)\n    {\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(rev==num)\n    {\n        return num;\n    }\n    else\n    {\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmp6d4q83h5: /tmp/tmp6d4q83h5.cpp:24: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev > num) {\n        return rev;\n    }\n    long temp_num = num;\n    long temp_rev = rev;\n    long pow_10 = 1;\n    while(temp_num) {\n        temp_num /= 10;\n        pow_10 *= 10;\n    }\n    pow_10 /= 10;\n    while(temp_rev) {\n        temp_rev /= 10;\n        pow_10 /= 10;\n    }\n    long new_num = num + pow_10;\n    temp = new_num;\n    rev = 0;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev > new_num) {\n        return rev;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmpx1sif1ys: /tmp/tmpx1sif1ys.cpp:40: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long next_palindrome = num;\n    while(next_palindrome <= rev) {\n        next_palindrome++;\n        temp = next_palindrome;\n        rev = 0;\n        while(temp != 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n    }\n    return next_palindrome;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmpfj2ij77r: /tmp/tmpfj2ij77r.cpp:28: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string num_str = std::to_string(num);\n    int len = num_str.length();\n    int mid = len / 2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && num_str[i] == num_str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || num_str[i] < num_str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        num_str[j] = num_str[i];\n        j++;\n        i--;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2 == 1) {\n            int num = num_str[mid] - '0' + carry;\n            carry = num / 10;\n            num_str[mid] = (num % 10) + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int num = num_str[i] - '0' + carry;\n            carry = num / 10;\n            num_str[i] = (num % 10) + '0';\n            num_str[j++] = num_str[i--];\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmpf6_v4_mk: /tmp/tmpf6_v4_mk.cpp:45: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp!=0){\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    if(rev == num){\n        return num;\n    }\n    else{\n        return next_smallest_palindrome(num+1);\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmpruffth9g: /tmp/tmpruffth9g.cpp:21: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp>0)\n    {\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(num==rev)\n    {\n        num++;\n    }\n    while(num!=rev)\n    {\n        num++;\n        temp=num;\n        rev=0;\n        while(temp>0)\n        {\n            rev=rev*10+temp%10;\n            temp/=10;\n        }\n    }\n    return num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long digits = 0;\n    while(temp) {\n        digits++;\n        temp /= 10;\n    }\n    temp = num;\n    long half_digits = digits / 2;\n    long first_half = 0;\n    long last_half = 0;\n    for(long i = 0; i < half_digits; i++) {\n        first_half = first_half * 10 + temp % 10;\n        last_half = last_half * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(digits % 2 != 0) {\n        first_half = first_half * 10 + temp % 10;\n        temp /= 10;\n    }\n    while(temp) {\n        last_half = last_half * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(first_half == last_half) {\n        return num;\n    }\n    if(first_half < last_half) {\n        first_half++;\n        last_half = first_half;\n        if(digits % 2 != 0) {\n            last_half /= 10;\n        }\n    }\n    long result = 0;\n    for(long i = 0; i < half_digits; i++) {\n        result = result * 10 + first_half % 10;\n        first_half /= 10;\n    }\n    if(digits % 2 != 0) {\n        result = result * 10 + first_half % 10;\n    }\n    for(long i = 0; i < half_digits; i++) {\n        result = result * 10 + last_half % 10;\n        last_half /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmpl_4esb3f: /tmp/tmpl_4esb3f.cpp:54: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(num == rev) {\n        return num;\n    }\n    long next_palindrome = num;\n    while(next_palindrome <= rev) {\n        next_palindrome++;\n        temp = next_palindrome;\n        rev = 0;\n        while(temp != 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n    }\n    return next_palindrome;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmpok9d27r3: /tmp/tmpok9d27r3.cpp:28: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    if(rev < num) {\n        num++;\n    }\n    while(true) {\n        temp = num;\n        rev = 0;\n        while(temp != 0) {\n            rev = rev*10 + temp%10;\n            temp = temp/10;\n        }\n        if(rev == num) {\n            return num;\n        }\n        num++;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmp250i2t9a: /tmp/tmp250i2t9a.cpp:33: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0){\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev == num)\n        return num;\n    else if(rev < num)\n        return rev;\n    else{\n        long temp = num;\n        long rev = 0;\n        while(temp > 0){\n            rev = rev*10 + temp%10;\n            temp /= 10;\n        }\n        if(rev == num)\n            return num;\n        else if(rev < num)\n            return rev;\n        else{\n            long temp = num;\n            long rev = 0;\n            while(temp > 0){\n                rev = rev*10 + temp%10;\n                temp /= 10;\n            }\n            if(rev == num)\n                return num;\n            else if(rev < num)\n                return rev;\n            else{\n                long temp = num;\n                long rev = 0;\n                while(temp > 0){\n                    rev = rev*10 + temp%10;\n                    temp /= 10;\n                }\n                if(rev == num)\n                    return num;\n                else if(rev < num)\n                    return rev;\n                else{\n                    long temp = num;\n                    long rev = 0;\n                    while(temp > 0){\n                        rev = rev*10 + temp%10;\n                        temp /= 10;\n                    }\n                    if(rev == num)\n                        return num;\n                    else if(rev < num)\n                        return rev;\n                    else{\n                        long temp = num;\n                        long rev = 0;\n                        while(temp > 0){\n                            rev = rev*10 + temp%10;\n                            temp /= 10;\n                        }\n                        if(rev == num)\n                            return num;\n                        else if(rev < num)\n                            return rev;\n                        else{\n                            long temp = num;\n                            long rev = 0;\n                            while(temp > 0){\n                                rev = rev*10 + temp%10;\n                                temp /= 10;\n                            }\n\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "/tmp/tmpeu4klih8.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmpeu4klih8.cpp:80:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   80 | int main() {\n      |            ^\n/tmp/tmpeu4klih8.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpeu4klih8.cpp:60:25: note: to match this \u2018{\u2019\n   60 |                     else{\n      |                         ^\n/tmp/tmpeu4klih8.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpeu4klih8.cpp:49:21: note: to match this \u2018{\u2019\n   49 |                 else{\n      |                     ^\n/tmp/tmpeu4klih8.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpeu4klih8.cpp:38:17: note: to match this \u2018{\u2019\n   38 |             else{\n      |                 ^\n/tmp/tmpeu4klih8.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpeu4klih8.cpp:27:13: note: to match this \u2018{\u2019\n   27 |         else{\n      |             ^\n/tmp/tmpeu4klih8.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpeu4klih8.cpp:16:9: note: to match this \u2018{\u2019\n   16 |     else{\n      |         ^\n/tmp/tmpeu4klih8.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpeu4klih8.cpp:4:41: note: to match this \u2018{\u2019\n    4 | long next_smallest_palindrome(long num) {\n      |                                         ^\n/tmp/tmpeu4klih8.cpp:85:1: warning: control reaches end of non-void function [-Wreturn-type]\n   85 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while (temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if (num == rev) {\n        return num;\n    }\n    while (num != rev) {\n        num++;\n        temp = num;\n        rev = 0;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n    }\n    return num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmp8x25f0t3: /tmp/tmp8x25f0t3.cpp:28: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long temp1 = num;\n    long temp2 = rev;\n    while(temp1 > 0 && temp2 > 0) {\n        if(temp1 % 10 != temp2 % 10) {\n            break;\n        }\n        temp1 /= 10;\n        temp2 /= 10;\n    }\n    if(temp1 == 0 && temp2 == 0) {\n        return num;\n    }\n    temp1 = num;\n    temp2 = rev;\n    long temp3 = 0;\n    while(temp1 > 0) {\n        temp3 = temp3 * 10 + temp1 % 10;\n        temp1 /= 10;\n    }\n    while(temp2 > 0) {\n        temp3 = temp3 * 10 + temp2 % 10;\n        temp2 /= 10;\n    }\n    return temp3;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmpqe5d67w3: /tmp/tmpqe5d67w3.cpp:41: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n  long temp = num;\n  long rev = 0;\n  while(temp > 0) {\n    rev = rev * 10 + temp % 10;\n    temp /= 10;\n  }\n  if(rev == num) {\n    return num;\n  }\n  if(rev > num) {\n    return rev;\n  }\n  long next_palindrome = num;\n  while(next_palindrome <= rev) {\n    next_palindrome++;\n    temp = next_palindrome;\n    rev = 0;\n    while(temp > 0) {\n      rev = rev * 10 + temp % 10;\n      temp /= 10;\n    }\n  }\n  return next_palindrome;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmp6itgt6i0: /tmp/tmp6itgt6i0.cpp:31: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // your code here\n    long temp = num;\n    int digit = 0;\n    while(temp > 0) {\n        digit++;\n        temp = temp / 10;\n    }\n    if(digit == 1) {\n        if(num == 9) {\n            return 11;\n        }\n        else {\n            return num + 1;\n        }\n    }\n    else {\n        long left_half = num / pow(10, digit / 2);\n        long right_half = num % (long)pow(10, digit / 2);\n        long left_half_mirror = 0;\n        long temp_right_half = right_half;\n        while(temp_right_half > 0) {\n            left_half_mirror = left_half_mirror * 10 + temp_right_half % 10;\n            temp_right_half = temp_right_half / 10;\n        }\n        if(left_half == left_half_mirror) {\n            if(digit % 2 == 0) {\n                return num + pow(10, digit / 2);\n            }\n            else {\n                return num + pow(10, digit / 2) + pow(10, digit / 2 - 1);\n            }\n        }\n        else {\n            if(digit % 2 == 0) {\n                return left_half * pow(10, digit / 2) + left_half_mirror;\n            }\n            else {\n                return (left_half + 1) * pow(10, digit / 2) + left_half_mirror;\n            }\n        }\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmpugvhi5w9: /tmp/tmpugvhi5w9.cpp:49: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // TODO: Write your code here\n    std::string str = std::to_string(num);\n    int len = str.length();\n    int mid = len/2;\n    int left = mid-1;\n    int right = (len%2) ? mid+1 : mid;\n    bool leftSmaller = false;\n    while(left >= 0 && str[left] == str[right]) {\n        left--;\n        right++;\n    }\n    if(left < 0 || str[left] < str[right])\n        leftSmaller = true;\n    while(left >= 0) {\n        str[right++] = str[left--];\n    }\n    if(leftSmaller) {\n        int carry = 1;\n        left = mid-1;\n        if(len%2) {\n            int num = str[mid]-'0'+carry;\n            str[mid] = (char)(num%10 + '0');\n            carry = num/10;\n            right = mid+1;\n        } else {\n            right = mid;\n        }\n        while(left >= 0) {\n            int num = str[left]-'0'+carry;\n            str[left] = (char)(num%10 + '0');\n            carry = num/10;\n            str[right++] = str[left--];\n        }\n    }\n    return std::stol(str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmpznc850an: /tmp/tmpznc850an.cpp:43: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string num_str = std::to_string(num);\n    int len = num_str.length();\n    int mid = len / 2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && num_str[i] == num_str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || num_str[i] < num_str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        num_str[j] = num_str[i];\n        j++;\n        i--;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2 == 1) {\n            int num = num_str[mid] - '0';\n            num += carry;\n            carry = num / 10;\n            num %= 10;\n            num_str[mid] = num + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int num = num_str[i] - '0';\n            num += carry;\n            carry = num / 10;\n            num %= 10;\n            num_str[i] = num + '0';\n            num_str[j++] = num_str[i--];\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmp_igw_81t: /tmp/tmp_igw_81t.cpp:49: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string s = std::to_string(num);\n    int n = s.length();\n    int mid = n/2;\n    bool left_smaller = false;\n    int i = mid-1;\n    int j = (n%2)? mid+1 : mid;\n    while(i>=0 && s[i]==s[j]) {\n        i--;\n        j++;\n    }\n    if(i<0 || s[i]<s[j]) {\n        left_smaller = true;\n    }\n    while(i>=0) {\n        s[j] = s[i];\n        i--;\n        j++;\n    }\n    if(left_smaller) {\n        int carry = 1;\n        i = mid-1;\n        if(n%2==1) {\n            int x = s[mid]-'0';\n            x += carry;\n            carry = x/10;\n            s[mid] = (x%10)+'0';\n            j = mid+1;\n        } else {\n            j = mid;\n        }\n        while(i>=0) {\n            int x = s[i]-'0';\n            x += carry;\n            carry = x/10;\n            s[i] = (x%10)+'0';\n            s[j++] = s[i--];\n        }\n    }\n    return std::stol(s);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmp3qkfb5yd: /tmp/tmp3qkfb5yd.cpp:47: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev < num)\n        return rev;\n    else {\n        if(num % 10 == 9) {\n            num /= 10;\n            while(num % 10 == 9) {\n                num /= 10;\n            }\n            if(num == 0) {\n                return 1;\n            }\n            else {\n                num++;\n                return num * pow(10, floor(log10(num)) + 1) + rev / 10;\n            }\n        }\n        else {\n            num++;\n            return num * pow(10, floor(log10(num)) + 1) + rev / 10;\n        }\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmp7wq3dvlb: /tmp/tmp7wq3dvlb.cpp:35: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n  // Write your solution here\n  int n = num;\n  int digits = 0;\n  while(n > 0) {\n    digits++;\n    n = n / 10;\n  }\n  int half = digits / 2;\n  int start = pow(10, half);\n  int end = start;\n  if(digits % 2 == 1) {\n    end = start * 10;\n  }\n  while(start < end) {\n    long palindrome = start * end + reverse(start);\n    if(palindrome > num) {\n      return palindrome;\n    }\n    start++;\n  }\n  return -1;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "/tmp/tmptt5h43rd.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmptt5h43rd.cpp:19:37: error: \u2018reverse\u2019 was not declared in this scope; did you mean \u2018std::reverse\u2019?\n   19 |     long palindrome = start * end + reverse(start);\n      |                                     ^~~~~~~\n      |                                     std::reverse\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmptt5h43rd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:249:1: note: \u2018std::reverse\u2019 declared here\n  249 | reverse(_ExecutionPolicy&& __exec, _BidirectionalIterator __first, _BidirectionalIterator __last);\n      | ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    int n = num;\n    int digits = 0;\n    while (n > 0) {\n        digits++;\n        n /= 10;\n    }\n    std::vector<int> v(digits);\n    n = num;\n    for (int i = 0; i < digits; i++) {\n        v[i] = n % 10;\n        n /= 10;\n    }\n    std::reverse(v.begin(), v.end());\n    int mid = digits / 2;\n    int i = mid - 1;\n    int j = (digits % 2) ? mid + 1 : mid;\n    bool leftsmaller = false;\n    while (i >= 0 && v[i] == v[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || v[i] < v[j]) {\n        leftsmaller = true;\n    }\n    while (i >= 0) {\n        v[j] = v[i];\n        j++;\n        i--;\n    }\n    if (leftsmaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (digits % 2) {\n            v[mid] += carry;\n            carry = v[mid] / 10;\n            v[mid] %= 10;\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            v[i] += carry;\n            carry = v[i] / 10;\n            v[i] %= 10;\n            v[j++] = v[i--];\n        }\n    }\n    long result = 0;\n    for (int i = 0; i < digits; i++) {\n        result = result * 10 + v[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpxfehhxm8: /tmp/tmpxfehhxm8.cpp:60: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(num == rev) {\n        return num;\n    }\n    if(num > rev) {\n        return rev;\n    }\n    long num_digits = 0;\n    temp = num;\n    while(temp != 0) {\n        num_digits++;\n        temp /= 10;\n    }\n    long left_half = num / pow(10, (num_digits + 1) / 2);\n    long palindrome = left_half * pow(10, num_digits);\n    long left_half_copy = left_half;\n    while(left_half_copy != 0) {\n        palindrome += left_half_copy % 10 * pow(10, num_digits / 2);\n        left_half_copy /= 10;\n        num_digits -= 2;\n    }\n    return palindrome;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "tmp00sjmeop: /tmp/tmp00sjmeop.cpp:35: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    int digits = 0;\n    while(temp) {\n        temp /= 10;\n        digits++;\n    }\n    int odd = digits % 2;\n    int left_half = digits / 2;\n    int right_half = left_half + odd;\n    long left_num = num / pow(10, right_half);\n    long right_num = num % (long)pow(10, right_half);\n    long reverse_right_num = 0;\n    while(right_num) {\n        reverse_right_num = reverse_right_num * 10 + right_num % 10;\n        right_num /= 10;\n    }\n    long new_num = left_num * pow(10, right_half) + reverse_right_num;\n    if(new_num > num) {\n        return new_num;\n    }\n    if(odd) {\n        left_num = left_num / 10;\n    }\n    left_num = left_num + 1;\n    new_num = left_num * pow(10, right_half) + reverse_right_num;\n    return new_num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "tmp4p0gqpdk: /tmp/tmp4p0gqpdk.cpp:34: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(num == rev) {\n        return num;\n    }\n    long inc = 1;\n    while(true) {\n        long temp = num + inc;\n        long rev = 0;\n        while(temp != 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        if(rev == num + inc) {\n            return num + inc;\n        }\n        inc++;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "tmpi1c8qsyr: /tmp/tmpi1c8qsyr.cpp:30: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0)\n    {\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(rev==num)\n    {\n        return num;\n    }\n    else\n    {\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmpzbn_gw3b: /tmp/tmpzbn_gw3b.cpp:24: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // TODO: Implement this function\n    long num1 = num;\n    long num2 = num;\n    long temp = num;\n    int count = 0;\n    while(temp > 0) {\n        temp = temp / 10;\n        count++;\n    }\n    int i = 0;\n    while(i < count / 2) {\n        num1 = num1 / 10;\n        i++;\n    }\n    int j = 0;\n    while(j < count / 2) {\n        num2 = num2 % 10;\n        j++;\n    }\n    if(num1 == num2) {\n        return num;\n    }\n    else {\n        return num + 1;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "tmpl2jr34_9: /tmp/tmpl2jr34_9.cpp:33: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    int digits = 0;\n    while(temp>0){\n        temp = temp/10;\n        digits++;\n    }\n    int mid = digits/2;\n    int i = mid-1;\n    int j = (digits%2)?mid+1:mid;\n    bool leftsmaller = false;\n    while(i>=0 && num/pow(10,i) == num%10){\n        i--;\n        j++;\n    }\n    if(i<0 || num/pow(10,i) < num%10){\n        leftsmaller = true;\n    }\n    while(i>=0){\n        num = num + (num/pow(10,i) - num%10)*pow(10,j);\n        num = num - (num/pow(10,j) - num%10)*pow(10,i);\n        i--;\n        j++;\n    }\n    if(leftsmaller){\n        int carry = 1;\n        i = mid-1;\n        if(digits%2){\n            num = num + pow(10,mid);\n            carry = (num/pow(10,mid))/10;\n            num = num%(long)pow(10,mid);\n        }\n        j = (digits%2)?mid+1:mid;\n        while(i>=0){\n            num = num + carry*pow(10,j);\n            num = num - (num/pow(10,j) - num%10)*pow(10,i);\n            carry = (num/pow(10,j))/10;\n            num = num%(long)pow(10,j);\n            i--;\n            j++;\n        }\n    }\n    return num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmphrl8p89h: /tmp/tmphrl8p89h.cpp:51: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your solution here\n    if(num<0)\n        return -1;\n    if(num<10)\n        return num;\n    int len = 0;\n    long temp = num;\n    while(temp>0){\n        len++;\n        temp/=10;\n    }\n    long left = num/pow(10,len/2);\n    long right = num%(long)pow(10,len/2);\n    long left_copy = left;\n    long right_copy = right;\n    long left_reverse = 0;\n    long right_reverse = 0;\n    while(left>0){\n        left_reverse = left_reverse*10 + left%10;\n        left/=10;\n    }\n    while(right>0){\n        right_reverse = right_reverse*10 + right%10;\n        right/=10;\n    }\n    if(left_reverse>right_reverse){\n        if(len%2==0)\n            return left_copy*pow(10,len/2) + left_reverse;\n        else\n            return left_copy*pow(10,len/2+1) + left_reverse*10 + left_reverse/10;\n    }\n    else{\n        if(len%2==0)\n            return left_copy*pow(10,len/2) + right_reverse;\n        else\n            return left_copy*pow(10,len/2+1) + right_reverse*10 + right_reverse/10;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpvxy8mp_u: /tmp/tmpvxy8mp_u.cpp:45: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n  // Write your code here\n  long temp=num;\n  long rev=0;\n  while(temp!=0)\n  {\n      rev=rev*10+temp%10;\n      temp=temp/10;\n  }\n  if(num==rev)\n  {\n      return num;\n  }\n  else\n  {\n      return rev;\n  }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmp_7kbe_hb: /tmp/tmp_7kbe_hb.cpp:24: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long reverse = 0;\n    while(temp > 0) {\n        reverse = reverse * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(reverse == num) {\n        return num;\n    }\n    if(reverse > num) {\n        return reverse;\n    }\n    long next_palindrome = num;\n    while(next_palindrome <= reverse) {\n        next_palindrome++;\n        temp = next_palindrome;\n        reverse = 0;\n        while(temp > 0) {\n            reverse = reverse * 10 + temp % 10;\n            temp /= 10;\n        }\n    }\n    return next_palindrome;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpm53zcxqc: /tmp/tmpm53zcxqc.cpp:31: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n  if (num < 0) return -1;\n  if (num < 10) return num;\n  std::string s = std::to_string(num);\n  int n = s.size();\n  int mid = n / 2;\n  bool left_smaller = false;\n  int i = mid - 1;\n  int j = (n % 2) ? mid + 1 : mid;\n  while (i >= 0 && s[i] == s[j]) {\n    i--;\n    j++;\n  }\n  if (i < 0 || s[i] < s[j]) left_smaller = true;\n  while (i >= 0) {\n    s[j] = s[i];\n    i--;\n    j++;\n  }\n  if (left_smaller) {\n    int carry = 1;\n    i = mid - 1;\n    if (n % 2) {\n      int num = s[mid] - '0' + carry;\n      carry = num / 10;\n      s[mid] = (num % 10) + '0';\n      j = mid + 1;\n    } else {\n      j = mid;\n    }\n    while (i >= 0) {\n      int num = s[i] - '0' + carry;\n      carry = num / 10;\n      s[i] = (num % 10) + '0';\n      s[j++] = s[i--];\n    }\n  }\n  return std::stol(s);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpfpxjcg1b: /tmp/tmpfpxjcg1b.cpp:45: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    int len=0;\n    while(temp!=0){\n        len++;\n        temp/=10;\n    }\n    long left=num;\n    long right=0;\n    for(int i=0;i<len/2;i++){\n        right=right*10+left%10;\n        left/=10;\n    }\n    if(len%2==1)\n        left/=10;\n    if(left==right){\n        if(len%2==1){\n            left=left*10+1;\n            right=right*10+1;\n        }\n        else{\n            left=left*10+1;\n            right=right*10+1;\n        }\n    }\n    else{\n        if(left>right){\n            right=left;\n        }\n        else{\n            left++;\n            right=left;\n        }\n    }\n    long ans=0;\n    for(int i=0;i<len/2;i++){\n        ans=ans*10+left%10;\n        left/=10;\n    }\n    if(len%2==1)\n        ans=ans*10+left%10;\n    for(int i=0;i<len/2;i++){\n        ans=ans*10+right%10;\n        right/=10;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpm1ltnq4z: /tmp/tmpm1ltnq4z.cpp:54: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp != 0) {\n        rev = (rev * 10) + (temp % 10);\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    if(rev < num) {\n        return rev;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpqq4r6dad: /tmp/tmpqq4r6dad.cpp:21: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // your code goes here\n    long temp=num;\n    long rev=0;\n    while(temp>0)\n    {\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(rev==num)\n    {\n        return num;\n    }\n    else\n    {\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmptqgbip6_: /tmp/tmptqgbip6_.cpp:24: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string str = std::to_string(num);\n    int n = str.length();\n    int mid = n/2;\n    bool leftsmaller = false;\n    int i = mid - 1;\n    int j = (n % 2) ? mid + 1 : mid;\n    while (i >= 0 && str[i] == str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || str[i] < str[j]) {\n        leftsmaller = true;\n    }\n    while (i >= 0) {\n        str[j] = str[i];\n        j++;\n        i--;\n    }\n    if (leftsmaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (n % 2 == 1) {\n            int x = str[mid] - '0';\n            x += carry;\n            carry = x / 10;\n            x %= 10;\n            str[mid] = (char)(x + '0');\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int x = str[i] - '0';\n            x += carry;\n            carry = x / 10;\n            x %= 10;\n            str[i] = (char)(x + '0');\n            str[j++] = str[i--];\n        }\n    }\n    return std::stol(str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmpoola_l93: /tmp/tmpoola_l93.cpp:49: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    if(rev > num) {\n        return rev;\n    }\n    long next_palindrome = num;\n    while(true) {\n        next_palindrome++;\n        temp = next_palindrome;\n        rev = 0;\n        while(temp > 0) {\n            rev = rev*10 + temp%10;\n            temp /= 10;\n        }\n        if(rev == next_palindrome) {\n            return next_palindrome;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpe_0vrt7b: /tmp/tmpe_0vrt7b.cpp:34: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long n = num;\n    long temp = num;\n    long digits = 0;\n    while(temp != 0) {\n        digits++;\n        temp /= 10;\n    }\n    long left = digits/2;\n    long right = digits - left;\n    long left_num = num / pow(10, right);\n    long right_num = num % (long)pow(10, right);\n    long left_num_copy = left_num;\n    long right_num_copy = right_num;\n    long left_num_rev = 0;\n    long right_num_rev = 0;\n    while(left_num_copy != 0) {\n        left_num_rev = left_num_rev * 10 + left_num_copy % 10;\n        left_num_copy /= 10;\n    }\n    while(right_num_copy != 0) {\n        right_num_rev = right_num_rev * 10 + right_num_copy % 10;\n        right_num_copy /= 10;\n    }\n    if(left_num_rev > right_num_rev) {\n        return num - right_num + left_num_rev;\n    }\n    else {\n        long new_num = num + pow(10, right);\n        return next_smallest_palindrome(new_num);\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpaj4ptpk2: /tmp/tmpaj4ptpk2.cpp:38: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    else {\n        return num + 1;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpxl26e18f: /tmp/tmpxl26e18f.cpp:21: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long temp1 = num;\n    long temp2 = rev;\n    long temp3 = num;\n    long temp4 = rev;\n    long count = 0;\n    while(temp1 != 0) {\n        count++;\n        temp1 /= 10;\n    }\n    long mid = count / 2;\n    if(count % 2 == 0) {\n        while(mid != 0) {\n            temp2 /= 10;\n            mid--;\n        }\n        temp2 /= 10;\n    }\n    else {\n        while(mid != 0) {\n            temp2 /= 10;\n            mid--;\n        }\n    }\n    if(temp2 > temp3) {\n        return rev;\n    }\n    else {\n        long temp5 = num;\n        long temp6 = rev;\n        long count1 = 0;\n        while(temp5 != 0) {\n            count1++;\n            temp5 /= 10;\n        }\n        long mid1 = count1 / 2;\n        if(count1 % 2 == 0) {\n            while(mid1 != 0) {\n                temp6 /= 10;\n                mid1--;\n            }\n            temp6 /= 10;\n        }\n        else {\n            while(mid1 != 0) {\n                temp6 /= 10;\n                mid1--;\n            }\n        }\n        long temp7 = num;\n        long temp8 = rev;\n        long count2 = 0;\n        while(temp7 != 0) {\n            count2++;\n            temp7 /= 10;\n        }\n        long mid2 = count2 / 2;\n        if(count2 % 2 == 0) {\n            while(mid2 != 0) {\n                temp8 /= 10;\n                mid2--;\n            }\n            temp8 /= 10;\n        }\n        else {\n            while(mid2 != 0\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "/tmp/tmpss2loeyh.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmpss2loeyh.cpp:79:28: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   79 |             while(mid2 != 0\n      |                  ~         ^\n      |                            )\n   80 | }\n      | ~                           \n/tmp/tmpss2loeyh.cpp:80:1: error: expected primary-expression before \u2018}\u2019 token\n   80 | }\n      | ^\n/tmp/tmpss2loeyh.cpp:81:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   81 | int main() {\n      |            ^\n/tmp/tmpss2loeyh.cpp:86:1: error: expected \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmpss2loeyh.cpp:41:10: note: to match this \u2018{\u2019\n   41 |     else {\n      |          ^\n/tmp/tmpss2loeyh.cpp:86:1: error: expected \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmpss2loeyh.cpp:4:41: note: to match this \u2018{\u2019\n    4 | long next_smallest_palindrome(long num) {\n      |                                         ^\n/tmp/tmpss2loeyh.cpp:86:1: warning: control reaches end of non-void function [-Wreturn-type]\n   86 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string str = std::to_string(num);\n    int n = str.length();\n    int mid = n / 2;\n    bool leftsmaller = false;\n    int i = mid - 1;\n    int j = (n % 2) ? mid + 1 : mid;\n    while (i >= 0 && str[i] == str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || str[i] < str[j]) {\n        leftsmaller = true;\n    }\n    while (i >= 0) {\n        str[j] = str[i];\n        j++;\n        i--;\n    }\n    if (leftsmaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (n % 2 == 1) {\n            int x = str[mid] - '0';\n            x += carry;\n            carry = x / 10;\n            x %= 10;\n            str[mid] = (char)(x + '0');\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int x = str[i] - '0';\n            x += carry;\n            carry = x / 10;\n            x %= 10;\n            str[i] = (char)(x + '0');\n            str[j++] = str[i--];\n        }\n    }\n    return std::stol(str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpnst0slyf: /tmp/tmpnst0slyf.cpp:49: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    if (num < 0) {\n        return -1;\n    }\n    if (num < 10) {\n        return num;\n    }\n    std::string str = std::to_string(num);\n    int len = str.length();\n    int mid = len / 2;\n    int left = mid - 1;\n    int right = (len % 2) ? mid + 1 : mid;\n    bool left_smaller = false;\n    while (left >= 0 && str[left] == str[right]) {\n        left--;\n        right++;\n    }\n    if (left < 0 || str[left] < str[right]) {\n        left_smaller = true;\n    }\n    while (left >= 0) {\n        str[right++] = str[left--];\n    }\n    if (left_smaller) {\n        int carry = 1;\n        left = mid - 1;\n        if (len % 2) {\n            int num = str[mid] - '0' + carry;\n            carry = num / 10;\n            str[mid] = (num % 10) + '0';\n            right = mid + 1;\n        } else {\n            right = mid;\n        }\n        while (left >= 0) {\n            int num = str[left] - '0' + carry;\n            carry = num / 10;\n            str[left] = (num % 10) + '0';\n            str[right++] = str[left--];\n        }\n    }\n    return std::stol(str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmphmdeiz0m: /tmp/tmphmdeiz0m.cpp:49: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    if(num < 0) return -1;\n    if(num < 10) return num;\n    std::string num_str = std::to_string(num);\n    int len = num_str.length();\n    int mid = len / 2;\n    bool is_odd = len % 2;\n    int left_mid = mid - 1;\n    int right_mid = (is_odd) ? mid + 1 : mid;\n    bool left_smaller = false;\n    while(left_mid >= 0 && num_str[left_mid] == num_str[right_mid]) {\n        left_mid--;\n        right_mid++;\n    }\n    if(left_mid < 0 || num_str[left_mid] < num_str[right_mid]) {\n        left_smaller = true;\n    }\n    while(left_mid >= 0) {\n        num_str[right_mid] = num_str[left_mid];\n        left_mid--;\n        right_mid++;\n    }\n    if(left_smaller) {\n        int carry = 1;\n        if(is_odd) {\n            int mid_digit = num_str[mid] - '0';\n            mid_digit += carry;\n            carry = mid_digit / 10;\n            num_str[mid] = (mid_digit % 10) + '0';\n            right_mid = mid + 1;\n        } else {\n            right_mid = mid;\n        }\n        left_mid = mid - 1;\n        while(left_mid >= 0) {\n            int digit = num_str[left_mid] - '0';\n            digit += carry;\n            carry = digit / 10;\n            num_str[left_mid] = (digit % 10) + '0';\n            num_str[right_mid] = num_str[left_mid];\n            left_mid--;\n            right_mid++;\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpgw48e5ec: /tmp/tmpgw48e5ec.cpp:52: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string num_str = std::to_string(num);\n    int len = num_str.length();\n    int mid = len / 2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && num_str[i] == num_str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || num_str[i] < num_str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        num_str[j] = num_str[i];\n        i--;\n        j++;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2) {\n            int num = num_str[mid] - '0' + carry;\n            carry = num / 10;\n            num_str[mid] = (num % 10) + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int num = num_str[i] - '0' + carry;\n            carry = num / 10;\n            num_str[i] = (num % 10) + '0';\n            num_str[j++] = num_str[i--];\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123145,
      "stdout": "",
      "stderr": "tmpvhsier9k: /tmp/tmpvhsier9k.cpp:45: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string s = std::to_string(num);\n    int n = s.size();\n    int mid = n/2;\n    int i = mid - 1;\n    int j = (n%2)? mid + 1 : mid;\n    while(i >= 0 && s[i] == s[j]) {\n        i--;\n        j++;\n    }\n    if(i < 0 || s[i] < s[j]) {\n        bool left_smaller = (i < 0 || s[i] < s[j]);\n        while(i >= 0) {\n            s[j++] = s[i--];\n        }\n        if(left_smaller) {\n            int carry = 1;\n            i = mid - 1;\n            if(n%2 == 1) {\n                int x = s[mid] - '0';\n                x += carry;\n                carry = x/10;\n                s[mid] = (x%10) + '0';\n                j = mid + 1;\n            } else {\n                j = mid;\n            }\n            while(i >= 0) {\n                int x = s[i] - '0';\n                x += carry;\n                carry = x/10;\n                s[i] = (x%10) + '0';\n                s[j++] = s[i--];\n            }\n        }\n    }\n    return std::stol(s);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpoh_wh6wj: /tmp/tmpoh_wh6wj.cpp:44: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    int len=0;\n    while(temp!=0)\n    {\n        temp/=10;\n        len++;\n    }\n    long ans=0;\n    long left=num;\n    long right=0;\n    int i=0;\n    while(i<len/2)\n    {\n        right=right*10+left%10;\n        left/=10;\n        i++;\n    }\n    if(len%2!=0)\n    {\n        left/=10;\n    }\n    ans=left*pow(10,len/2)+right;\n    if(ans>num)\n    {\n        return ans;\n    }\n    else\n    {\n        if(len%2==0)\n        {\n            left=left*10+left%10+1;\n            left/=10;\n        }\n        else\n        {\n            left=left*10+left%10+1;\n            left/=10;\n        }\n        ans=left*pow(10,len/2)+right;\n        return ans;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpnex8ghk4: /tmp/tmpnex8ghk4.cpp:50: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string s = std::to_string(num);\n    int n = s.size();\n    int i = n/2 - 1;\n    int j = (n%2 == 0) ? i+1 : i+2;\n    while(i >= 0 && s[i] == s[j]) {\n        i--;\n        j++;\n    }\n    if(i < 0 || s[i] < s[j]) {\n        i = n/2 - 1;\n        j = (n%2 == 0) ? i+1 : i+2;\n        int carry = 1;\n        while(i >= 0) {\n            int sum = s[i] - '0' + carry;\n            carry = sum/10;\n            s[i] = (sum%10) + '0';\n            s[j] = s[i];\n            i--;\n            j++;\n        }\n    } else {\n        while(i >= 0) {\n            s[j] = s[i];\n            i--;\n            j++;\n        }\n    }\n    return std::stol(s);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpj_t0xlak: /tmp/tmpj_t0xlak.cpp:36: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev > num) {\n        return rev;\n    }\n    else {\n        long temp = num;\n        long rev = 0;\n        while(temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        if(rev > num) {\n            return rev;\n        }\n        else {\n            long temp = num;\n            long rev = 0;\n            while(temp > 0) {\n                rev = rev * 10 + temp % 10;\n                temp /= 10;\n            }\n            if(rev > num) {\n                return rev;\n            }\n            else {\n                long temp = num;\n                long rev = 0;\n                while(temp > 0) {\n                    rev = rev * 10 + temp % 10;\n                    temp /= 10;\n                }\n                if(rev > num) {\n                    return rev;\n                }\n                else {\n                    long temp = num;\n                    long rev = 0;\n                    while(temp > 0) {\n                        rev = rev * 10 + temp % 10;\n                        temp /= 10;\n                    }\n                    if(rev > num) {\n                        return rev;\n                    }\n                    else {\n                        long temp = num;\n                        long rev = 0;\n                        while(temp > 0) {\n                            rev = rev * 10 + temp % 10;\n                            temp /= 10;\n                        }\n                        if(rev > num) {\n                            return rev;\n                        }\n                        else {\n                            long temp = num;\n                            long rev = 0;\n                            while(temp > 0) {\n                                rev = rev * 10 + temp % 10;\n                                temp /= 10;\n                            }\n                            if(rev > num) {\n                                return rev;\n                            }\n                            else {\n                                long temp = num;\n                                long rev = 0;\n                                while(temp > 0) {\n                                    rev\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "/tmp/tmpnl8mka2i.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmpnl8mka2i.cpp:79:40: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   79 |                                     rev\n      |                                        ^\n      |                                        ;\n   80 | }\n      | ~                                       \n/tmp/tmpnl8mka2i.cpp:81:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   81 | int main() {\n      |            ^\n/tmp/tmpnl8mka2i.cpp:86:1: error: expected \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmpnl8mka2i.cpp:75:34: note: to match this \u2018{\u2019\n   75 |                             else {\n      |                                  ^\n/tmp/tmpnl8mka2i.cpp:86:1: error: expected \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmpnl8mka2i.cpp:65:30: note: to match this \u2018{\u2019\n   65 |                         else {\n      |                              ^\n/tmp/tmpnl8mka2i.cpp:86:1: error: expected \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmpnl8mka2i.cpp:55:26: note: to match this \u2018{\u2019\n   55 |                     else {\n      |                          ^\n/tmp/tmpnl8mka2i.cpp:86:1: error: expected \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmpnl8mka2i.cpp:45:22: note: to match this \u2018{\u2019\n   45 |                 else {\n      |                      ^\n/tmp/tmpnl8mka2i.cpp:86:1: error: expected \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmpnl8mka2i.cpp:35:18: note: to match this \u2018{\u2019\n   35 |             else {\n      |                  ^\n/tmp/tmpnl8mka2i.cpp:86:1: error: expected \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmpnl8mka2i.cpp:25:14: note: to match this \u2018{\u2019\n   25 |         else {\n      |              ^\n/tmp/tmpnl8mka2i.cpp:86:1: error: expected \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmpnl8mka2i.cpp:15:10: note: to match this \u2018{\u2019\n   15 |     else {\n      |          ^\n/tmp/tmpnl8mka2i.cpp:86:1: error: expected \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmpnl8mka2i.cpp:4:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string str = std::to_string(num);\n    int n = str.length();\n    int mid = n/2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (n % 2)? mid + 1 : mid;\n    while(i >= 0 && str[i] == str[j]) {\n        i--;\n        j++;\n    }\n    if(i < 0 || str[i] < str[j])\n        left_smaller = true;\n    while(i >= 0) {\n        str[j] = str[i];\n        j++;\n        i--;\n    }\n    if(left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if(n % 2 == 1) {\n            int x = str[mid] - '0';\n            x += carry;\n            carry = x / 10;\n            x %= 10;\n            str[mid] = (char)(x + '0');\n            j = mid + 1;\n        } else\n            j = mid;\n        while(i >= 0) {\n            int x = str[i] - '0';\n            x += carry;\n            carry = x / 10;\n            x %= 10;\n            str[i] = str[j] = (char)(x + '0');\n            i--;\n            j++;\n        }\n    }\n    return std::stol(str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "tmpgkgimmyv: /tmp/tmpgkgimmyv.cpp:48: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long next = num + 1;\n    while(true) {\n        temp = next;\n        rev = 0;\n        while(temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        if(rev == next) {\n            return next;\n        }\n        next++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "tmpshhfsid1: /tmp/tmpshhfsid1.cpp:31: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(rev==num)\n        return num;\n    else\n        return num+1;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "tmphm88mt6l: /tmp/tmphm88mt6l.cpp:19: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(rev==num)\n        return num;\n    else{\n        num++;\n        while(num!=rev){\n            temp=num;\n            rev=0;\n            while(temp!=0){\n                rev=rev*10+temp%10;\n                temp/=10;\n            }\n            if(rev==num)\n                return num;\n            else\n                num++;\n        }\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "tmpe67u8el2: /tmp/tmpe67u8el2.cpp:32: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    else {\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "tmp7u3yxy8f: /tmp/tmp7u3yxy8f.cpp:21: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(num==rev)\n        return num;\n    else{\n        if(num>rev)\n            num=num+1;\n        while(true){\n            temp=num;\n            rev=0;\n            while(temp!=0){\n                rev=rev*10+temp%10;\n                temp/=10;\n            }\n            if(num==rev)\n                return num;\n            else\n                num++;\n        }\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpegxt3t8u: /tmp/tmpegxt3t8u.cpp:33: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n  // Implement this placeholder.\n  return 0;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "tmptg0n5pux: /tmp/tmptg0n5pux.cpp:10: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp>0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long num_digits = 0;\n    temp = num;\n    while(temp>0) {\n        num_digits++;\n        temp /= 10;\n    }\n    long left_half = num/(long)pow(10, num_digits/2);\n    long right_half = num%(long)pow(10, num_digits/2);\n    if(left_half == right_half) {\n        return num;\n    }\n    long left_half_rev = 0;\n    temp = left_half;\n    while(temp>0) {\n        left_half_rev = left_half_rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(left_half_rev == right_half) {\n        return num;\n    }\n    long left_half_inc = left_half+1;\n    long left_half_inc_rev = 0;\n    temp = left_half_inc;\n    while(temp>0) {\n        left_half_inc_rev = left_half_inc_rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(left_half_inc_rev == right_half) {\n        return left_half_inc*(long)pow(10, num_digits/2) + right_half;\n    }\n    long left_half_dec = left_half-1;\n    long left_half_dec_rev = 0;\n    temp = left_half_dec;\n    while(temp>0) {\n        left_half_dec_rev = left_half_dec_rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(left_half_dec_rev == right_half) {\n        return left_half_dec*(long)pow(10, num_digits/2) + right_half;\n   \n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "/tmp/tmp704wk913.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmp704wk913.cpp:55:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   55 | int main() {\n      |            ^\n/tmp/tmp704wk913.cpp:60:1: error: expected \u2018}\u2019 at end of input\n   60 | }\n      | ^\n/tmp/tmp704wk913.cpp:4:41: note: to match this \u2018{\u2019\n    4 | long next_smallest_palindrome(long num) {\n      |                                         ^\n/tmp/tmp704wk913.cpp:60:1: warning: control reaches end of non-void function [-Wreturn-type]\n   60 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0)\n    {\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    if(num == rev)\n    {\n        return num;\n    }\n    else\n    {\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmp70u9_dh1: /tmp/tmp70u9_dh1.cpp:24: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long temp1 = num;\n    long temp2 = rev;\n    while(temp1 > 0 && temp2 > 0) {\n        if(temp1%10 != temp2%10) {\n            break;\n        }\n        temp1 /= 10;\n        temp2 /= 10;\n    }\n    if(temp1 == 0) {\n        return num;\n    }\n    long temp3 = num;\n    long temp4 = rev;\n    while(temp3 > 0 && temp4 > 0) {\n        if(temp3%10 != temp4%10) {\n            break;\n        }\n        temp3 /= 10;\n        temp4 /= 10;\n    }\n    if(temp3 == 0) {\n        return num;\n    }\n    long temp5 = num;\n    long temp6 = rev;\n    while(temp5 > 0 && temp6 > 0) {\n        if(temp5%10 != temp6%10) {\n            break;\n        }\n        temp5 /= 10;\n        temp6 /= 10;\n    }\n    if(temp5 == 0) {\n        return num;\n    }\n    long temp7 = num;\n    long temp8 = rev;\n    while(temp7 > 0 && temp8 > 0) {\n        if(temp7%10 != temp8%10) {\n            break;\n        }\n        temp7 /= 10;\n        temp8 /= 10;\n    }\n    if(temp7 == 0) {\n        return num;\n    }\n    long temp9 = num;\n    long temp10 = rev;\n    while(temp9 > 0 && temp10 > 0) {\n        if(temp9%10 != temp10%10) {\n            break;\n        }\n        temp9 /= 10;\n        temp10 /= 10;\n    }\n    if(temp9 == 0) {\n        return num;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpj5_3jzri: /tmp/tmpj5_3jzri.cpp:77: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string num_str = std::to_string(num);\n    int len = num_str.length();\n    int mid = len / 2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && num_str[i] == num_str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || num_str[i] < num_str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        num_str[j] = num_str[i];\n        i--;\n        j++;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2) {\n            int num = num_str[mid] - '0' + carry;\n            carry = num / 10;\n            num_str[mid] = (num % 10) + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int num = num_str[i] - '0' + carry;\n            carry = num / 10;\n            num_str[i] = (num % 10) + '0';\n            num_str[j++] = num_str[i--];\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123145,
      "stdout": "",
      "stderr": "tmpvhsier9k: /tmp/tmpvhsier9k.cpp:45: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string num_str = std::to_string(num);\n    int len = num_str.size();\n    int mid = len / 2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && num_str[i] == num_str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || num_str[i] < num_str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        num_str[j] = num_str[i];\n        i--;\n        j++;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2) {\n            int num = num_str[mid] - '0' + carry;\n            num_str[mid] = (num % 10) + '0';\n            carry = num / 10;\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int num = num_str[i] - '0' + carry;\n            num_str[i] = (num % 10) + '0';\n            num_str[j] = num_str[i];\n            carry = num / 10;\n            i--;\n            j++;\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmpww9v40bh: /tmp/tmpww9v40bh.cpp:47: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    int len=0;\n    while(temp>0){\n        temp=temp/10;\n        len++;\n    }\n    int mid=len/2;\n    int i=mid-1;\n    int j=(len%2==0)?mid:mid+1;\n    bool leftsmaller=false;\n    while(i>=0 && num/pow(10,i)==num%10){\n        i--;\n        j++;\n    }\n    if(i<0 || num/pow(10,i)<num%10){\n        leftsmaller=true;\n    }\n    while(i>=0){\n        num=num+pow(10,j)*(num/pow(10,i)%10);\n        j++;\n        i--;\n    }\n    if(leftsmaller){\n        int carry=1;\n        i=mid-1;\n        if(len%2==1){\n            num=num+pow(10,mid);\n            j=mid+1;\n        }\n        else{\n            j=mid;\n        }\n        while(i>=0){\n            num=num+pow(10,j)*carry;\n            carry=(num/pow(10,i)%10)/9;\n            num=num+pow(10,i)*carry;\n            i--;\n            j++;\n        }\n    }\n    return num;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "/tmp/tmp0dryduvm.cpp: In function \u2018long int next_smallest_palindrome(long int)\u2019:\n/tmp/tmp0dryduvm.cpp:24:41: error: invalid operands of types \u2018double\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   24 |         num=num+pow(10,j)*(num/pow(10,i)%10);\n      |                            ~~~~~~~~~~~~~^~~\n      |                               |          |\n      |                               double     int\n/tmp/tmp0dryduvm.cpp:40:33: error: invalid operands of types \u2018double\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   40 |             carry=(num/pow(10,i)%10)/9;\n      |                    ~~~~~~~~~~~~~^~~\n      |                       |          |\n      |                       double     int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string num_str = std::to_string(num);\n    int len = num_str.length();\n    int mid = len / 2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && num_str[i] == num_str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || num_str[i] < num_str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        num_str[j] = num_str[i];\n        j++;\n        i--;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2 == 1) {\n            int num = num_str[mid] - '0' + carry;\n            carry = num / 10;\n            num_str[mid] = (num % 10) + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int num = num_str[i] - '0' + carry;\n            carry = num / 10;\n            num_str[i] = (num % 10) + '0';\n            num_str[j++] = num_str[i--];\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "tmpf6_v4_mk: /tmp/tmpf6_v4_mk.cpp:45: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(num>0)\n    {\n        rev=rev*10+num%10;\n        num=num/10;\n    }\n    if(temp==rev)\n    {\n        return temp;\n    }\n    else\n    {\n        return rev;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmpjltiojep: /tmp/tmpjltiojep.cpp:24: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string num_str = std::to_string(num);\n    int len = num_str.length();\n    int mid = len / 2;\n    bool left_smaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && num_str[i] == num_str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || num_str[i] < num_str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        num_str[j] = num_str[i];\n        j++;\n        i--;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2) {\n            int num = num_str[mid] - '0' + carry;\n            carry = num / 10;\n            num_str[mid] = (num % 10) + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int num = num_str[i] - '0' + carry;\n            carry = num / 10;\n            num_str[i] = (num % 10) + '0';\n            num_str[j++] = num_str[i--];\n        }\n    }\n    return std::stol(num_str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "tmp7tojmw8q: /tmp/tmp7tojmw8q.cpp:45: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here.\n    long temp=num;\n    long rev=0;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(rev==num){\n        num++;\n    }\n    while(1){\n        temp=num;\n        rev=0;\n        while(temp!=0){\n            rev=rev*10+temp%10;\n            temp/=10;\n        }\n        if(rev==num){\n            return num;\n        }\n        num++;\n    }\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    long temp = num;\n    long rev = 0;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return rev;\n    }\n    long temp1 = num, temp2 = rev;\n    while(temp1 != temp2) {\n        temp1++;\n        temp2 = 0;\n        temp = temp1;\n        while(temp) {\n            temp2 = temp2 * 10 + temp % 10;\n            temp /= 10;\n        }\n    }\n    return temp1;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpb5vahmlp: /tmp/tmpb5vahmlp.cpp:28: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Implement this placeholder.\n    return 0;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "tmpzotmbc7t: /tmp/tmpzotmbc7t.cpp:10: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    // Write your code here\n    long temp=num;\n    int n=0;\n    while(temp>0){\n        temp=temp/10;\n        n++;\n    }\n    int mid=n/2;\n    int i=mid-1;\n    int j=n%2==0?mid:mid+1;\n    while(i>=0 && num/pow(10,i)==num%10){\n        i--;\n        j++;\n    }\n    if(i<0){\n        return num+1;\n    }\n    long left=num/pow(10,j);\n    long inc=1;\n    if(num/pow(10,i)>num%10){\n        inc=0;\n    }\n    left=left+inc;\n    long right=left;\n    i=mid-1;\n    j=n%2==0?mid:mid+1;\n    while(i>=0){\n        right=right*10+left%10;\n        left=left/10;\n        i--;\n        j++;\n    }\n    return right;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpcfvujl68: /tmp/tmpcfvujl68.cpp:41: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n  // Implement this placeholder.\n  return 0;\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "tmptg0n5pux: /tmp/tmptg0n5pux.cpp:10: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    std::string str = std::to_string(num);\n    int len = str.length();\n    int mid = len / 2;\n    bool leftsmaller = false;\n    int i = mid - 1;\n    int j = (len % 2) ? mid + 1 : mid;\n    while (i >= 0 && str[i] == str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || str[i] < str[j]) {\n        leftsmaller = true;\n    }\n    while (i >= 0) {\n        str[j] = str[i];\n        j++;\n        i--;\n    }\n    if (leftsmaller) {\n        int carry = 1;\n        i = mid - 1;\n        if (len % 2 == 1) {\n            int x = str[mid] - '0';\n            x += carry;\n            carry = x / 10;\n            x %= 10;\n            str[mid] = (char)(x + '0');\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int x = str[i] - '0';\n            x += carry;\n            carry = x / 10;\n            x %= 10;\n            str[i] = (char)(x + '0');\n            str[j++] = str[i--];\n        }\n    }\n    return std::stol(str);\n}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "tmpq6i_lpbo: /tmp/tmpq6i_lpbo.cpp:49: int main(): Assertion `candidate((99)) == (101)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}