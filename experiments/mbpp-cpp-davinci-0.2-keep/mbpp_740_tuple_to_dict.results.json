{
  "name": "mbpp_740_tuple_to_dict",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    while(test_tup.size() > 1) {\n        test_dict[test_tup[0]] = test_tup[1];\n        test_tup.pop_front();\n        test_tup.pop_front();\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "/tmp/tmptpfrcuxk.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmptpfrcuxk.cpp:6:20: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     while(test_tup.size() > 1) {\n      |                    ^~~~\n/tmp/tmptpfrcuxk.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[0]] = test_tup[1];\n      |                             ^\n/tmp/tmptpfrcuxk.cpp:7:44: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[0]] = test_tup[1];\n      |                                            ^\n/tmp/tmptpfrcuxk.cpp:8:18: error: request for member \u2018pop_front\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |         test_tup.pop_front();\n      |                  ^~~~~~~~~\n/tmp/tmptpfrcuxk.cpp:9:18: error: request for member \u2018pop_front\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    9 |         test_tup.pop_front();\n      |                  ^~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptpfrcuxk.cpp:2:\n/tmp/tmptpfrcuxk.cpp: In function \u2018int main()\u2019:\n/tmp/tmptpfrcuxk.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptpfrcuxk.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i,j;\n    for(i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "/tmp/tmpp_8rmiz9.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpp_8rmiz9.cpp:7:24: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for(i=0;i<test_tup.size();i+=2) {\n      |                        ^~~~\n/tmp/tmpp_8rmiz9.cpp:8:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpp_8rmiz9.cpp:8:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpp_8rmiz9.cpp:2:\n/tmp/tmpp_8rmiz9.cpp: In function \u2018int main()\u2019:\n/tmp/tmpp_8rmiz9.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpp_8rmiz9.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpp_8rmiz9.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidat",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    while(test_tup != 0) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    for(int i = 0; i < test_vec.size(); i += 2) {\n        test_dict[test_vec[i]] = test_vec[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp2gwiid92.cpp:2:\n/tmp/tmp2gwiid92.cpp: In function \u2018int main()\u2019:\n/tmp/tmp2gwiid92.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp2gwiid92.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp2gwiid92.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "/tmp/tmprrlgo5hm.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmprrlgo5hm.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmprrlgo5hm.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmprrlgo5hm.cpp:7:45: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmprrlgo5hm.cpp:2:\n/tmp/tmprrlgo5hm.cpp: In function \u2018int main()\u2019:\n/tmp/tmprrlgo5hm.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmprrlgo5hm.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmprrlgo5hm.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7roozmxb.cpp:2:\n/tmp/tmp7roozmxb.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7roozmxb.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long test_tup_size = test_tup.size();\n    for(long i = 0; i < test_tup_size; i++) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "/tmp/tmp_x8owqic.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp_x8owqic.cpp:6:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     long test_tup_size = test_tup.size();\n      |                                   ^~~~\n/tmp/tmp_x8owqic.cpp:8:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmp_x8owqic.cpp:8:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_x8owqic.cpp:2:\n/tmp/tmp_x8owqic.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_x8owqic.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_x8owqic.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_x8owqic.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long test_tup_arr[test_tup];\n    for(long i = 0; i < test_tup; i++) {\n        test_tup_arr[i] = i;\n    }\n    for(long i = 0; i < test_tup; i+=2) {\n        test_dict[test_tup_arr[i]] = test_tup_arr[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmplo2v9e4k.cpp:2:\n/tmp/tmplo2v9e4k.cpp: In function \u2018int main()\u2019:\n/tmp/tmplo2v9e4k.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmplo2v9e4k.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmplo2v9e4k.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long temp = test_tup;\n    while(temp) {\n        long key = temp % 10;\n        temp = temp / 10;\n        long value = temp % 10;\n        temp = temp / 10;\n        test_dict[key] = value;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1wugzo73.cpp:2:\n/tmp/tmp1wugzo73.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1wugzo73.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1wugzo73.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1wugzo73.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(long i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "/tmp/tmp1m0jw4yc.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp1m0jw4yc.cpp:6:29: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(long i=0;i<test_tup.size();i+=2) {\n      |                             ^~~~\n/tmp/tmp1m0jw4yc.cpp:7:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmp1m0jw4yc.cpp:7:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1m0jw4yc.cpp:2:\n/tmp/tmp1m0jw4yc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1m0jw4yc.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1m0jw4yc.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1m0jw4yc.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     asser",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup[i] != NULL) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n        i+=2;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "/tmp/tmptruhnwme.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmptruhnwme.cpp:7:21: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |     while(test_tup[i] != NULL) {\n      |                     ^\n/tmp/tmptruhnwme.cpp:8:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmptruhnwme.cpp:8:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptruhnwme.cpp:2:\n/tmp/tmptruhnwme.cpp: In function \u2018int main()\u2019:\n/tmp/tmptruhnwme.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptruhnwme.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptruhnwme.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = test_tup[0];\n    for (int i = 1; i < test_tup.size(); i++) {\n        dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "/tmp/tmp7hk86_23.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp7hk86_23.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmp7hk86_23.cpp:7:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (int i = 1; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmp7hk86_23.cpp:8:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n    8 |         dict[key] = test_tup[i];\n      |                               ^\n/tmp/tmp7hk86_23.cpp:9:25: error: invalid types \u2018long int[int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7hk86_23.cpp:2:\n/tmp/tmp7hk86_23.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7hk86_23.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7hk86_23.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7hk86_23.cpp:17:37: error: cannot conver",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    while(test_tup > 0) {\n        value = test_tup % 10;\n        test_tup /= 10;\n        key = test_tup % 10;\n        test_map[key] = value;\n        test_tup /= 10;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpu4sb2n0x.cpp:2:\n/tmp/tmpu4sb2n0x.cpp: In function \u2018int main()\u2019:\n/tmp/tmpu4sb2n0x.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpu4sb2n0x.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpu4sb2n0x.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    while(test_tup) {\n        value = test_tup%10;\n        test_tup = test_tup/10;\n        key = test_tup%10;\n        test_tup = test_tup/10;\n        test_map.insert(std::pair<long,long>(key,value));\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpswnkxsz0.cpp:2:\n/tmp/tmpswnkxsz0.cpp: In function \u2018int main()\u2019:\n/tmp/tmpswnkxsz0.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpswnkxsz0.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpswnkxsz0.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> res;\n    long key = 0;\n    long value = 0;\n    for(long i = 0; i < test_tup.size(); i++) {\n        if(i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            res.insert(std::pair<long,long>(key,value));\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "/tmp/tmp0_ua6zys.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp0_ua6zys.cpp:8:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for(long i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmp0_ua6zys.cpp:10:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmp0_ua6zys.cpp:13:31: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   13 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp0_ua6zys.cpp:2:\n/tmp/tmp0_ua6zys.cpp: In function \u2018int main()\u2019:\n/tmp/tmp0_ua6zys.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0_ua6zys.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0_ua6zys.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8, 9",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptfvd4y83.cpp:2:\n/tmp/tmptfvd4y83.cpp: In function \u2018int main()\u2019:\n/tmp/tmptfvd4y83.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    while(test_tup) {\n        key = test_tup%10;\n        test_tup /= 10;\n        value = test_tup%10;\n        test_tup /= 10;\n        test_map.insert(std::pair<long,long>(key,value));\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp0ctqe88x.cpp:2:\n/tmp/tmp0ctqe88x.cpp: In function \u2018int main()\u2019:\n/tmp/tmp0ctqe88x.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0ctqe88x.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0ctqe88x.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    while (test_tup != 0) {\n        key = test_tup % 10;\n        test_tup = test_tup / 10;\n        value = test_tup % 10;\n        test_tup = test_tup / 10;\n        test_map[key] = value;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7zx_80di.cpp:2:\n/tmp/tmp7zx_80di.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7zx_80di.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7zx_80di.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7zx_80di.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "/tmp/tmpd94agw7d.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpd94agw7d.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpd94agw7d.cpp:7:24: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         dict[test_tup[i]] = test_tup[i+1];\n      |                        ^\n/tmp/tmpd94agw7d.cpp:7:41: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         dict[test_tup[i]] = test_tup[i+1];\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpd94agw7d.cpp:2:\n/tmp/tmpd94agw7d.cpp: In function \u2018int main()\u2019:\n/tmp/tmpd94agw7d.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpd94agw7d.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpd94agw7d.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(7, 8",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    while (test_tup > 0) {\n        key = test_tup % 10;\n        test_tup /= 10;\n        value = test_tup % 10;\n        test_tup /= 10;\n        test_dict[key] = value;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpex5vv0bi.cpp:2:\n/tmp/tmpex5vv0bi.cpp: In function \u2018int main()\u2019:\n/tmp/tmpex5vv0bi.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpex5vv0bi.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpex5vv0bi.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup) {\n        test_dict[i] = test_tup%10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpyw3vjr9i.cpp:2:\n/tmp/tmpyw3vjr9i.cpp: In function \u2018int main()\u2019:\n/tmp/tmpyw3vjr9i.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpyw3vjr9i.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpyw3vjr9i.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptb4j9k55.cpp:2:\n/tmp/tmptb4j9k55.cpp: In function \u2018int main()\u2019:\n/tmp/tmptb4j9k55.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i = 0; i < test_tup.size(); i += 2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "/tmp/tmpdqvaq69u.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpdqvaq69u.cpp:6:33: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i = 0; i < test_tup.size(); i += 2) {\n      |                                 ^~~~\n/tmp/tmpdqvaq69u.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpdqvaq69u.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpdqvaq69u.cpp:2:\n/tmp/tmpdqvaq69u.cpp: In function \u2018int main()\u2019:\n/tmp/tmpdqvaq69u.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdqvaq69u.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdqvaq69u.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmpipfi73gf.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpipfi73gf.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpipfi73gf.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpipfi73gf.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpipfi73gf.cpp:2:\n/tmp/tmpipfi73gf.cpp: In function \u2018int main()\u2019:\n/tmp/tmpipfi73gf.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpipfi73gf.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpipfi73gf.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    while(test_tup) {\n        key = test_tup % 10;\n        test_tup /= 10;\n        value = test_tup % 10;\n        test_tup /= 10;\n        test_dict[key] = value;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpyhcmu190.cpp:2:\n/tmp/tmpyhcmu190.cpp: In function \u2018int main()\u2019:\n/tmp/tmpyhcmu190.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpyhcmu190.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpyhcmu190.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    while(test_tup != 0) {\n        key = test_tup % 10;\n        test_tup /= 10;\n        value = test_tup % 10;\n        test_tup /= 10;\n        test_map[key] = value;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_7zpnyys.cpp:2:\n/tmp/tmp_7zpnyys.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_7zpnyys.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_7zpnyys.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_7zpnyys.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::vector<long> test_vec;\n    while(test_tup > 0) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    for(int i = 0; i < test_vec.size(); i+=2) {\n        test_map[test_vec[i]] = test_vec[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmprqcjmajs.cpp:2:\n/tmp/tmprqcjmajs.cpp: In function \u2018int main()\u2019:\n/tmp/tmprqcjmajs.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmprqcjmajs.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmprqcjmajs.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    for(long i=0;i<test_tup.size();i+=2) {\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmpyslime6s.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpyslime6s.cpp:6:29: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(long i=0;i<test_tup.size();i+=2) {\n      |                             ^~~~\n/tmp/tmpyslime6s.cpp:7:24: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         dict[test_tup[i]] = test_tup[i+1];\n      |                        ^\n/tmp/tmpyslime6s.cpp:7:41: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         dict[test_tup[i]] = test_tup[i+1];\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpyslime6s.cpp:2:\n/tmp/tmpyslime6s.cpp: In function \u2018int main()\u2019:\n/tmp/tmpyslime6s.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpyslime6s.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpyslime6s.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::mak",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long i = 0;\n    while(test_tup) {\n        dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpygofm4mu.cpp:2:\n/tmp/tmpygofm4mu.cpp: In function \u2018int main()\u2019:\n/tmp/tmpygofm4mu.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpygofm4mu.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpygofm4mu.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7roozmxb.cpp:2:\n/tmp/tmp7roozmxb.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7roozmxb.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0; i<test_tup.size(); i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmp0p8te77a.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp0p8te77a.cpp:6:29: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0; i<test_tup.size(); i+=2) {\n      |                             ^~~~\n/tmp/tmp0p8te77a.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmp0p8te77a.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp0p8te77a.cpp:2:\n/tmp/tmp0p8te77a.cpp: In function \u2018int main()\u2019:\n/tmp/tmp0p8te77a.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0p8te77a.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0p8te77a.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candida",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long i = 0;\n    while (test_tup) {\n        dict[i] = test_tup%10;\n        test_tup /= 10;\n        i++;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp44mi5bmc.cpp:2:\n/tmp/tmp44mi5bmc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp44mi5bmc.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp44mi5bmc.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp44mi5bmc.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = test_tup[0];\n    for (int i = 1; i < test_tup.size(); i++) {\n        dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "/tmp/tmp7hk86_23.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp7hk86_23.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmp7hk86_23.cpp:7:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (int i = 1; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmp7hk86_23.cpp:8:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n    8 |         dict[key] = test_tup[i];\n      |                               ^\n/tmp/tmp7hk86_23.cpp:9:25: error: invalid types \u2018long int[int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7hk86_23.cpp:2:\n/tmp/tmp7hk86_23.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7hk86_23.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7hk86_23.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7hk86_23.cpp:17:37: error: cannot conver",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup[i] != NULL) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n        i += 2;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmp0kok2b3t.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp0kok2b3t.cpp:7:21: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |     while(test_tup[i] != NULL) {\n      |                     ^\n/tmp/tmp0kok2b3t.cpp:8:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmp0kok2b3t.cpp:8:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp0kok2b3t.cpp:2:\n/tmp/tmp0kok2b3t.cpp: In function \u2018int main()\u2019:\n/tmp/tmp0kok2b3t.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0kok2b3t.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0kok2b3t.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = 0;\n    long value = 0;\n    while (test_tup) {\n        key = test_tup % 10;\n        test_tup /= 10;\n        value = test_tup % 10;\n        test_tup /= 10;\n        dict[key] = value;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp983mkzn6.cpp:2:\n/tmp/tmp983mkzn6.cpp: In function \u2018int main()\u2019:\n/tmp/tmp983mkzn6.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp983mkzn6.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp983mkzn6.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n  std::map<long,long> test_map;\n  long i = 0;\n  while(test_tup) {\n    test_map[i] = test_tup % 10;\n    test_tup /= 10;\n    i++;\n  }\n  return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpx6bwwbpq.cpp:2:\n/tmp/tmpx6bwwbpq.cpp: In function \u2018int main()\u2019:\n/tmp/tmpx6bwwbpq.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpx6bwwbpq.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpx6bwwbpq.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk1flmrlt.cpp:2:\n/tmp/tmpk1flmrlt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk1flmrlt.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpk1flmrlt.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpk1flmrlt.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = test_tup[0];\n    for (long i = 1; i < test_tup.size(); i++) {\n        dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmpgr8ydmxs.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpgr8ydmxs.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmpgr8ydmxs.cpp:7:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (long i = 1; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmpgr8ydmxs.cpp:8:31: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         dict[key] = test_tup[i];\n      |                               ^\n/tmp/tmpgr8ydmxs.cpp:9:25: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpgr8ydmxs.cpp:2:\n/tmp/tmpgr8ydmxs.cpp: In function \u2018int main()\u2019:\n/tmp/tmpgr8ydmxs.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpgr8ydmxs.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpgr8ydmxs.cpp:17:37: error: c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7roozmxb.cpp:2:\n/tmp/tmp7roozmxb.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7roozmxb.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    while(test_tup) {\n        test_vec.push_back(test_tup%10);\n        test_tup/=10;\n    }\n    for(int i=0;i<test_vec.size();i+=2) {\n        test_dict[test_vec[i]] = test_vec[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmplhx18owg.cpp:2:\n/tmp/tmplhx18owg.cpp: In function \u2018int main()\u2019:\n/tmp/tmplhx18owg.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmplhx18owg.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmplhx18owg.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long i = 0;\n    while(test_tup) {\n        dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpygofm4mu.cpp:2:\n/tmp/tmpygofm4mu.cpp: In function \u2018int main()\u2019:\n/tmp/tmpygofm4mu.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpygofm4mu.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpygofm4mu.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i;\n    for(i=0;i<test_tup.size();i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmp79m6hq67.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp79m6hq67.cpp:7:24: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for(i=0;i<test_tup.size();i+=2) {\n      |                        ^~~~\n/tmp/tmp79m6hq67.cpp:8:28: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmp79m6hq67.cpp:8:45: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp79m6hq67.cpp:2:\n/tmp/tmp79m6hq67.cpp: In function \u2018int main()\u2019:\n/tmp/tmp79m6hq67.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp79m6hq67.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp79m6hq67.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(st",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpag0yrgfx.cpp:2:\n/tmp/tmpag0yrgfx.cpp: In function \u2018int main()\u2019:\n/tmp/tmpag0yrgfx.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpag0yrgfx.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpag0yrgfx.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = test_tup[0];\n    for (int i = 1; i < test_tup.size(); i++) {\n        dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "/tmp/tmp7hk86_23.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp7hk86_23.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmp7hk86_23.cpp:7:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (int i = 1; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmp7hk86_23.cpp:8:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n    8 |         dict[key] = test_tup[i];\n      |                               ^\n/tmp/tmp7hk86_23.cpp:9:25: error: invalid types \u2018long int[int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7hk86_23.cpp:2:\n/tmp/tmp7hk86_23.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7hk86_23.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7hk86_23.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7hk86_23.cpp:17:37: error: cannot conver",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(int i = 0; i < test_tup.size(); i++) {\n        test_map.insert(test_tup[i], test_tup[i+1]);\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmpf7s8t8zm.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpf7s8t8zm.cpp:6:33: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i = 0; i < test_tup.size(); i++) {\n      |                                 ^~~~\n/tmp/tmpf7s8t8zm.cpp:7:35: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map.insert(test_tup[i], test_tup[i+1]);\n      |                                   ^\n/tmp/tmpf7s8t8zm.cpp:7:50: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map.insert(test_tup[i], test_tup[i+1]);\n      |                                                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpf7s8t8zm.cpp:2:\n/tmp/tmpf7s8t8zm.cpp: In function \u2018int main()\u2019:\n/tmp/tmpf7s8t8zm.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpf7s8t8zm.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpf7s8t8zm.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(7, 8, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptfvd4y83.cpp:2:\n/tmp/tmptfvd4y83.cpp: In function \u2018int main()\u2019:\n/tmp/tmptfvd4y83.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i++) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmp8m8j3m6y.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp8m8j3m6y.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i++) {\n      |                            ^~~~\n/tmp/tmp8m8j3m6y.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmp8m8j3m6y.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp8m8j3m6y.cpp:2:\n/tmp/tmp8m8j3m6y.cpp: In function \u2018int main()\u2019:\n/tmp/tmp8m8j3m6y.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp8m8j3m6y.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp8m8j3m6y.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup) {\n        test_dict[i] = test_tup%10;\n        test_tup = test_tup/10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpy43vm6b6.cpp:2:\n/tmp/tmpy43vm6b6.cpp: In function \u2018int main()\u2019:\n/tmp/tmpy43vm6b6.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy43vm6b6.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy43vm6b6.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "/tmp/tmprrlgo5hm.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmprrlgo5hm.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmprrlgo5hm.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmprrlgo5hm.cpp:7:45: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmprrlgo5hm.cpp:2:\n/tmp/tmprrlgo5hm.cpp: In function \u2018int main()\u2019:\n/tmp/tmprrlgo5hm.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmprrlgo5hm.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmprrlgo5hm.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long i = 0;\n    while (test_tup) {\n        dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmph3fqozlm.cpp:2:\n/tmp/tmph3fqozlm.cpp: In function \u2018int main()\u2019:\n/tmp/tmph3fqozlm.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmph3fqozlm.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmph3fqozlm.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup[i] != '\\0') {\n        test_dict[test_tup[i]] = test_tup[i+1];\n        i += 2;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmp1_kxoqvq.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp1_kxoqvq.cpp:7:21: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |     while(test_tup[i] != '\\0') {\n      |                     ^\n/tmp/tmp1_kxoqvq.cpp:8:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmp1_kxoqvq.cpp:8:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1_kxoqvq.cpp:2:\n/tmp/tmp1_kxoqvq.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1_kxoqvq.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1_kxoqvq.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1_kxoqvq.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptb4j9k55.cpp:2:\n/tmp/tmptb4j9k55.cpp: In function \u2018int main()\u2019:\n/tmp/tmptb4j9k55.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(long i=0;i<test_tup.size()-1;i++) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122675,
      "stdout": "",
      "stderr": "/tmp/tmptjdqsqf4.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmptjdqsqf4.cpp:6:29: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(long i=0;i<test_tup.size()-1;i++) {\n      |                             ^~~~\n/tmp/tmptjdqsqf4.cpp:7:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmptjdqsqf4.cpp:7:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptjdqsqf4.cpp:2:\n/tmp/tmptjdqsqf4.cpp: In function \u2018int main()\u2019:\n/tmp/tmptjdqsqf4.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptjdqsqf4.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptjdqsqf4.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     asse",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptb4j9k55.cpp:2:\n/tmp/tmptb4j9k55.cpp: In function \u2018int main()\u2019:\n/tmp/tmptb4j9k55.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    while (test_tup != 0) {\n        key = test_tup % 10;\n        test_tup /= 10;\n        value = test_tup % 10;\n        test_tup /= 10;\n        test_dict[key] = value;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122675,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp5uukmuzd.cpp:2:\n/tmp/tmp5uukmuzd.cpp: In function \u2018int main()\u2019:\n/tmp/tmp5uukmuzd.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp5uukmuzd.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp5uukmuzd.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    while(test_tup) {\n        value = test_tup % 10;\n        test_tup = test_tup / 10;\n        key = test_tup % 10;\n        test_map[key] = value;\n        test_tup = test_tup / 10;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122675,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp5u9kudjb.cpp:2:\n/tmp/tmp5u9kudjb.cpp: In function \u2018int main()\u2019:\n/tmp/tmp5u9kudjb.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp5u9kudjb.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp5u9kudjb.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    while (test_tup != 0) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    for (int i = 0; i < test_vec.size(); i += 2) {\n        test_dict[test_vec[i]] = test_vec[i + 1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122675,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpy50ppr3_.cpp:2:\n/tmp/tmpy50ppr3_.cpp: In function \u2018int main()\u2019:\n/tmp/tmpy50ppr3_.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy50ppr3_.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy50ppr3_.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "/tmp/tmprrlgo5hm.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmprrlgo5hm.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmprrlgo5hm.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmprrlgo5hm.cpp:7:45: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmprrlgo5hm.cpp:2:\n/tmp/tmprrlgo5hm.cpp: In function \u2018int main()\u2019:\n/tmp/tmprrlgo5hm.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmprrlgo5hm.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmprrlgo5hm.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = test_tup[0];\n    for (int i = 1; i < test_tup.size(); i++) {\n        test_map[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "/tmp/tmp_s8oy8hm.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp_s8oy8hm.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmp_s8oy8hm.cpp:7:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (int i = 1; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmp_s8oy8hm.cpp:8:35: error: invalid types \u2018long int[int]\u2019 for array subscript\n    8 |         test_map[key] = test_tup[i];\n      |                                   ^\n/tmp/tmp_s8oy8hm.cpp:9:25: error: invalid types \u2018long int[int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_s8oy8hm.cpp:2:\n/tmp/tmp_s8oy8hm.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_s8oy8hm.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_s8oy8hm.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_s8oy8hm.cpp:17:37: error: canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptb4j9k55.cpp:2:\n/tmp/tmptb4j9k55.cpp: In function \u2018int main()\u2019:\n/tmp/tmptb4j9k55.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmpipfi73gf.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpipfi73gf.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpipfi73gf.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpipfi73gf.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpipfi73gf.cpp:2:\n/tmp/tmpipfi73gf.cpp: In function \u2018int main()\u2019:\n/tmp/tmpipfi73gf.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpipfi73gf.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpipfi73gf.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long val = 0;\n    for (long i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        } else {\n            val = test_tup[i];\n            test_map[key] = val;\n        }\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122675,
      "stdout": "",
      "stderr": "/tmp/tmp9n8sjjjq.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp9n8sjjjq.cpp:8:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (long i = 0; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmp9n8sjjjq.cpp:10:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmp9n8sjjjq.cpp:12:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   12 |             val = test_tup[i];\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp9n8sjjjq.cpp:2:\n/tmp/tmp9n8sjjjq.cpp: In function \u2018int main()\u2019:\n/tmp/tmp9n8sjjjq.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp9n8sjjjq.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp9n8sjjjq.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(7, 8, 9, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = test_tup[0];\n    for (long i = 1; i < test_tup.size(); i++) {\n        test_dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122675,
      "stdout": "",
      "stderr": "/tmp/tmp1yy0bxw9.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp1yy0bxw9.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmp1yy0bxw9.cpp:7:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (long i = 1; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmp1yy0bxw9.cpp:8:36: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[key] = test_tup[i];\n      |                                    ^\n/tmp/tmp1yy0bxw9.cpp:9:25: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1yy0bxw9.cpp:2:\n/tmp/tmp1yy0bxw9.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1yy0bxw9.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1yy0bxw9.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1yy0bxw9.cpp:17:37",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = 0;\n    long value = 0;\n    for (int i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        } else {\n            value = test_tup[i];\n            dict[key] = value;\n        }\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "/tmp/tmpra04hxni.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpra04hxni.cpp:8:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (int i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpra04hxni.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpra04hxni.cpp:12:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   12 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpra04hxni.cpp:2:\n/tmp/tmpra04hxni.cpp: In function \u2018int main()\u2019:\n/tmp/tmpra04hxni.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpra04hxni.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpra04hxni.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptfvd4y83.cpp:2:\n/tmp/tmptfvd4y83.cpp: In function \u2018int main()\u2019:\n/tmp/tmptfvd4y83.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptfvd4y83.cpp:2:\n/tmp/tmptfvd4y83.cpp: In function \u2018int main()\u2019:\n/tmp/tmptfvd4y83.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptfvd4y83.cpp:2:\n/tmp/tmptfvd4y83.cpp: In function \u2018int main()\u2019:\n/tmp/tmptfvd4y83.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    for (long i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            test_dict.insert(std::pair<long,long>(key,value));\n        }\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "/tmp/tmpgjzu76ce.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpgjzu76ce.cpp:8:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (long i = 0; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmpgjzu76ce.cpp:10:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpgjzu76ce.cpp:13:31: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   13 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpgjzu76ce.cpp:2:\n/tmp/tmpgjzu76ce.cpp: In function \u2018int main()\u2019:\n/tmp/tmpgjzu76ce.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpgjzu76ce.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpgjzu76ce.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> result;\n    long key = test_tup[0];\n    for (long i = 1; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        } else {\n            result[key] = test_tup[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "/tmp/tmp7u83yv3b.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp7u83yv3b.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmp7u83yv3b.cpp:7:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (long i = 1; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmp7u83yv3b.cpp:9:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |             key = test_tup[i];\n      |                             ^\n/tmp/tmp7u83yv3b.cpp:11:37: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   11 |             result[key] = test_tup[i];\n      |                                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7u83yv3b.cpp:2:\n/tmp/tmp7u83yv3b.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7u83yv3b.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7u83yv3b.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7u83yv3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = test_tup[0];\n    for(long i=1; i<test_tup.size(); i++) {\n        test_map[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "/tmp/tmplizh6ghs.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmplizh6ghs.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmplizh6ghs.cpp:7:30: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for(long i=1; i<test_tup.size(); i++) {\n      |                              ^~~~\n/tmp/tmplizh6ghs.cpp:8:35: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_map[key] = test_tup[i];\n      |                                   ^\n/tmp/tmplizh6ghs.cpp:9:25: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmplizh6ghs.cpp:2:\n/tmp/tmplizh6ghs.cpp: In function \u2018int main()\u2019:\n/tmp/tmplizh6ghs.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmplizh6ghs.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmplizh6ghs.cpp:17:37: error: can",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmpipfi73gf.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpipfi73gf.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpipfi73gf.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpipfi73gf.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpipfi73gf.cpp:2:\n/tmp/tmpipfi73gf.cpp: In function \u2018int main()\u2019:\n/tmp/tmpipfi73gf.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpipfi73gf.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpipfi73gf.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup = test_tup / 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpv7_ahqth.cpp:2:\n/tmp/tmpv7_ahqth.cpp: In function \u2018int main()\u2019:\n/tmp/tmpv7_ahqth.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpv7_ahqth.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpv7_ahqth.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::vector<long> test_vec;\n    while(test_tup) {\n        test_vec.push_back(test_tup%10);\n        test_tup /= 10;\n    }\n    for(long i = 0; i < test_vec.size(); i+=2) {\n        test_map[test_vec[i]] = test_vec[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122675,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpj9m9t3hg.cpp:2:\n/tmp/tmpj9m9t3hg.cpp: In function \u2018int main()\u2019:\n/tmp/tmpj9m9t3hg.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpj9m9t3hg.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpj9m9t3hg.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> result;\n    for(int i=0; i<test_tup.size(); i+=2) {\n        result[test_tup[i]] = test_tup[i+1];\n    }\n    return result;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "/tmp/tmpp45kbx9_.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpp45kbx9_.cpp:6:29: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0; i<test_tup.size(); i+=2) {\n      |                             ^~~~\n/tmp/tmpp45kbx9_.cpp:7:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         result[test_tup[i]] = test_tup[i+1];\n      |                          ^\n/tmp/tmpp45kbx9_.cpp:7:43: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         result[test_tup[i]] = test_tup[i+1];\n      |                                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpp45kbx9_.cpp:2:\n/tmp/tmpp45kbx9_.cpp: In function \u2018int main()\u2019:\n/tmp/tmpp45kbx9_.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpp45kbx9_.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpp45kbx9_.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long test_tup_size = test_tup.size();\n    for(long i=0;i<test_tup_size;i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "/tmp/tmpcpiotunb.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpcpiotunb.cpp:6:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     long test_tup_size = test_tup.size();\n      |                                   ^~~~\n/tmp/tmpcpiotunb.cpp:8:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpcpiotunb.cpp:8:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpcpiotunb.cpp:2:\n/tmp/tmpcpiotunb.cpp: In function \u2018int main()\u2019:\n/tmp/tmpcpiotunb.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpcpiotunb.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpcpiotunb.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    for(long i = 0; i < test_tup.size(); i++) {\n        if(i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            test_map[key] = value;\n        }\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "/tmp/tmpmefuv060.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpmefuv060.cpp:8:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for(long i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpmefuv060.cpp:10:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpmefuv060.cpp:13:31: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   13 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpmefuv060.cpp:2:\n/tmp/tmpmefuv060.cpp: In function \u2018int main()\u2019:\n/tmp/tmpmefuv060.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpmefuv060.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpmefuv060.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8, 9",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long i = 0;\n    while(test_tup) {\n        long temp = test_tup & 0xF;\n        test_tup >>= 4;\n        dict[i] = temp;\n        i++;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpmuz4yev9.cpp:2:\n/tmp/tmpmuz4yev9.cpp: In function \u2018int main()\u2019:\n/tmp/tmpmuz4yev9.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpmuz4yev9.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpmuz4yev9.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::vector<long> test_vec;\n    while(test_tup) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    for(int i = 0; i < test_vec.size(); i += 2) {\n        test_map[test_vec[i]] = test_vec[i + 1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp5dtnmmyq.cpp:2:\n/tmp/tmp5dtnmmyq.cpp: In function \u2018int main()\u2019:\n/tmp/tmp5dtnmmyq.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp5dtnmmyq.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp5dtnmmyq.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    while(test_tup != 0) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    for(int i = 0; i < test_vec.size(); i += 2) {\n        test_dict[test_vec[i]] = test_vec[i + 1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpv18ljqkq.cpp:2:\n/tmp/tmpv18ljqkq.cpp: In function \u2018int main()\u2019:\n/tmp/tmpv18ljqkq.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpv18ljqkq.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpv18ljqkq.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    while(test_tup) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    for(int i = 0; i < test_vec.size(); i += 2) {\n        test_dict[test_vec[i]] = test_vec[i + 1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122675,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpuczluxll.cpp:2:\n/tmp/tmpuczluxll.cpp: In function \u2018int main()\u2019:\n/tmp/tmpuczluxll.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpuczluxll.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpuczluxll.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp4ciogen9.cpp:2:\n/tmp/tmp4ciogen9.cpp: In function \u2018int main()\u2019:\n/tmp/tmp4ciogen9.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp4ciogen9.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp4ciogen9.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7roozmxb.cpp:2:\n/tmp/tmp7roozmxb.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7roozmxb.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7roozmxb.cpp:2:\n/tmp/tmp7roozmxb.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7roozmxb.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (long i = 0; i < test_tup.size(); i += 2) {\n        test_dict[test_tup[i]] = test_tup[i + 1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "/tmp/tmp7bm5fg_e.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp7bm5fg_e.cpp:6:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (long i = 0; i < test_tup.size(); i += 2) {\n      |                                   ^~~~\n/tmp/tmp7bm5fg_e.cpp:7:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i + 1];\n      |                             ^\n/tmp/tmp7bm5fg_e.cpp:7:48: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i + 1];\n      |                                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7bm5fg_e.cpp:2:\n/tmp/tmp7bm5fg_e.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7bm5fg_e.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7bm5fg_e.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7bm5fg_e.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument pass",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = test_tup[0];\n    for(int i = 1; i < test_tup.size(); i++) {\n        dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "/tmp/tmpzmm0kd7m.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpzmm0kd7m.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmpzmm0kd7m.cpp:7:33: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for(int i = 1; i < test_tup.size(); i++) {\n      |                                 ^~~~\n/tmp/tmpzmm0kd7m.cpp:8:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n    8 |         dict[key] = test_tup[i];\n      |                               ^\n/tmp/tmpzmm0kd7m.cpp:9:25: error: invalid types \u2018long int[int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpzmm0kd7m.cpp:2:\n/tmp/tmpzmm0kd7m.cpp: In function \u2018int main()\u2019:\n/tmp/tmpzmm0kd7m.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpzmm0kd7m.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpzmm0kd7m.cpp:17:37: error: cannot convert ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    auto it = test_tup.begin();\n    while(it != test_tup.end()) {\n        dict[*it] = *(it+1);\n        it += 2;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "/tmp/tmpg2xihv72.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpg2xihv72.cpp:6:24: error: request for member \u2018begin\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     auto it = test_tup.begin();\n      |                        ^~~~~\n/tmp/tmpg2xihv72.cpp:7:26: error: request for member \u2018end\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     while(it != test_tup.end()) {\n      |                          ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpg2xihv72.cpp:2:\n/tmp/tmpg2xihv72.cpp: In function \u2018int main()\u2019:\n/tmp/tmpg2xihv72.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpg2xihv72.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpg2xihv72.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long temp = test_tup;\n    long key,value;\n    while(temp!=0) {\n        key = temp%10;\n        temp = temp/10;\n        value = temp%10;\n        temp = temp/10;\n        test_dict[key] = value;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpuvko8t_7.cpp:2:\n/tmp/tmpuvko8t_7.cpp: In function \u2018int main()\u2019:\n/tmp/tmpuvko8t_7.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpuvko8t_7.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpuvko8t_7.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long i = 0;\n    while (test_tup) {\n        dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmph3fqozlm.cpp:2:\n/tmp/tmph3fqozlm.cpp: In function \u2018int main()\u2019:\n/tmp/tmph3fqozlm.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmph3fqozlm.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmph3fqozlm.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = 0;\n    long value = 0;\n    bool is_key = true;\n    while(test_tup) {\n        if(is_key) {\n            key = test_tup % 10;\n            is_key = false;\n        } else {\n            value = test_tup % 10;\n            is_key = true;\n            dict[key] = value;\n        }\n        test_tup /= 10;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptbtmc9in.cpp:2:\n/tmp/tmptbtmc9in.cpp: In function \u2018int main()\u2019:\n/tmp/tmptbtmc9in.cpp:24:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   24 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptbtmc9in.cpp:25:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   25 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptbtmc9in.cpp:26:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   26 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = 0;\n    long value = 0;\n    while (test_tup) {\n        key = test_tup % 10;\n        test_tup /= 10;\n        value = test_tup % 10;\n        test_tup /= 10;\n        dict[key] = value;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp983mkzn6.cpp:2:\n/tmp/tmp983mkzn6.cpp: In function \u2018int main()\u2019:\n/tmp/tmp983mkzn6.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp983mkzn6.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp983mkzn6.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = test_tup[0];\n    for(long i = 1; i < test_tup.size(); i++) {\n        test_dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "/tmp/tmphv7valwn.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmphv7valwn.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmphv7valwn.cpp:7:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for(long i = 1; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmphv7valwn.cpp:8:36: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[key] = test_tup[i];\n      |                                    ^\n/tmp/tmphv7valwn.cpp:9:25: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmphv7valwn.cpp:2:\n/tmp/tmphv7valwn.cpp: In function \u2018int main()\u2019:\n/tmp/tmphv7valwn.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmphv7valwn.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmphv7valwn.cpp:17:37: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7roozmxb.cpp:2:\n/tmp/tmp7roozmxb.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7roozmxb.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n  std::map<long,long> ret_map;\n  long key = 0;\n  long val = 0;\n  while(test_tup) {\n    val = test_tup % 10;\n    test_tup /= 10;\n    key = test_tup % 10;\n    test_tup /= 10;\n    ret_map[key] = val;\n  }\n  return ret_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpgznn68bn.cpp:2:\n/tmp/tmpgznn68bn.cpp: In function \u2018int main()\u2019:\n/tmp/tmpgznn68bn.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpgznn68bn.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpgznn68bn.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmpipfi73gf.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpipfi73gf.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpipfi73gf.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpipfi73gf.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpipfi73gf.cpp:2:\n/tmp/tmpipfi73gf.cpp: In function \u2018int main()\u2019:\n/tmp/tmpipfi73gf.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpipfi73gf.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpipfi73gf.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7roozmxb.cpp:2:\n/tmp/tmp7roozmxb.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7roozmxb.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    for (long i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            test_dict[key] = value;\n        }\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "/tmp/tmpl3bon7l0.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpl3bon7l0.cpp:8:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (long i = 0; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmpl3bon7l0.cpp:10:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpl3bon7l0.cpp:13:31: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   13 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpl3bon7l0.cpp:2:\n/tmp/tmpl3bon7l0.cpp: In function \u2018int main()\u2019:\n/tmp/tmpl3bon7l0.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl3bon7l0.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl3bon7l0.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long temp = test_tup;\n    while(temp != 0) {\n        long key = temp % 10;\n        temp = temp / 10;\n        long value = temp % 10;\n        temp = temp / 10;\n        test_dict[key] = value;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpgqrjn2sz.cpp:2:\n/tmp/tmpgqrjn2sz.cpp: In function \u2018int main()\u2019:\n/tmp/tmpgqrjn2sz.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpgqrjn2sz.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpgqrjn2sz.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = test_tup[0];\n    for (long i = 1; i < test_tup.size(); i++) {\n        dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmpgr8ydmxs.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpgr8ydmxs.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmpgr8ydmxs.cpp:7:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (long i = 1; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmpgr8ydmxs.cpp:8:31: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         dict[key] = test_tup[i];\n      |                               ^\n/tmp/tmpgr8ydmxs.cpp:9:25: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpgr8ydmxs.cpp:2:\n/tmp/tmpgr8ydmxs.cpp: In function \u2018int main()\u2019:\n/tmp/tmpgr8ydmxs.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpgr8ydmxs.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpgr8ydmxs.cpp:17:37: error: c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk1flmrlt.cpp:2:\n/tmp/tmpk1flmrlt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk1flmrlt.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpk1flmrlt.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpk1flmrlt.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(long i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "/tmp/tmp1m0jw4yc.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp1m0jw4yc.cpp:6:29: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(long i=0;i<test_tup.size();i+=2) {\n      |                             ^~~~\n/tmp/tmp1m0jw4yc.cpp:7:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmp1m0jw4yc.cpp:7:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1m0jw4yc.cpp:2:\n/tmp/tmp1m0jw4yc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1m0jw4yc.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1m0jw4yc.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1m0jw4yc.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     asser",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::vector<long> test_vec;\n    while(test_tup) {\n        test_vec.push_back(test_tup%10);\n        test_tup/=10;\n    }\n    for(int i=0;i<test_vec.size();i+=2) {\n        test_map[test_vec[i]] = test_vec[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122679,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpvf5v042_.cpp:2:\n/tmp/tmpvf5v042_.cpp: In function \u2018int main()\u2019:\n/tmp/tmpvf5v042_.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpvf5v042_.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpvf5v042_.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptfvd4y83.cpp:2:\n/tmp/tmptfvd4y83.cpp: In function \u2018int main()\u2019:\n/tmp/tmptfvd4y83.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp4ciogen9.cpp:2:\n/tmp/tmp4ciogen9.cpp: In function \u2018int main()\u2019:\n/tmp/tmp4ciogen9.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp4ciogen9.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp4ciogen9.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::vector<long> test_vec;\n    while(test_tup) {\n        test_vec.push_back(test_tup%10);\n        test_tup/=10;\n    }\n    for(int i=0;i<test_vec.size();i+=2) {\n        test_map[test_vec[i]] = test_vec[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122679,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpvf5v042_.cpp:2:\n/tmp/tmpvf5v042_.cpp: In function \u2018int main()\u2019:\n/tmp/tmpvf5v042_.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpvf5v042_.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpvf5v042_.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7roozmxb.cpp:2:\n/tmp/tmp7roozmxb.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7roozmxb.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp9affol96.cpp:2:\n/tmp/tmp9affol96.cpp: In function \u2018int main()\u2019:\n/tmp/tmp9affol96.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp9affol96.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp9affol96.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    for (long i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            test_dict[key] = value;\n        }\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "/tmp/tmpl3bon7l0.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpl3bon7l0.cpp:8:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (long i = 0; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmpl3bon7l0.cpp:10:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpl3bon7l0.cpp:13:31: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   13 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpl3bon7l0.cpp:2:\n/tmp/tmpl3bon7l0.cpp: In function \u2018int main()\u2019:\n/tmp/tmpl3bon7l0.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl3bon7l0.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl3bon7l0.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (int i=0; i<test_tup.size(); i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "/tmp/tmp7y4ius70.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp7y4ius70.cpp:6:30: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i=0; i<test_tup.size(); i+=2) {\n      |                              ^~~~\n/tmp/tmp7y4ius70.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmp7y4ius70.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7y4ius70.cpp:2:\n/tmp/tmp7y4ius70.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7y4ius70.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7y4ius70.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7y4ius70.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = test_tup[0];\n    for (int i = 1; i < test_tup.size(); i++) {\n        dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "/tmp/tmp7hk86_23.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp7hk86_23.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmp7hk86_23.cpp:7:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (int i = 1; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmp7hk86_23.cpp:8:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n    8 |         dict[key] = test_tup[i];\n      |                               ^\n/tmp/tmp7hk86_23.cpp:9:25: error: invalid types \u2018long int[int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7hk86_23.cpp:2:\n/tmp/tmp7hk86_23.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7hk86_23.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7hk86_23.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7hk86_23.cpp:17:37: error: cannot conver",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    for(int i = 0; i < test_tup.size(); i++) {\n        if(i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            test_dict[key] = value;\n        }\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "/tmp/tmpuxh1m27u.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpuxh1m27u.cpp:8:33: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for(int i = 0; i < test_tup.size(); i++) {\n      |                                 ^~~~\n/tmp/tmpuxh1m27u.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpuxh1m27u.cpp:13:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   13 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpuxh1m27u.cpp:2:\n/tmp/tmpuxh1m27u.cpp: In function \u2018int main()\u2019:\n/tmp/tmpuxh1m27u.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpuxh1m27u.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpuxh1m27u.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    while (test_tup) {\n        key = test_tup % 10;\n        test_tup /= 10;\n        value = test_tup % 10;\n        test_tup /= 10;\n        test_dict[key] = value;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122679,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpkhxrnbx2.cpp:2:\n/tmp/tmpkhxrnbx2.cpp: In function \u2018int main()\u2019:\n/tmp/tmpkhxrnbx2.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpkhxrnbx2.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpkhxrnbx2.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    for(int i=0;i<test_tup.size();i++) {\n        test_vec.push_back(test_tup[i]);\n    }\n    for(int i=0;i<test_vec.size();i+=2) {\n        test_dict[test_vec[i]] = test_vec[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "/tmp/tmp_i6nt0ov.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp_i6nt0ov.cpp:7:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for(int i=0;i<test_tup.size();i++) {\n      |                            ^~~~\n/tmp/tmp_i6nt0ov.cpp:8:38: error: invalid types \u2018long int[int]\u2019 for array subscript\n    8 |         test_vec.push_back(test_tup[i]);\n      |                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_i6nt0ov.cpp:2:\n/tmp/tmp_i6nt0ov.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_i6nt0ov.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_i6nt0ov.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_i6nt0ov.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(long i = 0; i < test_tup.size(); i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "/tmp/tmpxoojssyd.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpxoojssyd.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(long i = 0; i < test_tup.size(); i+=2) {\n      |                                  ^~~~\n/tmp/tmpxoojssyd.cpp:7:28: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmpxoojssyd.cpp:7:45: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpxoojssyd.cpp:2:\n/tmp/tmpxoojssyd.cpp: In function \u2018int main()\u2019:\n/tmp/tmpxoojssyd.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxoojssyd.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxoojssyd.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = 0;\n    long value = 0;\n    while (test_tup > 0) {\n        value = test_tup % 10;\n        test_tup /= 10;\n        key = test_tup % 10;\n        test_tup /= 10;\n        dict[key] = value;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpwbhjoe5_.cpp:2:\n/tmp/tmpwbhjoe5_.cpp: In function \u2018int main()\u2019:\n/tmp/tmpwbhjoe5_.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpwbhjoe5_.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpwbhjoe5_.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(long i = 0; i < test_tup.size(); i++) {\n        test_map[test_tup[i]] = test_tup[i+1];\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "/tmp/tmpwdey0rhj.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpwdey0rhj.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(long i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpwdey0rhj.cpp:7:28: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmpwdey0rhj.cpp:7:45: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpwdey0rhj.cpp:2:\n/tmp/tmpwdey0rhj.cpp: In function \u2018int main()\u2019:\n/tmp/tmpwdey0rhj.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpwdey0rhj.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpwdey0rhj.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long i = 0;\n    while (test_tup) {\n        dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmph3fqozlm.cpp:2:\n/tmp/tmph3fqozlm.cpp: In function \u2018int main()\u2019:\n/tmp/tmph3fqozlm.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmph3fqozlm.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmph3fqozlm.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = test_tup[0];\n    for (long i = 1; i < test_tup.size(); i++) {\n        test_map[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "/tmp/tmpagwsz00_.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpagwsz00_.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmpagwsz00_.cpp:7:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (long i = 1; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmpagwsz00_.cpp:8:35: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_map[key] = test_tup[i];\n      |                                   ^\n/tmp/tmpagwsz00_.cpp:9:25: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpagwsz00_.cpp:2:\n/tmp/tmpagwsz00_.cpp: In function \u2018int main()\u2019:\n/tmp/tmpagwsz00_.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpagwsz00_.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpagwsz00_.cpp:17:37: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(long i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "/tmp/tmp1m0jw4yc.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp1m0jw4yc.cpp:6:29: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(long i=0;i<test_tup.size();i+=2) {\n      |                             ^~~~\n/tmp/tmp1m0jw4yc.cpp:7:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmp1m0jw4yc.cpp:7:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1m0jw4yc.cpp:2:\n/tmp/tmp1m0jw4yc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1m0jw4yc.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1m0jw4yc.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1m0jw4yc.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     asser",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp9affol96.cpp:2:\n/tmp/tmp9affol96.cpp: In function \u2018int main()\u2019:\n/tmp/tmp9affol96.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp9affol96.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp9affol96.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    while(test_tup) {\n        test_vec.push_back(test_tup%10);\n        test_tup /= 10;\n    }\n    for(int i=0; i<test_vec.size()-1; i++) {\n        test_dict[test_vec[i]] = test_vec[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122679,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpnrgbdxi7.cpp:2:\n/tmp/tmpnrgbdxi7.cpp: In function \u2018int main()\u2019:\n/tmp/tmpnrgbdxi7.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpnrgbdxi7.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpnrgbdxi7.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptb4j9k55.cpp:2:\n/tmp/tmptb4j9k55.cpp: In function \u2018int main()\u2019:\n/tmp/tmptb4j9k55.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup != 0) {\n        long key = test_tup % 10;\n        test_tup /= 10;\n        long value = test_tup % 10;\n        test_tup /= 10;\n        test_map[key] = value;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122679,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpixtxl8p6.cpp:2:\n/tmp/tmpixtxl8p6.cpp: In function \u2018int main()\u2019:\n/tmp/tmpixtxl8p6.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpixtxl8p6.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpixtxl8p6.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk1flmrlt.cpp:2:\n/tmp/tmpk1flmrlt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk1flmrlt.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpk1flmrlt.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpk1flmrlt.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = test_tup[0];\n    for (long i = 1; i < test_tup.size(); i++) {\n        dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmpgr8ydmxs.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpgr8ydmxs.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmpgr8ydmxs.cpp:7:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (long i = 1; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmpgr8ydmxs.cpp:8:31: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         dict[key] = test_tup[i];\n      |                               ^\n/tmp/tmpgr8ydmxs.cpp:9:25: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpgr8ydmxs.cpp:2:\n/tmp/tmpgr8ydmxs.cpp: In function \u2018int main()\u2019:\n/tmp/tmpgr8ydmxs.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpgr8ydmxs.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpgr8ydmxs.cpp:17:37: error: c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = test_tup[0];\n    for (long i = 1; i < test_tup.size(); i++) {\n        dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmpgr8ydmxs.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpgr8ydmxs.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmpgr8ydmxs.cpp:7:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (long i = 1; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmpgr8ydmxs.cpp:8:31: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         dict[key] = test_tup[i];\n      |                               ^\n/tmp/tmpgr8ydmxs.cpp:9:25: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpgr8ydmxs.cpp:2:\n/tmp/tmpgr8ydmxs.cpp: In function \u2018int main()\u2019:\n/tmp/tmpgr8ydmxs.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpgr8ydmxs.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpgr8ydmxs.cpp:17:37: error: c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122679,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp80hklxz1.cpp:2:\n/tmp/tmp80hklxz1.cpp: In function \u2018int main()\u2019:\n/tmp/tmp80hklxz1.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp80hklxz1.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp80hklxz1.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    while(test_tup) {\n        value = test_tup % 10;\n        test_tup /= 10;\n        key = test_tup % 10;\n        test_tup /= 10;\n        test_map[key] = value;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122679,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp0tel4h7y.cpp:2:\n/tmp/tmp0tel4h7y.cpp: In function \u2018int main()\u2019:\n/tmp/tmp0tel4h7y.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0tel4h7y.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0tel4h7y.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(long i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "/tmp/tmp1m0jw4yc.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp1m0jw4yc.cpp:6:29: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(long i=0;i<test_tup.size();i+=2) {\n      |                             ^~~~\n/tmp/tmp1m0jw4yc.cpp:7:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmp1m0jw4yc.cpp:7:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1m0jw4yc.cpp:2:\n/tmp/tmp1m0jw4yc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1m0jw4yc.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1m0jw4yc.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1m0jw4yc.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     asser",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n\tstd::map<long,long> dict;\n\tfor(int i=0;i<test_tup.size();i+=2) {\n\t\tdict[test_tup[i]] = test_tup[i+1];\n\t}\n\treturn dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122679,
      "stdout": "",
      "stderr": "/tmp/tmp65xway9q.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp65xway9q.cpp:6:25: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |  for(int i=0;i<test_tup.size();i+=2) {\n      |                         ^~~~\n/tmp/tmp65xway9q.cpp:7:18: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |   dict[test_tup[i]] = test_tup[i+1];\n      |                  ^\n/tmp/tmp65xway9q.cpp:7:35: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |   dict[test_tup[i]] = test_tup[i+1];\n      |                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp65xway9q.cpp:2:\n/tmp/tmp65xway9q.cpp: In function \u2018int main()\u2019:\n/tmp/tmp65xway9q.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp65xway9q.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp65xway9q.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = test_tup[0];\n    for(long i = 1; i < test_tup.size(); i++) {\n        test_dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "/tmp/tmphv7valwn.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmphv7valwn.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmphv7valwn.cpp:7:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for(long i = 1; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmphv7valwn.cpp:8:36: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[key] = test_tup[i];\n      |                                    ^\n/tmp/tmphv7valwn.cpp:9:25: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmphv7valwn.cpp:2:\n/tmp/tmphv7valwn.cpp: In function \u2018int main()\u2019:\n/tmp/tmphv7valwn.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmphv7valwn.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmphv7valwn.cpp:17:37: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp4ciogen9.cpp:2:\n/tmp/tmp4ciogen9.cpp: In function \u2018int main()\u2019:\n/tmp/tmp4ciogen9.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp4ciogen9.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp4ciogen9.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup != NULL) {\n        test_dict[i] = test_tup;\n        i++;\n        test_tup = test_tup->next;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122679,
      "stdout": "",
      "stderr": "/tmp/tmp3p9km39a.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp3p9km39a.cpp:7:23: warning: NULL used in arithmetic [-Wpointer-arith]\n    7 |     while(test_tup != NULL) {\n      |                       ^~~~\n/tmp/tmp3p9km39a.cpp:10:28: error: base operand of \u2018->\u2019 is not a pointer\n   10 |         test_tup = test_tup->next;\n      |                            ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp3p9km39a.cpp:2:\n/tmp/tmp3p9km39a.cpp: In function \u2018int main()\u2019:\n/tmp/tmp3p9km39a.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp3p9km39a.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp3p9km39a.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n  std::map<long,long> test_map;\n  long i = 0;\n  while(test_tup != 0) {\n    test_map[i] = test_tup % 10;\n    test_tup /= 10;\n    i++;\n  }\n  return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmps15xkdy0.cpp:2:\n/tmp/tmps15xkdy0.cpp: In function \u2018int main()\u2019:\n/tmp/tmps15xkdy0.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmps15xkdy0.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmps15xkdy0.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long tup_size = test_tup.size();\n    for(long i=0;i<tup_size;i+=2) {\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "/tmp/tmpsp9y4viz.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpsp9y4viz.cpp:6:30: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     long tup_size = test_tup.size();\n      |                              ^~~~\n/tmp/tmpsp9y4viz.cpp:8:24: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         dict[test_tup[i]] = test_tup[i+1];\n      |                        ^\n/tmp/tmpsp9y4viz.cpp:8:41: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         dict[test_tup[i]] = test_tup[i+1];\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsp9y4viz.cpp:2:\n/tmp/tmpsp9y4viz.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsp9y4viz.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsp9y4viz.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsp9y4viz.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n\tstd::map<long,long> test_map;\n\tfor(long i=0;i<test_tup.size();i++) {\n\t\tif(i%2==0) {\n\t\t\ttest_map.insert(test_tup[i],test_tup[i+1]);\n\t\t}\n\t}\n\treturn test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "/tmp/tmp0gst0ntg.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp0gst0ntg.cpp:6:26: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |  for(long i=0;i<test_tup.size();i++) {\n      |                          ^~~~\n/tmp/tmp0gst0ntg.cpp:8:30: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |    test_map.insert(test_tup[i],test_tup[i+1]);\n      |                              ^\n/tmp/tmp0gst0ntg.cpp:8:44: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |    test_map.insert(test_tup[i],test_tup[i+1]);\n      |                                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp0gst0ntg.cpp:2:\n/tmp/tmp0gst0ntg.cpp: In function \u2018int main()\u2019:\n/tmp/tmp0gst0ntg.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0gst0ntg.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0gst0ntg.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidat",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(long i=0;i<test_tup.size();i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "/tmp/tmpkx46x2bs.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpkx46x2bs.cpp:6:29: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(long i=0;i<test_tup.size();i+=2) {\n      |                             ^~~~\n/tmp/tmpkx46x2bs.cpp:7:28: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmpkx46x2bs.cpp:7:45: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpkx46x2bs.cpp:2:\n/tmp/tmpkx46x2bs.cpp: In function \u2018int main()\u2019:\n/tmp/tmpkx46x2bs.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpkx46x2bs.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpkx46x2bs.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(ca",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptfvd4y83.cpp:2:\n/tmp/tmptfvd4y83.cpp: In function \u2018int main()\u2019:\n/tmp/tmptfvd4y83.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long i = 0;\n    while(test_tup != 0) {\n        dict[i] = test_tup%10;\n        test_tup /= 10;\n        i++;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpbfa4er7g.cpp:2:\n/tmp/tmpbfa4er7g.cpp: In function \u2018int main()\u2019:\n/tmp/tmpbfa4er7g.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpbfa4er7g.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpbfa4er7g.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    while(test_tup > 0) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    for(int i = 0; i < test_vec.size(); i += 2) {\n        test_dict[test_vec[i]] = test_vec[i + 1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp2ppbx_hb.cpp:2:\n/tmp/tmp2ppbx_hb.cpp: In function \u2018int main()\u2019:\n/tmp/tmp2ppbx_hb.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp2ppbx_hb.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp2ppbx_hb.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long test_tup_size = test_tup.size();\n    for (long i = 0; i < test_tup_size; i++) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "/tmp/tmp03rrz70a.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp03rrz70a.cpp:6:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     long test_tup_size = test_tup.size();\n      |                                   ^~~~\n/tmp/tmp03rrz70a.cpp:8:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmp03rrz70a.cpp:8:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp03rrz70a.cpp:2:\n/tmp/tmp03rrz70a.cpp: In function \u2018int main()\u2019:\n/tmp/tmp03rrz70a.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp03rrz70a.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp03rrz70a.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i = 0; i < test_tup.size(); i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "/tmp/tmpn9lr3037.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpn9lr3037.cpp:6:33: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i = 0; i < test_tup.size(); i+=2) {\n      |                                 ^~~~\n/tmp/tmpn9lr3037.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpn9lr3037.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpn9lr3037.cpp:2:\n/tmp/tmpn9lr3037.cpp: In function \u2018int main()\u2019:\n/tmp/tmpn9lr3037.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpn9lr3037.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpn9lr3037.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i = 0; i < test_tup.size(); i += 2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "/tmp/tmpdqvaq69u.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpdqvaq69u.cpp:6:33: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i = 0; i < test_tup.size(); i += 2) {\n      |                                 ^~~~\n/tmp/tmpdqvaq69u.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpdqvaq69u.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpdqvaq69u.cpp:2:\n/tmp/tmpdqvaq69u.cpp: In function \u2018int main()\u2019:\n/tmp/tmpdqvaq69u.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdqvaq69u.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdqvaq69u.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> my_map;\n    long key = 0;\n    long value = 0;\n    for (int i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        } else {\n            value = test_tup[i];\n            my_map[key] = value;\n        }\n    }\n    return my_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "/tmp/tmp8lc4uf3s.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp8lc4uf3s.cpp:8:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (int i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmp8lc4uf3s.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmp8lc4uf3s.cpp:12:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   12 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp8lc4uf3s.cpp:2:\n/tmp/tmp8lc4uf3s.cpp: In function \u2018int main()\u2019:\n/tmp/tmp8lc4uf3s.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp8lc4uf3s.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp8lc4uf3s.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = test_tup[0];\n    for(long i=1;i<test_tup.size();i++) {\n        dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "/tmp/tmp0bbkdp4l.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp0bbkdp4l.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmp0bbkdp4l.cpp:7:29: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for(long i=1;i<test_tup.size();i++) {\n      |                             ^~~~\n/tmp/tmp0bbkdp4l.cpp:8:31: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         dict[key] = test_tup[i];\n      |                               ^\n/tmp/tmp0bbkdp4l.cpp:9:25: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp0bbkdp4l.cpp:2:\n/tmp/tmp0bbkdp4l.cpp: In function \u2018int main()\u2019:\n/tmp/tmp0bbkdp4l.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0bbkdp4l.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0bbkdp4l.cpp:17:37: error: cannot convert",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::vector<long> test_vec;\n    while(test_tup) {\n        test_vec.push_back(test_tup%10);\n        test_tup /= 10;\n    }\n    for(int i = 0; i < test_vec.size()-1; i++) {\n        test_map[test_vec[i]] = test_vec[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp5b5_g7ki.cpp:2:\n/tmp/tmp5b5_g7ki.cpp: In function \u2018int main()\u2019:\n/tmp/tmp5b5_g7ki.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp5b5_g7ki.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp5b5_g7ki.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptb4j9k55.cpp:2:\n/tmp/tmptb4j9k55.cpp: In function \u2018int main()\u2019:\n/tmp/tmptb4j9k55.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long test_tup_size = test_tup.size();\n    for (long i = 0; i < test_tup_size; i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "/tmp/tmpb3ibkdix.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpb3ibkdix.cpp:6:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     long test_tup_size = test_tup.size();\n      |                                   ^~~~\n/tmp/tmpb3ibkdix.cpp:8:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpb3ibkdix.cpp:8:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpb3ibkdix.cpp:2:\n/tmp/tmpb3ibkdix.cpp: In function \u2018int main()\u2019:\n/tmp/tmpb3ibkdix.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpb3ibkdix.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpb3ibkdix.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = test_tup[0];\n    for (long i = 1; i < test_tup.size(); i++) {\n        test_map[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "/tmp/tmpagwsz00_.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpagwsz00_.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmpagwsz00_.cpp:7:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (long i = 1; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmpagwsz00_.cpp:8:35: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_map[key] = test_tup[i];\n      |                                   ^\n/tmp/tmpagwsz00_.cpp:9:25: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpagwsz00_.cpp:2:\n/tmp/tmpagwsz00_.cpp: In function \u2018int main()\u2019:\n/tmp/tmpagwsz00_.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpagwsz00_.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpagwsz00_.cpp:17:37: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptb4j9k55.cpp:2:\n/tmp/tmptb4j9k55.cpp: In function \u2018int main()\u2019:\n/tmp/tmptb4j9k55.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    for (long i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            test_map.insert(std::pair<long,long>(key,value));\n        }\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "/tmp/tmps3zedf58.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmps3zedf58.cpp:8:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (long i = 0; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmps3zedf58.cpp:10:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmps3zedf58.cpp:13:31: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   13 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmps3zedf58.cpp:2:\n/tmp/tmps3zedf58.cpp: In function \u2018int main()\u2019:\n/tmp/tmps3zedf58.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmps3zedf58.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmps3zedf58.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk1flmrlt.cpp:2:\n/tmp/tmpk1flmrlt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk1flmrlt.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpk1flmrlt.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpk1flmrlt.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = test_tup[0];\n    for(long i = 1; i < test_tup.size(); i++) {\n        dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "/tmp/tmpnyjx6ra7.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpnyjx6ra7.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmpnyjx6ra7.cpp:7:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for(long i = 1; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpnyjx6ra7.cpp:8:31: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         dict[key] = test_tup[i];\n      |                               ^\n/tmp/tmpnyjx6ra7.cpp:9:25: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpnyjx6ra7.cpp:2:\n/tmp/tmpnyjx6ra7.cpp: In function \u2018int main()\u2019:\n/tmp/tmpnyjx6ra7.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpnyjx6ra7.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpnyjx6ra7.cpp:17:37: error: can",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7roozmxb.cpp:2:\n/tmp/tmp7roozmxb.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7roozmxb.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptfvd4y83.cpp:2:\n/tmp/tmptfvd4y83.cpp: In function \u2018int main()\u2019:\n/tmp/tmptfvd4y83.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7roozmxb.cpp:2:\n/tmp/tmp7roozmxb.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7roozmxb.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = test_tup[0];\n    for (long i = 1; i < test_tup.size(); i++) {\n        test_dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122675,
      "stdout": "",
      "stderr": "/tmp/tmp1yy0bxw9.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp1yy0bxw9.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmp1yy0bxw9.cpp:7:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (long i = 1; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmp1yy0bxw9.cpp:8:36: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[key] = test_tup[i];\n      |                                    ^\n/tmp/tmp1yy0bxw9.cpp:9:25: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1yy0bxw9.cpp:2:\n/tmp/tmp1yy0bxw9.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1yy0bxw9.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1yy0bxw9.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1yy0bxw9.cpp:17:37",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long i = 0;\n    while(test_tup) {\n        dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpygofm4mu.cpp:2:\n/tmp/tmpygofm4mu.cpp: In function \u2018int main()\u2019:\n/tmp/tmpygofm4mu.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpygofm4mu.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpygofm4mu.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptb4j9k55.cpp:2:\n/tmp/tmptb4j9k55.cpp: In function \u2018int main()\u2019:\n/tmp/tmptb4j9k55.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = test_tup[0];\n    for(int i=1;i<test_tup.size();i++) {\n        dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "/tmp/tmp_zfn1mme.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp_zfn1mme.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmp_zfn1mme.cpp:7:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for(int i=1;i<test_tup.size();i++) {\n      |                            ^~~~\n/tmp/tmp_zfn1mme.cpp:8:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n    8 |         dict[key] = test_tup[i];\n      |                               ^\n/tmp/tmp_zfn1mme.cpp:9:25: error: invalid types \u2018long int[int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_zfn1mme.cpp:2:\n/tmp/tmp_zfn1mme.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_zfn1mme.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_zfn1mme.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_zfn1mme.cpp:17:37: error: cannot convert \u2018std::tup",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp4ciogen9.cpp:2:\n/tmp/tmp4ciogen9.cpp: In function \u2018int main()\u2019:\n/tmp/tmp4ciogen9.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp4ciogen9.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp4ciogen9.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup) {\n        test_dict[i] = test_tup%10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpyw3vjr9i.cpp:2:\n/tmp/tmpyw3vjr9i.cpp: In function \u2018int main()\u2019:\n/tmp/tmpyw3vjr9i.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpyw3vjr9i.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpyw3vjr9i.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7roozmxb.cpp:2:\n/tmp/tmp7roozmxb.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7roozmxb.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::vector<long> test_vec;\n    while(test_tup) {\n        test_vec.push_back(test_tup%10);\n        test_tup/=10;\n    }\n    for(int i=0;i<test_vec.size();i+=2) {\n        test_map[test_vec[i]] = test_vec[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122679,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpvf5v042_.cpp:2:\n/tmp/tmpvf5v042_.cpp: In function \u2018int main()\u2019:\n/tmp/tmpvf5v042_.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpvf5v042_.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpvf5v042_.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    while(test_tup) {\n        test_vec.push_back(test_tup%10);\n        test_tup /= 10;\n    }\n    for(int i=0;i<test_vec.size();i+=2) {\n        test_dict[test_vec[i]] = test_vec[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmphdignqnb.cpp:2:\n/tmp/tmphdignqnb.cpp: In function \u2018int main()\u2019:\n/tmp/tmphdignqnb.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmphdignqnb.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmphdignqnb.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long i = 0;\n    while(test_tup) {\n        long temp = test_tup % 10;\n        test_tup /= 10;\n        if(i % 2 == 0) {\n            dict[temp] = test_tup % 10;\n        }\n        i++;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122682,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6rmvm3v4.cpp:2:\n/tmp/tmp6rmvm3v4.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6rmvm3v4.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp6rmvm3v4.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp6rmvm3v4.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long temp = test_tup;\n    while (temp) {\n        test_dict[temp % 10] = (temp / 10) % 10;\n        temp /= 100;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmplqh9k74o.cpp:2:\n/tmp/tmplqh9k74o.cpp: In function \u2018int main()\u2019:\n/tmp/tmplqh9k74o.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmplqh9k74o.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmplqh9k74o.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp9affol96.cpp:2:\n/tmp/tmp9affol96.cpp: In function \u2018int main()\u2019:\n/tmp/tmp9affol96.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp9affol96.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp9affol96.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n  std::map<long,long> test_dict;\n  long i = 0;\n  while (test_tup != 0) {\n    test_dict[i] = test_tup % 10;\n    test_tup /= 10;\n    i++;\n  }\n  return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpl39u3kr9.cpp:2:\n/tmp/tmpl39u3kr9.cpp: In function \u2018int main()\u2019:\n/tmp/tmpl39u3kr9.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl39u3kr9.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl39u3kr9.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long i = 0;\n    while(test_tup) {\n        dict[i] = test_tup%10;\n        test_tup /= 10;\n        i++;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp0apgl47x.cpp:2:\n/tmp/tmp0apgl47x.cpp: In function \u2018int main()\u2019:\n/tmp/tmp0apgl47x.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0apgl47x.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0apgl47x.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = test_tup[0];\n    for(long i = 1; i < test_tup.size(); i++) {\n        test_dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "/tmp/tmphv7valwn.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmphv7valwn.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmphv7valwn.cpp:7:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for(long i = 1; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmphv7valwn.cpp:8:36: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[key] = test_tup[i];\n      |                                    ^\n/tmp/tmphv7valwn.cpp:9:25: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmphv7valwn.cpp:2:\n/tmp/tmphv7valwn.cpp: In function \u2018int main()\u2019:\n/tmp/tmphv7valwn.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmphv7valwn.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmphv7valwn.cpp:17:37: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n  std::map<long,long> test_map;\n  long i = 0;\n  while(test_tup) {\n    test_map[i] = test_tup % 10;\n    test_tup /= 10;\n    i++;\n  }\n  return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpx6bwwbpq.cpp:2:\n/tmp/tmpx6bwwbpq.cpp: In function \u2018int main()\u2019:\n/tmp/tmpx6bwwbpq.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpx6bwwbpq.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpx6bwwbpq.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk1flmrlt.cpp:2:\n/tmp/tmpk1flmrlt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk1flmrlt.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpk1flmrlt.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpk1flmrlt.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::vector<long> test_vec;\n    while(test_tup > 0) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    for(int i = 0; i < test_vec.size(); i += 2) {\n        test_map[test_vec[i]] = test_vec[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpb8rel6yv.cpp:2:\n/tmp/tmpb8rel6yv.cpp: In function \u2018int main()\u2019:\n/tmp/tmpb8rel6yv.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpb8rel6yv.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpb8rel6yv.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::vector<long> test_vec;\n    while (test_tup > 0) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    for (int i = 0; i < test_vec.size(); i += 2) {\n        test_map[test_vec[i]] = test_vec[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp60sxov66.cpp:2:\n/tmp/tmp60sxov66.cpp: In function \u2018int main()\u2019:\n/tmp/tmp60sxov66.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp60sxov66.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp60sxov66.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpag0yrgfx.cpp:2:\n/tmp/tmpag0yrgfx.cpp: In function \u2018int main()\u2019:\n/tmp/tmpag0yrgfx.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpag0yrgfx.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpag0yrgfx.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptb4j9k55.cpp:2:\n/tmp/tmptb4j9k55.cpp: In function \u2018int main()\u2019:\n/tmp/tmptb4j9k55.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptb4j9k55.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmpipfi73gf.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpipfi73gf.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpipfi73gf.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpipfi73gf.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpipfi73gf.cpp:2:\n/tmp/tmpipfi73gf.cpp: In function \u2018int main()\u2019:\n/tmp/tmpipfi73gf.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpipfi73gf.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpipfi73gf.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptfvd4y83.cpp:2:\n/tmp/tmptfvd4y83.cpp: In function \u2018int main()\u2019:\n/tmp/tmptfvd4y83.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptfvd4y83.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup != 0) {\n        test_dict[i] = test_tup%10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122682,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmphs16cqjy.cpp:2:\n/tmp/tmphs16cqjy.cpp: In function \u2018int main()\u2019:\n/tmp/tmphs16cqjy.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmphs16cqjy.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmphs16cqjy.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(long i = 0; i < test_tup.size(); i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122683,
      "stdout": "",
      "stderr": "/tmp/tmp0p72j7c4.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp0p72j7c4.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(long i = 0; i < test_tup.size(); i+=2) {\n      |                                  ^~~~\n/tmp/tmp0p72j7c4.cpp:7:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmp0p72j7c4.cpp:7:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp0p72j7c4.cpp:2:\n/tmp/tmp0p72j7c4.cpp: In function \u2018int main()\u2019:\n/tmp/tmp0p72j7c4.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0p72j7c4.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0p72j7c4.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n\tstd::map<long,long> test_map;\n\tstd::vector<long> test_vec;\n\twhile(test_tup) {\n\t\ttest_vec.push_back(test_tup%10);\n\t\ttest_tup /= 10;\n\t}\n\tfor(int i = 0; i < test_vec.size()-1; i++) {\n\t\ttest_map[test_vec[i]] = test_vec[i+1];\n\t}\n\treturn test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122683,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1vt9irbt.cpp:2:\n/tmp/tmp1vt9irbt.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1vt9irbt.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1vt9irbt.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1vt9irbt.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = 0;\n    long value = 0;\n    while(test_tup) {\n        key = test_tup % 10;\n        test_tup = test_tup / 10;\n        value = test_tup % 10;\n        test_tup = test_tup / 10;\n        dict[key] = value;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122683,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp8xtvfoxe.cpp:2:\n/tmp/tmp8xtvfoxe.cpp: In function \u2018int main()\u2019:\n/tmp/tmp8xtvfoxe.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp8xtvfoxe.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp8xtvfoxe.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = test_tup[0];\n    for (int i = 1; i < test_tup.size(); i++) {\n        test_dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122683,
      "stdout": "",
      "stderr": "/tmp/tmpqvyug5rs.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpqvyug5rs.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmpqvyug5rs.cpp:7:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (int i = 1; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpqvyug5rs.cpp:8:36: error: invalid types \u2018long int[int]\u2019 for array subscript\n    8 |         test_dict[key] = test_tup[i];\n      |                                    ^\n/tmp/tmpqvyug5rs.cpp:9:25: error: invalid types \u2018long int[int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpqvyug5rs.cpp:2:\n/tmp/tmpqvyug5rs.cpp: In function \u2018int main()\u2019:\n/tmp/tmpqvyug5rs.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpqvyug5rs.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpqvyug5rs.cpp:17:37: error: can",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = 0;\n    long value = 0;\n    while (test_tup) {\n        key = test_tup % 10;\n        test_tup /= 10;\n        value = test_tup % 10;\n        test_tup /= 10;\n        dict[key] = value;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp983mkzn6.cpp:2:\n/tmp/tmp983mkzn6.cpp: In function \u2018int main()\u2019:\n/tmp/tmp983mkzn6.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp983mkzn6.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp983mkzn6.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup) {\n        if (i % 2 == 0) {\n            test_dict[test_tup % 10] = 0;\n        } else {\n            test_dict[(test_tup / 10) % 10] = test_tup % 10;\n        }\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122683,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpah4ti1h7.cpp:2:\n/tmp/tmpah4ti1h7.cpp: In function \u2018int main()\u2019:\n/tmp/tmpah4ti1h7.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpah4ti1h7.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpah4ti1h7.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> res;\n    long i = 0;\n    while(test_tup) {\n        if(test_tup & 1) {\n            res[i] = i+1;\n            i+=2;\n        }\n        test_tup >>= 1;\n    }\n    return res;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122683,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpr_vjvt_v.cpp:2:\n/tmp/tmpr_vjvt_v.cpp: In function \u2018int main()\u2019:\n/tmp/tmpr_vjvt_v.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpr_vjvt_v.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpr_vjvt_v.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    while(test_tup) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    for(int i = 0; i < test_vec.size(); i += 2) {\n        test_dict[test_vec[i]] = test_vec[i + 1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122675,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpuczluxll.cpp:2:\n/tmp/tmpuczluxll.cpp: In function \u2018int main()\u2019:\n/tmp/tmpuczluxll.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpuczluxll.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpuczluxll.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7roozmxb.cpp:2:\n/tmp/tmp7roozmxb.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7roozmxb.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7roozmxb.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (i < test_tup.size()) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n        i += 2;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122683,
      "stdout": "",
      "stderr": "/tmp/tmp48zbsp8g.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp48zbsp8g.cpp:7:25: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     while (i < test_tup.size()) {\n      |                         ^~~~\n/tmp/tmp48zbsp8g.cpp:8:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmp48zbsp8g.cpp:8:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp48zbsp8g.cpp:2:\n/tmp/tmp48zbsp8g.cpp: In function \u2018int main()\u2019:\n/tmp/tmp48zbsp8g.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp48zbsp8g.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp48zbsp8g.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (int i = 0; i < test_tup.size(); i += 2) {\n        test_dict[test_tup[i]] = test_tup[i + 1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122683,
      "stdout": "",
      "stderr": "/tmp/tmp40cozzwz.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp40cozzwz.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i += 2) {\n      |                                  ^~~~\n/tmp/tmp40cozzwz.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i + 1];\n      |                             ^\n/tmp/tmp40cozzwz.cpp:7:48: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i + 1];\n      |                                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp40cozzwz.cpp:2:\n/tmp/tmp40cozzwz.cpp: In function \u2018int main()\u2019:\n/tmp/tmp40cozzwz.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp40cozzwz.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp40cozzwz.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 | ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    long j = 1;\n    while(j < test_tup.size()) {\n        test_dict[test_tup[i]] = test_tup[j];\n        i += 2;\n        j += 2;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122683,
      "stdout": "",
      "stderr": "/tmp/tmpvyr4suo9.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpvyr4suo9.cpp:8:24: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     while(j < test_tup.size()) {\n      |                        ^~~~\n/tmp/tmpvyr4suo9.cpp:9:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         test_dict[test_tup[i]] = test_tup[j];\n      |                             ^\n/tmp/tmpvyr4suo9.cpp:9:44: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         test_dict[test_tup[i]] = test_tup[j];\n      |                                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpvyr4suo9.cpp:2:\n/tmp/tmpvyr4suo9.cpp: In function \u2018int main()\u2019:\n/tmp/tmpvyr4suo9.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpvyr4suo9.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpvyr4suo9.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = test_tup[0];\n    for (long i = 1; i < test_tup.size(); i++) {\n        test_map[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "/tmp/tmpagwsz00_.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpagwsz00_.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmpagwsz00_.cpp:7:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (long i = 1; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmpagwsz00_.cpp:8:35: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_map[key] = test_tup[i];\n      |                                   ^\n/tmp/tmpagwsz00_.cpp:9:25: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpagwsz00_.cpp:2:\n/tmp/tmpagwsz00_.cpp: In function \u2018int main()\u2019:\n/tmp/tmpagwsz00_.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpagwsz00_.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpagwsz00_.cpp:17:37: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(long i=0;i<test_tup.size();i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "/tmp/tmpkx46x2bs.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpkx46x2bs.cpp:6:29: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(long i=0;i<test_tup.size();i+=2) {\n      |                             ^~~~\n/tmp/tmpkx46x2bs.cpp:7:28: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmpkx46x2bs.cpp:7:45: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpkx46x2bs.cpp:2:\n/tmp/tmpkx46x2bs.cpp: In function \u2018int main()\u2019:\n/tmp/tmpkx46x2bs.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpkx46x2bs.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpkx46x2bs.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(ca",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n  std::map<long,long> test_dict;\n  long i = 0;\n  while (test_tup != 0) {\n    test_dict[i] = test_tup % 10;\n    test_tup /= 10;\n    i++;\n  }\n  return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122681,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpl39u3kr9.cpp:2:\n/tmp/tmpl39u3kr9.cpp: In function \u2018int main()\u2019:\n/tmp/tmpl39u3kr9.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl39u3kr9.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl39u3kr9.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmpipfi73gf.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpipfi73gf.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpipfi73gf.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpipfi73gf.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpipfi73gf.cpp:2:\n/tmp/tmpipfi73gf.cpp: In function \u2018int main()\u2019:\n/tmp/tmpipfi73gf.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpipfi73gf.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpipfi73gf.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::vector<long> test_vec;\n    while(test_tup) {\n        test_vec.push_back(test_tup%10);\n        test_tup /= 10;\n    }\n    for(int i=0;i<test_vec.size();i+=2) {\n        test_map[test_vec[i]] = test_vec[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122683,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpzw3da2fc.cpp:2:\n/tmp/tmpzw3da2fc.cpp: In function \u2018int main()\u2019:\n/tmp/tmpzw3da2fc.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpzw3da2fc.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpzw3da2fc.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmpipfi73gf.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpipfi73gf.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpipfi73gf.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpipfi73gf.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpipfi73gf.cpp:2:\n/tmp/tmpipfi73gf.cpp: In function \u2018int main()\u2019:\n/tmp/tmpipfi73gf.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpipfi73gf.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpipfi73gf.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long temp = test_tup;\n    while(temp) {\n        long key = temp%10;\n        temp /= 10;\n        long value = temp%10;\n        temp /= 10;\n        dict[key] = value;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122683,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpltw0iljy.cpp:2:\n/tmp/tmpltw0iljy.cpp: In function \u2018int main()\u2019:\n/tmp/tmpltw0iljy.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpltw0iljy.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpltw0iljy.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = 0;\n    long value = 0;\n    while (test_tup != 0) {\n        key = test_tup % 10;\n        test_tup = test_tup / 10;\n        value = test_tup % 10;\n        test_tup = test_tup / 10;\n        dict[key] = value;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122683,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6dtj74s8.cpp:2:\n/tmp/tmp6dtj74s8.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6dtj74s8.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp6dtj74s8.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp6dtj74s8.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long i = 0;\n    while (test_tup) {\n        dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmph3fqozlm.cpp:2:\n/tmp/tmph3fqozlm.cpp: In function \u2018int main()\u2019:\n/tmp/tmph3fqozlm.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmph3fqozlm.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmph3fqozlm.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "/tmp/tmpipfi73gf.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpipfi73gf.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpipfi73gf.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpipfi73gf.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpipfi73gf.cpp:2:\n/tmp/tmpipfi73gf.cpp: In function \u2018int main()\u2019:\n/tmp/tmpipfi73gf.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpipfi73gf.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpipfi73gf.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}