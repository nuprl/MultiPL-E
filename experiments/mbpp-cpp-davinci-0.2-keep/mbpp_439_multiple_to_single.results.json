{
  "name": "mbpp_439_multiple_to_single",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpgwjizkje: /tmp/tmpgwjizkje.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (auto i : L) {\n    result = result * 10 + i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpj_js9pll: /tmp/tmpj_js9pll.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpoq2a3cbo: /tmp/tmpoq2a3cbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); ++i) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpc6nsa15v: /tmp/tmpc6nsa15v.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long res = 0;\n  for (auto i : L) {\n    res = res * 10 + i;\n  }\n  return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510443,
      "stdout": "",
      "stderr": "tmpngiyxafr: /tmp/tmpngiyxafr.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpoq2a3cbo: /tmp/tmpoq2a3cbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (int i = 0; i < L.size(); i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp__iqfgms: /tmp/tmp__iqfgms.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (int i = 0; i < L.size(); ++i) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmpixt8stt5: /tmp/tmpixt8stt5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpgwjizkje: /tmp/tmpgwjizkje.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n\tlong result = 0;\n\tfor (int i = 0; i < L.size(); i++) {\n\t\tresult = result * 10 + L[i];\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmp6aap1cil: /tmp/tmp6aap1cil.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpgwjizkje: /tmp/tmpgwjizkje.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpgwjizkje: /tmp/tmpgwjizkje.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpoq2a3cbo: /tmp/tmpoq2a3cbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpgwjizkje: /tmp/tmpgwjizkje.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    std::stringstream ss;\n    for (auto i : L) {\n        ss << i;\n    }\n    long result;\n    ss >> result;\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (int i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmpzbxvjyw1: /tmp/tmpzbxvjyw1.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (int i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmpzbxvjyw1: /tmp/tmpzbxvjyw1.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpoq2a3cbo: /tmp/tmpoq2a3cbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpoq2a3cbo: /tmp/tmpoq2a3cbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result += L[i] * pow(10, i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmpysejko3u: /tmp/tmpysejko3u.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpgwjizkje: /tmp/tmpgwjizkje.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpoq2a3cbo: /tmp/tmpoq2a3cbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long num = 0;\n    for (int i = 0; i < L.size(); i++) {\n        num = num * 10 + L[i];\n    }\n    return num;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmps3v0pu65: /tmp/tmps3v0pu65.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpoq2a3cbo: /tmp/tmpoq2a3cbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (long i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmpp01w5ehr: /tmp/tmpp01w5ehr.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpoq2a3cbo: /tmp/tmpoq2a3cbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpgwjizkje: /tmp/tmpgwjizkje.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpgwjizkje: /tmp/tmpgwjizkje.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmpvgh217ps: /tmp/tmpvgh217ps.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (int i = 0; i < L.size(); i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp__iqfgms: /tmp/tmp__iqfgms.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (long i = 0; i < L.size(); i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmpkicph98q: /tmp/tmpkicph98q.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpoq2a3cbo: /tmp/tmpoq2a3cbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmpjlyq0jl2: /tmp/tmpjlyq0jl2.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (int i = 0; i < L.size(); i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp__iqfgms: /tmp/tmp__iqfgms.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpoq2a3cbo: /tmp/tmpoq2a3cbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (int i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmpzbxvjyw1: /tmp/tmpzbxvjyw1.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result += L[i] * pow(10, L.size() - 1 - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmprl2v6x0j: /tmp/tmprl2v6x0j.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (int i = 0; i < L.size(); i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp__iqfgms: /tmp/tmp__iqfgms.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (int i = 0; i < L.size(); i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp__iqfgms: /tmp/tmp__iqfgms.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (int i = 0; i < L.size(); i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp__iqfgms: /tmp/tmp__iqfgms.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpgwjizkje: /tmp/tmpgwjizkje.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (int i = 0; i < L.size(); ++i) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmpixt8stt5: /tmp/tmpixt8stt5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long ans = 0;\n    for(int i = 0; i < L.size(); i++) {\n        ans = ans * 10 + L[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmpui3ul1mq: /tmp/tmpui3ul1mq.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    std::string s = \"\";\n    for (auto i : L) {\n        s += std::to_string(i);\n    }\n    return std::stol(s);\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (long i = 0; i < L.size(); i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmpkicph98q: /tmp/tmpkicph98q.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (int i = 0; i < L.size(); i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp__iqfgms: /tmp/tmp__iqfgms.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpoq2a3cbo: /tmp/tmpoq2a3cbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for(auto i : L) {\n        res = res * 10 + i;\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmpa65pqkwx: /tmp/tmpa65pqkwx.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpoq2a3cbo: /tmp/tmpoq2a3cbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long num = 0;\n    for(int i = 0; i < L.size(); i++) {\n        num = num * 10 + L[i];\n    }\n    return num;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmpz0ou0tto: /tmp/tmpz0ou0tto.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long num = 0;\n    for (int i = 0; i < L.size(); i++) {\n        num = num * 10 + L[i];\n    }\n    return num;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmps3v0pu65: /tmp/tmps3v0pu65.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (auto i : L) {\n    result = result * 10 + i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpj_js9pll: /tmp/tmpj_js9pll.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpoq2a3cbo: /tmp/tmpoq2a3cbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (int i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmpzbxvjyw1: /tmp/tmpzbxvjyw1.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n\tlong result = 0;\n\tfor (int i = 0; i < L.size(); i++) {\n\t\tresult = result * 10 + L[i];\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmp6aap1cil: /tmp/tmp6aap1cil.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpoq2a3cbo: /tmp/tmpoq2a3cbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (int i = 0; i < L.size(); i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp__iqfgms: /tmp/tmp__iqfgms.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    long multiplier = 1;\n    for (int i = L.size() - 1; i >= 0; i--) {\n        result += L[i] * multiplier;\n        multiplier *= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmpmfgbbsav: /tmp/tmpmfgbbsav.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpoq2a3cbo: /tmp/tmpoq2a3cbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpoq2a3cbo: /tmp/tmpoq2a3cbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for(int i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmpbmb83zrd: /tmp/tmpbmb83zrd.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmplyvoodl7: /tmp/tmplyvoodl7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpgwjizkje: /tmp/tmpgwjizkje.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp82fpzfd4: /tmp/tmp82fpzfd4.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long ans = 0;\n    for (int i = 0; i < L.size(); i++) {\n        ans = ans * 10 + L[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "tmp5idv_3ki: /tmp/tmp5idv_3ki.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (int i = 0; i < L.size(); i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmp__iqfgms: /tmp/tmp__iqfgms.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (auto i : L) {\n    result = result * 10 + i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpj_js9pll: /tmp/tmpj_js9pll.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a list of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "tmpoq2a3cbo: /tmp/tmpoq2a3cbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}