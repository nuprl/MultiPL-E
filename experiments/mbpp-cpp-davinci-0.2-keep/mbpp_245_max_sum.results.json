{
  "name": "mbpp_245_max_sum",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(int i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(int i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(int i = n - 2; i >= 0; i--) {\n        for(int j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < n; i++) {\n        max = std::max(max, dp[i] + dp2[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    lis[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j]);\n            }\n        }\n        lis[i] += arr[i];\n    }\n    lds[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j]);\n            }\n        }\n        lds[i] += arr[i];\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0]=arr[0];\n    dec[arr.size()-1]=arr[arr.size()-1];\n    for(int i=1;i<arr.size();i++)\n    {\n        inc[i]=arr[i];\n        for(int j=0;j<i;j++)\n        {\n            if(arr[i]>arr[j])\n            {\n                inc[i]=std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    for(int i=arr.size()-2;i>=0;i--)\n    {\n        dec[i]=arr[i];\n        for(int j=arr.size()-1;j>i;j--)\n        {\n            if(arr[i]>arr[j])\n            {\n                dec[i]=std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max=0;\n    for(int i=0;i<arr.size();i++)\n    {\n        if(inc[i]+dec[i]-arr[i]>max)\n        {\n            max=inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(), 0);\n    std::vector<long> dec(arr.size(), 0);\n    inc[0] = arr[0];\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for (int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for (int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (int j = arr.size() - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    lis[0] = arr[0];\n    lds[n-1] = arr[n-1];\n    for(long i=1;i<n;i++) {\n        lis[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[i]>arr[j] && lis[i]<lis[j]+arr[i]) {\n                lis[i] = lis[j]+arr[i];\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--) {\n        lds[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[i]>arr[j] && lds[i]<lds[j]+arr[i]) {\n                lds[i] = lds[j]+arr[i];\n            }\n        }\n    }\n    long max = lis[0]+lds[0]-arr[0];\n    for(long i=1;i<n;i++) {\n        if(max<lis[i]+lds[i]-arr[i]) {\n            max = lis[i]+lds[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(int i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(int i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    for (long i = 0; i < n; i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for (long i = 1; i < n; i++) {\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> dp1(n,0);\n    std::vector<long> dp2(n,0);\n    dp1[0] = arr[0];\n    dp2[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        dp1[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                dp1[i] = std::max(dp1[i], dp1[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dp2[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp1[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for(int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = arr.size() - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size());\n    std::vector<long> dec(arr.size());\n    inc[0] = arr[0];\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for(long i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = arr.size() - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0] = arr[0];\n    for(int i=1;i<arr.size();i++) {\n        inc[i] = arr[i];\n        for(int j=0;j<i;j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    dec[arr.size()-1] = arr[arr.size()-1];\n    for(int i=arr.size()-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(int j=arr.size()-1;j>i;j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i=0;i<arr.size();i++) {\n        if(inc[i]+dec[i]-arr[i] > max) {\n            max = inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tlong n = arr.size();\n\tlong *inc = new long[n];\n\tlong *dec = new long[n];\n\tfor(long i = 0; i < n; i++) {\n\t\tinc[i] = arr[i];\n\t\tdec[i] = arr[i];\n\t}\n\tfor(long i = 1; i < n; i++) {\n\t\tfor(long j = 0; j < i; j++) {\n\t\t\tif(arr[i] > arr[j]) {\n\t\t\t\tinc[i] = std::max(inc[i], inc[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor(long i = n - 2; i >= 0; i--) {\n\t\tfor(long j = n - 1; j > i; j--) {\n\t\t\tif(arr[i] > arr[j]) {\n\t\t\t\tdec[i] = std::max(dec[i], dec[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tlong max = inc[0] + dec[0] - arr[0];\n\tfor(long i = 1; i < n; i++) {\n\t\tif(inc[i] + dec[i] - arr[i] > max) {\n\t\t\tmax = inc[i] + dec[i] - arr[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(int i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(int i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    for(long i = 0; i < n; i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for(int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = arr.size() - 1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(), 0);\n    std::vector<long> dec(arr.size(), 0);\n    inc[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for(int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = arr.size() - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j]+arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j]+arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i=0;i<n;i++) {\n        ans = std::max(ans, inc[i]+dec[i]-arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j]);\n            }\n        }\n        lis[i] += arr[i];\n    }\n    lds[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j]);\n            }\n        }\n        lds[i] += arr[i];\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(), 0);\n    std::vector<long> dec(arr.size(), 0);\n    inc[0] = arr[0];\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for (int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for (int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (int j = arr.size() - 1; j > i; j--) {\n            if (arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    for(int i = 0; i < n; i++) {\n        lis[i] = arr[i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        lds[i] = arr[i];\n    }\n    for(int i = n - 2; i >= 0; i--) {\n        for(int j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < n; i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0] = arr[0];\n    dec[arr.size()-1] = arr[arr.size()-1];\n    for(int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    for(int i = arr.size()-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = arr.size()-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(inc[i]+dec[i]-arr[i] > max) {\n            max = inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123935,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> left(n,0);\n    std::vector<long> right(n,0);\n    left[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        left[i] = std::max(arr[i], left[i-1] + arr[i]);\n    }\n    right[n-1] = arr[n-1];\n    for(int i = n-2; i >= 0; i--) {\n        right[i] = std::max(arr[i], right[i+1] + arr[i]);\n    }\n    long max_sum = 0;\n    for(int i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, left[i] + right[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "tmphtcpuzov: /tmp/tmphtcpuzov.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> max_sum_inc(n);\n    std::vector<long> max_sum_dec(n);\n    max_sum_inc[0] = arr[0];\n    max_sum_dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        max_sum_inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                max_sum_inc[i] = std::max(max_sum_inc[i], max_sum_inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        max_sum_dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                max_sum_dec[i] = std::max(max_sum_dec[i], max_sum_dec[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long *inc = new long[n];\n    long *dec = new long[n];\n    for(long i = 0; i < n; i++) {\n        inc[i] = arr[i];\n        dec[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n  int n = arr.size();\n  std::vector<long> lis(n, 0);\n  std::vector<long> lds(n, 0);\n  lis[0] = arr[0];\n  lds[n - 1] = arr[n - 1];\n  for (int i = 1; i < n; i++) {\n    lis[i] = arr[i];\n    for (int j = 0; j < i; j++) {\n      if (arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n        lis[i] = lis[j] + arr[i];\n      }\n    }\n  }\n  for (int i = n - 2; i >= 0; i--) {\n    lds[i] = arr[i];\n    for (int j = n - 1; j > i; j--) {\n      if (arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n        lds[i] = lds[j] + arr[i];\n      }\n    }\n  }\n  long max_sum = lis[0] + lds[0] - arr[0];\n  for (int i = 1; i < n; i++) {\n    if (max_sum < lis[i] + lds[i] - arr[i]) {\n      max_sum = lis[i] + lds[i] - arr[i];\n    }\n  }\n  return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    lds[n - 1] = arr[n - 1];\n    for (long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for (long j = n - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    for(int i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(int j=0;j<i;j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(int i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(int j=n-1;j>i;j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(int i=0;i<n;i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tlong n = arr.size();\n\tstd::vector<long> inc(n,0);\n\tstd::vector<long> dec(n,0);\n\tinc[0] = arr[0];\n\tdec[n-1] = arr[n-1];\n\tfor(long i = 1; i < n; i++) {\n\t\tinc[i] = arr[i];\n\t\tfor(long j = 0; j < i; j++) {\n\t\t\tif(arr[i] > arr[j]) {\n\t\t\t\tinc[i] = std::max(inc[i],inc[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor(long i = n-2; i >= 0; i--) {\n\t\tdec[i] = arr[i];\n\t\tfor(long j = n-1; j > i; j--) {\n\t\t\tif(arr[i] > arr[j]) {\n\t\t\t\tdec[i] = std::max(dec[i],dec[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tlong max = 0;\n\tfor(long i = 0; i < n; i++) {\n\t\tif(inc[i] + dec[i] - arr[i] > max) {\n\t\t\tmax = inc[i] + dec[i] - arr[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    for(int i=1;i<n;i++){\n        inc[i] = arr[i];\n        for(int j=i-1;j>=0;j--){\n            if(arr[j]<arr[i]){\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(int i=n-2;i>=0;i--){\n        dec[i] = arr[i];\n        for(int j=i+1;j<n;j++){\n            if(arr[j]<arr[i]){\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = inc[0]+dec[0]-arr[0];\n    for(int i=1;i<n;i++){\n        if(max<inc[i]+dec[i]-arr[i]){\n            max = inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for (long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for (long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (long j = n-1; j > i; j--) {\n            if (arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    lds[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, lis[i] + lds[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    long dp1[n];\n    for(long i = 0; i < n; i++) {\n        dp1[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && dp1[i] < dp1[j] + arr[i]) {\n                dp1[i] = dp1[j] + arr[i];\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(dp[i] + dp1[i] - arr[i] > max) {\n            max = dp[i] + dp1[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i=1;i<n;i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0]=arr[0];\n    dec[arr.size()-1]=arr[arr.size()-1];\n    for(int i=1;i<arr.size();i++) {\n        inc[i]=arr[i];\n        for(int j=0;j<i;j++) {\n            if(arr[i]>arr[j]) {\n                inc[i]=std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    for(int i=arr.size()-2;i>=0;i--) {\n        dec[i]=arr[i];\n        for(int j=arr.size()-1;j>i;j--) {\n            if(arr[i]>arr[j]) {\n                dec[i]=std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max=0;\n    for(int i=0;i<arr.size();i++) {\n        if(inc[i]+dec[i]-arr[i]>max) {\n            max=inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tlong n = arr.size();\n\tstd::vector<long> lis(n, 1);\n\tstd::vector<long> lds(n, 1);\n\tfor (long i = 1; i < n; i++) {\n\t\tfor (long j = 0; j < i; j++) {\n\t\t\tif (arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n\t\t\t\tlis[i] = lis[j] + 1;\n\t\t\t}\n\t\t}\n\t}\n\tfor (long i = n - 2; i >= 0; i--) {\n\t\tfor (long j = n - 1; j > i; j--) {\n\t\t\tif (arr[i] > arr[j] && lds[i] < lds[j] + 1) {\n\t\t\t\tlds[i] = lds[j] + 1;\n\t\t\t}\n\t\t}\n\t}\n\tlong max = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tif (max < lis[i] + lds[i] - 1) {\n\t\t\tmax = lis[i] + lds[i] - 1;\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "tmpjts9sujv: /tmp/tmpjts9sujv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i],arr[i]+inc[j]);\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i],arr[i]+dec[j]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(long i=0;i<n;i++) {\n        max_sum = std::max(max_sum,inc[i]+dec[i]-arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for(int i = arr.size() - 2; i >= 0; i--) {\n        for(int j = arr.size() - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && dp2[i] < dp2[j] + arr[i]) {\n                dp2[i] = dp2[j] + arr[i];\n            }\n        }\n    }\n    long max = dp[0] + dp2[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < dp[i] + dp2[i] - arr[i]) {\n            max = dp[i] + dp2[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n - 1] = arr[n - 1];\n    for (long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tlong n = arr.size();\n\tstd::vector<long> inc(n, 0);\n\tstd::vector<long> dec(n, 0);\n\tinc[0] = arr[0];\n\tdec[n - 1] = arr[n - 1];\n\tfor (int i = 1; i < n; ++i) {\n\t\tinc[i] = arr[i];\n\t\tfor (int j = 0; j < i; ++j) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\tinc[i] = std::max(inc[i], inc[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = n - 2; i >= 0; --i) {\n\t\tdec[i] = arr[i];\n\t\tfor (int j = n - 1; j > i; --j) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\tdec[i] = std::max(dec[i], dec[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tlong ans = inc[0] + dec[0] - arr[0];\n\tfor (int i = 1; i < n; ++i) {\n\t\tans = std::max(ans, inc[i] + dec[i] - arr[i]);\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    std::vector<long> left(n, 0);\n    std::vector<long> right(n, 0);\n    left[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        left[i] = std::max(arr[i], left[i - 1] + arr[i]);\n    }\n    right[n - 1] = arr[n - 1];\n    for(int i = n - 2; i >= 0; i--) {\n        right[i] = std::max(arr[i], right[i + 1] + arr[i]);\n    }\n    long max_sum = 0;\n    for(int i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, left[i] + right[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "tmp8b8eg8rw: /tmp/tmp8b8eg8rw.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    lds[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    for(long i = 0; i < n; i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    lis[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j]);\n            }\n        }\n        lis[i] += arr[i];\n    }\n    lds[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j]);\n            }\n        }\n        lds[i] += arr[i];\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    lds[n - 1] = arr[n - 1];\n    for (long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for (long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for (long i = 1; i < n; i++) {\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp1[n];\n    for (long i = 0; i < n; i++) {\n        dp1[i] = arr[i];\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j]) {\n                dp1[i] = std::max(dp1[i], dp1[j] + arr[i]);\n            }\n        }\n    }\n    long max = dp[0] + dp1[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (dp[i] + dp1[i] - arr[i] > max) {\n            max = dp[i] + dp1[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(), 0);\n    std::vector<long> dec(arr.size(), 0);\n    inc[0] = arr[0];\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for (int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for (int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (int j = arr.size() - 1; j > i; j--) {\n            if (arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    for (long i = 1; i < n; i++) {\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j]) {\n                lis[i] = lis[j];\n            }\n        }\n        lis[i] += arr[i];\n    }\n    lds[n - 1] = arr[n - 1];\n    for (long i = n - 2; i >= 0; i--) {\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && lds[i] < lds[j]) {\n                lds[i] = lds[j];\n            }\n        }\n        lds[i] += arr[i];\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(), 0);\n    std::vector<long> dec(arr.size(), 0);\n    inc[0] = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for (int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (int j = arr.size() - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long ans = INT_MIN;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long inc[n];\n    long dec[n];\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, dp[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "tmp6ytxzkcb: /tmp/tmp6ytxzkcb.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    lds[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, lis[i] + lds[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(int i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(int i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j]) {\n                lis[i] = lis[j];\n            }\n        }\n        lis[i] += arr[i];\n    }\n    lds[n-1] = arr[n-1];\n    for(int i = n-2; i >= 0; i--) {\n        for(int j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j]) {\n                lds[i] = lds[j];\n            }\n        }\n        lds[i] += arr[i];\n    }\n    long ans = lis[0] + lds[0] - arr[0];\n    for(int i = 1; i < n; i++) {\n        ans = std::max(ans, lis[i] + lds[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(), 0);\n    std::vector<long> dec(arr.size(), 0);\n    inc[0] = arr[0];\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for(int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = arr.size() - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    lds[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, lis[i] + lds[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tstd::vector<long> inc(arr.size(), 0);\n\tstd::vector<long> dec(arr.size(), 0);\n\tinc[0] = arr[0];\n\tdec[arr.size() - 1] = arr[arr.size() - 1];\n\tfor (int i = 1; i < arr.size(); i++) {\n\t\tinc[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) {\n\t\t\tif (arr[j] < arr[i]) {\n\t\t\t\tinc[i] = std::max(inc[i], inc[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = arr.size() - 2; i >= 0; i--) {\n\t\tdec[i] = arr[i];\n\t\tfor (int j = arr.size() - 1; j > i; j--) {\n\t\t\tif (arr[j] < arr[i]) {\n\t\t\t\tdec[i] = std::max(dec[i], dec[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tlong max = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (inc[i] + dec[i] - arr[i] > max) {\n\t\t\tmax = inc[i] + dec[i] - arr[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    lis[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    lds[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(), 0);\n    std::vector<long> dec(arr.size(), 0);\n    inc[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for(int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = arr.size() - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(), 0);\n    std::vector<long> dec(arr.size(), 0);\n    inc[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for(int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = arr.size() - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> left(n, 0);\n    std::vector<long> right(n, 0);\n    left[0] = arr[0];\n    for (long i = 1; i < n; i++) {\n        left[i] = std::max(left[i - 1], arr[i]);\n    }\n    right[n - 1] = arr[n - 1];\n    for (long i = n - 2; i >= 0; i--) {\n        right[i] = std::max(right[i + 1], arr[i]);\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += std::min(left[i], right[i]) - arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "tmp0tn2rbsh: /tmp/tmp0tn2rbsh.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(int i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = INT_MIN;\n    for(int i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n  std::vector<long> inc(arr.size(), 0);\n  std::vector<long> dec(arr.size(), 0);\n  inc[0] = arr[0];\n  dec[arr.size() - 1] = arr[arr.size() - 1];\n  for (int i = 1; i < arr.size(); i++) {\n    inc[i] = arr[i];\n    for (int j = 0; j < i; j++) {\n      if (arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n        inc[i] = inc[j] + arr[i];\n      }\n    }\n  }\n  for (int i = arr.size() - 2; i >= 0; i--) {\n    dec[i] = arr[i];\n    for (int j = arr.size() - 1; j > i; j--) {\n      if (arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n        dec[i] = dec[j] + arr[i];\n      }\n    }\n  }\n  long max = inc[0] + dec[0] - arr[0];\n  for (int i = 1; i < arr.size(); i++) {\n    if (max < inc[i] + dec[i] - arr[i]) {\n      max = inc[i] + dec[i] - arr[i];\n    }\n  }\n  return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = INT_MIN;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j]);\n            }\n        }\n        inc[i] += arr[i];\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j]);\n            }\n        }\n        dec[i] += arr[i];\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n  long n = arr.size();\n  long dp[n];\n  for(long i = 0; i < n; i++) {\n    dp[i] = arr[i];\n  }\n  for(long i = 1; i < n; i++) {\n    for(long j = 0; j < i; j++) {\n      if(arr[i] > arr[j]) {\n        dp[i] = std::max(dp[i], dp[j] + arr[i]);\n      }\n    }\n  }\n  long dp2[n];\n  for(long i = 0; i < n; i++) {\n    dp2[i] = arr[i];\n  }\n  for(long i = n - 2; i >= 0; i--) {\n    for(long j = n - 1; j > i; j--) {\n      if(arr[i] > arr[j]) {\n        dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n      }\n    }\n  }\n  long max = 0;\n  for(long i = 0; i < n; i++) {\n    if(dp[i] + dp2[i] - arr[i] > max) {\n      max = dp[i] + dp2[i] - arr[i];\n    }\n  }\n  return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for(int i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max_sum = INT_MIN;\n    for(int i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tlong n = arr.size();\n\tstd::vector<long> inc(n, 0);\n\tstd::vector<long> dec(n, 0);\n\tinc[0] = arr[0];\n\tfor (long i = 1; i < n; i++) {\n\t\tinc[i] = arr[i];\n\t\tfor (long j = 0; j < i; j++) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\tinc[i] = std::max(inc[i], inc[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tdec[n - 1] = arr[n - 1];\n\tfor (long i = n - 2; i >= 0; i--) {\n\t\tdec[i] = arr[i];\n\t\tfor (long j = n - 1; j > i; j--) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\tdec[i] = std::max(dec[i], dec[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tlong max = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tif (inc[i] + dec[i] - arr[i] > max) {\n\t\t\tmax = inc[i] + dec[i] - arr[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0] = arr[0];\n    for(int i=1;i<arr.size();i++) {\n        inc[i] = arr[i];\n        for(int j=0;j<i;j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    dec[arr.size()-1] = arr[arr.size()-1];\n    for(int i=arr.size()-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(int j=arr.size()-1;j>i;j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = inc[0]+dec[0]-arr[0];\n    for(int i=1;i<arr.size();i++) {\n        if(inc[i]+dec[i]-arr[i] > max) {\n            max = inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++){\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++){\n            if(arr[j] < arr[i]){\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--){\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--){\n            if(arr[j] < arr[i]){\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++){\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n-2; i >= 0; i--) {\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long max = dp[0] + dp2[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(dp[i] + dp2[i] - arr[i] > max) {\n            max = dp[i] + dp2[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j]) {\n                lis[i] = lis[j];\n            }\n        }\n        lis[i] += arr[i];\n    }\n    lds[n - 1] = arr[n - 1];\n    for(int i = n - 2; i >= 0; i--) {\n        for(int j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j]) {\n                lds[i] = lds[j];\n            }\n        }\n        lds[i] += arr[i];\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(int i = 1; i < n; i++) {\n        if(max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tlong n = arr.size();\n\tstd::vector<long> inc(n);\n\tstd::vector<long> dec(n);\n\tinc[0] = arr[0];\n\tdec[n-1] = arr[n-1];\n\tfor(long i = 1; i < n; i++) {\n\t\tinc[i] = arr[i];\n\t\tfor(long j = 0; j < i; j++) {\n\t\t\tif(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n\t\t\t\tinc[i] = inc[j] + arr[i];\n\t\t\t}\n\t\t}\n\t}\n\tfor(long i = n-2; i >= 0; i--) {\n\t\tdec[i] = arr[i];\n\t\tfor(long j = n-1; j > i; j--) {\n\t\t\tif(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n\t\t\t\tdec[i] = dec[j] + arr[i];\n\t\t\t}\n\t\t}\n\t}\n\tlong max = inc[0] + dec[0] - arr[0];\n\tfor(long i = 1; i < n; i++) {\n\t\tif(max < inc[i] + dec[i] - arr[i]) {\n\t\t\tmax = inc[i] + dec[i] - arr[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(int i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[arr.size()-1] = arr[arr.size()-1];\n    for(int i = arr.size()-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = arr.size()-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n  std::vector<long> inc(arr.size(),0);\n  std::vector<long> dec(arr.size(),0);\n  inc[0]=arr[0];\n  for(int i=1;i<arr.size();i++) {\n    for(int j=0;j<i;j++) {\n      if(arr[i]>arr[j]) {\n        inc[i]=std::max(inc[i],inc[j]+arr[i]);\n      }\n    }\n  }\n  dec[arr.size()-1]=arr[arr.size()-1];\n  for(int i=arr.size()-2;i>=0;i--) {\n    for(int j=arr.size()-1;j>i;j--) {\n      if(arr[i]>arr[j]) {\n        dec[i]=std::max(dec[i],dec[j]+arr[i]);\n      }\n    }\n  }\n  long max=0;\n  for(int i=0;i<arr.size();i++) {\n    if(inc[i]+dec[i]-arr[i]>max) {\n      max=inc[i]+dec[i]-arr[i];\n    }\n  }\n  return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n-2; i >= 0; i--) {\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> dp1(n, 0);\n    std::vector<long> dp2(n, 0);\n    dp1[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        dp1[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                dp1[i] = std::max(dp1[i], dp1[j] + arr[i]);\n            }\n        }\n    }\n    dp2[n - 1] = arr[n - 1];\n    for(int i = n - 2; i >= 0; i--) {\n        dp2[i] = arr[i];\n        for(int j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(int i = 0; i < n; i++) {\n        ans = std::max(ans, dp1[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long inc[n];\n    long dec[n];\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    long dp_rev[n];\n    for(long i = 0; i < n; i++) {\n        dp_rev[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && dp_rev[i] < dp_rev[j] + arr[i]) {\n                dp_rev[i] = dp_rev[j] + arr[i];\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(max < dp[i] + dp_rev[i] - arr[i]) {\n            max = dp[i] + dp_rev[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long inc[n];\n    long dec[n];\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    for(int i=0;i<n;i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for(int i=1;i<n;i++) {\n        for(int j=0;j<i;j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(int i=n-2;i>=0;i--) {\n        for(int j=n-1;j>i;j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(int i=1;i<n;i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    long inc[n];\n    long dec[n];\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n - 1] = arr[n - 1];\n    for (long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n][2];\n    for(long i = 0; i < n; i++) {\n        dp[i][0] = arr[i];\n        dp[i][1] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i][0] = std::max(dp[i][0], dp[j][0] + arr[i]);\n            }\n        }\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp[i][1] = std::max(dp[i][1], dp[j][1] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i][0] + dp[i][1] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i=0;i<n;i++) {\n        if(max < inc[i]+dec[i]-arr[i]) {\n            max = inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(int i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(int i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j]) {\n                lis[i] = lis[j];\n            }\n        }\n        lis[i] += arr[i];\n    }\n    lds[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j]) {\n                lds[i] = lds[j];\n            }\n        }\n        lds[i] += arr[i];\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(), 0);\n    std::vector<long> dec(arr.size(), 0);\n    inc[0] = arr[0];\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for (int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for (int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (int j = arr.size() - 1; j > i; j--) {\n            if (arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0]=arr[0];\n    for(int i=1;i<arr.size();i++) {\n        inc[i]=arr[i];\n        for(int j=0;j<i;j++) {\n            if(arr[j]<arr[i]) {\n                inc[i]=std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    dec[arr.size()-1]=arr[arr.size()-1];\n    for(int i=arr.size()-2;i>=0;i--) {\n        dec[i]=arr[i];\n        for(int j=arr.size()-1;j>i;j--) {\n            if(arr[j]<arr[i]) {\n                dec[i]=std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max=0;\n    for(int i=0;i<arr.size();i++) {\n        if(inc[i]+dec[i]-arr[i]>max) {\n            max=inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> max_sum_inc(n, 0);\n    std::vector<long> max_sum_dec(n, 0);\n    max_sum_inc[0] = arr[0];\n    max_sum_dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        max_sum_inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                max_sum_inc[i] = std::max(max_sum_inc[i], max_sum_inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        max_sum_dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                max_sum_dec[i] = std::max(max_sum_dec[i], max_sum_dec[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    lds[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, lis[i] + lds[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long inc[n];\n    long dec[n];\n    inc[0] = arr[0];\n    dec[n - 1] = arr[n - 1];\n    for (long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (long j = n - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    lds[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && dp2[i] < dp2[j] + arr[i]) {\n                dp2[i] = dp2[j] + arr[i];\n            }\n        }\n    }\n    long ans = INT_MIN;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 1);\n    std::vector<long> lds(n, 1);\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "tmpku59w5ac: /tmp/tmpku59w5ac.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tstd::vector<long> inc(arr.size(), 0);\n\tstd::vector<long> dec(arr.size(), 0);\n\tinc[0] = arr[0];\n\tdec[arr.size() - 1] = arr[arr.size() - 1];\n\tfor (int i = 1; i < arr.size(); i++) {\n\t\tfor (int j = 0; j < i; j++) {\n\t\t\tif (arr[i] > arr[j] && inc[i] < inc[j]) {\n\t\t\t\tinc[i] = inc[j];\n\t\t\t}\n\t\t}\n\t\tinc[i] += arr[i];\n\t}\n\tfor (int i = arr.size() - 2; i >= 0; i--) {\n\t\tfor (int j = arr.size() - 1; j > i; j--) {\n\t\t\tif (arr[i] > arr[j] && dec[i] < dec[j]) {\n\t\t\t\tdec[i] = dec[j];\n\t\t\t}\n\t\t}\n\t\tdec[i] += arr[i];\n\t}\n\tlong max = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (max < inc[i] + dec[i] - arr[i]) {\n\t\t\tmax = inc[i] + dec[i] - arr[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    long dp[n];\n    for(int i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    long ans = dp[0];\n    for(int i = 1; i < n; i++) {\n        if(ans < dp[i]) {\n            ans = dp[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "tmpk4bg3r1z: /tmp/tmpk4bg3r1z.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i=1;i<n;i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    lds[n - 1] = arr[n - 1];\n    for (long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for (long j = n - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tlong n = arr.size();\n\tstd::vector<long> inc(n);\n\tstd::vector<long> dec(n);\n\tinc[0] = arr[0];\n\tdec[n - 1] = arr[n - 1];\n\tfor(long i = 1; i < n; i++) {\n\t\tinc[i] = arr[i];\n\t\tfor(long j = 0; j < i; j++) {\n\t\t\tif(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n\t\t\t\tinc[i] = inc[j] + arr[i];\n\t\t\t}\n\t\t}\n\t}\n\tfor(long i = n - 2; i >= 0; i--) {\n\t\tdec[i] = arr[i];\n\t\tfor(long j = n - 1; j > i; j--) {\n\t\t\tif(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n\t\t\t\tdec[i] = dec[j] + arr[i];\n\t\t\t}\n\t\t}\n\t}\n\tlong max = inc[0] + dec[0] - arr[0];\n\tfor(long i = 1; i < n; i++) {\n\t\tif(max < inc[i] + dec[i] - arr[i]) {\n\t\t\tmax = inc[i] + dec[i] - arr[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> dp(n);\n    dp[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        dp[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long ans = dp[0];\n    for(int i = 1; i < n; i++) {\n        ans = std::max(ans, dp[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "tmpukf6_sis: /tmp/tmpukf6_sis.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tlong n = arr.size();\n\tlong max_sum = 0;\n\tstd::vector<long> left(n, 0);\n\tstd::vector<long> right(n, 0);\n\tleft[0] = arr[0];\n\tfor (long i = 1; i < n; i++) {\n\t\tleft[i] = std::max(left[i - 1] + arr[i], arr[i]);\n\t}\n\tright[n - 1] = arr[n - 1];\n\tfor (long i = n - 2; i >= 0; i--) {\n\t\tright[i] = std::max(right[i + 1] + arr[i], arr[i]);\n\t}\n\tfor (long i = 0; i < n; i++) {\n\t\tmax_sum = std::max(max_sum, left[i] + right[i] - arr[i]);\n\t}\n\treturn max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "tmpf61lw19z: /tmp/tmpf61lw19z.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_sum_so_far += arr[i];\n        if (max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        if (max_sum < max_sum_so_far) {\n            max_sum = max_sum_so_far;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "tmprtu103s_: /tmp/tmprtu103s_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for (int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for (int i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (int j = n - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for (int i = 0; i < n; i++) {\n        if (inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    for(long i=0;i<n;i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for(long i=1;i<n;i++) {\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--) {\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i=1;i<n;i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> lis(arr.size(), 0);\n    std::vector<long> lds(arr.size(), 0);\n    lis[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j]);\n            }\n        }\n        lis[i] += arr[i];\n    }\n    lds[arr.size() - 1] = arr[arr.size() - 1];\n    for(int i = arr.size() - 2; i >= 0; i--) {\n        for(int j = arr.size() - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j]);\n            }\n        }\n        lds[i] += arr[i];\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size());\n    std::vector<long> dec(arr.size());\n    inc[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for(int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = arr.size() - 1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size());\n    std::vector<long> dec(arr.size());\n    inc[0] = arr[0];\n    dec[arr.size()-1] = arr[arr.size()-1];\n    for(int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(int i = arr.size()-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = arr.size()-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    lis[0] = arr[0];\n    lds[n-1] = arr[n-1];\n    for(int i=1;i<n;i++) {\n        lis[i] = arr[i];\n        for(int j=0;j<i;j++) {\n            if(arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for(int i=n-2;i>=0;i--) {\n        lds[i] = arr[i];\n        for(int j=n-1;j>i;j--) {\n            if(arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(int i=0;i<n;i++) {\n        max_sum = std::max(max_sum, lis[i] + lds[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    dp[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        dp[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long ans = dp[0];\n    for(long i = 1; i < n; i++) {\n        ans = std::max(ans, dp[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "tmp5_tnckvn: /tmp/tmp5_tnckvn.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> lis(arr.size(),0);\n    std::vector<long> lds(arr.size(),0);\n    lis[0] = arr[0];\n    lds[arr.size()-1] = arr[arr.size()-1];\n    for(int i=1;i<arr.size();i++) {\n        lis[i] = arr[i];\n        for(int j=0;j<i;j++) {\n            if(arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i],lis[j]+arr[i]);\n            }\n        }\n    }\n    for(int i=arr.size()-2;i>=0;i--) {\n        lds[i] = arr[i];\n        for(int j=arr.size()-1;j>i;j--) {\n            if(arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i],lds[j]+arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i=0;i<arr.size();i++) {\n        if(lis[i]+lds[i]-arr[i] > max) {\n            max = lis[i]+lds[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max_val = 0;\n    for(long i = 0; i < n; i++) {\n        max_val = std::max(max_val, inc[i] + dec[i] - arr[i]);\n    }\n    return max_val;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(), 0);\n    std::vector<long> dec(arr.size(), 0);\n    inc[0] = arr[0];\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for (int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for (int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (int j = arr.size() - 1; j > i; j--) {\n            if (arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tint n = arr.size();\n\tstd::vector<long> inc(n, 0);\n\tstd::vector<long> dec(n, 0);\n\tinc[0] = arr[0];\n\tdec[n-1] = arr[n-1];\n\tfor(int i = 1; i < n; i++) {\n\t\tinc[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++) {\n\t\t\tif(arr[i] > arr[j]) {\n\t\t\t\tinc[i] = std::max(inc[i], inc[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = n-2; i >= 0; i--) {\n\t\tdec[i] = arr[i];\n\t\tfor(int j = n-1; j > i; j--) {\n\t\t\tif(arr[i] > arr[j]) {\n\t\t\t\tdec[i] = std::max(dec[i], dec[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tlong max = 0;\n\tfor(int i = 0; i < n; i++) {\n\t\tmax = std::max(max, inc[i] + dec[i] - arr[i]);\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    lds[n - 1] = arr[n - 1];\n    for (long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    for(int i = 0; i < n; i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for(int i = n - 2; i >= 0; i--) {\n        for(int j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < n; i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j]) {\n                lis[i] = lis[j];\n            }\n        }\n        lis[i] += arr[i];\n    }\n    lds[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j]) {\n                lds[i] = lds[j];\n            }\n        }\n        lds[i] += arr[i];\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\t// Write your code here\n\tlong n = arr.size();\n\tstd::vector<long> inc(n, 0);\n\tstd::vector<long> dec(n, 0);\n\tinc[0] = arr[0];\n\tdec[n - 1] = arr[n - 1];\n\tfor (long i = 1; i < n; i++) {\n\t\tinc[i] = arr[i];\n\t\tfor (long j = 0; j < i; j++) {\n\t\t\tif (arr[j] < arr[i]) {\n\t\t\t\tinc[i] = std::max(inc[i], inc[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (long i = n - 2; i >= 0; i--) {\n\t\tdec[i] = arr[i];\n\t\tfor (long j = n - 1; j > i; j--) {\n\t\t\tif (arr[j] < arr[i]) {\n\t\t\t\tdec[i] = std::max(dec[i], dec[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tlong max = inc[0] + dec[0] - arr[0];\n\tfor (long i = 1; i < n; i++) {\n\t\tif (inc[i] + dec[i] - arr[i] > max) {\n\t\t\tmax = inc[i] + dec[i] - arr[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(), 0);\n    std::vector<long> dec(arr.size(), 0);\n    inc[0] = arr[0];\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for(int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = arr.size() - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    lds[n - 1] = arr[n - 1];\n    for (int i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for (int i = n - 2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for (int j = n - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for (int i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, lis[i] + lds[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long i, j;\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(i = 1; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n  long n = arr.size();\n  std::vector<long> inc(n, 0);\n  std::vector<long> dec(n, 0);\n  inc[0] = arr[0];\n  dec[n - 1] = arr[n - 1];\n  for (long i = 1; i < n; i++) {\n    inc[i] = arr[i];\n    for (long j = 0; j < i; j++) {\n      if (arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n        inc[i] = inc[j] + arr[i];\n      }\n    }\n  }\n  for (long i = n - 2; i >= 0; i--) {\n    dec[i] = arr[i];\n    for (long j = n - 1; j > i; j--) {\n      if (arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n        dec[i] = dec[j] + arr[i];\n      }\n    }\n  }\n  long max = inc[0] + dec[0] - arr[0];\n  for (long i = 1; i < n; i++) {\n    if (max < inc[i] + dec[i] - arr[i]) {\n      max = inc[i] + dec[i] - arr[i];\n    }\n  }\n  return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n, 0), dec(n, 0);\n    inc[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(int i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(int i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n][2];\n    for(int i=0;i<n;i++) {\n        dp[i][0] = dp[i][1] = arr[i];\n    }\n    for(int i=1;i<n;i++) {\n        for(int j=0;j<i;j++) {\n            if(arr[i] > arr[j]) {\n                dp[i][0] = std::max(dp[i][0], dp[j][0] + arr[i]);\n            }\n        }\n    }\n    for(int i=n-2;i>=0;i--) {\n        for(int j=n-1;j>i;j--) {\n            if(arr[i] > arr[j]) {\n                dp[i][1] = std::max(dp[i][1], dp[j][1] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(int i=0;i<n;i++) {\n        ans = std::max(ans, dp[i][0] + dp[i][1] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> max_sum_inc(arr.size(),0);\n    std::vector<long> max_sum_dec(arr.size(),0);\n    max_sum_inc[0] = arr[0];\n    max_sum_dec[arr.size()-1] = arr[arr.size()-1];\n    for(int i = 1; i < arr.size(); i++) {\n        max_sum_inc[i] = std::max(max_sum_inc[i-1], arr[i]);\n    }\n    for(int i = arr.size()-2; i >= 0; i--) {\n        max_sum_dec[i] = std::max(max_sum_dec[i+1], arr[i]);\n    }\n    long max_sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        max_sum = std::max(max_sum, max_sum_inc[i] + max_sum_dec[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "tmpm2kr42sm: /tmp/tmpm2kr42sm.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n  long n = arr.size();\n  std::vector<long> inc(n, 0);\n  std::vector<long> dec(n, 0);\n  inc[0] = arr[0];\n  for (long i = 1; i < n; i++) {\n    for (long j = 0; j < i; j++) {\n      if (arr[j] < arr[i]) {\n        inc[i] = std::max(inc[i], inc[j]);\n      }\n    }\n    inc[i] += arr[i];\n  }\n  dec[n - 1] = arr[n - 1];\n  for (long i = n - 2; i >= 0; i--) {\n    for (long j = n - 1; j > i; j--) {\n      if (arr[j] < arr[i]) {\n        dec[i] = std::max(dec[i], dec[j]);\n      }\n    }\n    dec[i] += arr[i];\n  }\n  long max = inc[0] + dec[0] - arr[0];\n  for (long i = 1; i < n; i++) {\n    if (inc[i] + dec[i] - arr[i] > max) {\n      max = inc[i] + dec[i] - arr[i];\n    }\n  }\n  return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for (int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for (int i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (int j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for (int i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tstd::vector<long> inc(arr.size(), 0);\n\tstd::vector<long> dec(arr.size(), 0);\n\tinc[0] = arr[0];\n\tdec[arr.size() - 1] = arr[arr.size() - 1];\n\tfor (int i = 1; i < arr.size(); i++) {\n\t\tinc[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) {\n\t\t\tif (arr[j] < arr[i]) {\n\t\t\t\tinc[i] = std::max(inc[i], inc[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = arr.size() - 2; i >= 0; i--) {\n\t\tdec[i] = arr[i];\n\t\tfor (int j = arr.size() - 1; j > i; j--) {\n\t\t\tif (arr[j] < arr[i]) {\n\t\t\t\tdec[i] = std::max(dec[i], dec[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tlong max_sum = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tmax_sum = std::max(max_sum, inc[i] + dec[i] - arr[i]);\n\t}\n\treturn max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tlong n = arr.size();\n\tstd::vector<long> lis(n, 1);\n\tstd::vector<long> lds(n, 1);\n\tfor(long i = 1; i < n; i++) {\n\t\tfor(long j = 0; j < i; j++) {\n\t\t\tif(arr[i] > arr[j]) {\n\t\t\t\tlis[i] = std::max(lis[i], lis[j] + 1);\n\t\t\t}\n\t\t}\n\t}\n\tfor(long i = n - 2; i >= 0; i--) {\n\t\tfor(long j = n - 1; j > i; j--) {\n\t\t\tif(arr[i] > arr[j]) {\n\t\t\t\tlds[i] = std::max(lds[i], lds[j] + 1);\n\t\t\t}\n\t\t}\n\t}\n\tlong max = 0;\n\tfor(long i = 0; i < n; i++) {\n\t\tif(lis[i] + lds[i] - 1 > max) {\n\t\t\tmax = lis[i] + lds[i] - 1;\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "tmptcpcq0ou: /tmp/tmptcpcq0ou.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> max_sum_inc(arr.size(), 0);\n    std::vector<long> max_sum_dec(arr.size(), 0);\n    max_sum_inc[0] = arr[0];\n    max_sum_dec[arr.size() - 1] = arr[arr.size() - 1];\n    for (int i = 1; i < arr.size(); i++) {\n        max_sum_inc[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                max_sum_inc[i] = std::max(max_sum_inc[i], max_sum_inc[j] + arr[i]);\n            }\n        }\n    }\n    for (int i = arr.size() - 2; i >= 0; i--) {\n        max_sum_dec[i] = arr[i];\n        for (int j = arr.size() - 1; j > i; j--) {\n            if (arr[i] > arr[j]) {\n                max_sum_dec[i] = std::max(max_sum_dec[i], max_sum_dec[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        max_sum = std::max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        sum = sum + arr[i];\n        if(sum < 0) {\n            sum = 0;\n        }\n        if(sum > max) {\n            max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "tmplgkam3fb: /tmp/tmplgkam3fb.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(int i=1;i<n;i++){\n        inc[i] = arr[i];\n        for(int j=0;j<i;j++){\n            if(arr[j]<arr[i]){\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(int i=n-2;i>=0;i--){\n        dec[i] = arr[i];\n        for(int j=n-1;j>i;j--){\n            if(arr[j]<arr[i]){\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(int i=0;i<n;i++){\n        ans = std::max(ans,inc[i]+dec[i]-arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(int i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(int j=0;j<i;j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(int i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(int j=n-1;j>i;j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(int i=0;i<n;i++) {\n        ans = std::max(ans,inc[i]+dec[i]-arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(), 0);\n    std::vector<long> dec(arr.size(), 0);\n    inc[0] = arr[0];\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for (int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for (int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (int j = arr.size() - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n  // Write your code here\n  int n = arr.size();\n  std::vector<long> inc(n,0);\n  std::vector<long> dec(n,0);\n  inc[0] = arr[0];\n  for(int i=1;i<n;i++){\n    inc[i] = arr[i];\n    for(int j=0;j<i;j++){\n      if(arr[i]>arr[j] && inc[i]<inc[j]+arr[i]){\n        inc[i] = inc[j]+arr[i];\n      }\n    }\n  }\n  dec[n-1] = arr[n-1];\n  for(int i=n-2;i>=0;i--){\n    dec[i] = arr[i];\n    for(int j=n-1;j>i;j--){\n      if(arr[i]>arr[j] && dec[i]<dec[j]+arr[i]){\n        dec[i] = dec[j]+arr[i];\n      }\n    }\n  }\n  long max = inc[0]+dec[0]-arr[0];\n  for(int i=1;i<n;i++){\n    if(max<inc[i]+dec[i]-arr[i]){\n      max = inc[i]+dec[i]-arr[i];\n    }\n  }\n  return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for (long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for (long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    lds[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i=1;i<n;i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(), 0);\n    std::vector<long> dec(arr.size(), 0);\n    inc[0] = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for (int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (int j = arr.size() - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> lis(arr.size(), 0);\n    std::vector<long> lds(arr.size(), 0);\n    lis[0] = arr[0];\n    lds[arr.size() - 1] = arr[arr.size() - 1];\n    for (int i = 1; i < arr.size(); i++) {\n        lis[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for (int i = arr.size() - 2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for (int j = arr.size() - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        max_sum = std::max(max_sum, lis[i] + lds[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i=0;i<n;i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tstd::vector<long> left(arr.size(), 0);\n\tstd::vector<long> right(arr.size(), 0);\n\tleft[0] = arr[0];\n\tfor (int i = 1; i < arr.size(); i++) {\n\t\tleft[i] = std::max(left[i - 1], arr[i]);\n\t}\n\tright[arr.size() - 1] = arr[arr.size() - 1];\n\tfor (int i = arr.size() - 2; i >= 0; i--) {\n\t\tright[i] = std::max(right[i + 1], arr[i]);\n\t}\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tsum += std::min(left[i], right[i]);\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "tmp6n_r3lyk: /tmp/tmp6n_r3lyk.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> left(n, 0);\n    std::vector<long> right(n, 0);\n    left[0] = arr[0];\n    for (long i = 1; i < n; i++) {\n        left[i] = std::max(left[i - 1], arr[i]);\n    }\n    right[n - 1] = arr[n - 1];\n    for (long i = n - 2; i >= 0; i--) {\n        right[i] = std::max(right[i + 1], arr[i]);\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += std::min(left[i], right[i]);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "tmpnnqvftsn: /tmp/tmpnnqvftsn.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    lds[n - 1] = arr[n - 1];\n    for (long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n - 1] = arr[n - 1];\n    for (long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for (long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for (long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (long j = n - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(), 0);\n    std::vector<long> dec(arr.size(), 0);\n    inc[0] = arr[0];\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for (int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for (int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (int j = arr.size() - 1; j > i; j--) {\n            if (arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        if (max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}