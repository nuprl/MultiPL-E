{
  "name": "mbpp_777_find_sum",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::vector<long>::iterator it;\n    for(it = arr.begin(); it != arr.end(); it++) {\n        if(std::count(arr.begin(), arr.end(), *it) == 1) {\n            sum += *it;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509734,
      "stdout": "",
      "stderr": "tmp9pxkucbn: /tmp/tmp9pxkucbn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i] == arr[i+1]){\n            continue;\n        }\n        else{\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509734,
      "stdout": "",
      "stderr": "tmp6m28y_da: /tmp/tmp6m28y_da.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, long> map;\n    for(long i = 0; i < arr.size(); i++) {\n        if(map.find(arr[i]) == map.end()) {\n            map[arr[i]] = 1;\n            sum += arr[i];\n        }\n        else {\n            map[arr[i]]++;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for (auto i = arr.begin(); i != arr.end(); i++) {\n        if (s.find(*i) == s.end()) {\n            sum += *i;\n            s.insert(*i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long,long> m;\n    for(long i=0;i<arr.size();i++){\n        if(m.find(arr[i])==m.end()){\n            m[arr[i]]=1;\n        }\n        else{\n            m[arr[i]]+=1;\n        }\n    }\n    for(auto it=m.begin();it!=m.end();it++){\n        if(it->second==1){\n            sum+=it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "tmptkqzx54u: /tmp/tmptkqzx54u.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int flag = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j] && i != j) {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509734,
      "stdout": "",
      "stderr": "tmppf8xcikm: /tmp/tmppf8xcikm.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509734,
      "stdout": "",
      "stderr": "tmpwbzhfyys: /tmp/tmpwbzhfyys.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "tmp3lona2ht: /tmp/tmp3lona2ht.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>::iterator it;\n    for(it = arr.begin(); it != arr.end(); it++) {\n        if(std::count(arr.begin(), arr.end(), *it) == 1) {\n            sum += *it;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "tmp9_b814fr: /tmp/tmp9_b814fr.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int flag = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j] && i != j) {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509734,
      "stdout": "",
      "stderr": "tmppf8xcikm: /tmp/tmppf8xcikm.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(auto i : arr) {\n        m[i]++;\n    }\n    for(auto i : m) {\n        if(i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "tmphl_gf_zq: /tmp/tmphl_gf_zq.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        if(s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    long sum = 0;\n    for(int i = 0; i < n; i++){\n        int count = 0;\n        for(int j = 0; j < n; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "tmptylmohby: /tmp/tmptylmohby.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto i : m) {\n        if(i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "tmp1r9dfno1: /tmp/tmp1r9dfno1.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i=0;i<arr.size();i++){\n        int count = 0;\n        for(int j=0;j<arr.size();j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n        if(count==1){\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "tmpcamjkjpk: /tmp/tmpcamjkjpk.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(long i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] != arr[i+1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "tmpbz5xm6dr: /tmp/tmpbz5xm6dr.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "tmplm8v0wlr: /tmp/tmplm8v0wlr.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for (long j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "tmpk13gfoo0: /tmp/tmpk13gfoo0.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    int n = arr.size();\n    long sum = 0;\n    for(int i = 0; i < n; i++) {\n        int count = 0;\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmp7y_van2k: /tmp/tmp7y_van2k.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(int i = 0; i < arr.size(); i++)\n    {\n        m[arr[i]]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++)\n    {\n        if(it->second == 1)\n        {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmp8a58mgb7: /tmp/tmp8a58mgb7.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int flag = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(i != j && arr[i] == arr[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmpbuu1rbkq: /tmp/tmpbuu1rbkq.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmptd_shjrg: /tmp/tmptd_shjrg.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    std::set<long> s;\n    for(auto i : arr) {\n        s.insert(i);\n    }\n    long sum = 0;\n    for(auto i : s) {\n        sum += i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509734,
      "stdout": "",
      "stderr": "tmpwbzhfyys: /tmp/tmpwbzhfyys.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, long> mp;\n    for (long i = 0; i < arr.size(); i++) {\n        if (mp.find(arr[i]) == mp.end()) {\n            mp[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        if(s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i=0; i<arr.size(); i++){\n        int count = 0;\n        for(int j=0; j<arr.size(); j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmpdnx_ob5u: /tmp/tmpdnx_ob5u.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    std::set<long> s;\n    long sum = 0;\n    for(int i=0;i<arr.size();i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        if(s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (auto i = m.begin(); i != m.end(); i++) {\n        if (i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmpyzl6qtcp: /tmp/tmpyzl6qtcp.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for(long j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmpjpolr7c1: /tmp/tmpjpolr7c1.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int flag = 0;\n        for(int j = i + 1; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509734,
      "stdout": "",
      "stderr": "tmpwbzhfyys: /tmp/tmpwbzhfyys.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i=0;i<arr.size();i++)\n    {\n        int count = 0;\n        for(int j=0;j<arr.size();j++)\n        {\n            if(arr[i] == arr[j])\n            {\n                count++;\n            }\n        }\n        if(count == 1)\n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmpu6pq92ty: /tmp/tmpu6pq92ty.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(long i=0;i<arr.size();i++)\n    {\n        if(s.find(arr[i])==s.end())\n        {\n            s.insert(arr[i]);\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i=0;i<arr.size();i++){\n        if(std::find(arr.begin(),arr.end(),arr[i])==arr.end()){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmpivm2v_41: /tmp/tmpivm2v_41.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    for (auto i : arr) {\n        if (m[i] == 1) {\n            sum += i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmpxkd168k3: /tmp/tmpxkd168k3.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, long> mp;\n    for (long i = 0; i < arr.size(); i++) {\n        mp[arr[i]]++;\n    }\n    for (auto it = mp.begin(); it != mp.end(); it++) {\n        if (it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmpmsonzhw7: /tmp/tmpmsonzhw7.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>::iterator it;\n    for(it = arr.begin(); it != arr.end(); it++) {\n        if(std::find(it+1, arr.end(), *it) == arr.end()) {\n            sum += *it;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        if(s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    for (auto i : arr) {\n        if (m[i] == 1) {\n            sum += i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmp6hmpgpyz: /tmp/tmp6hmpgpyz.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(int i=0; i<arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto i: m) {\n        if(i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmpl6du1qhz: /tmp/tmpl6du1qhz.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n\tlong sum = 0;\n\tstd::sort(arr.begin(), arr.end());\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] != arr[i + 1]) {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        if(s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (long i = 0; i < arr.size(); i++) {\n        if (m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i=0;i<arr.size();i++)\n    {\n        int flag = 0;\n        for(int j=0;j<arr.size();j++)\n        {\n            if(arr[i] == arr[j] && i!=j)\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0)\n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmpgjsrcym6: /tmp/tmpgjsrcym6.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        if (map.find(arr[i]) == map.end()) {\n            map[arr[i]] = 1;\n        } else {\n            map[arr[i]]++;\n        }\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmp2od8agd8: /tmp/tmp2od8agd8.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::map<long, long> m;\n    for(int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmpz9smuw3v: /tmp/tmpz9smuw3v.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (auto i = m.begin(); i != m.end(); i++) {\n        if (i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmphh1umvxr: /tmp/tmphh1umvxr.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size(); i++) {\n        if(i == 0) {\n            if(arr[i] != arr[i+1]) {\n                sum += arr[i];\n            }\n        }\n        else if(i == arr.size() - 1) {\n            if(arr[i] != arr[i-1]) {\n                sum += arr[i];\n            }\n        }\n        else {\n            if(arr[i] != arr[i-1] && arr[i] != arr[i+1]) {\n                sum += arr[i];\n            }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmp9b0qjpt1: /tmp/tmp9b0qjpt1.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for (long i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        if(m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n        else {\n            m[arr[i]]++;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, long> hash;\n    for (long i = 0; i < arr.size(); i++) {\n        if (hash.find(arr[i]) == hash.end()) {\n            hash[arr[i]] = 1;\n        } else {\n            hash[arr[i]]++;\n        }\n    }\n    for (auto it = hash.begin(); it != hash.end(); it++) {\n        if (it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmpfv43jd66: /tmp/tmpfv43jd66.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(long i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for (long j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "tmpk13gfoo0: /tmp/tmpk13gfoo0.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>::iterator it;\n    for(it = arr.begin(); it != arr.end(); it++){\n        if(std::count(arr.begin(), arr.end(), *it) == 1){\n            sum += *it;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmpf8ez7nzh: /tmp/tmpf8ez7nzh.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++){\n        if(std::find(arr.begin(), arr.end(), arr[i]) == arr.end()){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmptxs3566u: /tmp/tmptxs3566u.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i = arr.begin(); i != arr.end(); i++) {\n        if(s.find(*i) == s.end()) {\n            s.insert(*i);\n            sum += *i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509734,
      "stdout": "",
      "stderr": "tmpwbzhfyys: /tmp/tmpwbzhfyys.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmpqt40cto7: /tmp/tmpqt40cto7.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::vector<long>::iterator it;\n    for(it = arr.begin(); it != arr.end(); it++) {\n        if(std::count(arr.begin(), arr.end(), *it) == 1) {\n            sum += *it;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509734,
      "stdout": "",
      "stderr": "tmp9pxkucbn: /tmp/tmp9pxkucbn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        if(s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    //write your code here\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(int i=0; i<arr.size(); i++){\n        m[arr[i]]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++){\n        if(it->second == 1){\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmpbjdugdec: /tmp/tmpbjdugdec.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for(long j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmpjpolr7c1: /tmp/tmpjpolr7c1.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr){\n        if(s.find(i) == s.end()){\n            s.insert(i);\n            sum += i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum=0;\n    for(int i=0;i<arr.size();i++)\n    {\n        int count=0;\n        for(int j=0;j<arr.size();j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n        if(count==1)\n        {\n            sum=sum+arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmpdpjjk8z3: /tmp/tmpdpjjk8z3.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i = arr.begin(); i != arr.end(); i++) {\n        if(s.find(*i) == s.end()) {\n            s.insert(*i);\n            sum += *i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::map<long, int> m;\n    for(int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmpvtikvcsf: /tmp/tmpvtikvcsf.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for (auto i = arr.begin(); i != arr.end(); i++) {\n        if (std::count(arr.begin(), arr.end(), *i) == 1) {\n            sum += *i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmpqiu52xh1: /tmp/tmpqiu52xh1.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] != arr[i+1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum=0;\n    for(int i=0;i<arr.size();i++){\n        int count=0;\n        for(int j=0;j<arr.size();j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n        if(count==1){\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmpal8_b0xe: /tmp/tmpal8_b0xe.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_map<long, int> m;\n    for(auto i : arr)\n        m[i]++;\n    long sum = 0;\n    for(auto i : m)\n        if(i.second == 1)\n            sum += i.first;\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmpotjthe6z: /tmp/tmpotjthe6z.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto x: arr) {\n        if(s.find(x) == s.end()) {\n            sum += x;\n            s.insert(x);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>::iterator it;\n    for(it = arr.begin(); it != arr.end(); it++) {\n        if(std::find(arr.begin(), arr.end(), *it) == it) {\n            sum += *it;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for (int i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            s.insert(arr[i]);\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for(int i=0; i<arr.size(); i++) {\n        int count = 0;\n        for(int j=0; j<arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmpx6wr9ngo: /tmp/tmpx6wr9ngo.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(std::find(arr.begin(), arr.end(), arr[i]) == arr.end()) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmpm79rpt2w: /tmp/tmpm79rpt2w.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // write your code here\n    long sum = 0;\n    std::vector<long>::iterator it;\n    for(it = arr.begin(); it != arr.end(); it++) {\n        if(std::count(arr.begin(), arr.end(), *it) == 1) {\n            sum += *it;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmpjee3kfsh: /tmp/tmpjee3kfsh.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto i : m) {\n        if(i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmp84hvb9n5: /tmp/tmp84hvb9n5.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i=0;i<arr.size();i++){\n        int flag = 0;\n        for(int j=0;j<arr.size();j++){\n            if(i!=j){\n                if(arr[i]==arr[j]){\n                    flag = 1;\n                    break;\n                }\n            }\n        }\n        if(flag == 0){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmpaovv3tzl: /tmp/tmpaovv3tzl.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(auto i : arr) {\n        m[i]++;\n    }\n    for(auto i : m) {\n        if(i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmp_c28j1r7: /tmp/tmp_c28j1r7.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(std::find(arr.begin(), arr.end(), arr[i]) == arr.end()) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmpdm4q2ehl: /tmp/tmpdm4q2ehl.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(long i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>::iterator it;\n    for(it = arr.begin(); it != arr.end(); it++) {\n        if(std::find(arr.begin(), arr.end(), *it) == arr.end()) {\n            sum += *it;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmpi0kily74: /tmp/tmpi0kily74.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>::iterator it;\n    for(it = arr.begin(); it != arr.end(); it++) {\n        sum += *it;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmp9tf8dubk: /tmp/tmp9tf8dubk.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum=0;\n    for(long i=0;i<arr.size();i++)\n    {\n        long count=0;\n        for(long j=0;j<arr.size();j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n        if(count==1)\n        {\n            sum=sum+arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmppcfkki8h: /tmp/tmppcfkki8h.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n\tlong sum = 0;\n\tstd::vector<long>::iterator it;\n\tfor (it = arr.begin(); it != arr.end(); it++) {\n\t\tif (std::count(arr.begin(), arr.end(), *it) == 1) {\n\t\t\tsum += *it;\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmpfinsspx1: /tmp/tmpfinsspx1.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it1;\n    for(it = arr.begin(); it != arr.end(); it++) {\n        int flag = 0;\n        for(it1 = it + 1; it1 != arr.end(); it1++) {\n            if(*it == *it1) {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0) {\n            sum += *it;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // write your code here\n    long sum = 0;\n    std::vector<long>::iterator it;\n    for(it = arr.begin(); it != arr.end(); it++){\n        if(std::count(arr.begin(), arr.end(), *it) == 1){\n            sum += *it;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmpren2yf3o: /tmp/tmpren2yf3o.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(int i = 0; i < arr.size(); i++) {\n        if(m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmpl8cthlit: /tmp/tmpl8cthlit.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        if (m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(int i=0;i<arr.size();i++){\n        if(m.find(arr[i]) == m.end()){\n            m[arr[i]] = 1;\n        }\n        else{\n            m[arr[i]]++;\n        }\n    }\n    for(auto i:m){\n        if(i.second == 1){\n            sum += i.first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmpq0zuk8ch: /tmp/tmpq0zuk8ch.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::map<long, int> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmppph6cexd: /tmp/tmppph6cexd.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    int n = arr.size();\n    for(int i=0;i<n;i++){\n        int count = 0;\n        for(int j=0;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmp6ulfuzmf: /tmp/tmp6ulfuzmf.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum=0;\n    for(int i=0;i<arr.size();i++)\n    {\n        int count=0;\n        for(int j=0;j<arr.size();j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n        if(count==1)\n        {\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmpdj3emm12: /tmp/tmpdj3emm12.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    long sum = 0;\n    for (auto i : arr) {\n        if (s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::map<long, long> m;\n    for(long i=0; i<arr.size(); i++)\n    {\n        m[arr[i]]++;\n    }\n    for(auto itr = m.begin(); itr != m.end(); itr++)\n    {\n        if(itr->second == 1)\n        {\n            sum += itr->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmpem4bd__s: /tmp/tmpem4bd__s.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(auto i : arr) {\n        m[i]++;\n    }\n    for(auto i : m) {\n        if(i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmpdpyrmuq0: /tmp/tmpdpyrmuq0.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int flag = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j] && i != j) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "tmpmw_rl52k: /tmp/tmpmw_rl52k.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_set<long> s;\n    long sum = 0;\n    for(int i=0; i<arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i=0;i<arr.size();i++){\n        int count = 0;\n        for(int j=0;j<arr.size();j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "tmpbxj2w5qh: /tmp/tmpbxj2w5qh.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count += 1;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "tmpw8v6k7cb: /tmp/tmpw8v6k7cb.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(auto i: arr) {\n        m[i]++;\n    }\n    for(auto i: m) {\n        if(i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "tmpz2_ja04h: /tmp/tmpz2_ja04h.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509734,
      "stdout": "",
      "stderr": "tmpwbzhfyys: /tmp/tmpwbzhfyys.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (auto itr = m.begin(); itr != m.end(); itr++) {\n        if (itr->second == 1) {\n            sum += itr->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "tmpq7yfdblf: /tmp/tmpq7yfdblf.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]!=arr[i+1]){\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "tmpn7284j2s: /tmp/tmpn7284j2s.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i=0;i<arr.size();i++){\n        int flag = 0;\n        for(int j=i+1;j<arr.size();j++){\n            if(arr[i]==arr[j]){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag==0){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "tmpox2bck31: /tmp/tmpox2bck31.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::map<long,long> m;\n    for(auto i : arr) {\n        m[i]++;\n    }\n    for(auto i : m) {\n        if(i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "tmpvo7nrhnc: /tmp/tmpvo7nrhnc.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (auto i : m) {\n        if (i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "tmpt3dtcnbh: /tmp/tmpt3dtcnbh.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for(long j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "tmpxr5pbf7j: /tmp/tmpxr5pbf7j.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>::iterator it;\n    for(it = arr.begin(); it != arr.end(); it++) {\n        if(std::find(arr.begin(), arr.end(), *it) == it) {\n            sum += *it;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, long> map;\n    for(long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for(long i = 0; i < arr.size(); i++) {\n        if(map[arr[i]] == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "tmpmukerrn6: /tmp/tmpmukerrn6.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        bool flag = true;\n        for(int j = 0; j < arr.size(); j++) {\n            if(i != j) {\n                if(arr[i] == arr[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        if(flag) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "tmp46c8nxts: /tmp/tmp46c8nxts.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(int i = 0; i < arr.size(); i++)\n    {\n        if(m.find(arr[i]) == m.end())\n        {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(std::find(arr.begin(), arr.end(), arr[i]) == arr.end()) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmpdm4q2ehl: /tmp/tmpdm4q2ehl.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(long i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, long> mp;\n    for(int i = 0; i < arr.size(); i++) {\n        mp[arr[i]]++;\n    }\n    for(auto it = mp.begin(); it != mp.end(); it++) {\n        if(it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "tmptckooeak: /tmp/tmptckooeak.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (auto i = m.begin(); i != m.end(); i++) {\n        if (i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "tmpzy5gr1ls: /tmp/tmpzy5gr1ls.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] != arr[i+1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        if(s.find(i) == s.end()) {\n            s.insert(i);\n            sum += i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::vector<long>::iterator it;\n    std::set<long> s;\n    for(it = arr.begin(); it != arr.end(); it++) {\n        if(s.find(*it) == s.end()) {\n            sum += *it;\n            s.insert(*it);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++){\n        int flag = 0;\n        for(int j = 0; j < arr.size(); j++){\n            if(arr[i] == arr[j] && i != j){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "tmpove9b0aq: /tmp/tmpove9b0aq.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509734,
      "stdout": "",
      "stderr": "tmpwbzhfyys: /tmp/tmpwbzhfyys.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509734,
      "stdout": "",
      "stderr": "tmpwbzhfyys: /tmp/tmpwbzhfyys.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>::iterator it;\n    for(it = arr.begin(); it != arr.end(); it++) {\n        if(std::find(arr.begin(), arr.end(), *it) == it) {\n            sum += *it;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int flag = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j] && i != j) {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509734,
      "stdout": "",
      "stderr": "tmppf8xcikm: /tmp/tmppf8xcikm.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmpl8cthlit: /tmp/tmpl8cthlit.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    long sum = 0;\n    for (auto i : arr) {\n        if (s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(long i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509734,
      "stdout": "",
      "stderr": "tmpwbzhfyys: /tmp/tmpwbzhfyys.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size(); i++) {\n        if(i == arr.size() - 1) {\n            sum += arr[i];\n            break;\n        }\n        if(arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n        else {\n            i++;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpzb9grus4: /tmp/tmpzb9grus4.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        if(s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509734,
      "stdout": "",
      "stderr": "tmpwbzhfyys: /tmp/tmpwbzhfyys.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmppb74sp1o: /tmp/tmppb74sp1o.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (auto i = m.begin(); i != m.end(); i++) {\n        if (i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmp8z51ptyu: /tmp/tmp8z51ptyu.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // write your code here\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(int i=0;i<arr.size();i++){\n        if(s.find(arr[i]) == s.end()){\n            s.insert(arr[i]);\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(auto i : arr) {\n        m[i]++;\n    }\n    for(auto i : m) {\n        if(i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmp_c28j1r7: /tmp/tmp_c28j1r7.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // write your code here\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(auto i : arr) {\n        m[i]++;\n    }\n    for(auto i : m) {\n        if(i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpxzgxh2dn: /tmp/tmpxzgxh2dn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tint count = 0;\n\t\tfor (int j = 0; j < arr.size(); j++) {\n\t\t\tif (arr[i] == arr[j]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count == 1) {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpdv10sevo: /tmp/tmpdv10sevo.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>::iterator it;\n    for(it = arr.begin(); it != arr.end(); it++) {\n        if(std::find(it+1, arr.end(), *it) == arr.end()) {\n            sum += *it;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for(long j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmpjpolr7c1: /tmp/tmpjpolr7c1.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum=0;\n    for(auto i=arr.begin();i!=arr.end();i++)\n    {\n        if(std::count(arr.begin(),arr.end(),*i)==1)\n        {\n            sum+=*i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpvzheatex: /tmp/tmpvzheatex.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509734,
      "stdout": "",
      "stderr": "tmpwbzhfyys: /tmp/tmpwbzhfyys.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i=0;i<arr.size();i++)\n    {\n        int count = 0;\n        for(int j=0;j<arr.size();j++)\n        {\n            if(arr[i] == arr[j])\n            {\n                count++;\n            }\n        }\n        if(count == 1)\n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmpu6pq92ty: /tmp/tmpu6pq92ty.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmppb74sp1o: /tmp/tmppb74sp1o.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for (auto i : arr) {\n        if (s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto i = m.begin(); i != m.end(); i++) {\n        if(i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpr9s10j4q: /tmp/tmpr9s10j4q.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmpqt40cto7: /tmp/tmpqt40cto7.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::map<long, int> m;\n    for(int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmpvtikvcsf: /tmp/tmpvtikvcsf.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i=0;i<arr.size();i++){\n        int flag = 0;\n        for(int j=0;j<arr.size();j++){\n            if(arr[i] == arr[j] && i!=j){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0){\n            sum = sum + arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpzmm4eqax: /tmp/tmpzmm4eqax.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>::iterator it;\n    for(it = arr.begin(); it != arr.end(); it++) {\n        if(std::count(arr.begin(), arr.end(), *it) == 1) {\n            sum += *it;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "tmp9_b814fr: /tmp/tmp9_b814fr.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i=0;i<arr.size();i++)\n    {\n        int count = 0;\n        for(int j=0;j<arr.size();j++)\n        {\n            if(arr[i] == arr[j])\n            {\n                count++;\n            }\n        }\n        if(count == 1)\n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmpu6pq92ty: /tmp/tmpu6pq92ty.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_set<long> s;\n    long sum = 0;\n    for(auto i : arr){\n        if(s.find(i) == s.end()){\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(std::find(arr.begin(), arr.end(), arr[i]) == arr.end()) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpe28h4q9s: /tmp/tmpe28h4q9s.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        if(s.find(i) == s.end()) {\n            s.insert(i);\n            sum += i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for (auto x : arr) {\n        if (m.find(x) == m.end()) {\n            m[x] = 1;\n            sum += x;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] != arr[i+1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, int> map;\n    for (auto i : arr) {\n        if (map.find(i) == map.end()) {\n            map[i] = 1;\n            sum += i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::vector<long>::iterator it;\n    for(it = arr.begin(); it != arr.end(); it++) {\n        if(std::count(arr.begin(), arr.end(), *it) == 1) {\n            sum += *it;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509734,
      "stdout": "",
      "stderr": "tmp9pxkucbn: /tmp/tmp9pxkucbn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] != arr[i+1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i=0;i<arr.size();i++)\n    {\n        int flag = 0;\n        for(int j=0;j<arr.size();j++)\n        {\n            if(arr[i] == arr[j] && i!=j)\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0)\n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmpgjsrcym6: /tmp/tmpgjsrcym6.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != arr[i+1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(auto i : arr) {\n        m[i]++;\n    }\n    for(auto i : arr) {\n        if(m[i] == 1) {\n            sum += i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpdobgvmpm: /tmp/tmpdobgvmpm.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // write your code here\n    long sum = 0;\n    for(int i=0;i<arr.size();i++)\n    {\n        int count = 0;\n        for(int j=0;j<arr.size();j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n        if(count==1)\n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmp2vg46xcs: /tmp/tmp2vg46xcs.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, long> mp;\n    for (long i = 0; i < arr.size(); i++) {\n        if (mp.find(arr[i]) == mp.end()) {\n            mp[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for (auto i = arr.begin(); i != arr.end(); i++) {\n        if (s.find(*i) == s.end()) {\n            sum += *i;\n            s.insert(*i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmptsh_j0bn: /tmp/tmptsh_j0bn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto i = m.begin(); i != m.end(); i++) {\n        if(i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpnwooncjq: /tmp/tmpnwooncjq.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(auto i : arr) {\n        m[i]++;\n    }\n    for(auto i : m) {\n        if(i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "tmphl_gf_zq: /tmp/tmphl_gf_zq.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        if(s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum=0;\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]!=arr[i+1]){\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "tmptd_shjrg: /tmp/tmptd_shjrg.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i=0;i<arr.size();i++){\n        int count = 0;\n        for(int j=0;j<arr.size();j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123872,
      "stdout": "",
      "stderr": "tmpbxj2w5qh: /tmp/tmpbxj2w5qh.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::map<long, int> m;\n    for(int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmpvtikvcsf: /tmp/tmpvtikvcsf.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] != arr[i+1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "tmpbz5xm6dr: /tmp/tmpbz5xm6dr.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum=0;\n    for(int i=0;i<arr.size();i++)\n    {\n        int count=0;\n        for(int j=0;j<arr.size();j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n        if(count==1)\n        {\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123870,
      "stdout": "",
      "stderr": "tmpdj3emm12: /tmp/tmpdj3emm12.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for (int i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (auto itr = m.begin(); itr != m.end(); itr++) {\n        if (itr->second == 1) {\n            sum += itr->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmplbiwrq7s: /tmp/tmplbiwrq7s.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        if(s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    int n = arr.size();\n    for(int i = 0; i < n; i++) {\n        int count = 0;\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpy4u64xjg: /tmp/tmpy4u64xjg.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(int i = 0; i < arr.size(); i++) {\n        if(m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n        else {\n            m[arr[i]]++;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>::iterator it;\n    for(it = arr.begin(); it != arr.end(); it++) {\n        if(std::count(arr.begin(), arr.end(), *it) == 1) {\n            sum += *it;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "tmp9_b814fr: /tmp/tmp9_b814fr.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_set<long> s;\n    for (auto i = arr.begin(); i != arr.end(); i++) {\n        if (s.find(*i) == s.end()) {\n            s.insert(*i);\n            sum += *i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum=0;\n    for(int i=0;i<arr.size();i++)\n    {\n        int count=0;\n        for(int j=0;j<arr.size();j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n        if(count==1)\n        {\n            sum=sum+arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmpdpjjk8z3: /tmp/tmpdpjjk8z3.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for(int i=0;i<arr.size();i++)\n    {\n        int flag = 0;\n        for(int j=i+1;j<arr.size();j++)\n        {\n            if(arr[i] == arr[j])\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0)\n        {\n            sum = sum + arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, long> hash;\n    for (long i = 0; i < arr.size(); i++) {\n        hash[arr[i]]++;\n    }\n    for (auto it = hash.begin(); it != hash.end(); it++) {\n        if (it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpr65z8rdh: /tmp/tmpr65z8rdh.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    long sum = 0;\n    for(auto i : arr) {\n        if(s.find(i) == s.end()) {\n            s.insert(i);\n            sum += i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        if (m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::map<long, int> m;\n    for (int i = 0; i < arr.size(); i++)\n    {\n        m[arr[i]]++;\n    }\n    for (auto it = m.begin(); it != m.end(); it++)\n    {\n        if (it->second == 1)\n        {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpwyiouzjz: /tmp/tmpwyiouzjz.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::map<long, int> m;\n    for(int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "tmpvtikvcsf: /tmp/tmpvtikvcsf.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for (long j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpa_42gxfe: /tmp/tmpa_42gxfe.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        if (m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n        else {\n            m[arr[i]] += 1;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]!=arr[i+1]){\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of non-repeated elements in a given list.\nlong find_sum(std::vector<long> arr) {\n    // Write your code here\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        if(s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}