{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_prefix_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, 0L);\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        max_suffix_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, 0L);\n    }\n    for (long i = 0; i < n; i++) {\n        total_sum += a[i];\n    }\n    long ans = std::max(max_sum, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum);\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510398,
      "stdout": "",
      "stderr": "tmpbvjr7k0w: /tmp/tmpbvjr7k0w.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_sum_so_far += a[i];\n        if (max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_sum_so_far);\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = std::max(max_sum, sum * (k - 2) + max_sum_so_far);\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510398,
      "stdout": "",
      "stderr": "tmpdbvqhhg4: /tmp/tmpdbvqhhg4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long min_wrap = 0;\n    curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum > 0) {\n            curr_sum = 0;\n        }\n        min_wrap = std::min(min_wrap, curr_sum);\n    }\n    min_wrap = std::abs(min_wrap);\n    long ans = std::max(max_sum, max_wrap + min_wrap);\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510398,
      "stdout": "",
      "stderr": "tmpf5wq05f_: /tmp/tmpf5wq05f_.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_sum < max_ending_here)\n            max_sum = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if (max_ending_here_wrap < 0)\n            max_ending_here_wrap = 0;\n        if (max_wrap < max_ending_here_wrap)\n            max_wrap = max_ending_here_wrap;\n    }\n    max_wrap = max_wrap + max_wrap;\n    if (k == 1)\n        return max_sum;\n    else if (k == 2)\n        return max_wrap > max_sum ? max_wrap : max_sum;\n    else\n        return max_wrap > max_sum ? max_wrap : max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510397,
      "stdout": "",
      "stderr": "tmp23sr5abm: /tmp/tmp23sr5abm.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element;\n    }\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = std::max(max_sum, sum * (k - 2) + curr_sum);\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510398,
      "stdout": "",
      "stderr": "tmpv827cjaj: /tmp/tmpv827cjaj.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    // Write your code here\n    long max_so_far = INT_MIN, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    max_wrap = max_wrap * k;\n    max_wrap = max_wrap - sum;\n    return std::max(max_so_far, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return std::max(max_so_far, sum * k - max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510398,
      "stdout": "",
      "stderr": "tmppnaoq3xl: /tmp/tmppnaoq3xl.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0, max_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum += a[i];\n        max_so_far = std::max(max_so_far, max_sum);\n        if(max_sum < 0) {\n            max_sum = 0;\n        }\n    }\n    long max_wrap = 0, sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum += a[i];\n        max_so_far = std::max(max_so_far, max_sum);\n        if(max_sum < 0) {\n            max_sum = 0;\n        }\n    }\n    max_wrap += max_sum;\n    if(k == 1) {\n        return max_so_far;\n    }\n    if(max_wrap > 0) {\n        return std::max(max_so_far, max_wrap * (k - 2) + sum);\n    }\n    return std::max(max_so_far, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510397,
      "stdout": "",
      "stderr": "tmp4y2bt8yt: /tmp/tmp4y2bt8yt.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n        for (long j = i; j < n; j++) {\n            sum += a[j];\n            max_sum = std::max(max_sum, sum);\n        }\n    }\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510398,
      "stdout": "",
      "stderr": "tmpayjk39hb: /tmp/tmpayjk39hb.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        max_sum = std::max(max_sum, sum);\n    }\n    long max_sum_of_all_subarrays = max_sum;\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_prefix_sum += a[i];\n        max_sum_of_all_subarrays = std::max(max_sum_of_all_subarrays, max_prefix_sum);\n    }\n    for(long i = n - 1; i >= 0; i--) {\n        max_suffix_sum += a[i];\n        max_sum_of_all_subarrays = std::max(max_sum_of_all_subarrays, max_suffix_sum);\n    }\n    long total_sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = std::max(max_sum_of_all_subarrays, total_sum * k);\n    if(total_sum > 0) {\n        ans = std::max(ans, max_sum_of_all_subarrays + (total_sum * (k - 2)));\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510398,
      "stdout": "",
      "stderr": "tmplldo6b2w: /tmp/tmplldo6b2w.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_so_far);\n    }\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510397,
      "stdout": "",
      "stderr": "tmpleu_7spw: /tmp/tmpleu_7spw.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510412,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long min_sum = 0;\n    curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum > 0) {\n            curr_sum = 0;\n        }\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    long ans = 0;\n    if(k % 2 == 0) {\n        ans = std::max(max_sum, sum + min_sum * (k - 2));\n    } else {\n        ans = std::max(max_sum, sum + min_sum * (k - 1));\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510398,
      "stdout": "",
      "stderr": "tmpggegpdo2: /tmp/tmpggegpdo2.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far + (k - 2) * sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510413,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        long sum = 0;\n        for(long j = i; j < n; j++) {\n            sum += a[j];\n            max_sum = std::max(max_sum, sum);\n        }\n    }\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510397,
      "stdout": "",
      "stderr": "tmp5dro0_29: /tmp/tmp5dro0_29.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    long max_sum_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_sum_ending_here += a[i];\n        if (max_sum_ending_here < 0) {\n            max_sum_ending_here = 0;\n        }\n        if (max_sum_so_far < max_sum_ending_here) {\n            max_sum_so_far = max_sum_ending_here;\n        }\n    }\n    max_sum = max_sum_so_far;\n    if (sum > 0) {\n        max_sum += (k - 2) * sum;\n    }\n    for (long i = 0; i < n; i++) {\n        max_sum_ending_here += a[i];\n        if (max_sum_ending_here < 0) {\n            max_sum_ending_here = 0;\n        }\n        if (max_sum_so_far < max_sum_ending_here) {\n            max_sum_so_far = max_sum_ending_here;\n        }\n    }\n    max_sum = std::max(max_sum, max_sum_so_far);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510397,
      "stdout": "",
      "stderr": "tmp6oagdodc: /tmp/tmp6oagdodc.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long min_sum = 0;\n    long min_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        min_so_far += a[i];\n        if(min_so_far > 0) {\n            min_so_far = 0;\n        }\n        if(min_sum > min_so_far) {\n            min_sum = min_so_far;\n        }\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    if(sum > 0) {\n        return std::max(max_sum, sum * (k - 2) + max_sum);\n    } else {\n        return std::max(max_sum, sum * (k - 2) + max_sum - min_sum);\n    }\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510398,
      "stdout": "",
      "stderr": "tmp_9u2h9_v: /tmp/tmp_9u2h9_v.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_sum = max_so_far * k;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_so_far = 0;\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_wrap = max_wrap + max_so_far;\n    return (max_wrap > max_sum) ? max_wrap : max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510397,
      "stdout": "",
      "stderr": "tmp3b9g4zgh: /tmp/tmp3b9g4zgh.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element <= 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    return std::max(ans, max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510397,
      "stdout": "",
      "stderr": "tmpomkka8hh: /tmp/tmpomkka8hh.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = std::max(max_sum, sum + max_so_far);\n    if (k == 1) {\n        return max_sum;\n    }\n    long sum_total = sum * (k - 2);\n    sum_total += max_sum;\n    return sum_total;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510398,
      "stdout": "",
      "stderr": "tmpfsl0ydnx: /tmp/tmpfsl0ydnx.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_wrap, max_so_far + (k - 2) * sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123431,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_sum = sum;\n    for (int i = 0; i < n; i++) {\n        sum += k * a[i];\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpuk0kraqy: /tmp/tmpuk0kraqy.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_so_far);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long min_so_far = 0;\n    long min_sum = 0;\n    for (long i = 0; i < n; i++) {\n        min_so_far += a[i];\n        if (min_so_far > 0) {\n            min_so_far = 0;\n        }\n        min_sum = std::min(min_sum, min_so_far);\n    }\n    long total_sum = std::accumulate(a.begin(), a.end(), 0);\n    max_wrap = max_wrap + total_sum * (k - 2);\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmprlhbeiui: /tmp/tmprlhbeiui.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long i = 0;\n    long j = 0;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    for (i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    if (sum > 0) {\n        max_sum += sum * (k - 2);\n    }\n    for (i = 0; i < n; i++) {\n        max_ending_here = 0;\n        for (j = i; j < n; j++) {\n            max_ending_here += a[j];\n            if (max_ending_here > max_sum) {\n                max_sum = max_ending_here;\n            }\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpe9v1z749: /tmp/tmpe9v1z749.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long min_sum = 0;\n    curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum > 0) {\n            curr_sum = 0;\n        }\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    long ans = std::max(max_sum, sum * (k - 2) + max_sum);\n    return std::max(ans, sum * (k - 2) + max_sum - min_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpv3crn2ue: /tmp/tmpv3crn2ue.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long sum = 0;\n    long prefix_sum = 0;\n    long suffix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_sum = std::max(max_sum, sum);\n        max_prefix_sum = std::max(max_prefix_sum, prefix_sum + a[i]);\n        max_suffix_sum = std::max(max_suffix_sum, suffix_sum + a[i]);\n        prefix_sum += a[i];\n        suffix_sum += a[i];\n    }\n    max_sum = std::max(max_sum, max_prefix_sum + (k - 2) * sum + max_suffix_sum);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpko7df5kn: /tmp/tmpko7df5kn.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long min_wrap = 0;\n    sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum > 0) {\n            sum = 0;\n        }\n        min_wrap = std::min(min_wrap, sum);\n    }\n    min_wrap = -min_wrap;\n    long ans = std::max(max_sum, max_wrap + min_wrap);\n    if (k == 1) {\n        return ans;\n    }\n    return std::max(ans, max_wrap + min_wrap + (k - 2) * max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmppafmy3p1: /tmp/tmppafmy3p1.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_sum = max_so_far * k;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_wrap = max_wrap + max_so_far;\n    if (max_wrap > max_sum)\n        max_sum = max_wrap;\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmp619uky5b: /tmp/tmp619uky5b.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123431,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long curr_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        curr_wrap += a[i];\n        if(curr_wrap < 0) {\n            curr_wrap = 0;\n        }\n        max_wrap = std::max(max_wrap, curr_wrap);\n    }\n    max_wrap = std::max(max_wrap, 0l);\n    return std::max(max_sum, max_wrap * (k - 2) + max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpilh7hjd7: /tmp/tmpilh7hjd7.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if(max_ending_here_wrap < 0) {\n            max_ending_here_wrap = 0;\n        }\n        if(max_wrap < max_ending_here_wrap) {\n            max_wrap = max_ending_here_wrap;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if(k == 1) {\n        return max_so_far;\n    }\n    else {\n        return std::max(max_so_far, max_wrap);\n    }\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpywgkf9ch: /tmp/tmpywgkf9ch.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_wrap = sum * k;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i] * (k - 1);\n        if (max_wrap > max_sum) {\n            max_sum = max_wrap;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpjvokd36g: /tmp/tmpjvokd36g.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    max_wrap = max_wrap + curr_sum;\n    if (k == 1) {\n        return max_sum;\n    }\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpwphqjpzs: /tmp/tmpwphqjpzs.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmp4xstikv9: /tmp/tmp4xstikv9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    if(sum > 0) {\n        max_sum = max_so_far + (sum * (k - 2));\n    }\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    if(sum > 0) {\n        max_sum = std::max(max_sum, max_so_far);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpfn2wp8b0: /tmp/tmpfn2wp8b0.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap_sum += a[i];\n        if (max_wrap_sum < 0) {\n            max_wrap_sum = 0;\n        }\n        max_wrap = std::max(max_wrap, max_wrap_sum);\n    }\n    max_wrap = std::max(max_wrap, max_wrap_sum);\n    return std::max(max_sum, max_wrap + (k - 2) * max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpouraxa65: /tmp/tmpouraxa65.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (sum > 0) {\n        max_sum += sum * (k - 2);\n    }\n    for (long i = 0; i < n; i++) {\n        sum = sum - a[i];\n        max_ending_here = max_ending_here - a[i];\n        max_ending_here = std::max(a[i], max_ending_here);\n        max_so_far = std::max(max_so_far, max_ending_here);\n        max_sum = std::max(max_sum, max_so_far);\n        max_sum = std::max(max_sum, sum + max_so_far);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpyf7j6w7k: /tmp/tmpyf7j6w7k.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum > max_sum) {\n            max_sum = curr_sum;\n        }\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n    }\n    long max_wrap_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap_sum += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum > max_sum) {\n            max_sum = curr_sum;\n        }\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n    }\n    max_wrap_sum = max_wrap_sum + max_wrap_sum;\n    if (max_wrap_sum > max_sum && k > 1) {\n        max_sum = max_wrap_sum;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpg4zzj933: /tmp/tmpg4zzj933.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = INT_MIN;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        max_element = std::max(max_element, a[i]);\n    }\n    if (max_so_far == 0) {\n        return max_element;\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_wrap = sum * k;\n    long max_wrap_sum = 0;\n    long max_wrap_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap_ending_here += a[i];\n        if (max_wrap_ending_here < 0) {\n            max_wrap_ending_here = 0;\n        }\n        if (max_wrap_sum < max_wrap_ending_here) {\n            max_wrap_sum = max_wrap_ending_here;\n        }\n    }\n    return std::max(max_wrap_sum + max_so_far, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpq7sgasuc: /tmp/tmpq7sgasuc.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_so_far;\n    if (k == 1) {\n        return max_so_far;\n    }\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpnpv43ew0: /tmp/tmpnpv43ew0.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    for(int i = 0; i < n; i++) {\n        long sum = 0;\n        for(int j = i; j < n; j++) {\n            sum += a[j];\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpcentomhx: /tmp/tmpcentomhx.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    return std::max(ans, max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123431,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return std::max(max_so_far, (max_so_far + sum * (k - 2)));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmp3maiq67d: /tmp/tmp3maiq67d.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    max_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_sum + sum + max_so_far;\n    if(k == 1) {\n        return max_sum;\n    }\n    long min_sum = 0;\n    long min_ending_here = 0;\n    long min_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        min_ending_here += a[i];\n        if(min_ending_here > 0) {\n            min_ending_here = 0;\n        }\n        if(min_so_far > min_ending_here) {\n            min_so_far = min_ending_here;\n        }\n    }\n    min_sum = min_so_far;\n    sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    min_ending\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "/tmp/tmpyknw8spl.cpp: In function \u2018long int max_sub_array_sum_repeated(std::vector<long int>, long int, long int)\u2019:\n/tmp/tmpyknw8spl.cpp:56:5: error: \u2018min_ending\u2019 was not declared in this scope; did you mean \u2018sigpending\u2019?\n   56 |     min_ending\n      |     ^~~~~~~~~~\n      |     sigpending\n/tmp/tmpyknw8spl.cpp:57:1: warning: control reaches end of non-void function [-Wreturn-type]\n   57 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_sum_so_far += a[i];\n        if (max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_sum_so_far);\n    }\n    long max_wrap_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap_sum += a[i];\n        a[i] = -a[i];\n    }\n    long min_sum = 0;\n    long min_sum_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        min_sum_so_far += a[i];\n        if (min_sum_so_far > 0) {\n            min_sum_so_far = 0;\n        }\n        min_sum = std::min(min_sum, min_sum_so_far);\n    }\n    return std::max(max_sum, max_wrap_sum + min_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmpbvt3wa73: /tmp/tmpbvt3wa73.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_sum = std::max(max_sum, sum);\n    }\n    long max_sum_k = sum * k;\n    long max_sum_prefix = 0;\n    long max_sum_suffix = 0;\n    sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_sum_prefix = std::max(max_sum_prefix, sum);\n    }\n    sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        sum += a[i];\n        max_sum_suffix = std::max(max_sum_suffix, sum);\n    }\n    long max_sum_middle = max_sum_prefix + max_sum_suffix;\n    return std::max(max_sum, std::max(max_sum_k, max_sum_middle));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmpurhz0_8o: /tmp/tmpurhz0_8o.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    max_wrap = max_wrap + curr_sum;\n    if (k == 1) {\n        return max_sum;\n    }\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpwphqjpzs: /tmp/tmpwphqjpzs.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum_of_all_elements = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    max_sum = std::max(max_sum, max_so_far);\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        max_so_far += a[i];\n        max_so_far = std::max(max_so_far, 0);\n        max_sum = std::max(max_sum, max_so_far);\n    }\n    max_sum = std::max(max_sum, max_wrap * (k - 2));\n    return (max_sum + sum_of_all_elements * (k - 2)) / (k - 1);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "/tmp/tmpbkksg8pm.cpp: In function \u2018long int max_sub_array_sum_repeated(std::vector<long int>, long int, long int)\u2019:\n/tmp/tmpbkksg8pm.cpp:26:44: error: no matching function for call to \u2018max(long int&, int)\u2019\n   26 |         max_so_far = std::max(max_so_far, 0);\n      |                                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpbkksg8pm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5: note:   template argument deduction/substitution failed:\n/tmp/tmpbkksg8pm.cpp:26:44: note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019 and \u2018int\u2019)\n   26 |         max_so_far = std::max(max_so_far, 0);\n      |                                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpbkksg8pm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:268:5: note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp& __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:268:5: note:   template argument deduction/substitution failed:\n/tmp/tmpbkksg8pm.cpp:26:44: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(int i = 0; i < n; i++){\n        sum += a[i];\n        max_sum = std::max(max_sum, sum);\n    }\n    long max_sum_all = sum * k;\n    long prefix_sum = 0;\n    long suffix_sum = 0;\n    for(int i = 0; i < n; i++){\n        prefix_sum += a[i];\n        max_sum_all = std::max(max_sum_all, prefix_sum);\n    }\n    for(int i = n - 1; i >= 0; i--){\n        suffix_sum += a[i];\n        max_sum_all = std::max(max_sum_all, suffix_sum);\n    }\n    return max_sum_all;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmpnd7bomo7: /tmp/tmpnd7bomo7.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long sum = 0;\n    long i = 0;\n    while(i < n) {\n        max_so_far = max_so_far + a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n        i++;\n    }\n    sum = max_sum;\n    for(long i = 0; i < n; i++) {\n        sum = sum + a[i];\n    }\n    if(sum > 0) {\n        max_sum = max_sum + (k - 2) * sum;\n    }\n    for(long i = 0; i < n; i++) {\n        sum = sum - a[i];\n        max_so_far = max_so_far + a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmpzd5n9mh0: /tmp/tmpzd5n9mh0.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long min_sum = 0;\n    long min_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        min_ending_here = min_ending_here + a[i];\n        if (min_ending_here > 0) {\n            min_ending_here = 0;\n        }\n        if (min_sum > min_ending_here) {\n            min_sum = min_ending_here;\n        }\n    }\n    long ans1 = max_sum;\n    long ans2 = sum + min_sum;\n    long ans3 = sum + min_sum;\n    if (k == 1) {\n        return ans1;\n    }\n    if (k == 2) {\n        return max(ans1, ans2);\n    }\n    return max(ans1, ans3);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "/tmp/tmpanb06gge.cpp: In function \u2018long int max_sub_array_sum_repeated(std::vector<long int>, long int, long int)\u2019:\n/tmp/tmpanb06gge.cpp:39:16: error: \u2018max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n   39 |         return max(ans1, ans2);\n      |                ^~~\n      |                std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpanb06gge.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5: note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp> __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpanb06gge.cpp:41:12: error: \u2018max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n   41 |     return max(ans1, ans3);\n      |            ^~~\n      |            std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpanb06gge.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5: note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp> __l, _Compare __comp)\n      |     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    max_so_far = 0;\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = std::max(max_sum, sum + max_so_far);\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmpez58al7d: /tmp/tmpez58al7d.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    for (int i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (int i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, curr_sum);\n    }\n    curr_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        curr_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, curr_sum);\n    }\n    for (long i = 0; i < n; i++) {\n        total_sum += a[i];\n    }\n    long ans = std::max(max_sum, std::max(max_prefix_sum + max_suffix_sum + (k - 2) * total_sum, max_prefix_sum + max_suffix_sum));\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmp9u0cxpas: /tmp/tmp9u0cxpas.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_so_far = max_so_far + a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_so_far);\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long prefix_sum = 0;\n    long suffix_sum = 0;\n    for(long i = 0; i < n; i++) {\n        prefix_sum = prefix_sum + a[i];\n        max_prefix_sum = std::max(max_prefix_sum, prefix_sum);\n    }\n    for(long i = n - 1; i >= 0; i--) {\n        suffix_sum = suffix_sum + a[i];\n        max_suffix_sum = std::max(max_suffix_sum, suffix_sum);\n    }\n    long total_sum = 0;\n    for(long i = 0; i < n; i++) {\n        total_sum = total_sum + a[i];\n    }\n    long ans = std::max(max_sum, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum);\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmpu1z3pzat: /tmp/tmpu1z3pzat.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_sum = sum;\n    for(int i = 0; i < n; i++) {\n        sum = sum - a[i] + a[i] * k;\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmpd_84bhe7: /tmp/tmpd_84bhe7.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    return std::max(ans, max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmppq_ik54a: /tmp/tmppq_ik54a.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n        for (long j = i; j < n; j++) {\n            sum += a[j];\n            max_sum = std::max(max_sum, sum);\n        }\n    }\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510398,
      "stdout": "",
      "stderr": "tmpayjk39hb: /tmp/tmpayjk39hb.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return std::max(max_so_far, sum * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0, max_sum_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum_so_far += a[i];\n        if(max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_sum_so_far);\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if(sum > 0) {\n        max_sum = std::max(max_sum, sum * k);\n    }\n    else {\n        max_sum = std::max(max_sum, *std::max_element(a.begin(), a.end()));\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmp5yvz5oiw: /tmp/tmp5yvz5oiw.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = INT_MIN;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum > max_sum) {\n            max_sum = curr_sum;\n        }\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum > max_sum) {\n            max_sum = curr_sum;\n        }\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n    }\n    max_wrap = max_wrap + max_sum;\n    if (k == 1) {\n        return max_sum;\n    }\n    return std::max(max_wrap, max_sum * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmp1vy3cpv_: /tmp/tmp1vy3cpv_.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum_so_far += a[i];\n        if(max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_sum_so_far);\n    }\n    long max_sum_array = max_sum;\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    for(long i = 0; i < n; i++) {\n        total_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, total_sum);\n    }\n    total_sum = 0;\n    for(long i = n - 1; i >= 0; i--) {\n        total_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, total_sum);\n    }\n    long max_circular_sum = max_prefix_sum + max_suffix_sum;\n    if(k == 1) {\n        return max_sum_array;\n    }\n    if(max_circular_sum > 0) {\n        return std::max(max_circular_sum, max_sum_array + (k - 2) * total_sum);\n    }\n    return std::max(max_circular_sum, max_sum_array);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmpz5nuovjw: /tmp/tmpz5nuovjw.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    if (sum > 0) {\n        max_sum += sum * (k - 2);\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = std::max(max_sum, max_so_far);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmpaud9xqzs: /tmp/tmpaud9xqzs.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum_of_all_elements = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_so_far);\n    }\n    max_sum = std::max(max_sum, max_so_far);\n    max_sum = std::max(max_sum, max_sum * (k - 2) + sum_of_all_elements);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmpqcn3jmbw: /tmp/tmpqcn3jmbw.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    long max_element = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum_so_far += a[i];\n        if(max_element < a[i]) {\n            max_element = a[i];\n        }\n    }\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    max_sum = max_sum_so_far;\n    for(long i = 0; i < n; i++) {\n        max_sum_so_far = max_sum_so_far - a[i] + a[0];\n        if(max_sum_so_far > max_sum) {\n            max_sum = max_sum_so_far;\n        }\n    }\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmpss2oqfgj: /tmp/tmpss2oqfgj.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    max_wrap = max_wrap + curr_sum;\n    if (k == 1) {\n        return max_sum;\n    }\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpwphqjpzs: /tmp/tmpwphqjpzs.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_sum = std::max(max_sum, sum);\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_prefix_sum = std::max(max_prefix_sum, total_sum);\n        total_sum += a[i];\n    }\n    total_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        max_suffix_sum = std::max(max_suffix_sum, total_sum);\n        total_sum += a[i];\n    }\n    long ans = std::max(max_sum, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum);\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmp6sjdn072: /tmp/tmp6sjdn072.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_sum_so_far = max_sum_so_far + a[i];\n        if (max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        if (max_sum < max_sum_so_far) {\n            max_sum = max_sum_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmpa9b44rl8: /tmp/tmpa9b44rl8.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    // Write your code here\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return std::max(max_so_far, sum * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmpxlpl251m: /tmp/tmpxlpl251m.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far = max_so_far + a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long max_wrap_sum = sum * k;\n    if (max_wrap_sum > max_sum) {\n        max_sum = max_wrap_sum;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmp51_gczoy: /tmp/tmp51_gczoy.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    max_wrap = max_wrap + curr_sum;\n    if (k == 1) {\n        return max_sum;\n    }\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpwphqjpzs: /tmp/tmpwphqjpzs.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap_sum += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    max_wrap_sum = max_wrap_sum + curr_sum;\n    if(k == 1) {\n        return max_sum;\n    }\n    return std::max(max_sum, max_wrap_sum * (k - 2) + max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmpiy9y8qph: /tmp/tmpiy9y8qph.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long curr_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        curr_wrap += a[i];\n        if(curr_wrap < 0) {\n            curr_wrap = 0;\n        }\n        max_wrap = std::max(max_wrap, curr_wrap);\n    }\n    max_wrap = std::max(max_wrap, 0l);\n    return std::max(max_sum, max_wrap * (k - 2) + max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmp40f0j_66: /tmp/tmp40f0j_66.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_so_far = max_so_far + a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum = sum + a[i];\n        a[i] = -a[i];\n    }\n    long min_sum = 0;\n    long min_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        min_so_far = min_so_far + a[i];\n        if(min_so_far > 0) {\n            min_so_far = 0;\n        }\n        if(min_sum > min_so_far) {\n            min_sum = min_so_far;\n        }\n    }\n    long ans = max_sum;\n    if(k > 1) {\n        ans = std::max(ans, sum * (k - 2) + max_sum);\n    }\n    ans = std::max(ans, sum * (k - 1) + max_sum);\n    ans = std::max(ans, sum * k + max_sum);\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmpy2yqy0af: /tmp/tmpy2yqy0af.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_so_far > max_sum) {\n            max_sum = max_so_far;\n        }\n    }\n    if (max_sum == 0) {\n        return max_sum;\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_wrap = sum * k;\n    long min_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        min_wrap += a[i];\n        sum -= a[i];\n        max_wrap = std::max(max_wrap, min_wrap + sum * (k - 1));\n    }\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmpqubhaj5r: /tmp/tmpqubhaj5r.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far = std::max(a[i], max_so_far + a[i]);\n        max_sum = std::max(max_sum, max_so_far);\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long max_wrap = sum * k;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i] * (k - 1);\n        max_wrap = std::max(max_wrap, max_wrap - sum);\n    }\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmp5pwu5k5q: /tmp/tmp5pwu5k5q.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long curr_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        curr_wrap += a[i];\n        if (curr_wrap < 0) {\n            curr_wrap = 0;\n        }\n        max_wrap = std::max(max_wrap, curr_wrap);\n    }\n    max_wrap = std::max(max_wrap, max_wrap + max_wrap);\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmpw98bi453: /tmp/tmpw98bi453.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_prefix_sum = 0;\n    long curr_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_prefix_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, curr_prefix_sum);\n    }\n    long max_suffix_sum = 0;\n    long curr_suffix_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        curr_suffix_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, curr_suffix_sum);\n    }\n    long total_sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = std::max(max_sum, max_prefix_sum + max_suffix_sum);\n    if (total_sum > 0) {\n        ans = std::max(ans, max_suffix_sum + max_prefix_sum + (k - 2) * total_sum);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmpc67uly5u: /tmp/tmpc67uly5u.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long i;\n    for(i = 0; i < n; i++) {\n        max_so_far = max_so_far + a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = 0;\n    for(i = 0; i < n; i++) {\n        sum = sum + a[i];\n        a[i] = -a[i];\n    }\n    long min_sum = 0;\n    long min_so_far = 0;\n    for(i = 0; i < n; i++) {\n        min_so_far = min_so_far + a[i];\n        if(min_so_far > 0) {\n            min_so_far = 0;\n        }\n        if(min_sum > min_so_far) {\n            min_sum = min_so_far;\n        }\n    }\n    long ans1 = max_sum;\n    long ans2 = sum + min_sum;\n    long ans3 = sum + min_sum + max_sum;\n    return std::max(ans1, std::max(ans2, ans3));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmpl2tup7vh: /tmp/tmpl2tup7vh.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        if(sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    long max_sum_repeated = max_sum * k;\n    long total_sum = std::accumulate(a.begin(), a.end(), 0);\n    long max_wrap_sum = total_sum * k;\n    for(long i = 0; i < n; i++) {\n        max_wrap_sum -= a[i];\n    }\n    long max_wrap_sum_repeated = max_wrap_sum + max_sum;\n    return std::max(max_sum_repeated, max_wrap_sum_repeated);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmp9jh8o7g4: /tmp/tmp9jh8o7g4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = std::max(max_so_far, sum * k);\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmpxrfzp95g: /tmp/tmpxrfzp95g.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_wrap = sum * k;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i] * (k - 1);\n        if (max_wrap > max_sum) {\n            max_sum = max_wrap;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmpabt_urjf: /tmp/tmpabt_urjf.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long curr_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        curr_wrap += a[i];\n        if (curr_wrap < 0) {\n            curr_wrap = 0;\n        }\n        max_wrap = std::max(max_wrap, curr_wrap);\n    }\n    max_wrap = std::max(max_wrap, max_wrap + max_wrap);\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmpw98bi453: /tmp/tmpw98bi453.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long min_ending_here = 0;\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n        min_ending_here += a[i];\n        if (min_ending_here > 0) {\n            min_ending_here = 0;\n        }\n        if (min_sum > min_ending_here) {\n            min_sum = min_ending_here;\n        }\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_wrap = sum - min_sum;\n    if (max_wrap > 0) {\n        return std::max(max_wrap, max_sum + (k - 2) * sum);\n    }\n    else {\n        return std::max(max_wrap, max_sum);\n    }\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmp1o88r2cj: /tmp/tmp1o88r2cj.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long min_sum = 0;\n    long min_ending_here = 0;\n    long min_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        min_ending_here = min_ending_here + a[i];\n        if (min_ending_here > 0) {\n            min_ending_here = 0;\n        }\n        if (min_so_far > min_ending_here) {\n            min_so_far = min_ending_here;\n        }\n    }\n    min_sum = min_so_far * k;\n    if (k > 2) {\n        max_sum = std::max(max_sum, sum * (k - 2) + max_so_far + min_so_far);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmpfkrl9gqu: /tmp/tmpfkrl9gqu.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    long max_sum_all = max_sum;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    long sum_all = sum;\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        sum_all += a[i];\n        if(max_wrap > max_sum) {\n            max_sum = max_wrap;\n        }\n        max_wrap = std::max(max_wrap, 0l);\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    return std::max(max_sum, sum_all * (k - 2) + max_sum_all);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmpiv52c42z: /tmp/tmpiv52c42z.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    // Write your code here\n    long sum = 0;\n    for(long i = 0; i < n; i++)\n        sum += a[i];\n    long max_sum = sum;\n    for(long i = 0; i < n; i++) {\n        sum -= a[i];\n        sum += a[i] * k;\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmp0irl4aqk: /tmp/tmp0irl4aqk.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (int i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_wrap = 0;\n    for (int i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long curr_wrap = 0;\n    for (int i = 0; i < n; i++) {\n        curr_wrap += a[i];\n        if (curr_wrap < 0) {\n            curr_wrap = 0;\n        }\n        max_wrap = std::max(max_wrap, curr_wrap);\n    }\n    max_wrap = std::max(max_wrap, 0l);\n    return std::max(max_sum, max_wrap * (k - 2) + max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "tmpgt4tregb: /tmp/tmpgt4tregb.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    return std::max(ans, max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if(sum > 0) {\n        max_sum = std::max(max_sum, (max_ending_here + sum * (k - 2)));\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "tmpelinvx5v: /tmp/tmpelinvx5v.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum_so_far += a[i];\n        if(max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_sum_so_far);\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long min_sum = 0;\n    long min_sum_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        min_sum_so_far += a[i];\n        if(min_sum_so_far > 0) {\n            min_sum_so_far = 0;\n        }\n        min_sum = std::min(min_sum, min_sum_so_far);\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    if(sum > 0) {\n        return std::max(max_sum, sum * (k - 2) + max_sum_so_far);\n    }\n    return std::max(max_sum, sum * (k - 2) + max_sum_so_far - min_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "tmpghk5i094: /tmp/tmpghk5i094.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) curr_sum = 0;\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) curr_sum = 0;\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    max_wrap = max_wrap + curr_sum;\n    return std::max(max_sum, max_wrap * (k - 2));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "tmp9a_i52q2: /tmp/tmp9a_i52q2.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_sum = sum;\n    for(long i = 0; i < n; i++) {\n        sum = sum - a[i] + a[i] * k;\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "tmpp5de9l3x: /tmp/tmpp5de9l3x.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0, curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap = 0, curr_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        curr_wrap += a[i];\n        if(curr_wrap < 0) {\n            curr_wrap = 0;\n        }\n        max_wrap = std::max(max_wrap, curr_wrap);\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    long max_wrap_sum = max_wrap + (k - 2) * curr_wrap;\n    return std::max(max_wrap_sum, max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "tmpa1xruwg2: /tmp/tmpa1xruwg2.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n        for (long j = i; j < n; j++) {\n            sum += a[j];\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "tmp_h49_3je: /tmp/tmp_h49_3je.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = INT_MIN, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return std::max(max_so_far, sum * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_so_far;\n    if (max_wrap > max_sum) {\n        max_sum = max_wrap;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "tmpb4t3n1pg: /tmp/tmpb4t3n1pg.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_sum = sum;\n    for (long i = 0; i < n; i++) {\n        sum += k * a[i];\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "tmp83tgi35b: /tmp/tmp83tgi35b.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long max_sum_of_array = max_sum;\n    long max_sum_of_all_subarrays = max_sum;\n    long min_sum = 0;\n    long min_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        min_ending_here += a[i];\n        if (min_ending_here > 0) {\n            min_ending_here = 0;\n        }\n        if (min_sum > min_ending_here) {\n            min_sum = min_ending_here;\n        }\n    }\n    long min_sum_of_array = min_sum;\n    long total_sum = 0;\n    for (long i = 0; i < n; i++) {\n        total_sum += a[i];\n    }\n    max_sum_of_all_subarrays = std::max(max_sum_of_all_subarrays, max_sum_of_array * (k - 2) + max_sum_of_array + total_sum + min_sum_of_array);\n    return max_sum_of_all_subarrays;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "tmpvwbppu08: /tmp/tmpvwbppu08.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long min_sum = 0;\n    curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum > 0) {\n            curr_sum = 0;\n        }\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    long ans = std::max(max_sum, sum * (k - 2) + max_sum);\n    ans = std::max(ans, sum * (k - 2) + max_sum + min_sum);\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "tmp4nvp188l: /tmp/tmp4nvp188l.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    return std::max(ans, max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmppq_ik54a: /tmp/tmppq_ik54a.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long sum_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        sum_wrap += a[i];\n        if (sum_wrap < 0) {\n            sum_wrap = 0;\n        }\n        max_sum = std::max(max_sum, sum_wrap);\n    }\n    max_sum = std::max(max_sum, max_wrap + sum_wrap);\n    return std::max(max_sum, max_sum * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "tmpcljm2x70: /tmp/tmpcljm2x70.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "tmp14pi6qis: /tmp/tmp14pi6qis.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "tmp4m2y97hx: /tmp/tmp4m2y97hx.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if(max_ending_here_wrap < 0) {\n            max_ending_here_wrap = 0;\n        }\n        if(max_wrap < max_ending_here_wrap) {\n            max_wrap = max_ending_here_wrap;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if(max_wrap > max_sum) {\n        max_sum = max_wrap;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "tmpq9c16xx0: /tmp/tmpq9c16xx0.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long min_sum = 0;\n    long min_ending_here = 0;\n    long min_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        min_ending_here += a[i];\n        if (min_ending_here > 0) {\n            min_ending_here = 0;\n        }\n        if (min_so_far > min_ending_here) {\n            min_so_far = min_ending_here;\n        }\n    }\n    max_sum = std::max(max_so_far, sum + min_so_far);\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "tmpcyhxx2gj: /tmp/tmpcyhxx2gj.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long min_sum = 0;\n    long min_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        min_ending_here = min_ending_here + a[i];\n        if(min_ending_here > 0) {\n            min_ending_here = 0;\n        }\n        if(min_sum > min_ending_here) {\n            min_sum = min_ending_here;\n        }\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    if(sum < 0) {\n        return max(max_sum, min_sum + sum * (k - 2));\n    }\n    return max(max_sum, sum * k + min_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmpbztoo_2z.cpp: In function \u2018long int max_sub_array_sum_repeated(std::vector<long int>, long int, long int)\u2019:\n/tmp/tmpbztoo_2z.cpp:36:16: error: \u2018max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n   36 |         return max(max_sum, min_sum + sum * (k - 2));\n      |                ^~~\n      |                std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpbztoo_2z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5: note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp> __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpbztoo_2z.cpp:38:12: error: \u2018max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n   38 |     return max(max_sum, sum * k + min_sum);\n      |            ^~~\n      |            std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpbztoo_2z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5: note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp> __l, _Compare __comp)\n      |     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long max_wrap = sum * k;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i] * (k - 1);\n        if (max_wrap > max_sum) {\n            max_sum = max_wrap;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "tmpc52fhv7k: /tmp/tmpc52fhv7k.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = INT_MIN;\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    long sum_of_all_elements = sum;\n    long max_wrap_sum = sum_of_all_elements * k;\n    long min_wrap_sum = INT_MAX;\n    sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        if(sum < min_wrap_sum) {\n            min_wrap_sum = sum;\n        }\n    }\n    long max_wrap_sum_with_min_wrap_sum = max_wrap_sum - min_wrap_sum;\n    return std::max(max_sum, max_wrap_sum_with_min_wrap_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(int i = 0; i < n; i++) {\n        max_so_far = max_so_far + a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if(sum > 0) {\n        max_sum = max_sum + sum * (k - 2);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "tmpogqmndle: /tmp/tmpogqmndle.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long start = 0;\n    long end = 0;\n    long s = 0;\n    for (long i = 0; i < n * k; i++) {\n        max_so_far += a[i % n];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n            s = i + 1;\n        }\n        if (max_so_far > max_sum) {\n            max_sum = max_so_far;\n            start = s;\n            end = i;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "tmps03ldn2h: /tmp/tmps03ldn2h.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long curr_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        curr_wrap += a[i];\n        if (curr_wrap < 0) {\n            curr_wrap = 0;\n        }\n        max_wrap = std::max(max_wrap, curr_wrap);\n    }\n    max_wrap = std::max(max_wrap, 0l);\n    return std::max(max_sum, max_wrap * (k - 1) + max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "tmpdt97spm5: /tmp/tmpdt97spm5.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far + (k - 2) * sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_prefix_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, 0l);\n    }\n    for(long i = n - 1; i >= 0; i--) {\n        max_suffix_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, 0l);\n    }\n    for(long i = 0; i < n; i++) {\n        total_sum += a[i];\n    }\n    if(total_sum > 0) {\n        max_sum = std::max(max_sum, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum);\n    } else {\n        max_sum = std::max(max_sum, max_prefix_sum + max_suffix_sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "tmpdj0x_hbc: /tmp/tmpdj0x_hbc.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_so_far);\n    }\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510397,
      "stdout": "",
      "stderr": "tmpleu_7spw: /tmp/tmpleu_7spw.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    // Write your code here\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        max_sum = std::max(max_sum, max_ending_here);\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    if(sum > 0) {\n        max_sum = std::max(max_sum, sum * k);\n    }\n    else {\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "tmpud5tcao5: /tmp/tmpud5tcao5.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    long i = 0;\n    long j = 0;\n    for(i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n            j = i + 1;\n        }\n        if(curr_sum > max_sum) {\n            max_sum = curr_sum;\n        }\n    }\n    if(max_sum == 0) {\n        max_sum = *std::max_element(a.begin(), a.end());\n    }\n    else {\n        max_sum = max_sum * k;\n        long sum = 0;\n        for(i = 0; i < n; i++) {\n            sum += a[i];\n        }\n        max_sum += sum * (k - 2);\n        long sum_till_j = 0;\n        for(i = 0; i < j; i++) {\n            sum_till_j += a[i];\n        }\n        max_sum += sum_till_j;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "tmpzbbytrps: /tmp/tmpzbbytrps.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        prefix_sum += a[i];\n        max_sum = std::max(max_sum, prefix_sum + (sum * (k - 2)));\n    }\n    long suffix_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        suffix_sum += a[i];\n        max_sum = std::max(max_sum, suffix_sum + (sum * (k - 2)));\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "tmph5824wr3: /tmp/tmph5824wr3.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long min_sum = 0;\n    long min_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        min_so_far += a[i];\n        if(min_so_far > 0) {\n            min_so_far = 0;\n        }\n        if(min_sum > min_so_far) {\n            min_sum = min_so_far;\n        }\n    }\n    long ans = max_sum;\n    if(sum + min_sum > 0) {\n        ans = std::max(ans, sum * k + max_sum);\n    }\n    else {\n        ans = std::max(ans, max_sum);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "tmpnns0yrjs: /tmp/tmpnns0yrjs.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, curr_sum);\n    }\n    curr_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        curr_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, curr_sum);\n    }\n    for (long i = 0; i < n; i++) {\n        total_sum += a[i];\n    }\n    long ans = std::max(max_sum, std::max(max_prefix_sum + max_suffix_sum + (k - 2) * total_sum, max_prefix_sum + max_suffix_sum));\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmp9u0cxpas: /tmp/tmp9u0cxpas.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    for (long i = 0; i < n; i++) {\n        total_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, total_sum);\n    }\n    total_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        total_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, total_sum);\n    }\n    long ans = std::max(max_sum, max_prefix_sum + max_suffix_sum);\n    if (total_sum > 0) {\n        ans = std::max(ans, total_sum * (k - 2) + max_prefix_sum + max_suffix_sum);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "tmpnkwaqkxm: /tmp/tmpnkwaqkxm.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element <= 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "tmpl8m5jddr: /tmp/tmpl8m5jddr.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element <= 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0;\n    long min_suffix_sum = 0;\n    long min_suffix_sum_so_far = 0;\n    for(long i = n - 1; i >= 0; i--) {\n        max_suffix_sum = max_suffix_sum + a[i];\n        min_suffix_sum = min_suffix_sum + a[i];\n        if(max_suffix_sum > max_so_far) {\n            max_so_far = max_suffix_sum;\n        }\n        if(min_suffix_sum < min_suffix_sum_so_far) {\n            min_suffix_sum_so_far = min_suffix_sum;\n        }\n    }\n    long max_wrap_sum = max_wrap + min_suffix_sum_so_far;\n    if(max_wrap_sum > max_so_far) {\n        max_so_far = max_wrap_sum;\n    }\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "tmpkshxi6db: /tmp/tmpkshxi6db.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long curr_prefix_sum = 0;\n    long curr_suffix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_prefix_sum += a[i];\n        max_sum = std::max(max_sum, curr_prefix_sum);\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        curr_suffix_sum += a[i];\n        max_sum = std::max(max_sum, curr_suffix_sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "tmpjy8aypg1: /tmp/tmpjy8aypg1.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_so_far > max_sum) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    ans = std::max(ans, max_sum + sum);\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "tmpk9_0uy_m: /tmp/tmpk9_0uy_m.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element <= 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_so_far > max_sum) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long max_wrap_sum = sum * k;\n    long max_wrap_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap_so_far += a[i];\n        if(max_wrap_so_far < 0) {\n            max_wrap_so_far = 0;\n        }\n        if(max_wrap_so_far > max_wrap_sum) {\n            max_wrap_sum = max_wrap_so_far;\n        }\n    }\n    return std::max(max_sum, max_wrap_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "tmpk328i5lg: /tmp/tmpk328i5lg.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_suffix_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        max_suffix_sum += a[i];\n        min_suffix_sum = std::min(min_suffix_sum, max_suffix_sum);\n    }\n    long max_prefix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_prefix_sum += a[i];\n        min_prefix_sum = std::min(min_prefix_sum, max_prefix_sum);\n    }\n    long ans1 = sum + max_prefix_sum + max_suffix_sum;\n    long ans2 = sum + min_prefix_sum + min_suffix_sum;\n    long ans3 = max_so_far;\n    long ans4 = sum * (k - 2) + ans3;\n    return std::max(ans1, std::max(ans2, std::max(ans3, ans4)));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "tmpcnu3rvvp: /tmp/tmpcnu3rvvp.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_so_far;\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "tmp78scq2x5: /tmp/tmp78scq2x5.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_sum = sum;\n    for(long i = 0; i < n; i++) {\n        sum += k * a[i];\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "tmpxlb2j1bf: /tmp/tmpxlb2j1bf.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_so_far);\n    }\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510397,
      "stdout": "",
      "stderr": "tmpleu_7spw: /tmp/tmpleu_7spw.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_sum = sum;\n    for (long i = 0; i < n; i++) {\n        sum += k * a[i];\n        sum -= a[i];\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "tmp3qnkxw5k: /tmp/tmp3qnkxw5k.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    long max_sum_so_far = 0;\n    long sum_of_all_elements = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum_so_far += a[i];\n        sum_of_all_elements += a[i];\n        if(max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        if(max_sum < max_sum_so_far) {\n            max_sum = max_sum_so_far;\n        }\n    }\n    if(max_sum == 0) {\n        return max_sum;\n    }\n    long max_sum_possible = max_sum + (k - 2) * sum_of_all_elements;\n    return max_sum_possible;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "tmp9ytm0p92: /tmp/tmp9ytm0p92.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far = max_so_far + a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (sum > 0) {\n        return max_sum + (k - 2) * sum;\n    } else {\n        return max_sum;\n    }\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123428,
      "stdout": "",
      "stderr": "tmp8917mh1b: /tmp/tmp8917mh1b.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if(sum > 0) {\n        return std::max(max_sum, curr_sum * k);\n    }\n    else {\n        return max_sum;\n    }\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123428,
      "stdout": "",
      "stderr": "tmpxvju2yop: /tmp/tmpxvju2yop.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_sum_so_far += a[i];\n        if (max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        if (max_sum < max_sum_so_far) {\n            max_sum = max_sum_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123428,
      "stdout": "",
      "stderr": "tmpo4u5z0t_: /tmp/tmpo4u5z0t_.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_sum = std::max(max_sum, sum);\n    }\n    long sum_of_all_elements = sum;\n    sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_sum = std::max(max_sum, sum + (k - 1) * sum_of_all_elements);\n        sum = std::max(sum, 0l);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123428,
      "stdout": "",
      "stderr": "tmpa848q1m5: /tmp/tmpa848q1m5.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    // Write your code here\n    long sum = 0;\n    long max_sum = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        if(sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123428,
      "stdout": "",
      "stderr": "tmpsu6p9otk: /tmp/tmpsu6p9otk.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    max_sum = max_sum * (k - 2);\n    max_sum = max_sum + sum;\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123428,
      "stdout": "",
      "stderr": "tmp7gc3omb2: /tmp/tmp7gc3omb2.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = INT_MIN;\n    long sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    max_sum = std::max(max_sum, sum);\n    for(int i = 0; i < n; i++) {\n        sum += k * a[i];\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123428,
      "stdout": "",
      "stderr": "tmps_ks2t7m: /tmp/tmps_ks2t7m.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n    }\n    long min_sum = 0;\n    long min_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        min_ending_here = min_ending_here + a[i];\n        if(min_sum > min_ending_here) {\n            min_sum = min_ending_here;\n        }\n        if(min_ending_here > 0) {\n            min_ending_here = 0;\n        }\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    if(sum > 0) {\n        return max(max_sum, sum * (k - 2) + max_sum);\n    }\n    else {\n        return max(max_sum, sum * k);\n    }\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123428,
      "stdout": "",
      "stderr": "/tmp/tmp3c06evfz.cpp: In function \u2018long int max_sub_array_sum_repeated(std::vector<long int>, long int, long int)\u2019:\n/tmp/tmp3c06evfz.cpp:35:16: error: \u2018max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n   35 |         return max(max_sum, sum * (k - 2) + max_sum);\n      |                ^~~\n      |                std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp3c06evfz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5: note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp> __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp3c06evfz.cpp:38:16: error: \u2018max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n   38 |         return max(max_sum, sum * k);\n      |                ^~~\n      |                std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp3c06evfz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5: note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp> __l, _Compare __comp)\n      |     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long sum = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        if(sum < 0) {\n            sum = 0;\n        }\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    long sum_of_all_elements = std::accumulate(a.begin(), a.end(), 0);\n    long max_wrap = sum_of_all_elements * k;\n    long max_wrap_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap_sum += a[i];\n        max_wrap -= a[i];\n        if(max_wrap_sum < 0) {\n            max_wrap_sum = 0;\n        }\n        if(max_wrap_sum > max_sum) {\n            max_sum = max_wrap_sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123428,
      "stdout": "",
      "stderr": "tmphxk2tv26: /tmp/tmphxk2tv26.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum_so_far += a[i];\n        if(max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_sum_so_far);\n    }\n    long sum = max_sum_so_far;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    max_sum_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum_so_far += a[i];\n        if(max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_sum_so_far);\n    }\n    max_sum = std::max(max_sum, sum);\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123428,
      "stdout": "",
      "stderr": "tmp2nchr1x9: /tmp/tmp2nchr1x9.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if (max_ending_here_wrap < 0) {\n            max_ending_here_wrap = 0;\n        }\n        if (max_wrap < max_ending_here_wrap) {\n            max_wrap = max_ending_here_wrap;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if (max_wrap > max_sum) {\n        max_sum = max_wrap;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123428,
      "stdout": "",
      "stderr": "tmpz4ray08x: /tmp/tmpz4ray08x.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n        for (long j = i; j < n; j++) {\n            sum += a[j];\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "tmp_h49_3je: /tmp/tmp_h49_3je.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (sum > 0) {\n        return std::max(max_sum, sum * (k - 2) + max_sum);\n    }\n    return std::max(max_sum, max_sum + sum * (k - 2));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "tmp8wyu_d5r: /tmp/tmp8wyu_d5r.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    return std::max(ans, max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "tmppq_ik54a: /tmp/tmppq_ik54a.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum = sum + a[i];\n    }\n    long min_sum = 0;\n    long min_so_far = 0;\n    long min_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        min_ending_here = min_ending_here + a[i];\n        if (min_ending_here > 0) {\n            min_ending_here = 0;\n        }\n        if (min_so_far > min_ending_here) {\n            min_so_far = min_ending_here;\n        }\n    }\n    min_sum = min_so_far * k;\n    if (sum > 0) {\n        max_sum = max_sum + (k - 2) * sum;\n    } else {\n        max_sum = max_sum + min_sum;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "tmp2ctm9rxs: /tmp/tmp2ctm9rxs.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum = sum + a[i];\n        a[i] = -a[i];\n    }\n    long min_sum = 0;\n    long min_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        min_ending_here = min_ending_here + a[i];\n        if (min_ending_here > 0) {\n            min_ending_here = 0;\n        }\n        if (min_sum > min_ending_here) {\n            min_sum = min_ending_here;\n        }\n    }\n    long max_wrap = sum + min_sum;\n    if (k == 1) {\n        return max_sum;\n    }\n    if (max_wrap > max_sum) {\n        return max_wrap;\n    }\n    else {\n        return max_sum;\n    }\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "tmpetm8yq_x: /tmp/tmpetm8yq_x.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum > max_sum) {\n            max_sum = curr_sum;\n        }\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum > max_sum) {\n            max_sum = curr_sum;\n        }\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n    }\n    max_wrap = max_wrap + max_sum;\n    if (k == 1) {\n        return max_sum;\n    }\n    if (max_wrap > max_sum) {\n        return max_wrap * (k - 1) + max_sum;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "tmpo2mnksux: /tmp/tmpo2mnksux.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long curr_prefix_sum = 0;\n    long curr_suffix_sum = 0;\n    long total_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_prefix_sum += a[i];\n        total_sum += a[i];\n    }\n    for(long i = n - 1; i >= 0; i--) {\n        curr_suffix_sum += a[i];\n        max_sum = std::max(max_sum, curr_prefix_sum + (curr_suffix_sum * (k - 2)));\n        curr_prefix_sum -= a[i];\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "tmp4dou5vbz: /tmp/tmp4dou5vbz.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n        for (long j = i; j < n; j++) {\n            sum += a[j];\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "tmp_h49_3je: /tmp/tmp_h49_3je.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for (int i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long max_sum_all = max_sum;\n    for (int i = 0; i < n; i++) {\n        max_sum_all += a[i];\n        a[i] = -a[i];\n    }\n    max_sum = 0;\n    max_ending_here = 0;\n    for (int i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    max_sum_all += max_sum;\n    return std::max(max_sum_all, max_sum_all * (k - 2));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "tmp9ymrt7d0: /tmp/tmp9ymrt7d0.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if (max_ending_here_wrap < 0) {\n            max_ending_here_wrap = 0;\n        }\n        if (max_wrap < max_ending_here_wrap) {\n            max_wrap = max_ending_here_wrap;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if (k == 1) {\n        return max_sum;\n    }\n    if (max_wrap > max_sum) {\n        return max_wrap;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "tmpe4cbde6q: /tmp/tmpe4cbde6q.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = LONG_MIN, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123445,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if(max_ending_here_wrap < 0) {\n            max_ending_here_wrap = 0;\n        }\n        if(max_wrap < max_ending_here_wrap) {\n            max_wrap = max_ending_here_wrap;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if(k == 1) {\n        return max_sum;\n    }\n    if(max_wrap > max_sum) {\n        return max_wrap;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "tmp70slicl3: /tmp/tmp70slicl3.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_sum = sum;\n    for(int i = 0; i < n; i++) {\n        sum = sum - a[i] + a[i] * k;\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "tmpqinql5yw: /tmp/tmpqinql5yw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        long sum = 0;\n        for(long j = i; j < n; j++) {\n            sum += a[j];\n            max_sum = std::max(max_sum, sum);\n        }\n    }\n    max_sum *= k;\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "tmp3yj7s77c: /tmp/tmp3yj7s77c.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_so_far + (k - 2) * sum;\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123431,
      "stdout": "",
      "stderr": "tmp0jplgs9l: /tmp/tmp0jplgs9l.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_2 = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here_2 = max_ending_here_2 + a[i];\n        if(max_ending_here_2 < 0) {\n            max_ending_here_2 = 0;\n        }\n        if(max_sum < max_ending_here_2) {\n            max_sum = max_ending_here_2;\n        }\n    }\n    max_sum = std::max(max_sum, sum * (k - 2) + max_ending_here);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "tmp7kuk61cn: /tmp/tmp7kuk61cn.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    max_wrap = max_wrap + curr_sum;\n    if (k == 1) {\n        return max_sum;\n    }\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpwphqjpzs: /tmp/tmpwphqjpzs.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (sum > 0) {\n        max_sum = std::max(max_sum, sum * (k - 2) + max_so_far);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123431,
      "stdout": "",
      "stderr": "tmpwmn5htj5: /tmp/tmpwmn5htj5.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long curr_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        curr_wrap += a[i];\n        if (curr_wrap < 0) {\n            curr_wrap = 0;\n        }\n        max_wrap = std::max(max_wrap, curr_wrap);\n    }\n    max_wrap = std::max(max_wrap, 0l);\n    return std::max(max_sum, max_wrap + (k - 2) * max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "tmpxtrokfko: /tmp/tmpxtrokfko.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long curr_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        curr_wrap += a[i];\n        if (curr_wrap < 0) {\n            curr_wrap = 0;\n        }\n        max_wrap = std::max(max_wrap, curr_wrap);\n    }\n    max_wrap = std::max(max_wrap, 0l);\n    return std::max(max_sum, max_wrap + (k - 2) * max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "tmpxtrokfko: /tmp/tmpxtrokfko.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    for(long i = 0; i < n; i++) {\n        total_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, total_sum);\n    }\n    total_sum = 0;\n    for(long i = n - 1; i >= 0; i--) {\n        total_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, total_sum);\n    }\n    long ans = std::max(max_sum, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum);\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "tmplf7klppq: /tmp/tmplf7klppq.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum_so_far += a[i];\n        max_sum = std::max(max_sum, max_sum_so_far);\n        if(max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap += max_sub_array_sum_repeated(a, n, 1);\n    if(max_wrap > max_sum && max_wrap < sum) {\n        max_sum = max_wrap;\n    }\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123446,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long min_so_far = 0;\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        max_so_far = std::max(max_so_far, sum - min_so_far);\n        min_so_far = std::min(min_so_far, sum);\n    }\n    long max_sub_array_sum = max_so_far;\n    max_sum = std::max(max_sum, max_so_far);\n    for(long i = 1; i < k; i++) {\n        max_so_far = 0;\n        min_so_far = 0;\n        sum = 0;\n        for(long j = 0; j < n; j++) {\n            sum += a[j];\n            max_so_far = std::max(max_so_far, sum - min_so_far);\n            min_so_far = std::min(min_so_far, sum);\n        }\n        max_sub_array_sum = std::max(max_sub_array_sum, max_so_far);\n        max_sum = std::max(max_sum, max_sub_array_sum * (i + 1) + max_so_far);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "tmpez2o08o8: /tmp/tmpez2o08o8.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if(max_sum == 0) {\n        return max_sum;\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long curr_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        curr_wrap += a[i];\n        if(curr_wrap < 0) {\n            curr_wrap = 0;\n        }\n        max_wrap = std::max(max_wrap, curr_wrap);\n    }\n    max_wrap = max_wrap + max_wrap;\n    return std::max(max_sum, max_wrap * (k - 2) + max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "tmpuwl5rax1: /tmp/tmpuwl5rax1.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    return std::max(ans, max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "tmpxgf76zqv: /tmp/tmpxgf76zqv.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if (max_ending_here_wrap < 0) {\n            max_ending_here_wrap = 0;\n        }\n        if (max_wrap < max_ending_here_wrap) {\n            max_wrap = max_ending_here_wrap;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if (k == 1) {\n        return max_sum;\n    }\n    if (max_wrap > max_sum) {\n        return max_wrap;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "tmp3y2v4n4y: /tmp/tmp3y2v4n4y.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_sum_so_far += a[i];\n        if (max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        if (max_sum < max_sum_so_far) {\n            max_sum = max_sum_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = std::max(max_sum, sum * k);\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "tmppausn7h1: /tmp/tmppausn7h1.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    for (long i = 0; i < n; i++) {\n        total_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, total_sum);\n    }\n    total_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        total_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, total_sum);\n    }\n    long ans = std::max(max_sum, max_prefix_sum + max_suffix_sum);\n    if (total_sum > 0) {\n        ans = std::max(ans, total_sum * (k - 2) + max_prefix_sum + max_suffix_sum);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "tmpukzukc7t: /tmp/tmpukzukc7t.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element <= 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum_of_all_elements = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum_of_all_elements;\n    return std::max(ans, max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "tmpzvyid572: /tmp/tmpzvyid572.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long curr_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        curr_wrap += a[i];\n        if (curr_wrap < 0) {\n            curr_wrap = 0;\n        }\n        max_wrap = std::max(max_wrap, curr_wrap);\n    }\n    max_wrap = std::max(max_wrap, max_wrap + max_wrap);\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "tmpw98bi453: /tmp/tmpw98bi453.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    max_sum = sum;\n    for(long i = 0; i < n; i++) {\n        sum = sum - a[i] + a[i] * k;\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "tmp8os3uwez: /tmp/tmp8os3uwez.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long i = 0;\n    while (i < n) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n        i++;\n    }\n    max_sum = max_so_far;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    max_so_far = 0;\n    max_ending_here = 0;\n    i = 0;\n    while (i < n) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n        i++;\n    }\n    max_sum = std::max(max_sum, sum + max_so_far);\n    if (k > 2) {\n        max_sum = std::max(max_sum, sum * (k - 2) + max_so_far);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "tmpo60nf8ba: /tmp/tmpo60nf8ba.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123448,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_so_far);\n    }\n    if (max_sum == 0) {\n        return max_sum;\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_wrap = sum * k;\n    long max_wrap_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap_sum += a[i];\n        if (max_wrap_sum < 0) {\n            max_wrap_sum = 0;\n        }\n        max_wrap = std::max(max_wrap, max_wrap_sum);\n    }\n    return std::max(max_wrap, max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "tmp_mxsymn5: /tmp/tmp_mxsymn5.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    for(long i = 0; i < n; i++) {\n        total_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, total_sum);\n    }\n    total_sum = 0;\n    for(long i = n - 1; i >= 0; i--) {\n        total_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, total_sum);\n    }\n    long ans = std::max(max_sum, max_prefix_sum + max_suffix_sum);\n    if(total_sum > 0) {\n        ans = std::max(ans, total_sum * (k - 2) + max_prefix_sum + max_suffix_sum);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "tmpjm788j6u: /tmp/tmpjm788j6u.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long i = 0;\n    long j = 0;\n    long max_ending_here = 0;\n    while(j < n) {\n        max_ending_here += a[j];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n            i = j + 1;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n        j++;\n    }\n    max_sum = max_so_far;\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    max_so_far = 0;\n    i = 0;\n    j = 0;\n    max_ending_here = 0;\n    while(j < n) {\n        max_ending_here += a[j];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n            i = j + 1;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n        j++;\n    }\n    max_sum = std::max(max_sum, sum + max_so_far);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "tmp_a6xk322: /tmp/tmp_a6xk322.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long max_sum_k = max_sum * k;\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if(max_ending_here_wrap < 0) {\n            max_ending_here_wrap = 0;\n        }\n        if(max_wrap < max_ending_here_wrap) {\n            max_wrap = max_ending_here_wrap;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if(max_wrap > max_sum_k) {\n        return max_wrap;\n    }\n    return max_sum_k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "tmpa2hsjio4: /tmp/tmpa2hsjio4.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long curr_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        curr_wrap += a[i];\n        if(curr_wrap < 0) {\n            curr_wrap = 0;\n        }\n        max_wrap = std::max(max_wrap, curr_wrap);\n    }\n    max_wrap = std::max(max_wrap, 0l);\n    return std::max(max_sum, max_wrap * (k - 2) + max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "tmpilh7hjd7: /tmp/tmpilh7hjd7.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if (max_ending_here_wrap < 0) {\n            max_ending_here_wrap = 0;\n        }\n        if (max_wrap < max_ending_here_wrap) {\n            max_wrap = max_ending_here_wrap;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if (k == 1) {\n        return max_sum;\n    }\n    if (max_wrap > max_sum) {\n        return max_wrap;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "tmpe4cbde6q: /tmp/tmpe4cbde6q.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return std::max(max_so_far, max_so_far + sum * (k - 2));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "tmp3yrfjnst: /tmp/tmp3yrfjnst.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here = std::max(max_ending_here + a[i], a[i]);\n        max_so_far = std::max(max_so_far, max_ending_here);\n    }\n    max_sum = std::max(max_so_far, sum * k);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "tmpt1cibbp5: /tmp/tmpt1cibbp5.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (sum > 0) {\n        max_sum = std::max(max_sum, sum * k);\n    }\n    long prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        prefix_sum += a[i];\n        max_sum = std::max(max_sum, prefix_sum);\n        if (prefix_sum < 0) {\n            prefix_sum = 0;\n        }\n    }\n    long suffix_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        suffix_sum += a[i];\n        max_sum = std::max(max_sum, suffix_sum);\n        if (suffix_sum < 0) {\n            suffix_sum = 0;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "tmpjfj5yjgd: /tmp/tmpjfj5yjgd.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_2 = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here_2 = max_ending_here_2 + a[i];\n        if(max_ending_here_2 < 0) {\n            max_ending_here_2 = 0;\n        }\n        if(max_wrap < max_ending_here_2) {\n            max_wrap = max_ending_here_2;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if(k == 1) {\n        return max_sum;\n    }\n    else if(k == 2) {\n        return std::max(max_sum, max_wrap);\n    }\n    else {\n        return std::max(max_sum, max_wrap + max_sum * (k - 2));\n    }\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "tmpu_fejqgk: /tmp/tmpu_fejqgk.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long min_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        min_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + min_wrap;\n    if (k == 1) {\n        return max_sum;\n    }\n    if (k == 2) {\n        return std::max(max_wrap, max_sum);\n    }\n    return std::max(max_wrap, max_sum + (k - 2) * min_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "tmpcnq_tsfs: /tmp/tmpcnq_tsfs.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    // Write your code here\n    long max_so_far = INT_MIN;\n    long max_ending_here = 0;\n    long max_element = INT_MIN;\n    for(int i=0;i<n;i++)\n    {\n        max_ending_here = max_ending_here + a[i];\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_element < a[i])\n            max_element = a[i];\n    }\n    if(max_so_far < 0)\n        return max_element;\n    long sum = 0;\n    for(int i=0;i<n;i++)\n        sum += a[i];\n    long ans = max_so_far;\n    for(int i=2;i<=k;i++)\n    {\n        max_so_far = max_so_far + sum;\n        ans = max(ans,max_so_far);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "/tmp/tmp4kqpqygu.cpp: In function \u2018long int max_sub_array_sum_repeated(std::vector<long int>, long int, long int)\u2019:\n/tmp/tmp4kqpqygu.cpp:28:15: error: \u2018max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n   28 |         ans = max(ans,max_so_far);\n      |               ^~~\n      |               std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp4kqpqygu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5: note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp> __l, _Compare __comp)\n      |     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    max_wrap = max_wrap + curr_sum;\n    if (k > 1) {\n        max_sum = std::max(max_sum, max_wrap);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "tmppeqhp4go: /tmp/tmppeqhp4go.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_sum = sum;\n    for (int i = 1; i < k; i++) {\n        for (int j = 0; j < n; j++) {\n            sum += a[j];\n            max_sum = std::max(max_sum, sum);\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "tmp9_4sqcza: /tmp/tmp9_4sqcza.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum_so_far += a[i];\n        if(max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_sum_so_far);\n    }\n    if(max_sum == 0) {\n        return max_sum;\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long ans = max_sum + (k - 2) * sum;\n    long prefix_sum = 0;\n    for(long i = 0; i < n; i++) {\n        prefix_sum += a[i];\n        max_sum_so_far = std::max(prefix_sum, max_sum_so_far);\n        ans = std::max(ans, max_sum_so_far + sum * (k - 2));\n    }\n    long suffix_sum = 0;\n    for(long i = n - 1; i >= 0; i--) {\n        suffix_sum += a[i];\n        max_sum_so_far = std::max(suffix_sum, max_sum_so_far);\n        ans = std::max(ans, max_sum_so_far + sum * (k - 2));\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "tmp6431srpk: /tmp/tmp6431srpk.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    return std::max(ans, max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}