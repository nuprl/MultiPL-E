{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove consecutive duplicates of a given list.\nstd::any consecutive_duplicates(std::any nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = consecutive_duplicates;\n    assert(candidate((std::any({(long)0, (long)0, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)9, (long)4, (long)4}))) == (std::any({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)4})));\n    assert(candidate((std::any({(long)10, (long)10, (long)15, (long)19, (long)18, (long)18, (long)17, (long)26, (long)26, (long)17, (long)18, (long)10}))) == (std::any({(long)10, (long)15, (long)19, (long)18, (long)17, (long)26, (long)17, (long)18, (long)10})));\n    assert(candidate((std::any({(std::string)\"a\", (std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"d\"}))) == (std::any({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\"})));\n    assert(candidate((std::any({(std::string)\"a\", (std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"d\", (std::string)\"a\", (std::string)\"a\"}))) == (std::any({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"a\"})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any last;\n    for (auto num : nums) {\n        if (num != last) {\n            result.push_back(num);\n            last = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any last_num;\n  for (auto num : nums) {\n    if (num != last_num) {\n      result.push_back(num);\n      last_num = num;\n    }\n  }\n  return result;",
    "    std::any res;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            res.push_back(num);\n            prev = num;\n        }\n    }\n    return res;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any res;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      res.push_back(num);\n      prev = num;\n    }\n  }\n  return res;",
    "  std::any result;\n  std::any last;\n  for (auto num : nums) {\n    if (num != last) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "    std::any temp;\n    std::any result;\n    for(auto i:nums){\n        if(i!=temp){\n            result.push_back(i);\n            temp=i;\n        }\n    }\n    return result;",
    "  std::any result;\n  for (auto i : nums) {\n    if (result.empty() || result.back() != i) {\n      result.push_back(i);\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any last;\n  for (auto num : nums) {\n    if (num != last) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last;\n  for (auto num : nums) {\n    if (num != last) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "    std::any result;\n    std::any prev;\n    for (auto i : nums) {\n        if (i != prev) {\n            result.push_back(i);\n            prev = i;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any res;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      res.push_back(num);\n      prev = num;\n    }\n  }\n  return res;",
    "  std::any result;\n  std::any prev;\n  for(auto num : nums) {\n    if(num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any temp;\n  std::any result;\n  for (auto num : nums) {\n    if (num != temp) {\n      result.push_back(num);\n      temp = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any res;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      res.push_back(num);\n      prev = num;\n    }\n  }\n  return res;",
    "    std::any result;\n    std::any last_num;\n    for (auto num : nums) {\n        if (num != last_num) {\n            result.push_back(num);\n            last_num = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n    }\n    prev = num;\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last;\n  for (auto num : nums) {\n    if (num != last) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any res;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      res.push_back(num);\n      prev = num;\n    }\n  }\n  return res;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any res;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      res.push_back(num);\n      prev = num;\n    }\n  }\n  return res;",
    "  std::any result;\n  std::any prev = nums[0];\n  result.push_back(prev);\n  for (int i = 1; i < nums.size(); i++) {\n    if (nums[i] != prev) {\n      result.push_back(nums[i]);\n      prev = nums[i];\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any last;\n    for (auto num : nums) {\n        if (num != last) {\n            result.push_back(num);\n            last = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any last;\n    for (auto num : nums) {\n        if (num != last) {\n            result.push_back(num);\n            last = num;\n        }\n    }\n    return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any res;\n  for (auto i : nums) {\n    if (res.empty() || res.back() != i) {\n      res.push_back(i);\n    }\n  }\n  return res;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n        }\n        prev = num;\n    }\n    return result;",
    "  std::any result;\n  std::any last;\n  for (auto num : nums) {\n    if (num != last) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last_num;\n  for (auto num : nums) {\n    if (num != last_num) {\n      result.push_back(num);\n      last_num = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any res;\n    std::any prev = nums[0];\n    res.push_back(prev);\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] != prev) {\n            res.push_back(nums[i]);\n            prev = nums[i];\n        }\n    }\n    return res;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  for (auto i : nums) {\n    if (result.empty() || result.back() != i) {\n      result.push_back(i);\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  if (nums.empty()) {\n    return nums;\n  }\n  std::any res;\n  res.push_back(nums[0]);\n  for (int i = 1; i < nums.size(); i++) {\n    if (nums[i] != nums[i - 1]) {\n      res.push_back(nums[i]);\n    }\n  }\n  return res;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any last;\n  for (auto num : nums) {\n    if (!last || last != num) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "  std::any result = {};\n  for (auto num : nums) {\n    if (result.empty() || result.back() != num) {\n      result.push_back(num);\n    }\n  }\n  return result;",
    "  // Write your code here\n  std::any result;\n  std::any temp;\n  for(int i=0;i<nums.size();i++){\n    if(i==0){\n      result.push_back(nums[i]);\n    }\n    else{\n      if(nums[i]!=nums[i-1]){\n        result.push_back(nums[i]);\n      }\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    for (auto i = 0; i < nums.size(); i++) {\n        if (i == 0) {\n            result.push_back(nums[i]);\n        } else if (nums[i] != nums[i - 1]) {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;",
    "  std::any result;\n  for (auto num : nums) {\n    if (result.empty() || result.back() != num) {\n      result.push_back(num);\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last;\n  for (auto num : nums) {\n    if (num != last) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "  std::any res;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      res.push_back(num);\n      prev = num;\n    }\n  }\n  return res;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last_num;\n  for (auto num : nums) {\n    if (num != last_num) {\n      result.push_back(num);\n    }\n    last_num = num;\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "    std::any result;\n    std::any last_num;\n    for (auto num : nums) {\n        if (num != last_num) {\n            result.push_back(num);\n            last_num = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last_num;\n  for (auto num : nums) {\n    if (num != last_num) {\n      result.push_back(num);\n      last_num = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  for (auto i : nums) {\n    if (result.empty() || result.back() != i) {\n      result.push_back(i);\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last;\n  for (auto num : nums) {\n    if (num != last) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last;\n  for (std::any : nums) {\n    if (last != num) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any last;\n    for (auto num : nums) {\n        if (num != last) {\n            result.push_back(num);\n            last = num;\n        }\n    }\n    return result;",
    "    std::any result;\n    std::any prev = nums[0];\n    result.push_back(prev);\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] != prev) {\n            result.push_back(nums[i]);\n            prev = nums[i];\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "    std::any result;\n    std::any prev;\n    for (std::any num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n        }\n        prev = num;\n    }\n    return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last_num;\n  for (auto num : nums) {\n    if (num != last_num) {\n      result.push_back(num);\n      last_num = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last;\n  for (auto num : nums) {\n    if (num != last) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last;\n  for (auto num : nums) {\n    if (num != last) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "\tif (nums.empty()) {\n\t\treturn nums;\n\t}\n\tstd::any result;\n\tstd::any prev = nums[0];\n\tresult.push_back(prev);\n\tfor (int i = 1; i < nums.size(); i++) {\n\t\tif (nums[i] != prev) {\n\t\t\tresult.push_back(nums[i]);\n\t\t\tprev = nums[i];\n\t\t}\n\t}\n\treturn result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any res;\n    for (auto i = 0; i < nums.size(); i++) {\n        if (i == 0) {\n            res.push_back(nums[i]);\n        } else {\n            if (nums[i] != nums[i - 1]) {\n                res.push_back(nums[i]);\n            }\n        }\n    }\n    return res;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any res;\n  std::any last;\n  for (auto n : nums) {\n    if (n != last) {\n      res.push_back(n);\n      last = n;\n    }\n  }\n  return res;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev)\n      result.push_back(num);\n    prev = num;\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last;\n  for (auto num: nums) {\n    if (num != last) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last;\n  for (auto num : nums) {\n    if (num != last) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last;\n  for (auto num : nums) {\n    if (num != last) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last_num;\n  for (auto num : nums) {\n    if (num != last_num) {\n      result.push_back(num);\n      last_num = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any last;\n  for (auto num : nums) {\n    if (num != last) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "  std::any temp;\n  std::any result;\n  for (auto i : nums) {\n    if (i != temp) {\n      result.push_back(i);\n      temp = i;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "    std::any result;\n    std::any last;\n    for (auto num : nums) {\n        if (num != last) {\n            result.push_back(num);\n            last = num;\n        }\n    }\n    return result;",
    "  std::any res;\n  for (auto num : nums) {\n    if (res.empty() || res.back() != num) {\n      res.push_back(num);\n    }\n  }\n  return res;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any new_list;\n  std::any prev;\n  for (auto i : nums) {\n    if (i != prev) {\n      new_list.push_back(i);\n      prev = i;\n    }\n  }\n  return new_list;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result = {};\n  std::any last = {};\n  for (auto num : nums) {\n    if (num != last) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "  std::any temp;\n  std::any res;\n  for (auto i : nums) {\n    if (i != temp) {\n      res.push_back(i);\n      temp = i;\n    }\n  }\n  return res;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  for (auto i = nums.begin(); i != nums.end(); ++i) {\n    if (i == nums.begin() || *i != *(i - 1)) {\n      result.push_back(*i);\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    for (auto i : nums) {\n        if (result.empty() || result.back() != i) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any prev = nums[0];\n  std::any result = std::vector<int>();\n  result.push_back(prev);\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last_num;\n  for (auto num : nums) {\n    if (num != last_num) {\n      result.push_back(num);\n      last_num = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any res;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            res.push_back(num);\n            prev = num;\n        }\n    }\n    return res;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last;\n  for (auto num : nums) {\n    if (num != last) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any last;\n    for (auto num : nums) {\n        if (num != last) {\n            result.push_back(num);\n            last = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  for (int i = 0; i < nums.size(); i++) {\n    if (nums[i] != nums[i + 1]) {\n      result.push_back(nums[i]);\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  for (auto i : nums) {\n    if (result.empty() || result.back() != i) {\n      result.push_back(i);\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last_num;\n  for (auto num : nums) {\n    if (num != last_num) {\n      result.push_back(num);\n      last_num = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last_num;\n  for (auto num : nums) {\n    if (num != last_num) {\n      result.push_back(num);\n      last_num = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last_num;\n  for (auto num : nums) {\n    if (num != last_num) {\n      result.push_back(num);\n      last_num = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n    }\n    prev = num;\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "    std::any res;\n    for (auto i : nums) {\n        if (res.empty() || res.back() != i) {\n            res.push_back(i);\n        }\n    }\n    return res;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any last;\n  for (auto num : nums) {\n    if (num != last) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for(auto num : nums) {\n        if(num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev = nums[0];\n    result.push_back(prev);\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] != prev) {\n            result.push_back(nums[i]);\n            prev = nums[i];\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any res;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            res.push_back(num);\n        }\n        prev = num;\n    }\n    return res;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    for (auto i = nums.begin(); i != nums.end(); i++) {\n        if (result.empty() || *i != result.back()) {\n            result.push_back(*i);\n        }\n    }\n    return result;",
    "    std::any result;\n    for (auto i = 0; i < nums.size(); i++) {\n        if (i == 0) {\n            result.push_back(nums[i]);\n        }\n        else if (nums[i] != nums[i - 1]) {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "    std::any result;\n    std::any last;\n    for (auto num : nums) {\n        if (num != last) {\n            result.push_back(num);\n            last = num;\n        }\n    }\n    return result;",
    "  if (nums.empty()) {\n    return nums;\n  }\n  std::any result;\n  std::any prev = nums[0];\n  result.push_back(prev);\n  for (int i = 1; i < nums.size(); i++) {\n    if (nums[i] != prev) {\n      result.push_back(nums[i]);\n      prev = nums[i];\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any last_num;\n    for (auto num : nums) {\n        if (num != last_num) {\n            result.push_back(num);\n            last_num = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "  std::any result;\n  std::any last;\n  for (auto num : nums) {\n    if (num != last) {\n      result.push_back(num);\n      last = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev;\n  for (auto num : nums) {\n    if (num != prev) {\n      result.push_back(num);\n      prev = num;\n    }\n  }\n  return result;",
    "  std::any result;\n  std::any prev = nums[0];\n  result.push_back(prev);\n  for (int i = 1; i < nums.size(); i++) {\n    if (nums[i] != prev) {\n      result.push_back(nums[i]);\n      prev = nums[i];\n    }\n  }\n  return result;"
  ]
}