{
  "name": "mbpp_393_max_length_list",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_list = list;\n            max_length = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp50zy2opg.cpp:2:\n/tmp/tmp50zy2opg.cpp: In function \u2018int main()\u2019:\n/tmp/tmp50zy2opg.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_len_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_len = list.size();\n            max_len_list = list;\n        }\n    }\n    return max_len_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7bkd0x2u.cpp:2:\n/tmp/tmp7bkd0x2u.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7bkd0x2u.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpz8g_tab0.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpz8g_tab0.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpz8g_tab0.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz8g_tab0.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpz8g_tab0.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz8g_tab0.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpz8g_tab0.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpz8g_tab0.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz8g_tab0.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmp6zrvw0v4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp6zrvw0v4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto i = input_list.begin(); i != input_list.end(); i++) {\n        if (i->size() > max_length) {\n            max_length = i->size();\n            max_length_list = *i;\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpgvteawrw.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpgvteawrw.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpgvteawrw.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgvteawrw.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpgvteawrw.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgvteawrw.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpgvteawrw.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_length_list;\n      |              ^~~~~~~~~~~~~~~\n/tmp/tmpgvteawrw.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgvteawrw.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpgvteawrw.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    Union_long_std_vector_long_ max_length = 0;\n    for (size_t i = 0; i < input_list.size(); i++) {\n        if (max_length.f0 < input_list[i].size()) {\n            max_length.f1 = input_list[i];\n            max_length.f0 = input_list[i].size();\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpkea5lv5l.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpkea5lv5l.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return max_length;\n      |            ^~~~~~~~~~\n/tmp/tmpkea5lv5l.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpkea5lv5l.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpkea5lv5l.cpp:2:\n/tmp/tmpkea5lv5l.cpp: In function \u2018int main()\u2019:\n/tmp/tmpkea5lv5l.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_list = list;\n            max_len = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_sr_1mxc.cpp:2:\n/tmp/tmp_sr_1mxc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_sr_1mxc.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmp7d9f19as.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp7d9f19as.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp7d9f19as.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7d9f19as.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7d9f19as.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7d9f19as.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7d9f19as.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_list;\n      |              ^~~~~~~~\n/tmp/tmp7d9f19as.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7d9f19as.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp7d9f19as.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(c",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for(auto list : input_list) {\n        if(list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if(max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpir5e_sxt.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpir5e_sxt.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpir5e_sxt.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpir5e_sxt.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpir5e_sxt.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpir5e_sxt.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpir5e_sxt.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpir5e_sxt.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpir5e_sxt.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto &elem : input_list) {\n        if (elem.size() > result.f0) {\n            result.f1 = elem;\n            result.f0 = elem.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpch69f8s3.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpch69f8s3.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpch69f8s3.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpch69f8s3.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpch69f8s3.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpch69f8s3.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpch69f8s3.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpch69f8s3.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpch69f8s3.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list = input_list[0];\n    for(int i=1; i<input_list.size(); i++){\n        if(input_list[i].size() > max_list.size()){\n            max_list = input_list[i];\n        }\n    }\n    result.f1 = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmp37w6qiw_.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp37w6qiw_.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp37w6qiw_.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp37w6qiw_.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp37w6qiw_.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp37w6qiw_.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp37w6qiw_.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmp37w6qiw_.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp37w6qiw_.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto it = input_list.begin(); it != input_list.end(); ++it) {\n        if (it->size() > max_length) {\n            max_length = it->size();\n            max_list = *it;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpaw6tpokb.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpaw6tpokb.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpaw6tpokb.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaw6tpokb.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpaw6tpokb.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaw6tpokb.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpaw6tpokb.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpaw6tpokb.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaw6tpokb.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (result.f0 < i.size()) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmph6iqkgz0.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmph6iqkgz0.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmph6iqkgz0.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph6iqkgz0.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmph6iqkgz0.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph6iqkgz0.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmph6iqkgz0.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmph6iqkgz0.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph6iqkgz0.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptj7jk0kx.cpp:2:\n/tmp/tmptj7jk0kx.cpp: In function \u2018int main()\u2019:\n/tmp/tmptj7jk0kx.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for(auto i : input_list) {\n        if(i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpl39jmya6.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpl39jmya6.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpl39jmya6.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl39jmya6.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpl39jmya6.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl39jmya6.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpl39jmya6.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpl39jmya6.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl39jmya6.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for(auto i : input_list){\n        if(i.size() > result.f0){\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpvy760fod.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpvy760fod.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpvy760fod.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvy760fod.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpvy760fod.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvy760fod.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpvy760fod.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpvy760fod.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvy760fod.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result = i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmp9wi57c7a.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp9wi57c7a.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp9wi57c7a.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9wi57c7a.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp9wi57c7a.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9wi57c7a.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp9wi57c7a.cpp:17:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   17 |     result = 0;\n      |              ^\n/tmp/tmp9wi57c7a.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9wi57c7a.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9wi57c7a.cpp:20:22: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(cons",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmp6zrvw0v4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp6zrvw0v4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = input_list[0];\n        for (auto i = input_list.begin(); i != input_list.end(); i++) {\n            if (i->size() > result.f1.size()) {\n                result.f1 = *i;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpccacfgcn.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpccacfgcn.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpccacfgcn.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpccacfgcn.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpccacfgcn.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpccacfgcn.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpccacfgcn.cpp:27:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   27 |     return result;\n      |            ^~~~~~\n/tmp/tmpccacfgcn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpccacfgcn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result = -1;\n    for (auto i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f0) {\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpyka_i2pt.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpyka_i2pt.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpyka_i2pt.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyka_i2pt.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpyka_i2pt.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyka_i2pt.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpyka_i2pt.cpp:17:15: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   17 |     result = -1;\n      |               ^\n/tmp/tmpyka_i2pt.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyka_i2pt.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpyka_i2pt.cpp:20:34: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(co",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = -1;\n    for(auto i : input_list) {\n        if(i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmp8xnqg236.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp8xnqg236.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp8xnqg236.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8xnqg236.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp8xnqg236.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8xnqg236.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp8xnqg236.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmp8xnqg236.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8xnqg236.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpa_t7g5ey.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpa_t7g5ey.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpa_t7g5ey.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa_t7g5ey.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa_t7g5ey.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpa_t7g5ey.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (long i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmp38wmq6sp.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp38wmq6sp.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp38wmq6sp.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp38wmq6sp.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp38wmq6sp.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp38wmq6sp.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp38wmq6sp.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_length_list;\n      |              ^~~~~~~~~~~~~~~\n/tmp/tmp38wmq6sp.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp38wmq6sp.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp38wmq6sp.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result = -1;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > result) {\n            result = list;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpwsc7cpl9.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpwsc7cpl9.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpwsc7cpl9.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwsc7cpl9.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpwsc7cpl9.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwsc7cpl9.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpwsc7cpl9.cpp:17:15: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   17 |     result = -1;\n      |               ^\n/tmp/tmpwsc7cpl9.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwsc7cpl9.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpwsc7cpl9.cpp:19:25: error: no match for \u2018operator>\u2019 (operand types are \u2018std::vector<long int>::size_type\u2019 {aka \u2018lo",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_list.size()) {\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpb1f417w8.cpp:2:\n/tmp/tmpb1f417w8.cpp: In function \u2018int main()\u2019:\n/tmp/tmpb1f417w8.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp5i19mde3.cpp:2:\n/tmp/tmp5i19mde3.cpp: In function \u2018int main()\u2019:\n/tmp/tmp5i19mde3.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_length_list = i;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp9kqx8lxc.cpp:2:\n/tmp/tmp9kqx8lxc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp9kqx8lxc.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpqiovpwxi.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpqiovpwxi.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpqiovpwxi.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqiovpwxi.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpqiovpwxi.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqiovpwxi.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpqiovpwxi.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpqiovpwxi.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqiovpwxi.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpqiovpwxi.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpofl12opu.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpofl12opu.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpofl12opu.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpofl12opu.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpofl12opu.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpofl12opu.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpofl12opu.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpofl12opu.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpofl12opu.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpofl12opu.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_list;\n    for(long i = 0; i < input_list.size(); i++) {\n        if(input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_list = input_list[i];\n        }\n    }\n    result.f1 = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpd6nwfrmg.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpd6nwfrmg.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpd6nwfrmg.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd6nwfrmg.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpd6nwfrmg.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd6nwfrmg.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpd6nwfrmg.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   26 |     return result;\n      |            ^~~~~~\n/tmp/tmpd6nwfrmg.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd6nwfrmg.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmp7ndlmo65.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp7ndlmo65.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp7ndlmo65.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ndlmo65.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ndlmo65.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ndlmo65.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ndlmo65.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp7ndlmo65.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ndlmo65.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp7ndlmo65.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for(auto i : input_list) {\n        if(i.size() > max_length) {\n            max_length = i.size();\n            max_length_list = i;\n        }\n    }\n    if(max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpmejcwtfq.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpmejcwtfq.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpmejcwtfq.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmejcwtfq.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmejcwtfq.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmejcwtfq.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmejcwtfq.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpmejcwtfq.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmejcwtfq.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpym5ee308.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpym5ee308.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpym5ee308.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpym5ee308.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpym5ee308.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpym5ee308.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpym5ee308.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_length_list;\n      |              ^~~~~~~~~~~~~~~\n/tmp/tmpym5ee308.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpym5ee308.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpym5ee308.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for(auto i : input_list) {\n        if(i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpl39jmya6.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpl39jmya6.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpl39jmya6.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl39jmya6.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpl39jmya6.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl39jmya6.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpl39jmya6.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpl39jmya6.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl39jmya6.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list: input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmppvblj7al.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmppvblj7al.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmppvblj7al.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppvblj7al.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmppvblj7al.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppvblj7al.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmppvblj7al.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmppvblj7al.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppvblj7al.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmp6zrvw0v4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp6zrvw0v4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for(auto list : input_list) {\n        if(list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpougn27xl.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpougn27xl.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpougn27xl.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpougn27xl.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpougn27xl.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpougn27xl.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpougn27xl.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_length_list;\n      |              ^~~~~~~~~~~~~~~\n/tmp/tmpougn27xl.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpougn27xl.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpougn27xl.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length > 0) {\n        result = max_list;\n    } else {\n        result = -1;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpn_aofn01.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpn_aofn01.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpn_aofn01.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn_aofn01.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpn_aofn01.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn_aofn01.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpn_aofn01.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |         result = max_list;\n      |                  ^~~~~~~~\n/tmp/tmpn_aofn01.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn_aofn01.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpn_aofn01.cpp:28:19: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpofdzf2_7.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpofdzf2_7.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpofdzf2_7.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpofdzf2_7.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpofdzf2_7.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpofdzf2_7.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpofdzf2_7.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpofdzf2_7.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpofdzf2_7.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_list = list;\n            max_length = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpx_fp73g2.cpp:2:\n/tmp/tmpx_fp73g2.cpp: In function \u2018int main()\u2019:\n/tmp/tmpx_fp73g2.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    if (input_list.size() == 0) {\n        return Union_long_std_vector_long_(-1);\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_length_list);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp98qyzf2u.cpp:2:\n/tmp/tmp98qyzf2u.cpp: In function \u2018int main()\u2019:\n/tmp/tmp98qyzf2u.cpp:31:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   31 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result = 0;\n    } else {\n        result = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmp1gxnoytm.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1gxnoytm.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1gxnoytm.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1gxnoytm.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1gxnoytm.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1gxnoytm.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1gxnoytm.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |         result = 0;\n      |                  ^\n/tmp/tmp1gxnoytm.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1gxnoytm.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1gxnoytm.cpp:28:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpekw8msrn.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpekw8msrn.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpekw8msrn.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpekw8msrn.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpekw8msrn.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpekw8msrn.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpekw8msrn.cpp:17:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   17 |     result = 0;\n      |              ^\n/tmp/tmpekw8msrn.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpekw8msrn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpekw8msrn.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_lon",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for(auto i : input_list) {\n        if(i.size() > max_length) {\n            max_length = i.size();\n            max_length_list = i;\n        }\n    }\n    if(max_length == 0) {\n        result.f0 = -1;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmp5byk0fr9.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp5byk0fr9.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp5byk0fr9.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5byk0fr9.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp5byk0fr9.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5byk0fr9.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp5byk0fr9.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp5byk0fr9.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5byk0fr9.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmp7cqr2duy.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp7cqr2duy.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp7cqr2duy.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7cqr2duy.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7cqr2duy.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7cqr2duy.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7cqr2duy.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp7cqr2duy.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7cqr2duy.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp7cqr2duy.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    if (input_list.size() == 0) {\n        return 0;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp5b7x3er1.cpp:2:\n/tmp/tmp5b7x3er1.cpp: In function \u2018int main()\u2019:\n/tmp/tmp5b7x3er1.cpp:31:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   31 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_list = list;\n            max_len = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_sr_1mxc.cpp:2:\n/tmp/tmp_sr_1mxc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_sr_1mxc.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_list = list;\n            max_len = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_sr_1mxc.cpp:2:\n/tmp/tmp_sr_1mxc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_sr_1mxc.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_list = list;\n            max_len = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_sr_1mxc.cpp:2:\n/tmp/tmp_sr_1mxc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_sr_1mxc.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpym5ee308.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpym5ee308.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpym5ee308.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpym5ee308.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpym5ee308.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpym5ee308.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpym5ee308.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_length_list;\n      |              ^~~~~~~~~~~~~~~\n/tmp/tmpym5ee308.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpym5ee308.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpym5ee308.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpa_t7g5ey.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpa_t7g5ey.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpa_t7g5ey.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa_t7g5ey.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa_t7g5ey.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpa_t7g5ey.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmp6zrvw0v4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp6zrvw0v4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    result = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmp8s3otwqs.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp8s3otwqs.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp8s3otwqs.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8s3otwqs.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp8s3otwqs.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8s3otwqs.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp8s3otwqs.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp8s3otwqs.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8s3otwqs.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp8s3otwqs.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result = 0;\n    } else {\n        result = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmpgexrv1bv.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpgexrv1bv.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpgexrv1bv.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgexrv1bv.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpgexrv1bv.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgexrv1bv.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpgexrv1bv.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |         result = 0;\n      |                  ^\n/tmp/tmpgexrv1bv.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgexrv1bv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpgexrv1bv.cpp:28:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpofl12opu.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpofl12opu.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpofl12opu.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpofl12opu.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpofl12opu.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpofl12opu.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpofl12opu.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpofl12opu.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpofl12opu.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpofl12opu.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpa_t7g5ey.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpa_t7g5ey.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpa_t7g5ey.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa_t7g5ey.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa_t7g5ey.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpa_t7g5ey.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n    } else {\n        result = input_list[0];\n        for (int i = 0; i < input_list.size(); i++) {\n            if (input_list[i].size() > result.f1.size()) {\n                result = input_list[i];\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmpv3vy2dqi.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpv3vy2dqi.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpv3vy2dqi.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv3vy2dqi.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpv3vy2dqi.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv3vy2dqi.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpv3vy2dqi.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpv3vy2dqi.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv3vy2dqi.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpv3vy2dqi.cpp:20:30: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_list = list;\n            max_len = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_sr_1mxc.cpp:2:\n/tmp/tmp_sr_1mxc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_sr_1mxc.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpym5ee308.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpym5ee308.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpym5ee308.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpym5ee308.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpym5ee308.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpym5ee308.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpym5ee308.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_length_list;\n      |              ^~~~~~~~~~~~~~~\n/tmp/tmpym5ee308.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpym5ee308.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpym5ee308.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmp6zrvw0v4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp6zrvw0v4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmp4uwwz24y.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp4uwwz24y.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp4uwwz24y.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4uwwz24y.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp4uwwz24y.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4uwwz24y.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp4uwwz24y.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_list;\n      |              ^~~~~~~~\n/tmp/tmp4uwwz24y.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4uwwz24y.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp4uwwz24y.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(c",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    if (input_list.size() == 0) {\n        return 0;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp5b7x3er1.cpp:2:\n/tmp/tmp5b7x3er1.cpp: In function \u2018int main()\u2019:\n/tmp/tmp5b7x3er1.cpp:31:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   31 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmp6zrvw0v4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp6zrvw0v4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    Union_long_std_vector_long_ max_length = 0;\n    for (const std::vector<long>& list : input_list) {\n        if (list.size() > max_length.f0)\n            max_length = list;\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmpxux5mcro.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpxux5mcro.cpp:20:26: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   20 |             max_length = list;\n      |                          ^~~~\n/tmp/tmpxux5mcro.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxux5mcro.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpxux5mcro.cpp:22:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   22 |     return max_length;\n      |            ^~~~~~~~~~\n/tmp/tmpxux5mcro.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxux5mcro.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-sky",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            result = list;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmpygq02usg.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpygq02usg.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpygq02usg.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpygq02usg.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpygq02usg.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpygq02usg.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpygq02usg.cpp:21:22: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   21 |             result = list;\n      |                      ^~~~\n/tmp/tmpygq02usg.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpygq02usg.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpygq02usg.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result = input_list[0];\n    for (auto i : input_list) {\n        if (i.size() > result.f1.size()) {\n            result.f1 = i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmp8mwl9azv.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp8mwl9azv.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp8mwl9azv.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8mwl9azv.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp8mwl9azv.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8mwl9azv.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp8mwl9azv.cpp:17:26: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   17 |     result = input_list[0];\n      |                          ^\n/tmp/tmp8mwl9azv.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8mwl9azv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp8mwl9azv.cpp:23:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vect",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpqiovpwxi.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpqiovpwxi.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpqiovpwxi.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqiovpwxi.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpqiovpwxi.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqiovpwxi.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpqiovpwxi.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpqiovpwxi.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqiovpwxi.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpqiovpwxi.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmp6zrvw0v4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp6zrvw0v4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = -1;\n    for (auto i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f0) {\n            result.f1 = input_list[i];\n            result.f0 = input_list[i].size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmp3hcjg8tb.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp3hcjg8tb.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp3hcjg8tb.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3hcjg8tb.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp3hcjg8tb.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3hcjg8tb.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp3hcjg8tb.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmp3hcjg8tb.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3hcjg8tb.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = -1;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmpwb3jo33b.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpwb3jo33b.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpwb3jo33b.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwb3jo33b.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpwb3jo33b.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwb3jo33b.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpwb3jo33b.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpwb3jo33b.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwb3jo33b.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmpukqtmbcv.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpukqtmbcv.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpukqtmbcv.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpukqtmbcv.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpukqtmbcv.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpukqtmbcv.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpukqtmbcv.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpukqtmbcv.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpukqtmbcv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpukqtmbcv.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_list);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpg0cb5t51.cpp:2:\n/tmp/tmpg0cb5t51.cpp: In function \u2018int main()\u2019:\n/tmp/tmpg0cb5t51.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp5i19mde3.cpp:2:\n/tmp/tmp5i19mde3.cpp: In function \u2018int main()\u2019:\n/tmp/tmp5i19mde3.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_list);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpg0cb5t51.cpp:2:\n/tmp/tmpg0cb5t51.cpp: In function \u2018int main()\u2019:\n/tmp/tmpg0cb5t51.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n    } else {\n        result = input_list[0];\n        for (int i = 1; i < input_list.size(); i++) {\n            if (input_list[i].size() > result.f1.size()) {\n                result = input_list[i];\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmpl5qef2kx.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpl5qef2kx.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpl5qef2kx.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl5qef2kx.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpl5qef2kx.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl5qef2kx.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpl5qef2kx.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpl5qef2kx.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl5qef2kx.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpl5qef2kx.cpp:20:30: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for(auto i : input_list){\n        if(i.size() > result.f0){\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpvy760fod.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpvy760fod.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpvy760fod.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvy760fod.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpvy760fod.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvy760fod.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpvy760fod.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpvy760fod.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvy760fod.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_len_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_len = list.size();\n            max_len_list = list;\n        }\n    }\n    return max_len_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7bkd0x2u.cpp:2:\n/tmp/tmp7bkd0x2u.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7bkd0x2u.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result.f1 = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmpjyn3hmrh.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpjyn3hmrh.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpjyn3hmrh.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjyn3hmrh.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjyn3hmrh.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjyn3hmrh.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjyn3hmrh.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmpjyn3hmrh.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjyn3hmrh.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpjyn3hmrh.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    Union_long_std_vector_long_ max_length_list = 0;\n    for (const std::vector<long>& list : input_list) {\n        if (list.size() > max_length_list.f1.size()) {\n            max_length_list.f1 = list;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmppafstpr3.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmppafstpr3.cpp:23:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   23 |     return max_length_list;\n      |            ^~~~~~~~~~~~~~~\n/tmp/tmppafstpr3.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppafstpr3.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmppafstpr3.cpp:2:\n/tmp/tmppafstpr3.cpp: In function \u2018int main()\u2019:\n/tmp/tmppafstpr3.cpp:27:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   27 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp5i19mde3.cpp:2:\n/tmp/tmp5i19mde3.cpp: In function \u2018int main()\u2019:\n/tmp/tmp5i19mde3.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpa_t7g5ey.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpa_t7g5ey.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpa_t7g5ey.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa_t7g5ey.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa_t7g5ey.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpa_t7g5ey.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (result.f0 < i.size()) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmph6iqkgz0.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmph6iqkgz0.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmph6iqkgz0.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph6iqkgz0.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmph6iqkgz0.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph6iqkgz0.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmph6iqkgz0.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmph6iqkgz0.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph6iqkgz0.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmps777xonk.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmps777xonk.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmps777xonk.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmps777xonk.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmps777xonk.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmps777xonk.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmps777xonk.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmps777xonk.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmps777xonk.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmps777xonk.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_list = input_list[0];\n    for(int i = 1; i < input_list.size(); i++) {\n        if(input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpqyu6ct98.cpp:2:\n/tmp/tmpqyu6ct98.cpp: In function \u2018int main()\u2019:\n/tmp/tmpqyu6ct98.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto &elem : input_list) {\n        if (elem.size() > result.f0) {\n            result.f1 = elem;\n            result.f0 = elem.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpch69f8s3.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpch69f8s3.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpch69f8s3.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpch69f8s3.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpch69f8s3.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpch69f8s3.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpch69f8s3.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpch69f8s3.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpch69f8s3.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_list = list;\n            max_len = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_sr_1mxc.cpp:2:\n/tmp/tmp_sr_1mxc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_sr_1mxc.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpofl12opu.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpofl12opu.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpofl12opu.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpofl12opu.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpofl12opu.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpofl12opu.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpofl12opu.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpofl12opu.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpofl12opu.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpofl12opu.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    for (auto i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            result.f1 = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmp62wephew.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp62wephew.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp62wephew.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp62wephew.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp62wephew.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp62wephew.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp62wephew.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmp62wephew.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp62wephew.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result = 0;\n    } else {\n        result = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmpgexrv1bv.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpgexrv1bv.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpgexrv1bv.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgexrv1bv.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpgexrv1bv.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgexrv1bv.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpgexrv1bv.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |         result = 0;\n      |                  ^\n/tmp/tmpgexrv1bv.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgexrv1bv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpgexrv1bv.cpp:28:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_length_list;\n    int max_length = 0;\n    for(int i = 0; i < input_list.size(); i++) {\n        if(input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmpykckpeuy.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpykckpeuy.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpykckpeuy.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpykckpeuy.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpykckpeuy.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpykckpeuy.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpykckpeuy.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_length_list;\n      |              ^~~~~~~~~~~~~~~\n/tmp/tmpykckpeuy.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpykckpeuy.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpykckpeuy.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto &x : input_list) {\n        if (x.size() > result.f0) {\n            result.f1 = x;\n            result.f0 = x.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmpw9fwj468.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpw9fwj468.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpw9fwj468.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw9fwj468.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpw9fwj468.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw9fwj468.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpw9fwj468.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpw9fwj468.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw9fwj468.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto &i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_length_list = i;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmpa0wb5qt7.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpa0wb5qt7.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpa0wb5qt7.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa0wb5qt7.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa0wb5qt7.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa0wb5qt7.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa0wb5qt7.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpa0wb5qt7.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa0wb5qt7.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (max_list.size() < input_list[i].size()) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmpvemetjus.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpvemetjus.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpvemetjus.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvemetjus.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpvemetjus.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvemetjus.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpvemetjus.cpp:23:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   23 |     result = max_list;\n      |              ^~~~~~~~\n/tmp/tmpvemetjus.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvemetjus.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvemetjus.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(c",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_list = list;\n            max_len = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_sr_1mxc.cpp:2:\n/tmp/tmp_sr_1mxc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_sr_1mxc.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.empty()) {\n        result = -1;\n        return result;\n    }\n    int max_length = 0;\n    std::vector<long> max_length_list;\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmpa6y6j8r_.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpa6y6j8r_.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpa6y6j8r_.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa6y6j8r_.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa6y6j8r_.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa6y6j8r_.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa6y6j8r_.cpp:18:19: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = -1;\n      |                   ^\n/tmp/tmpa6y6j8r_.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa6y6j8r_.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpa6y6j8r_.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmp6zrvw0v4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp6zrvw0v4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    // Implement max_length_list function.\n    int max_len = 0;\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_len) {\n            max_len = input_list[i].size();\n            result.f1 = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmpqexbp8un.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpqexbp8un.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpqexbp8un.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqexbp8un.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpqexbp8un.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqexbp8un.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpqexbp8un.cpp:25:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   25 |     return result;\n      |            ^~~~~~\n/tmp/tmpqexbp8un.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqexbp8un.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    Union_long_std_vector_long_ max_length = 0;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_length.f0)\n            max_length.f1 = list;\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmpfzj_yx04.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpfzj_yx04.cpp:22:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   22 |     return max_length;\n      |            ^~~~~~~~~~\n/tmp/tmpfzj_yx04.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfzj_yx04.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpfzj_yx04.cpp:2:\n/tmp/tmpfzj_yx04.cpp: In function \u2018int main()\u2019:\n/tmp/tmpfzj_yx04.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result = 0;\n    } else {\n        result = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmp1gxnoytm.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1gxnoytm.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1gxnoytm.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1gxnoytm.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1gxnoytm.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1gxnoytm.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1gxnoytm.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |         result = 0;\n      |                  ^\n/tmp/tmp1gxnoytm.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1gxnoytm.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1gxnoytm.cpp:28:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    assert(input_list.size() > 0);\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpyeq43n0r.cpp:2:\n/tmp/tmpyeq43n0r.cpp: In function \u2018int main()\u2019:\n/tmp/tmpyeq43n0r.cpp:27:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   27 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace \"pass\" with your implementation\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsgp2wdkf.cpp:2:\n/tmp/tmpsgp2wdkf.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsgp2wdkf.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    if (input_list.size() == 0) {\n        return 0;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp45l6ujbv.cpp:2:\n/tmp/tmp45l6ujbv.cpp: In function \u2018int main()\u2019:\n/tmp/tmp45l6ujbv.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    result = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "/tmp/tmp8s3otwqs.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp8s3otwqs.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp8s3otwqs.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8s3otwqs.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp8s3otwqs.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8s3otwqs.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp8s3otwqs.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp8s3otwqs.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8s3otwqs.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp8s3otwqs.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_list = list;\n            max_len = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_sr_1mxc.cpp:2:\n/tmp/tmp_sr_1mxc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_sr_1mxc.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    long max_length_index = 0;\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_index = i;\n        }\n    }\n    result = input_list[max_length_index];\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmp3xnn4f7b.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp3xnn4f7b.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp3xnn4f7b.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3xnn4f7b.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp3xnn4f7b.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3xnn4f7b.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp3xnn4f7b.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp3xnn4f7b.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3xnn4f7b.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp3xnn4f7b.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpb1d6uv8z.cpp:2:\n/tmp/tmpb1d6uv8z.cpp: In function \u2018int main()\u2019:\n/tmp/tmpb1d6uv8z.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpym5ee308.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpym5ee308.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpym5ee308.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpym5ee308.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpym5ee308.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpym5ee308.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpym5ee308.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_length_list;\n      |              ^~~~~~~~~~~~~~~\n/tmp/tmpym5ee308.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpym5ee308.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpym5ee308.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_list.size()) {\n            max_length_list = input_list[i];\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpb5hr7a3e.cpp:2:\n/tmp/tmpb5hr7a3e.cpp: In function \u2018int main()\u2019:\n/tmp/tmpb5hr7a3e.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmp1uhljuef.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1uhljuef.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1uhljuef.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1uhljuef.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1uhljuef.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1uhljuef.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1uhljuef.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp1uhljuef.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1uhljuef.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1uhljuef.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_list = list;\n            max_len = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_sr_1mxc.cpp:2:\n/tmp/tmp_sr_1mxc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_sr_1mxc.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list = input_list[0];\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result.f1 = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmpew43_9f9.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpew43_9f9.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpew43_9f9.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpew43_9f9.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpew43_9f9.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpew43_9f9.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpew43_9f9.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpew43_9f9.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpew43_9f9.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpqiovpwxi.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpqiovpwxi.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpqiovpwxi.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqiovpwxi.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpqiovpwxi.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqiovpwxi.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpqiovpwxi.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpqiovpwxi.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqiovpwxi.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpqiovpwxi.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_list;\n    for(auto& list : input_list) {\n        if(list.size() > max_list.size()) {\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpq7d2vdyd.cpp:2:\n/tmp/tmpq7d2vdyd.cpp: In function \u2018int main()\u2019:\n/tmp/tmpq7d2vdyd.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    result.f1 = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmp1l6_en60.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1l6_en60.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1l6_en60.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1l6_en60.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1l6_en60.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1l6_en60.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1l6_en60.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmp1l6_en60.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1l6_en60.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1l6_en60.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmp3ql3vzze.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp3ql3vzze.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp3ql3vzze.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3ql3vzze.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp3ql3vzze.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3ql3vzze.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp3ql3vzze.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp3ql3vzze.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3ql3vzze.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_length_list = i;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = -1;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmplg4vtp3u.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmplg4vtp3u.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmplg4vtp3u.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplg4vtp3u.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmplg4vtp3u.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplg4vtp3u.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmplg4vtp3u.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmplg4vtp3u.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplg4vtp3u.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmptd81mr0x.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmptd81mr0x.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmptd81mr0x.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptd81mr0x.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmptd81mr0x.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptd81mr0x.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmptd81mr0x.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_length_list;\n      |              ^~~~~~~~~~~~~~~\n/tmp/tmptd81mr0x.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptd81mr0x.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmptd81mr0x.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for(auto i : input_list) {\n        if(i.size() > max_length) {\n            max_length = i.size();\n            max_length_list = i;\n        }\n    }\n    if(max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpmejcwtfq.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpmejcwtfq.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpmejcwtfq.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmejcwtfq.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmejcwtfq.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmejcwtfq.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmejcwtfq.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpmejcwtfq.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmejcwtfq.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    for (auto &list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            result = list;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmpbqrlae76.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpbqrlae76.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpbqrlae76.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbqrlae76.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpbqrlae76.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbqrlae76.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpbqrlae76.cpp:21:22: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   21 |             result = list;\n      |                      ^~~~\n/tmp/tmpbqrlae76.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbqrlae76.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpbqrlae76.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result = 0;\n    } else {\n        result = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmp1gxnoytm.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1gxnoytm.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1gxnoytm.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1gxnoytm.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1gxnoytm.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1gxnoytm.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1gxnoytm.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |         result = 0;\n      |                  ^\n/tmp/tmp1gxnoytm.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1gxnoytm.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1gxnoytm.cpp:28:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmpvblbv4uo.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpvblbv4uo.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpvblbv4uo.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvblbv4uo.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpvblbv4uo.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvblbv4uo.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpvblbv4uo.cpp:23:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   23 |     result = max_list;\n      |              ^~~~~~~~\n/tmp/tmpvblbv4uo.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvblbv4uo.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvblbv4uo.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(c",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    assert(input_list.size() > 0);\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_length_list);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpteeer1h3.cpp:2:\n/tmp/tmpteeer1h3.cpp: In function \u2018int main()\u2019:\n/tmp/tmpteeer1h3.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result.f1 = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmp_3u9cp06.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp_3u9cp06.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp_3u9cp06.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_3u9cp06.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp_3u9cp06.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_3u9cp06.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp_3u9cp06.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   26 |     return result;\n      |            ^~~~~~\n/tmp/tmp_3u9cp06.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_3u9cp06.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp5i19mde3.cpp:2:\n/tmp/tmp5i19mde3.cpp: In function \u2018int main()\u2019:\n/tmp/tmp5i19mde3.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list = input_list[0];\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_list.size()) {\n            max_list = list;\n        }\n    }\n    result.f1 = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmphelkeq_9.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmphelkeq_9.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmphelkeq_9.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphelkeq_9.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmphelkeq_9.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphelkeq_9.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmphelkeq_9.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmphelkeq_9.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphelkeq_9.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpbsmhceas.cpp:2:\n/tmp/tmpbsmhceas.cpp: In function \u2018int main()\u2019:\n/tmp/tmpbsmhceas.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto &i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmpv7mdyi8m.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpv7mdyi8m.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpv7mdyi8m.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv7mdyi8m.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpv7mdyi8m.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv7mdyi8m.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpv7mdyi8m.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpv7mdyi8m.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv7mdyi8m.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmpmjf859mg.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpmjf859mg.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpmjf859mg.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmjf859mg.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmjf859mg.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmjf859mg.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmjf859mg.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpmjf859mg.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmjf859mg.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmp7ndlmo65.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp7ndlmo65.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp7ndlmo65.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ndlmo65.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ndlmo65.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ndlmo65.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ndlmo65.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp7ndlmo65.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ndlmo65.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp7ndlmo65.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpa_t7g5ey.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpa_t7g5ey.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpa_t7g5ey.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa_t7g5ey.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa_t7g5ey.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpa_t7g5ey.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmp1uhljuef.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1uhljuef.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1uhljuef.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1uhljuef.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1uhljuef.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1uhljuef.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1uhljuef.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp1uhljuef.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1uhljuef.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1uhljuef.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for(auto list : input_list) {\n        if(list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpwp12gfeg.cpp:2:\n/tmp/tmpwp12gfeg.cpp: In function \u2018int main()\u2019:\n/tmp/tmpwp12gfeg.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto &i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmp4z72lami.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp4z72lami.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp4z72lami.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4z72lami.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp4z72lami.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4z72lami.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp4z72lami.cpp:23:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   23 |     return result;\n      |            ^~~~~~\n/tmp/tmp4z72lami.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4z72lami.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    assert(input_list.size() > 0);\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpyeq43n0r.cpp:2:\n/tmp/tmpyeq43n0r.cpp: In function \u2018int main()\u2019:\n/tmp/tmpyeq43n0r.cpp:27:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   27 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpa_t7g5ey.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpa_t7g5ey.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpa_t7g5ey.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa_t7g5ey.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa_t7g5ey.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpa_t7g5ey.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpeyk5y29p.cpp:2:\n/tmp/tmpeyk5y29p.cpp: In function \u2018int main()\u2019:\n/tmp/tmpeyk5y29p.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f0) {\n            result.f1 = input_list[i];\n            result.f0 = input_list[i].size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmpxpuwqpz1.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpxpuwqpz1.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpxpuwqpz1.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxpuwqpz1.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpxpuwqpz1.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxpuwqpz1.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpxpuwqpz1.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpxpuwqpz1.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxpuwqpz1.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto &i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmpv7mdyi8m.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpv7mdyi8m.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpv7mdyi8m.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv7mdyi8m.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpv7mdyi8m.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv7mdyi8m.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpv7mdyi8m.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpv7mdyi8m.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv7mdyi8m.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpbsmhceas.cpp:2:\n/tmp/tmpbsmhceas.cpp: In function \u2018int main()\u2019:\n/tmp/tmpbsmhceas.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        return -1;\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpzruu834q.cpp:2:\n/tmp/tmpzruu834q.cpp: In function \u2018int main()\u2019:\n/tmp/tmpzruu834q.cpp:31:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   31 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    result.f1 = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmp1l6_en60.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1l6_en60.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1l6_en60.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1l6_en60.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1l6_en60.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1l6_en60.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1l6_en60.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmp1l6_en60.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1l6_en60.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1l6_en60.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    if (input_list.size() == 0) {\n        return Union_long_std_vector_long_(-1);\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_length_list);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp98qyzf2u.cpp:2:\n/tmp/tmp98qyzf2u.cpp: In function \u2018int main()\u2019:\n/tmp/tmp98qyzf2u.cpp:31:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   31 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = -1;\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f0) {\n            result.f1 = input_list[i];\n            result.f0 = input_list[i].size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmp364_l4k5.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp364_l4k5.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp364_l4k5.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp364_l4k5.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp364_l4k5.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp364_l4k5.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp364_l4k5.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmp364_l4k5.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp364_l4k5.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    result.f1 = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmp8bqp89el.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp8bqp89el.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp8bqp89el.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8bqp89el.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp8bqp89el.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8bqp89el.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp8bqp89el.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmp8bqp89el.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8bqp89el.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp8bqp89el.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmp1uhljuef.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1uhljuef.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1uhljuef.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1uhljuef.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1uhljuef.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1uhljuef.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1uhljuef.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp1uhljuef.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1uhljuef.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1uhljuef.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpbsmhceas.cpp:2:\n/tmp/tmpbsmhceas.cpp: In function \u2018int main()\u2019:\n/tmp/tmpbsmhceas.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmp6zrvw0v4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp6zrvw0v4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_len_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_len = list.size();\n            max_len_list = list;\n        }\n    }\n    return max_len_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7bkd0x2u.cpp:2:\n/tmp/tmp7bkd0x2u.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7bkd0x2u.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmpwpa0h5z8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpwpa0h5z8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpwpa0h5z8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwpa0h5z8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpwpa0h5z8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwpa0h5z8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpwpa0h5z8.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpwpa0h5z8.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwpa0h5z8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpa_t7g5ey.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpa_t7g5ey.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpa_t7g5ey.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa_t7g5ey.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa_t7g5ey.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpa_t7g5ey.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_list = list;\n            max_len = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_sr_1mxc.cpp:2:\n/tmp/tmp_sr_1mxc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_sr_1mxc.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_list = list;\n            max_len = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_sr_1mxc.cpp:2:\n/tmp/tmp_sr_1mxc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_sr_1mxc.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n    } else {\n        std::vector<long> max_list = input_list[0];\n        for (int i = 1; i < input_list.size(); i++) {\n            if (input_list[i].size() > max_list.size()) {\n                max_list = input_list[i];\n            }\n        }\n        result = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmphtlunavn.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmphtlunavn.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmphtlunavn.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphtlunavn.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmphtlunavn.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphtlunavn.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmphtlunavn.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmphtlunavn.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphtlunavn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmphtlunavn.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpofdzf2_7.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpofdzf2_7.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpofdzf2_7.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpofdzf2_7.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpofdzf2_7.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpofdzf2_7.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpofdzf2_7.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpofdzf2_7.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpofdzf2_7.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_list = list;\n            max_len = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_sr_1mxc.cpp:2:\n/tmp/tmp_sr_1mxc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_sr_1mxc.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpa_t7g5ey.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpa_t7g5ey.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpa_t7g5ey.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa_t7g5ey.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpa_t7g5ey.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpa_t7g5ey.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa_t7g5ey.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpbsmhceas.cpp:2:\n/tmp/tmpbsmhceas.cpp: In function \u2018int main()\u2019:\n/tmp/tmpbsmhceas.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_len = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpt729xyr7.cpp:2:\n/tmp/tmpt729xyr7.cpp: In function \u2018int main()\u2019:\n/tmp/tmpt729xyr7.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto &list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmp0d_5m_zv.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp0d_5m_zv.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp0d_5m_zv.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0d_5m_zv.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp0d_5m_zv.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0d_5m_zv.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp0d_5m_zv.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp0d_5m_zv.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0d_5m_zv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_list = list;\n            max_len = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_sr_1mxc.cpp:2:\n/tmp/tmp_sr_1mxc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_sr_1mxc.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto &i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmpv7mdyi8m.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpv7mdyi8m.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpv7mdyi8m.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv7mdyi8m.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpv7mdyi8m.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv7mdyi8m.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpv7mdyi8m.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpv7mdyi8m.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv7mdyi8m.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    Union_long_std_vector_long_ max_length = 0;\n    for (size_t i = 0; i < input_list.size(); i++) {\n        if (max_length.f1.size() < input_list[i].size()) {\n            max_length.f1 = input_list[i];\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmp04h08p8c.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp04h08p8c.cpp:23:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   23 |     return max_length;\n      |            ^~~~~~~~~~\n/tmp/tmp04h08p8c.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp04h08p8c.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp04h08p8c.cpp:2:\n/tmp/tmp04h08p8c.cpp: In function \u2018int main()\u2019:\n/tmp/tmp04h08p8c.cpp:27:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   27 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_len_list;\n    for (size_t i = 0; i < input_list.size(); i++) {\n        if (max_len < input_list[i].size()) {\n            max_len = input_list[i].size();\n            max_len_list = input_list[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_len_list);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp4n9jn8_4.cpp:2:\n/tmp/tmp4n9jn8_4.cpp: In function \u2018int main()\u2019:\n/tmp/tmp4n9jn8_4.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "/tmp/tmp1uhljuef.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1uhljuef.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1uhljuef.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1uhljuef.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1uhljuef.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1uhljuef.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1uhljuef.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp1uhljuef.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1uhljuef.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1uhljuef.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    int max_length = 0;\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n        }\n    }\n    std::vector<long> max_length_list;\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() == max_length) {\n            max_length_list.push_back(i);\n        }\n    }\n    result.f1 = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmphsp9d6kw.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmphsp9d6kw.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmphsp9d6kw.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphsp9d6kw.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmphsp9d6kw.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphsp9d6kw.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmphsp9d6kw.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmphsp9d6kw.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphsp9d6kw.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmphsp9d6kw.cpp:34:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   34 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            result.f1 = list;\n            max_length = list.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmphcj0e55a.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmphcj0e55a.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmphcj0e55a.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphcj0e55a.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmphcj0e55a.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphcj0e55a.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmphcj0e55a.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmphcj0e55a.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphcj0e55a.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto &list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmp3xwtbteq.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp3xwtbteq.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp3xwtbteq.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3xwtbteq.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp3xwtbteq.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3xwtbteq.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp3xwtbteq.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_length_list;\n      |              ^~~~~~~~~~~~~~~\n/tmp/tmp3xwtbteq.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3xwtbteq.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp3xwtbteq.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if ((input_list.size() == 0)) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if ((input_list[i].size() > max_list.size())) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmp49i0m8j2.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp49i0m8j2.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp49i0m8j2.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp49i0m8j2.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp49i0m8j2.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp49i0m8j2.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp49i0m8j2.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp49i0m8j2.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp49i0m8j2.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp49i0m8j2.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n    } else {\n        std::vector<long> max_list = input_list[0];\n        for (int i = 1; i < input_list.size(); i++) {\n            if (input_list[i].size() > max_list.size()) {\n                max_list = input_list[i];\n            }\n        }\n        result = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmphtlunavn.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmphtlunavn.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmphtlunavn.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphtlunavn.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmphtlunavn.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphtlunavn.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmphtlunavn.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmphtlunavn.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphtlunavn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmphtlunavn.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result = -1;\n    for (auto i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > result) {\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmpd3_0eb_8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpd3_0eb_8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpd3_0eb_8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd3_0eb_8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpd3_0eb_8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd3_0eb_8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpd3_0eb_8.cpp:17:15: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   17 |     result = -1;\n      |               ^\n/tmp/tmpd3_0eb_8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd3_0eb_8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpd3_0eb_8.cpp:19:34: error: no match for \u2018operator>\u2019 (operand types are \u2018std::vector<long int>::size_type\u2019 {aka \u2018lo",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_list = list;\n            max_len = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_sr_1mxc.cpp:2:\n/tmp/tmp_sr_1mxc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_sr_1mxc.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmp6zrvw0v4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp6zrvw0v4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6zrvw0v4.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp6zrvw0v4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zrvw0v4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmpwpa0h5z8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpwpa0h5z8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpwpa0h5z8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwpa0h5z8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpwpa0h5z8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwpa0h5z8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpwpa0h5z8.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpwpa0h5z8.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwpa0h5z8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpeyk5y29p.cpp:2:\n/tmp/tmpeyk5y29p.cpp: In function \u2018int main()\u2019:\n/tmp/tmpeyk5y29p.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = -1;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmpfmb94uwz.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpfmb94uwz.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpfmb94uwz.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfmb94uwz.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpfmb94uwz.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfmb94uwz.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpfmb94uwz.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpfmb94uwz.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfmb94uwz.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    result.f1 = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmp8bqp89el.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp8bqp89el.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp8bqp89el.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8bqp89el.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp8bqp89el.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8bqp89el.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp8bqp89el.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmp8bqp89el.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8bqp89el.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp8bqp89el.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_len) {\n            max_list = list;\n            max_len = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_sr_1mxc.cpp:2:\n/tmp/tmp_sr_1mxc.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_sr_1mxc.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510038,
      "stdout": "",
      "stderr": "/tmp/tmpm06tokb4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpm06tokb4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpm06tokb4.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpm06tokb4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm06tokb4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = -1;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "/tmp/tmpw14_o9ms.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpw14_o9ms.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpw14_o9ms.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw14_o9ms.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpw14_o9ms.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw14_o9ms.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpw14_o9ms.cpp:18:19: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = -1;\n      |                   ^\n/tmp/tmpw14_o9ms.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw14_o9ms.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpw14_o9ms.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const",
      "exit_code": -1,
      "status": "SyntaxError"
    }
  ]
}