{
  "name": "mbpp_409_min_product_tuple",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the minimum product from the pairs of tuples within a given list.\nlong min_product_tuple(std::vector<long> list1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = min_product_tuple;\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(2, 7), (std::tuple<long, long>)std::make_tuple(2, 6), (std::tuple<long, long>)std::make_tuple(1, 8), (std::tuple<long, long>)std::make_tuple(4, 9)}))) == (8));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(10, 20), (std::tuple<long, long>)std::make_tuple(15, 2), (std::tuple<long, long>)std::make_tuple(5, 10)}))) == (30));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(11, 44), (std::tuple<long, long>)std::make_tuple(10, 15), (std::tuple<long, long>)std::make_tuple(20, 5), (std::tuple<long, long>)std::make_tuple(12, 9)}))) == (100));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::sort(list1.begin(), list1.end());\n    long min_product = list1[0] * list1[1];\n    for (int i = 2; i < list1.size(); i++) {\n        min_product = std::min(min_product, list1[i] * list1[i-1]);\n    }\n    return min_product;",
    "    std::sort(list1.begin(), list1.end());\n    long min_product = list1[0] * list1[1];\n    for (int i = 1; i < list1.size() - 1; i++) {\n        long product = list1[i] * list1[i + 1];\n        if (product < min_product) {\n            min_product = product;\n        }\n    }\n    return min_product;",
    "    long min_product = 0;\n    std::sort(list1.begin(), list1.end());\n    min_product = list1[0] * list1[1];\n    return min_product;",
    "    std::vector<long> list2;\n    std::vector<long> list3;\n    std::vector<long> list4;\n    std::vector<long> list5;\n    std::vector<long> list6;\n    std::vector<long> list7;\n    std::vector<long> list8;\n    std::vector<long> list9;\n    std::vector<long> list10;\n    std::vector<long> list11;\n    std::vector<long> list12;\n    std::vector<long> list13;\n    std::vector<long> list14;\n    std::vector<long> list15;\n    std::vector<long> list16;\n    std::vector<long> list17;\n    std::vector<long> list18;\n    std::vector<long> list19;\n    std::vector<long> list20;\n    std::vector<long> list21;\n    std::vector<long> list22;\n    std::vector<long> list23;\n    std::vector<long> list24;\n    std::vector<long> list25;\n    std::vector<long> list26;\n    std::vector<long> list27;\n    std::vector<long> list28;\n    std::vector<long> list29;\n    std::vector<long> list30;\n    std::vector<long> list31;\n    std::vector<long> list32;\n    std::vector<long> list33;\n    std::vector<long> list34;\n    std::vector<long> list35;\n    std::vector<long> list36;\n    std::vector<long> list37;\n    std::vector<long> list38;\n    std::vector<long> list39;\n    std::vector<long> list40;\n    std::vector<long> list41;\n    std::vector<long> list42;\n    std::vector<long> list43;\n    std::vector<long> list44;\n    std::vector<long> list45;\n    std::vector<long> list46;\n    std::vector<long> list47;\n    std::vector<",
    "    long min_product = list1[0] * list1[1];\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            if (list1[i] * list1[j] < min_product) {\n                min_product = list1[i] * list1[j];\n            }\n        }\n    }\n    return min_product;",
    "    std::sort(list1.begin(), list1.end());\n    long min_product = list1[0] * list1[1];\n    for (int i = 2; i < list1.size(); i++) {\n        if (list1[i] * list1[i-1] < min_product) {\n            min_product = list1[i] * list1[i-1];\n        }\n    }\n    return min_product;",
    "    std::sort(list1.begin(), list1.end());\n    long min_product = list1[0] * list1[1];\n    for (int i = 0; i < list1.size() - 1; i++) {\n        if (list1[i] * list1[i + 1] < min_product) {\n            min_product = list1[i] * list1[i + 1];\n        }\n    }\n    return min_product;",
    "  long min_product = list1[0] * list1[1];\n  for (int i = 0; i < list1.size(); i++) {\n    for (int j = i + 1; j < list1.size(); j++) {\n      if (list1[i] * list1[j] < min_product) {\n        min_product = list1[i] * list1[j];\n      }\n    }\n  }\n  return min_product;",
    "    std::sort(list1.begin(), list1.end());\n    long min_product = list1[0] * list1[1];\n    for (int i = 2; i < list1.size(); i++) {\n        if (list1[i] * list1[i-1] < min_product) {\n            min_product = list1[i] * list1[i-1];\n        }\n    }\n    return min_product;",
    "    long min_product = std::numeric_limits<long>::max();\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            if (list1[i] * list1[j] < min_product) {\n                min_product = list1[i] * list1[j];\n            }\n        }\n    }\n    return min_product;",
    "    std::sort(list1.begin(), list1.end());\n    long min_product = list1[0] * list1[1];\n    for (int i = 2; i < list1.size(); i++) {\n        if (list1[i] * list1[i - 1] < min_product) {\n            min_product = list1[i] * list1[i - 1];\n        }\n    }\n    return min_product;",
    "    long min_product = std::numeric_limits<long>::max();\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            min_product = std::min(min_product, list1[i] * list1[j]);\n        }\n    }\n    return min_product;",
    "    long min_product = std::numeric_limits<long>::max();\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            long product = list1[i] * list1[j];\n            if (product < min_product) {\n                min_product = product;\n            }\n        }\n    }\n    return min_product;",
    "    long min_product = list1[0] * list1[1];\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            if (list1[i] * list1[j] < min_product) {\n                min_product = list1[i] * list1[j];\n            }\n        }\n    }\n    return min_product;",
    "    std::sort(list1.begin(), list1.end());\n    long min_product = list1[0] * list1[1];\n    for (int i = 1; i < list1.size() - 1; i++) {\n        long product = list1[i] * list1[i + 1];\n        if (product < min_product) {\n            min_product = product;\n        }\n    }\n    return min_product;",
    "    std::sort(list1.begin(), list1.end());\n    long min_product = list1[0] * list1[1];\n    for (int i = 0; i < list1.size() - 1; i++) {\n        long product = list1[i] * list1[i + 1];\n        if (product < min_product) {\n            min_product = product;\n        }\n    }\n    return min_product;",
    "    std::sort(list1.begin(), list1.end());\n    long min_product = list1[0] * list1[1];\n    for (int i = 1; i < list1.size() - 1; i++) {\n        long product = list1[i] * list1[i + 1];\n        if (product < min_product) {\n            min_product = product;\n        }\n    }\n    return min_product;",
    "    long min_product = std::numeric_limits<long>::max();\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            if (list1[i] * list1[j] < min_product) {\n                min_product = list1[i] * list1[j];\n            }\n        }\n    }\n    return min_product;",
    "    long min_product = 0;\n    std::sort(list1.begin(), list1.end());\n    for (int i = 0; i < list1.size(); i++) {\n        if (i == 0) {\n            min_product = list1[i] * list1[i+1];\n        }\n        else if (i == list1.size() - 1) {\n            min_product = list1[i] * list1[i-1];\n        }\n        else {\n            if (list1[i] * list1[i-1] < list1[i] * list1[i+1]) {\n                min_product = list1[i] * list1[i-1];\n            }\n            else {\n                min_product = list1[i] * list1[i+1];\n            }\n        }\n    }\n    return min_product;",
    "    std::sort(list1.begin(), list1.end());\n    long min_product = list1[0] * list1[1];\n    for (int i = 2; i < list1.size(); i++) {\n        min_product = std::min(min_product, list1[i] * list1[i - 1]);\n    }\n    return min_product;"
  ]
}