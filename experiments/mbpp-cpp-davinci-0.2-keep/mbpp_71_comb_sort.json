{
  "name": "mbpp_71_comb_sort",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> comb_sort(std::vector<long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = comb_sort;\n    assert(candidate((std::vector<long>({(long)5, (long)15, (long)37, (long)25, (long)79}))) == (std::vector<long>({(long)5, (long)15, (long)25, (long)37, (long)79})));\n    assert(candidate((std::vector<long>({(long)41, (long)32, (long)15, (long)19, (long)22}))) == (std::vector<long>({(long)15, (long)19, (long)22, (long)32, (long)41})));\n    assert(candidate((std::vector<long>({(long)99, (long)15, (long)13, (long)47}))) == (std::vector<long>({(long)13, (long)15, (long)47, (long)99})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    int gap = nums.size();\n    float shrink = 1.3;\n    bool swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = gap / shrink;\n        }\n        swapped = false;\n        int i = 0;\n        while (gap + i < nums.size()) {\n            if (nums[i] - nums[i + gap] > 0) {\n                std::swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n            ++i;\n        }\n    }\n    return nums;",
    "    int gap = nums.size();\n    float shrink = 1.3;\n    bool swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = gap / shrink;\n        }\n        swapped = false;\n        for (int i = 0; i + gap < nums.size(); i++) {\n            if (nums[i] > nums[i + gap]) {\n                std::swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;",
    "    int gap = nums.size();\n    float shrink = 1.3;\n    bool swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = gap / shrink;\n        }\n        swapped = false;\n        int i = 0;\n        while (gap + i < nums.size()) {\n            if (nums[i] - nums[i + gap] > 0) {\n                std::swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n            ++i;\n        }\n    }\n    return nums;",
    "    int gap = nums.size();\n    float shrink = 1.3;\n    bool swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = floor(gap / shrink);\n        }\n        int i = 0;\n        swapped = false;\n        while (gap + i < nums.size()) {\n            if (nums[i] - nums[i + gap] > 0) {\n                int temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;",
    "    int gap = nums.size();\n    bool swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = (gap * 10) / 13;\n        }\n        swapped = false;\n        for (int i = 0; i < nums.size() - gap; ++i) {\n            if (nums[i] > nums[i + gap]) {\n                std::swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;",
    "    int gap = nums.size();\n    float shrink = 1.3;\n    bool swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = gap / shrink;\n        }\n        swapped = false;\n        for (int i = 0; i + gap < nums.size(); i++) {\n            if (nums[i] > nums[i + gap]) {\n                std::swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;",
    "    int gap = nums.size();\n    bool swapped = true;\n    while (gap != 1 || swapped) {\n        gap = std::max(1, (int)(gap / 1.3));\n        swapped = false;\n        for (int i = 0; i < nums.size() - gap; i++) {\n            if (nums[i] > nums[i + gap]) {\n                std::swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;",
    "    int gap = nums.size();\n    float shrink = 1.3;\n    bool swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = gap / shrink;\n        }\n        swapped = false;\n        for (int i = 0; i + gap < nums.size(); i++) {\n            if (nums[i] > nums[i + gap]) {\n                std::swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;",
    "    int gap = nums.size();\n    bool swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = (int)(gap / 1.3);\n        }\n        swapped = false;\n        for (int i = 0; i + gap < nums.size(); i++) {\n            if (nums[i] > nums[i + gap]) {\n                std::swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;",
    "    int gap = nums.size();\n    bool swapped = true;\n    while(gap > 1 || swapped) {\n        if(gap > 1) {\n            gap = (gap * 10) / 13;\n        }\n        swapped = false;\n        for(int i = 0; i < nums.size() - gap; i++) {\n            if(nums[i] > nums[i + gap]) {\n                std::swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;",
    "    int gap = nums.size();\n    float shrink = 1.3;\n    bool sorted = false;\n    while (!sorted) {\n        gap = (int) (gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        int i = 0;\n        while ((gap + i) < nums.size()) {\n            if (nums[i] > nums[i + gap]) {\n                std::swap(nums[i], nums[i + gap]);\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;",
    "    int gap = nums.size();\n    float shrink = 1.3;\n    bool swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = gap / shrink;\n        }\n        swapped = false;\n        for (int i = 0; gap + i < nums.size(); i++) {\n            if (nums[i] > nums[i + gap]) {\n                std::swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;",
    "    int gap = nums.size();\n    bool swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = gap * 10 / 13;\n        }\n        swapped = false;\n        for (int i = 0; i < nums.size() - gap; i++) {\n            if (nums[i] > nums[i + gap]) {\n                std::swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;",
    "    int gap = nums.size();\n    bool swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = (int)(gap / 1.3);\n        }\n        swapped = false;\n        for (int i = 0; i + gap < nums.size(); i++) {\n            if (nums[i] > nums[i + gap]) {\n                std::swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;",
    "    long gap = nums.size();\n    float shrink = 1.3;\n    bool sorted = false;\n    while(!sorted) {\n        gap = (long) (gap/shrink);\n        if(gap <= 1) {\n            gap = 1;\n            sorted = true;\n        }\n        long i = 0;\n        while((i+gap) < nums.size()) {\n            if(nums[i] > nums[i+gap]) {\n                long temp = nums[i];\n                nums[i] = nums[i+gap];\n                nums[i+gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;",
    "    int gap = nums.size();\n    float shrink = 1.3;\n    bool swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = gap / shrink;\n        }\n        swapped = false;\n        for (int i = 0; gap + i < nums.size(); i++) {\n            if (nums[i] > nums[i + gap]) {\n                std::swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;",
    "  int gap = nums.size();\n  bool swapped = true;\n  while (gap > 1 || swapped) {\n    if (gap > 1) {\n      gap = (int)(gap / 1.3);\n    }\n    swapped = false;\n    for (int i = 0; i + gap < nums.size(); i++) {\n      if (nums[i] > nums[i + gap]) {\n        std::swap(nums[i], nums[i + gap]);\n        swapped = true;\n      }\n    }\n  }\n  return nums;",
    "    int gap = nums.size();\n    bool swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = gap * 10 / 13;\n        }\n        swapped = false;\n        for (int i = 0; i + gap < nums.size(); i++) {\n            if (nums[i] > nums[i + gap]) {\n                std::swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;",
    "    int gap = nums.size();\n    float shrink_factor = 1.3;\n    bool sorted = false;\n    while(!sorted) {\n        gap = floor(gap/shrink_factor);\n        if(gap <= 1) {\n            gap = 1;\n            sorted = true;\n        }\n        int i = 0;\n        while(i + gap < nums.size()) {\n            if(nums[i] > nums[i + gap]) {\n                std::swap(nums[i], nums[i + gap]);\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;",
    "    int gap = nums.size();\n    bool swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = (int)(gap / 1.3);\n        }\n        swapped = false;\n        for (int i = 0; i + gap < nums.size(); i++) {\n            if (nums[i] > nums[i + gap]) {\n                std::swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;"
  ]
}