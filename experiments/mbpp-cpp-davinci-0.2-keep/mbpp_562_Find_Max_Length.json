{
  "name": "mbpp_562_Find_Max_Length",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the length of the longest sublists.\nlong Find_Max_Length(std::vector<std::vector<long>> lst) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = Find_Max_Length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8})}))) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)1}), (std::vector<long>)std::vector<long>({(long)2, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)2, (long)1})}))) == (3));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7}), (std::vector<long>)std::vector<long>({(long)22, (long)23}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15}), (std::vector<long>)std::vector<long>({(long)10, (long)20, (long)30, (long)40, (long)50})}))) == (5));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long max_len = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_len) {\n            max_len = lst[i].size();\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_len = std::max(max_len, (long)lst[i].size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (auto sublist : lst) {\n        max_len = std::max(max_len, (long)sublist.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_len) {\n            max_len = lst[i].size();\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long len = lst[i].size();\n        if(len > max_len) {\n            max_len = len;\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for(auto i: lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (auto sublist : lst) {\n        max_len = std::max(max_len, (long)sublist.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_len) {\n            max_len = lst[i].size();\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_len) {\n            max_len = lst[i].size();\n        }\n    }\n    return max_len;",
    "    // Write your code here\n    long max_len = 0;\n    for(long i=0;i<lst.size();i++){\n        max_len = std::max(max_len,(long)lst[i].size());\n    }\n    return max_len;",
    "    long max = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max) {\n            max = lst[i].size();\n        }\n    }\n    return max;",
    "    // Write your code here\n    long max_length = 0;\n    for(auto i: lst)\n    {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    // Write your code here\n    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_len = std::max(max_len, (long)lst[i].size());\n    }\n    return max_len;",
    "    // Write your code here\n    long max_length = 0;\n    for(auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (auto i : lst) {\n        max_len = std::max(max_len, (long)i.size());\n    }\n    return max_len;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        max_len = std::max(max_len, (long)lst[i].size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for(auto sub_list : lst) {\n        max_length = std::max(max_length, (long)sub_list.size());\n    }\n    return max_length;",
    "    long max=0;\n    for(long i=0;i<lst.size();i++)\n    {\n        if(lst[i].size()>max)\n        {\n            max=lst[i].size();\n        }\n    }\n    return max;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sub_list : lst) {\n        max_length = std::max(max_length, (long)sub_list.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_len = std::max(max_len, (long)lst[i].size());\n    }\n    return max_len;",
    "    // Write your code here\n    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_len = std::max(max_len, (long)lst[i].size());\n    }\n    return max_len;",
    "    long max_len = 0;\n    for(auto i : lst) {\n        max_len = std::max(max_len, (long)i.size());\n    }\n    return max_len;",
    "    long max_len = 0;\n    for(auto i : lst) {\n        max_len = std::max(max_len, (long)i.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    // Write your code here\n    long max = 0;\n    for(int i=0;i<lst.size();i++)\n    {\n        if(lst[i].size()>max)\n        {\n            max = lst[i].size();\n        }\n    }\n    return max;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if(length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto l : lst) {\n        max_length = std::max(max_length, (long)l.size());\n    }\n    return max_length;",
    "    // Write your code here\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max) {\n            max = lst[i].size();\n        }\n    }\n    return max;",
    "\t// Write your code here\n\tlong max_len = 0;\n\tfor (auto it : lst) {\n\t\tmax_len = std::max(max_len, (long)it.size());\n\t}\n\treturn max_len;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_len) {\n            max_len = lst[i].size();\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    // Write your code here\n    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_len = std::max(max_len, (long)lst[i].size());\n    }\n    return max_len;",
    "    // Write your code here\n    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if(length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i=0; i<lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    // Write your code here\n    long max_length = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_len = std::max(max_len, (long)lst[i].size());\n    }\n    return max_len;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_len) {\n            max_len = lst[i].size();\n        }\n    }\n    return max_len;",
    "    // Write your code here\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max) {\n            max = lst[i].size();\n        }\n    }\n    return max;",
    "    // Write your code here\n    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++){\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    // Write your code here\n    long max_len = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        max_len = std::max(max_len, (long)lst[i].size());\n    }\n    return max_len;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_len = std::max(max_len, (long)lst[i].size());\n    }\n    return max_len;",
    "    // Write your code here\n    long max=0;\n    for(int i=0;i<lst.size();i++)\n    {\n        if(lst[i].size()>max)\n        {\n            max=lst[i].size();\n        }\n    }\n    return max;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max) {\n            max = lst[i].size();\n        }\n    }\n    return max;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sub_list : lst) {\n        max_length = std::max(max_length, (long)sub_list.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    // Write your code here\n    long max_length = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    // Write your code here\n    long max_length = 0;\n    for(long i=0; i<lst.size(); i++){\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].size() > max_len){\n            max_len = lst[i].size();\n        }\n    }\n    return max_len;",
    "    // Write your code here\n    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_len = std::max(max_len, (long)lst[i].size());\n    }\n    return max_len;",
    "    long max_len = 0;\n    for (auto sublist : lst) {\n        max_len = std::max(max_len, (long)sublist.size());\n    }\n    return max_len;",
    "\tlong max_len = 0;\n\tfor (auto i : lst) {\n\t\tmax_len = std::max(max_len, (long)i.size());\n\t}\n\treturn max_len;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long len = lst[i].size();\n        if(len > max_len) {\n            max_len = len;\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    // Write your code here\n    long max = 0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].size()>max){\n            max = lst[i].size();\n        }\n    }\n    return max;",
    "    long max_length = 0;\n    for (auto it = lst.begin(); it != lst.end(); it++) {\n        if (it->size() > max_length) {\n            max_length = it->size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(auto sublist: lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if(length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "\tlong max = 0;\n\tfor(int i=0;i<lst.size();i++)\n\t{\n\t\tif(lst[i].size()>max)\n\t\t{\n\t\t\tmax = lst[i].size();\n\t\t}\n\t}\n\treturn max;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_len) {\n            max_len = lst[i].size();\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (auto i : lst) {\n        max_len = std::max(max_len, (long)i.size());\n    }\n    return max_len;",
    "    long max_len = 0;\n    for(auto i : lst) {\n        max_len = std::max(max_len, (long)i.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        if (sublist.size() > max_length) {\n            max_length = sublist.size();\n        }\n    }\n    return max_length;",
    "    // Write your code here\n    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++){\n        if(lst[i].size() > max_length){\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_len) {\n            max_len = lst[i].size();\n        }\n    }\n    return max_len;",
    "    // Write your code here\n    long max_length = 0;\n    for(long i=0;i<lst.size();i++){\n        max_length = std::max(max_length,(long)lst[i].size());\n    }\n    return max_length;",
    "    // Write your code here\n    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if(length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        if (sublist.size() > max_length) {\n            max_length = sublist.size();\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (auto i : lst) {\n        max_len = std::max(max_len, (long)i.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(auto sublist: lst) {\n        if(sublist.size() > max_length) {\n            max_length = sublist.size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "\tlong max_length = 0;\n\tfor(auto i : lst) {\n\t\tmax_length = std::max(max_length, (long)i.size());\n\t}\n\treturn max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if(length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    // Write your code here\n    long max_len = 0;\n    for(int i=0;i<lst.size();i++){\n        max_len = std::max(max_len,(long)lst[i].size());\n    }\n    return max_len;",
    "    long max_len = 0;\n    for(long i=0; i<lst.size(); i++) {\n        if(lst[i].size() > max_len) {\n            max_len = lst[i].size();\n        }\n    }\n    return max_len;",
    "    long max_len = 0;\n    for (auto it = lst.begin(); it != lst.end(); it++) {\n        max_len = std::max(max_len, (long)it->size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if(length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    // Write your code here\n    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (auto i : lst) {\n        max_len = std::max(max_len, (long)i.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        if (sublist.size() > max_length) {\n            max_length = sublist.size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long len = lst[i].size();\n        if(len > max_len) {\n            max_len = len;\n        }\n    }\n    return max_len;",
    "    // Write your code here\n    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max = 0;\n    for (auto i : lst) {\n        if (i.size() > max) {\n            max = i.size();\n        }\n    }\n    return max;",
    "    long max_length = 0;\n    for (auto l : lst) {\n        max_length = std::max(max_length, (long)l.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        max_len = std::max(max_len, (long)lst[i].size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto it = lst.begin(); it != lst.end(); it++) {\n        if (it->size() > max_length) {\n            max_length = it->size();\n        }\n    }\n    return max_length;",
    "    // Write your code here\n    long max_length = 0;\n    for(long i=0; i<lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max) {\n            max = lst[i].size();\n        }\n    }\n    return max;",
    "    long max_len = 0;\n    for(auto i : lst) {\n        max_len = std::max(max_len, (long)i.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (std::vector<long> sublist : lst) {\n        long length = sublist.size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    // Write your code here\n    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++){\n        long length = lst[i].size();\n        if(length > max_length){\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    // Write your code here\n    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_len = std::max(max_len, (long)lst[i].size());\n    }\n    return max_len;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_len = std::max(max_len, (long)lst[i].size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    // Write your code here\n    long max = 0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].size()>max){\n            max = lst[i].size();\n        }\n    }\n    return max;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        if (sublist.size() > max_length) {\n            max_length = sublist.size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if(length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto l : lst) {\n        max_length = std::max(max_length, (long)l.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        if (sublist.size() > max_length) {\n            max_length = sublist.size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max) {\n            max = lst[i].size();\n        }\n    }\n    return max;",
    "    long max_length = 0;\n    for(auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(auto i: lst) {\n        max_len = std::max(max_len, (long)i.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_len) {\n            max_len = lst[i].size();\n        }\n    }\n    return max_len;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        max_len = std::max(max_len, (long)lst[i].size());\n    }\n    return max_len;",
    "    long max = 0;\n    for(auto i : lst) {\n        if(i.size() > max) {\n            max = i.size();\n        }\n    }\n    return max;",
    "    long max_len = 0;\n    for (auto i : lst) {\n        max_len = std::max(max_len, (long)i.size());\n    }\n    return max_len;",
    "    // Write your code here\n    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++){\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_len) {\n            max_len = lst[i].size();\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (std::vector<long> sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    // Write your code here\n    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_len = std::max(max_len, (long)lst[i].size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(auto i : lst) {\n        max_len = std::max(max_len, (long)i.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for(auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(auto sub_list : lst) {\n        max_len = std::max(max_len, (long)sub_list.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto it = lst.begin(); it != lst.end(); it++) {\n        max_length = std::max(max_length, (long)it->size());\n    }\n    return max_length;",
    "    // Write your code here\n    long max_length = 0;\n    for(auto i : lst)\n    {\n        if(i.size() > max_length)\n        {\n            max_length = i.size();\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (auto sublist : lst) {\n        max_len = std::max(max_len, (long)sublist.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    // Write your code here\n    long max = 0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].size() > max){\n            max = lst[i].size();\n        }\n    }\n    return max;",
    "    // Write your code here\n    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++)\n    {\n        if(lst[i].size() > max_length)\n        {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_len) {\n            max_len = lst[i].size();\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_len) {\n            max_len = lst[i].size();\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        max_len = std::max(max_len, (long) lst[i].size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, (long)lst[i].size());\n    }\n    return max_length;",
    "    long max = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max) {\n            max = lst[i].size();\n        }\n    }\n    return max;"
  ]
}