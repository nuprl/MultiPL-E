{
  "name": "mbpp_118_string_to_list",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> result;\n    std::stringstream ss(string);\n    std::string temp;\n    while (ss >> temp) {\n        result.push_back(temp);\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word = word + string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string temp;\n    while (ss >> temp) {\n        list.push_back(temp);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word = word + string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n  std::vector<std::string> list;\n  std::string word = \"\";\n  for (int i = 0; i < string.length(); i++) {\n    if (string[i] == ' ') {\n      list.push_back(word);\n      word = \"\";\n    } else {\n      word += string[i];\n    }\n  }\n  list.push_back(word);\n  return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n  std::vector<std::string> list;\n  std::string word = \"\";\n  for (int i = 0; i < string.length(); i++) {\n    if (string[i] == ' ') {\n      list.push_back(word);\n      word = \"\";\n    } else {\n      word += string[i];\n    }\n  }\n  list.push_back(word);\n  return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n  std::vector<std::string> list;\n  std::stringstream ss(string);\n  std::string word;\n  while (ss >> word) {\n    list.push_back(word);\n  }\n  return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> result;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        result.push_back(word);\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        }\n        else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    for (char c : string) {\n        if (c == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> result;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        result.push_back(word);\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] != ' ') {\n            word.push_back(string[i]);\n        }\n        else {\n            list.push_back(word);\n            word.clear();\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word = word + string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        }\n        else {\n            word = word + string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n  std::vector<std::string> list;\n  std::stringstream ss(string);\n  std::string word;\n  while(ss >> word) {\n    list.push_back(word);\n  }\n  return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string temp;\n    for(int i = 0; i < string.size(); i++) {\n        if(string[i] == ' ') {\n            list.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += string[i];\n        }\n    }\n    list.push_back(temp);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> result;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        result.push_back(word);\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> result;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        result.push_back(word);\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> result;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        result.push_back(word);\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word = word + string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string temp = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] != ' ') {\n            temp += string[i];\n        } else {\n            list.push_back(temp);\n            temp = \"\";\n        }\n    }\n    list.push_back(temp);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string item;\n    while(std::getline(ss, item, ' ')) {\n        list.push_back(item);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string temp;\n    for (int i = 0; i < string.size(); i++) {\n        if (string[i] != ' ') {\n            temp += string[i];\n        } else {\n            list.push_back(temp);\n            temp = \"\";\n        }\n    }\n    list.push_back(temp);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word = word + string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    for (auto c : string) {\n        if (c == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> words;\n    std::string word;\n    for (char c : string) {\n        if (c == ' ') {\n            words.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    words.push_back(word);\n    return words;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    std::istringstream iss(string);\n    while (iss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    std::stringstream stream(string);\n    while(stream >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    std::stringstream stream(string);\n    while (stream >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n  std::vector<std::string> list;\n  std::string word = \"\";\n  for (int i = 0; i < string.length(); i++) {\n    if (string[i] == ' ') {\n      list.push_back(word);\n      word = \"\";\n    } else {\n      word += string[i];\n    }\n  }\n  list.push_back(word);\n  return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.size(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        }\n        else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> words;\n    std::string word;\n    std::stringstream ss(string);\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    return words;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] != ' ') {\n            word += string[i];\n        } else {\n            list.push_back(word);\n            word = \"\";\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n  std::vector<std::string> list;\n  std::string word = \"\";\n  for (int i = 0; i < string.size(); i++) {\n    if (string[i] == ' ') {\n      list.push_back(word);\n      word = \"\";\n    } else {\n      word += string[i];\n    }\n  }\n  list.push_back(word);\n  return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n  std::vector<std::string> list;\n  std::stringstream ss(string);\n  std::string word;\n  while (ss >> word) {\n    list.push_back(word);\n  }\n  return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n  std::vector<std::string> list;\n  std::string word;\n  std::stringstream stream(string);\n  while (stream >> word) {\n    list.push_back(word);\n  }\n  return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> result;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        result.push_back(word);\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n  std::vector<std::string> list;\n  std::stringstream ss(string);\n  std::string word;\n  while (ss >> word) {\n    list.push_back(word);\n  }\n  return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n  std::vector<std::string> result;\n  std::stringstream ss(string);\n  std::string word;\n  while(ss >> word) {\n    result.push_back(word);\n  }\n  return result;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n  std::vector<std::string> list;\n  std::stringstream ss(string);\n  std::string word;\n  while (ss >> word) {\n    list.push_back(word);\n  }\n  return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n  std::vector<std::string> list;\n  std::string word;\n  std::stringstream stream(string);\n  while (stream >> word) {\n    list.push_back(word);\n  }\n  return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        }\n        else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    for (char c : string) {\n        if (c == ' ') {\n            list.push_back(word);\n            word.clear();\n        } else {\n            word += c;\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n  std::vector<std::string> list;\n  std::stringstream ss(string);\n  std::string word;\n  while (ss >> word) {\n    list.push_back(word);\n  }\n  return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] != ' ') {\n            word += string[i];\n        } else {\n            list.push_back(word);\n            word = \"\";\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] != ' ') {\n            word += string[i];\n        } else {\n            list.push_back(word);\n            word = \"\";\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        list.push_back(item);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> result;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        result.push_back(word);\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n  std::vector<std::string> list;\n  std::stringstream ss(string);\n  std::string word;\n  while(ss >> word) {\n    list.push_back(word);\n  }\n  return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    for (auto c : string) {\n        if (c == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    std::istringstream iss(string);\n    while (iss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    for (char c : string) {\n        if (c == ' ') {\n            list.push_back(word);\n            word = \"\";\n        }\n        else {\n            word += c;\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n\tstd::vector<std::string> list;\n\tstd::stringstream ss(string);\n\tstd::string word;\n\twhile (ss >> word) {\n\t\tlist.push_back(word);\n\t}\n\treturn list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    std::stringstream stream(string);\n    while (stream >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n  std::vector<std::string> list;\n  std::stringstream ss(string);\n  std::string word;\n  while (ss >> word) {\n    list.push_back(word);\n  }\n  return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n  std::vector<std::string> list;\n  std::stringstream ss(string);\n  std::string item;\n  while(std::getline(ss, item, ' ')) {\n    list.push_back(item);\n  }\n  return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string temp;\n    while (ss >> temp) {\n        list.push_back(temp);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    std::istringstream iss(string);\n    while (iss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    std::istringstream iss(string);\n    while (iss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    std::istringstream stream(string);\n    while (stream >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> result;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        result.push_back(word);\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n  std::vector<std::string> list;\n  std::string word;\n  std::istringstream iss(string);\n  while (iss >> word) {\n    list.push_back(word);\n  }\n  return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n    std::vector<std::string> list;\n    std::string word;\n    std::stringstream stream(string);\n    while (stream >> word) {\n        list.push_back(word);\n    }\n    return list;\n}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}