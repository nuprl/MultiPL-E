{
  "name": "mbpp_576_is_Sub_Array",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (A[i + j] != B[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (m > n)\n        return false;\n    for (int i = 0; i < n - m + 1; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (A[i + j] != B[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for (int i = 0; i < n - m + 1; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == m) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (m > n) {\n        return false;\n    }\n    for (int i = 0; i < n - m + 1; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if(m > n)\n        return false;\n    for(int i = 0; i <= n - m; i++) {\n        int j;\n        for(j = 0; j < m; j++) {\n            if(A[i + j] != B[j])\n                break;\n        }\n        if(j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    // assert(A.size() > 0);\n    // assert(B.size() > 0);\n    // assert(A.size() >= B.size());\n    int i = 0;\n    int j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if(n < m) return false;\n    for(int i = 0; i < n - m + 1; i++) {\n        int j;\n        for(j = 0; j < m; j++) {\n            if(A[i + j] != B[j]) break;\n        }\n        if(j == m) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == m) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if(n < m) {\n        return false;\n    }\n    for(int i = 0; i <= n - m; i++) {\n        int j;\n        for(j = 0; j < m; j++) {\n            if(A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if(j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == m) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if(A.size() > B.size()) {\n        return false;\n    }\n    for(int i = 0; i < B.size(); i++) {\n        if(B[i] == A[0]) {\n            int j = 0;\n            while(j < A.size() && B[i+j] == A[j]) {\n                j++;\n            }\n            if(j == A.size()) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    if (m < n) {\n        return false;\n    }\n    for (int i = 0; i <= m - n; i++) {\n        int j;\n        for (j = 0; j < n; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == n) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (m > n) {\n        return false;\n    }\n    for (int i = 0; i < n - m + 1; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == m) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        if (A[i] == B[j]) {\n            j++;\n        } else {\n            j = 0;\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (A[i + j] != B[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "tmpebltcv8g: /tmp/tmpebltcv8g.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if(A.size() == 0)\n        return true;\n    if(B.size() == 0)\n        return false;\n    if(A.size() > B.size())\n        return false;\n    for(int i = 0; i < B.size(); i++) {\n        if(A[0] == B[i]) {\n            int j = 0;\n            while(j < A.size() && i+j < B.size() && A[j] == B[i+j]) {\n                j++;\n            }\n            if(j == A.size())\n                return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "tmpdu2yrgj1: /tmp/tmpdu2yrgj1.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if(n == 0 && m == 0)\n        return true;\n    if(n == 0)\n        return false;\n    if(m == 0)\n        return true;\n    int i = 0;\n    int j = 0;\n    while(i < n && j < m) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if(j == m)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == m) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    int n = A.size();\n    int m = B.size();\n    while(i < n && j < m) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n\tint i = 0;\n\tint j = 0;\n\twhile (i < A.size() && j < B.size()) {\n\t\tif (A[i] == B[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (j == B.size()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if (A.size() == 0) {\n        return true;\n    }\n    if (B.size() == 0) {\n        return false;\n    }\n    if (A.size() > B.size()) {\n        return false;\n    }\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = 0;\n            j++;\n        }\n    }\n    if (i == A.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i < n - m + 1; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (B[i + j] != A[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (m > n) {\n        return false;\n    }\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == B.size())\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == m) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    int n = A.size();\n    int m = B.size();\n    while(i < n && j < m) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for(int i = 0; i <= n - m; i++) {\n        int j;\n        for(j = 0; j < m; j++) {\n            if(A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if(j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "tmpebltcv8g: /tmp/tmpebltcv8g.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if(A.size() == 0) {\n        return true;\n    }\n    if(B.size() == 0) {\n        return false;\n    }\n    if(A.size() > B.size()) {\n        return false;\n    }\n    for(int i = 0; i < B.size(); i++) {\n        if(B[i] == A[0]) {\n            int j = 0;\n            for(j = 0; j < A.size(); j++) {\n                if(B[i + j] != A[j]) {\n                    break;\n                }\n            }\n            if(j == A.size()) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (n < m) {\n        return false;\n    }\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (n > m) {\n        return false;\n    }\n    for (int i = 0; i <= m - n; i++) {\n        int j;\n        for (j = 0; j < n; j++) {\n            if (A[j] != B[i + j]) {\n                break;\n            }\n        }\n        if (j == n) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (m > n) {\n        return false;\n    }\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == m) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0, j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (n < m)\n        return false;\n    for (int i = 0; i < n - m + 1; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (A[i + j] != B[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "tmpebltcv8g: /tmp/tmpebltcv8g.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "tmpebltcv8g: /tmp/tmpebltcv8g.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if(m > n) {\n        return false;\n    }\n    for(int i = 0; i <= n - m; i++) {\n        int j;\n        for(j = 0; j < m; j++) {\n            if(A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if(j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    int n = A.size();\n    int m = B.size();\n    while(i < n && j < m) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n\tint n = A.size();\n\tint m = B.size();\n\tfor (int i = 0; i <= n - m; i++) {\n\t\tint j;\n\t\tfor (j = 0; j < m; j++) {\n\t\t\tif (A[i + j] != B[j]) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == m) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if (A.size() > B.size()) {\n        return false;\n    }\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = 0;\n            j++;\n        }\n    }\n    if (i == A.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    int n = A.size();\n    int m = B.size();\n    for(i = 0; i < n; i++) {\n        if(A[i] == B[j]) {\n            j++;\n        } else {\n            j = 0;\n        }\n        if(j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (n < m) {\n        return false;\n    }\n    for (int i = 0; i < n - m + 1; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == m) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int j = 0;\n    for (int i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i=0; i<=n-m; i++) {\n        int j;\n        for (j=0; j<m; j++) {\n            if (B[i+j] != A[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if (A.size() == 0) {\n        return true;\n    }\n    if (B.size() == 0) {\n        return false;\n    }\n    if (A.size() > B.size()) {\n        return false;\n    }\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = 0;\n            j++;\n        }\n    }\n    if (i == A.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if (A.size() > B.size()) {\n        return false;\n    }\n    for (int i = 0; i < B.size(); i++) {\n        if (A[0] == B[i]) {\n            int j = 0;\n            while (j < A.size() && A[j] == B[i + j]) {\n                j++;\n            }\n            if (j == A.size()) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (A[i + j] != B[j])\n                break;\n        if (j == m)\n            return 1;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    int n = A.size();\n    int m = B.size();\n    while(i < n && j < m) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if (A.size() == 0) {\n        return true;\n    }\n    if (B.size() == 0) {\n        return false;\n    }\n    if (A.size() > B.size()) {\n        return false;\n    }\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = 0;\n            j++;\n        }\n    }\n    if (i == A.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for (int i = 0; i < n; i++) {\n        int j = 0;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "tmpf71sei5f: /tmp/tmpf71sei5f.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    int n = A.size();\n    int m = B.size();\n    for (i = 0; i < n; i++) {\n        if (A[i] == B[j]) {\n            j++;\n        }\n        else {\n            j = 0;\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == m) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if(A.size() > B.size()) {\n        return false;\n    }\n    for(int i = 0; i < B.size(); i++) {\n        if(A[0] == B[i]) {\n            int j = 0;\n            while(j < A.size() && i < B.size() && A[j] == B[i]) {\n                j++;\n                i++;\n            }\n            if(j == A.size()) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (A[i + j] != B[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "tmpdu2yrgj1: /tmp/tmpdu2yrgj1.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    if (m > n) {\n        return false;\n    }\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[j] != B[i + j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if(m > n) {\n        return false;\n    }\n    for(int i = 0; i < n; i++) {\n        if(A[i] == B[0]) {\n            int j = 1;\n            while(j < m && A[i + j] == B[j]) {\n                j++;\n            }\n            if(j == m) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp08ytllq1: /tmp/tmp08ytllq1.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if(n < m) {\n        return false;\n    }\n    for(int i = 0; i <= n - m; i++) {\n        int j;\n        for(j = 0; j < m; j++) {\n            if(A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if(j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (n < m) {\n        return false;\n    }\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i < n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp9lu67fv_: /tmp/tmp9lu67fv_.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (m > n) {\n        return false;\n    }\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    int n = A.size();\n    int m = B.size();\n    for (i = 0; i < n; i++) {\n        if (A[i] == B[j]) {\n            j++;\n        } else {\n            j = 0;\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (m > n)\n        return false;\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (A[i + j] != B[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if (A.size() > B.size()) {\n        return false;\n    }\n    for (int i = 0; i < B.size(); i++) {\n        if (A[0] == B[i]) {\n            int j = 0;\n            while (j < A.size() && A[j] == B[i + j]) {\n                j++;\n            }\n            if (j == A.size()) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    int n = A.size();\n    int m = B.size();\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == m) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "tmpdu2yrgj1: /tmp/tmpdu2yrgj1.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i < n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (B[i + j] != A[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmpqhyxncu_: /tmp/tmpqhyxncu_.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (n < m) {\n        return false;\n    }\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    // Write your code here\n    int n = A.size();\n    int m = B.size();\n    if(m>n)\n        return false;\n    for(int i=0;i<=n-m;i++){\n        int j;\n        for(j=0;j<m;j++){\n            if(A[i+j]!=B[j])\n                break;\n        }\n        if(j==m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == m)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for(int i = 0; i < n; i++) {\n        if(A[i] == B[0]) {\n            int j = 0;\n            for(j = 0; j < m; j++) {\n                if(A[i + j] != B[j]) {\n                    break;\n                }\n            }\n            if(j == m) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmph9j8wz2n: /tmp/tmph9j8wz2n.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0, j = 0;\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == m) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if(m > n) {\n        return false;\n    }\n    for(int i = 0; i < n-m+1; i++) {\n        int j;\n        for(j = 0; j < m; j++) {\n            if(A[i+j] != B[j]) {\n                break;\n            }\n        }\n        if(j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (n < m)\n        return false;\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (A[i + j] != B[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    int n = A.size();\n    int m = B.size();\n    for (i = 0; i < n; i++) {\n        if (A[i] == B[j]) {\n            j++;\n        }\n        else {\n            j = 0;\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "tmpebltcv8g: /tmp/tmpebltcv8g.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "tmpebltcv8g: /tmp/tmpebltcv8g.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if (A.size() > B.size()) {\n        return false;\n    }\n    for (int i = 0; i < B.size(); i++) {\n        if (A[0] == B[i]) {\n            int j = 0;\n            while (j < A.size() && A[j] == B[i + j]) {\n                j++;\n            }\n            if (j == A.size()) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (A[i + j] != B[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (m > n) {\n        return false;\n    }\n    for (int i = 0; i < n - m + 1; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (B[i + j] != A[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if (A.size() > B.size()) {\n        return false;\n    }\n    for (int i = 0; i < B.size(); i++) {\n        if (A[0] == B[i]) {\n            int j = 0;\n            while (j < A.size() && A[j] == B[i + j]) {\n                j++;\n            }\n            if (j == A.size()) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if (A.size() == 0)\n        return true;\n    if (B.size() == 0)\n        return false;\n    if (A.size() > B.size())\n        return false;\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = 0;\n            j++;\n        }\n    }\n    if (i == A.size())\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "tmpdu2yrgj1: /tmp/tmpdu2yrgj1.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    int n = A.size();\n    int m = B.size();\n    for (i = 0; i < n; i++) {\n        if (A[i] == B[j]) {\n            j++;\n        } else {\n            j = 0;\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (n < m) {\n        return false;\n    }\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "tmpebltcv8g: /tmp/tmpebltcv8g.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (n < m) {\n        return false;\n    }\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (n < m) {\n        return false;\n    }\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for (int i = 0; i < n; i++) {\n        if (A[i] == B[0]) {\n            int j = 1;\n            while (j < m && A[i + j] == B[j]) {\n                j++;\n            }\n            if (j == m) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmpy4n2gaiy: /tmp/tmpy4n2gaiy.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (m > n) {\n        return false;\n    }\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (A[i + j] != B[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if(m > n) {\n        return false;\n    }\n    for(int i = 0; i < n - m + 1; i++) {\n        int j;\n        for(j = 0; j < m; j++) {\n            if(A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if(j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0, j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if(m > n) return false;\n    for(int i = 0; i < n - m + 1; i++) {\n        int j;\n        for(j = 0; j < m; j++) {\n            if(A[i + j] != B[j]) break;\n        }\n        if(j == m) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == m) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if (A.size() > B.size()) {\n        return false;\n    }\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = 0;\n            j++;\n        }\n    }\n    if (i == A.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if(m > n) return false;\n    for(int i = 0; i < n - m + 1; i++) {\n        int j;\n        for(j = 0; j < m; j++) {\n            if(A[i + j] != B[j]) break;\n        }\n        if(j == m) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if (A.size() == 0) {\n        return true;\n    }\n    if (B.size() == 0) {\n        return false;\n    }\n    if (A.size() > B.size()) {\n        return false;\n    }\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = 0;\n            j++;\n        }\n    }\n    if (i == A.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (m > n) {\n        return false;\n    }\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n\tif (A.size() == 0) {\n\t\treturn true;\n\t}\n\tif (B.size() == 0) {\n\t\treturn false;\n\t}\n\tif (A.size() > B.size()) {\n\t\treturn false;\n\t}\n\tint i = 0;\n\tint j = 0;\n\twhile (i < B.size()) {\n\t\tif (A[j] == B[i]) {\n\t\t\tj++;\n\t\t} else {\n\t\t\tj = 0;\n\t\t}\n\t\tif (j == A.size()) {\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    // Write your code here\n    int n = A.size();\n    int m = B.size();\n    if(n>m)\n        return false;\n    int i=0,j=0;\n    while(i<n && j<m){\n        if(A[i]==B[j]){\n            i++;\n            j++;\n        }\n        else{\n            i=0;\n            j++;\n        }\n    }\n    if(i==n)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++; j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    int n = A.size();\n    int m = B.size();\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == m) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if(n < m) {\n        return false;\n    }\n    for(int i = 0; i < n - m + 1; i++) {\n        int j;\n        for(j = 0; j < m; j++) {\n            if(A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if(j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if(A.size() > B.size()) {\n        return false;\n    }\n    for(int i = 0; i < B.size(); i++) {\n        if(A[0] == B[i]) {\n            int j = 0;\n            for(j = 0; j < A.size(); j++) {\n                if(A[j] != B[i + j]) {\n                    break;\n                }\n            }\n            if(j == A.size()) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for (int i = 0; i < n - m + 1; i++) {\n        int j = 0;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (m > n) {\n        return false;\n    }\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if (A.size() == 0)\n        return true;\n    if (B.size() == 0)\n        return false;\n    if (A.size() > B.size())\n        return false;\n    for (int i = 0; i < B.size(); i++) {\n        if (B[i] == A[0]) {\n            int j = 0;\n            while (j < A.size() && B[i + j] == A[j]) {\n                j++;\n            }\n            if (j == A.size())\n                return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (A[i + j] != B[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == m) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (n < m) {\n        return false;\n    }\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == m) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if (m > n) {\n        return false;\n    }\n    for (int i = 0; i < n - m + 1; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        if (A[i] == B[j]) {\n            j++;\n        } else {\n            j = 0;\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if(n < m) {\n        return false;\n    }\n    for(int i = 0; i <= n - m; i++) {\n        int j;\n        for(j = 0; j < m; j++) {\n            if(A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if(j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if (A.size() == 0) {\n        return true;\n    }\n    if (B.size() == 0) {\n        return false;\n    }\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list is sublist of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510659,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}