{
  "name": "mbpp_771_check_expression",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nbool check_expression(std::string exp) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = check_expression;\n    assert(candidate((\"{()}[{}]\")) == (true));\n    assert(candidate((\"{()}[{]\")) == (false));\n    assert(candidate((\"{()}[{}][]({})\")) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char top = s.top();\n                if(top=='(' && exp[i]==')' || top=='{' && exp[i]=='}' || top=='[' && exp[i]==']') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    return s.empty();",
    "\tstd::stack<char> s;\n\tfor(int i = 0; i < exp.length(); i++) {\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n\t\t\ts.push(exp[i]);\n\t\t} else {\n\t\t\tif(s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(exp[i] == ')' && s.top() != '(') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(exp[i] == '}' && s.top() != '{') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(exp[i] == ']' && s.top() != '[') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char top = s.top();\n                if((top == '(' && exp[i] == ')') || (top == '{' && exp[i] == '}') || (top == '[' && exp[i] == ']')) {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char top = s.top();\n            if((top == '(' && exp[i] == ')') || (top == '{' && exp[i] == '}') || (top == '[' && exp[i] == ']')) {\n                s.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    if(!s.empty()) {\n        return false;\n    }\n    return true;",
    "    std::stack<char> st;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            st.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(st.empty()) {\n                return false;\n            }\n            char ch = st.top();\n            st.pop();\n            if(ch == '(' && exp[i] != ')') {\n                return false;\n            }\n            if(ch == '{' && exp[i] != '}') {\n                return false;\n            }\n            if(ch == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if(st.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char top = s.top();\n            s.pop();\n            if(exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            } else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            } else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    } else {\n        return false;\n    }",
    "    std::stack<char> st;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            st.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(st.empty()) {\n                return false;\n            }\n            char ch = st.top();\n            st.pop();\n            if(exp[i] == ')' && ch != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && ch != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && ch != '[') {\n                return false;\n            }\n        }\n    }\n    return st.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char c = s.top();\n            s.pop();\n            if(exp[i] == ')' && c != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && c != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && c != '[') {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "\tstd::stack<char> s;\n\tfor(int i = 0; i < exp.size(); i++) {\n\t\tif(exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n\t\t\tif(s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(exp[i] == ')' && s.top() != '(') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(exp[i] == ']' && s.top() != '[') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(exp[i] == '}' && s.top() != '{') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();",
    "\tstd::stack<char> s;\n\tfor(int i=0;i<exp.size();i++) {\n\t\tif(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n\t\t\tif(s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(exp[i]==')' && s.top()=='(') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse if(exp[i]=='}' && s.top()=='{') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse if(exp[i]==']' && s.top()=='[') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> st;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            st.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(st.empty()) {\n                return false;\n            }\n            char ch = st.top();\n            st.pop();\n            if(exp[i] == ')' && ch != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && ch != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && ch != '[') {\n                return false;\n            }\n        }\n    }\n    if(!st.empty()) {\n        return false;\n    }\n    return true;",
    "\tstd::stack<char> s;\n\tfor(int i = 0; i < exp.length(); i++) {\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n\t\t\tif(s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(exp[i] == ')' && s.top() != '(') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(exp[i] == '}' && s.top() != '{') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(exp[i] == ']' && s.top() != '[') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();",
    "\tstd::stack<char> s;\n\tfor (int i = 0; i < exp.length(); i++) {\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (exp[i] == ')' && s.top() == '(') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse if (exp[i] == '}' && s.top() == '{') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse if (exp[i] == ']' && s.top() == '[') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            } else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            } else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char top = s.top();\n                if(top == '(' && exp[i] == ')' || top == '{' && exp[i] == '}' || top == '[' && exp[i] == ']') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }"
  ]
}