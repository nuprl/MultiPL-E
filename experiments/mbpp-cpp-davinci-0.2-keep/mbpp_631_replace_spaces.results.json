{
  "name": "mbpp_631_replace_spaces",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        }\n        else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == ' ') {\n      text[i] = '_';\n    } else if (text[i] == '_') {\n      text[i] = ' ';\n    }\n  }\n  return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto &c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n  std::string result;\n  for (auto c : text) {\n    if (c == ' ') {\n      result.push_back('_');\n    } else if (c == '_') {\n      result.push_back(' ');\n    } else {\n      result.push_back(c);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        }\n        else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else if(text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else if(text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        }\n        else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == ' ') {\n      text[i] = '_';\n    } else if (text[i] == '_') {\n      text[i] = ' ';\n    }\n  }\n  return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n            text[i] = '_';\n        } else if(text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            result += ' ';\n        } else if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        }\n        else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for(int i=0;i<text.size();i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else if(text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else if(text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmpbjgr4x98: /tmp/tmpbjgr4x98.cpp:18: int main(): Assertion `candidate((\"The_Avengers\")) == (\"The Avengers\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            text[i] = '_';\n        } else if(text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == ' ') {\n      text[i] = '_';\n    } else if (text[i] == '_') {\n      text[i] = ' ';\n    }\n  }\n  return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else if(text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else if(text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            text[i] = '_';\n        } else if(text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            text[i] = '_';\n        }\n        else if(text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n  std::string result = \"\";\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == ' ') {\n      result += '_';\n    } else if (text[i] == '_') {\n      result += ' ';\n    } else {\n      result += text[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            text[i] = ' ';\n        } else if (text[i] == ' ') {\n            text[i] = '_';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            text[i] = '_';\n        } else if(text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n  std::string result;\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == ' ') {\n      result += '_';\n    } else if (text[i] == '_') {\n      result += ' ';\n    } else {\n      result += text[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            text[i] = '_';\n        } else if(text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            text[i] = '_';\n        }\n        else if(text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            text[i] = ' ';\n        } else if (text[i] == ' ') {\n            text[i] = '_';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else if(text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            text[i] = '_';\n        } else if(text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        }\n        else if(text[i] == '_') {\n            result += ' ';\n        }\n        else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string res;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            res += '_';\n        } else if (text[i] == '_') {\n            res += ' ';\n        } else {\n            res += text[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n            text[i] = '_';\n        } else if(text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            text[i] = '_';\n        }\n        else if(text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c: text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto &c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else if(text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for(char c : text) {\n        if(c == ' ') {\n            result += '_';\n        } else if(c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}