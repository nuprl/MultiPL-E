{
  "name": "mbpp_118_string_to_list",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a list of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;",
    "    std::vector<std::string> result;\n    std::stringstream ss(string);\n    std::string temp;\n    while (ss >> temp) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word = word + string[i];\n        }\n    }\n    list.push_back(word);\n    return list;",
    "    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string temp;\n    while (ss >> temp) {\n        list.push_back(temp);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    std::string word = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word = word + string[i];\n        }\n    }\n    list.push_back(word);\n    return list;",
    "    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while(ss >> word) {\n        list.push_back(word);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    std::stringstream ss(string);\n    std::string word;\n    while (ss >> word) {\n        list.push_back(word);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    std::string word;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;",
    "    std::vector<std::string> list;\n    std::string word;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == ' ') {\n            list.push_back(word);\n            word = \"\";\n        } else {\n            word += string[i];\n        }\n    }\n    list.push_back(word);\n    return list;"
  ]
}