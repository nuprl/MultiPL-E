{
  "name": "mbpp_554_Split",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> result;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 == 1) {\n            result.push_back(list[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++){\n        if(list[i]%2!=0){\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(auto i:list) {\n        if(i%2!=0) {\n            odd.push_back(i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (auto i = list.begin(); i != list.end(); i++) {\n        if (*i % 2 != 0) {\n            odd.push_back(*i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 == 1) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> result;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            result.push_back(list[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for(int i=0;i<list.size();i++) {\n        if(list[i]%2!=0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++)\n    {\n        if(list[i]%2!=0)\n        {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++){\n        if(list[i]%2!=0){\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd.push_back(i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++) {\n        if(list[i]%2!=0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 == 1) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> result;\n    for(int i=0;i<list.size();i++)\n    {\n        if(list[i]%2!=0)\n        {\n            result.push_back(list[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i = 0; i < list.size(); i++) {\n        if(list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i = 0; i < list.size(); i++) {\n        if(list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> result;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            result.push_back(list[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd.push_back(i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++) {\n        if(list[i]%2!=0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for(auto i: list) {\n        if(i%2 != 0) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> oddList;\n    for(int i=0;i<list.size();i++) {\n        if(list[i]%2!=0) {\n            oddList.push_back(list[i]);\n        }\n    }\n    return oddList;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++){\n        if(list[i]%2!=0){\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 == 1) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i = 0; i < list.size(); i++) {\n        if(list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 == 1) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++) {\n        if(list[i]%2==1) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i = 0; i < list.size(); i++) {\n        if(list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (auto i = list.begin(); i != list.end(); i++) {\n        if (*i % 2 != 0) {\n            odd.push_back(*i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n  std::vector<long> odd_list;\n  for (int i = 0; i < list.size(); i++) {\n    if (list[i] % 2 == 1) {\n      odd_list.push_back(list[i]);\n    }\n  }\n  return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for(int i = 0; i < list.size(); i++) {\n        if(list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> result;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            result.push_back(list[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(auto i : list) {\n        if(i % 2 == 1) {\n            odd.push_back(i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(long i=0;i<list.size();i++)\n    {\n        if(list[i]%2!=0)\n        {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0; i<list.size(); i++) {\n        if(list[i]%2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (auto i : list) {\n        if (i % 2) {\n            odd.push_back(i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (auto i = list.begin(); i != list.end(); i++) {\n        if (*i % 2 != 0) {\n            odd_list.push_back(*i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd.push_back(i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++)\n    {\n        if(list[i]%2!=0)\n        {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd.push_back(i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (auto i : list) {\n        if (i % 2 == 1) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for(int i=0;i<list.size();i++) {\n        if(list[i]%2!=0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (auto i = list.begin(); i != list.end(); i++) {\n        if (*i % 2 != 0) {\n            odd.push_back(*i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd.push_back(i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n  std::vector<long> odd;\n  for (int i = 0; i < list.size(); i++) {\n    if (list[i] % 2 != 0) {\n      odd.push_back(list[i]);\n    }\n  }\n  return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++)\n    {\n        if(list[i]%2!=0)\n        {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> result;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            result.push_back(list[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++)\n    {\n        if(list[i]%2!=0)\n        {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> result;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            result.push_back(list[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd.push_back(i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            result.push_back(list[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for(int i=0;i<list.size();i++) {\n        if(list[i]%2!=0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++)\n    {\n        if(list[i]%2!=0)\n        {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for(int i=0;i<list.size();i++){\n        if(list[i]%2!=0){\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for(auto i: list) {\n        if(i%2 != 0) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(auto i:list) {\n        if(i%2 != 0) {\n            odd.push_back(i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++)\n    {\n        if(list[i]%2!=0)\n        {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            result.push_back(list[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for(int i = 0; i < list.size(); i++) {\n        if(list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(auto i : list) {\n        if(i % 2 != 0) {\n            odd.push_back(i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0; i<list.size(); i++) {\n        if(list[i]%2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> result;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 == 1) {\n            result.push_back(list[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (auto i = list.begin(); i != list.end(); i++) {\n        if (*i % 2 != 0) {\n            odd.push_back(*i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i = 0; i < list.size(); i++) {\n        if(list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++)\n    {\n        if(list[i]%2!=0)\n        {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++)\n    {\n        if(list[i]%2!=0)\n        {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 == 1) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 == 1) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd.push_back(i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++) {\n        if(list[i]%2!=0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++)\n    {\n        if(list[i]%2!=0)\n        {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (auto i = list.begin(); i != list.end(); i++) {\n        if (*i % 2 != 0) {\n            odd.push_back(*i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd.push_back(i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> result;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            result.push_back(list[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd.push_back(i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(auto i:list) {\n        if(i%2!=0) {\n            odd.push_back(i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++)\n    {\n        if(list[i]%2!=0)\n        {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for(int i=0;i<list.size();i++) {\n        if(list[i]%2!=0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 == 1) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> result;\n    for(int i=0;i<list.size();i++) {\n        if(list[i]%2!=0) {\n            result.push_back(list[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(auto i: list) {\n        if(i%2) {\n            odd.push_back(i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> result;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            result.push_back(list[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for(int i=0;i<list.size();i++) {\n        if(list[i]%2!=0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(auto i : list) {\n        if(i % 2 != 0) {\n            odd.push_back(i);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++)\n    {\n        if(list[i]%2!=0)\n        {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd;\n    for(int i=0;i<list.size();i++)\n    {\n        if(list[i]%2!=0)\n        {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function which takes a list of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;\n}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
      "timestamp": 1665510276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}