{
  "name": "mbpp_407_rearrange_bigger",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nstd::any rearrange_bigger(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = rearrange_bigger;\n    assert(candidate((12)) == (std::any(21)));\n    assert(candidate((10)) == (std::any(false)));\n    assert(candidate((102)) == (std::any(120)));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::any();\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    j = digits.size() - 1;\n    while (i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for (int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::sort(digits.begin(), digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result += digits[i] * pow(10, i);\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stoll(s);",
    "    std::string s = std::to_string(n);\n    std::vector<int> v;\n    for (int i = 0; i < s.size(); i++) {\n        v.push_back(s[i] - '0');\n    }\n    std::sort(v.begin(), v.end());\n    std::reverse(v.begin(), v.end());\n    std::string s1 = \"\";\n    for (int i = 0; i < v.size(); i++) {\n        s1 += std::to_string(v[i]);\n    }\n    return std::stol(s1);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long result = std::stol(s);\n    if (result > n) {\n        return result;\n    }\n    return -1;",
    "    std::string s = std::to_string(n);\n    std::vector<int> v;\n    for(int i=0;i<s.size();i++) {\n        v.push_back(s[i]-'0');\n    }\n    int i = v.size()-1;\n    while(i>0 && v[i]<=v[i-1]) {\n        i--;\n    }\n    if(i==0) {\n        return -1;\n    }\n    int j = v.size()-1;\n    while(v[j]<=v[i-1]) {\n        j--;\n    }\n    std::swap(v[i-1],v[j]);\n    j = v.size()-1;\n    while(i<j) {\n        std::swap(v[i],v[j]);\n        i++;\n        j--;\n    }\n    long long int ans = 0;\n    for(int i=0;i<v.size();i++) {\n        ans = ans*10 + v[i];\n    }\n    return ans;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return s;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    while(i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = i;\n    while(j < len && s[j] > s[i - 1]) {\n        j++;\n    }\n    std::swap(s[i - 1], s[j - 1]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "  std::vector<int> digits;\n  while(n) {\n    digits.push_back(n % 10);\n    n /= 10;\n  }\n  std::reverse(digits.begin(), digits.end());\n  int i = digits.size() - 1;\n  while(i > 0 && digits[i] <= digits[i - 1]) {\n    i--;\n  }\n  if(i == 0) {\n    return std::nullopt;\n  }\n  int j = digits.size() - 1;\n  while(digits[j] <= digits[i - 1]) {\n    j--;\n  }\n  std::swap(digits[i - 1], digits[j]);\n  std::reverse(digits.begin() + i, digits.end());\n  long result = 0;\n  for(auto d : digits) {\n    result = result * 10 + d;\n  }\n  return result;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    std::string s2 = std::to_string(n);\n    if(s == s2) {\n        return std::nullopt;\n    }\n    std::sort(s2.begin(), s2.end());\n    std::reverse(s2.begin(), s2.end());\n    int i = 0;\n    for(; i < s2.size(); i++) {\n        if(s2[i] != s[i]) {\n            break;\n        }\n    }\n    std::swap(s2[i], s2[i+1]);\n    return std::stol(s2);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    std::stringstream ss(s);\n    long long result;\n    ss >> result;\n    return result;",
    "    std::string str = std::to_string(n);\n    std::sort(str.begin(), str.end());\n    std::reverse(str.begin(), str.end());\n    return std::stol(str);",
    "    std::string s = std::to_string(n);\n    int i = s.length() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.length() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.length() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.length() - 1;\n    while(i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.length() - 1;\n    while(s[j] <= s[i-1]) {\n        j--;\n    }\n    std::swap(s[i-1], s[j]);\n    j = s.length() - 1;\n    while(i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    std::cout << s << std::endl;\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::any();\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    j = digits.size() - 1;\n    while(i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for(int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = len - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return -1;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::sort(s.begin() + i, s.end());\n    return s;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    while(i > 0 && s[i] <= s[i-1]) i--;\n    if(i == 0) return std::nullopt;\n    int j = len - 1;\n    while(s[j] <= s[i-1]) j--;\n    std::swap(s[i-1], s[j]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = len - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = len - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return s;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    std::next_permutation(digits.begin(), digits.end());\n    long result = 0;\n    for(auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i-1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return -1;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    std::next_permutation(digits.begin(), digits.end());\n    long result = 0;\n    for (int i = 0; i < digits.size(); i++) {\n        result *= 10;\n        result += digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i-1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n>0) {\n        digits.push_back(n%10);\n        n/=10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i=digits.size()-1;\n    while(i>0 && digits[i-1]>=digits[i]) {\n        i--;\n    }\n    if(i==0) {\n        return -1;\n    }\n    int j=digits.size()-1;\n    while(digits[j]<=digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    j=digits.size()-1;\n    while(i<j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long long result=0;\n    for(auto d: digits) {\n        result=result*10+d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    std::sort(digits.begin(), digits.end());\n    long result = 0;\n    for (int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    return s;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::any();\n    }\n    int j = len - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::any(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = i;\n    while (j < s.size() && s[j] > s[i-1]) {\n        j++;\n    }\n    std::swap(s[i-1], s[j-1]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while(s[j] <= s[i-1]) {\n        j--;\n    }\n    std::swap(s[i-1], s[j]);\n    j = s.size() - 1;\n    while(i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    j = digits.size() - 1;\n    while (i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for (int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        --i;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        --j;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long long int max = std::stoll(s);\n    if (max == n) {\n        return std::nullopt;\n    }\n    std::string s1 = std::to_string(n);\n    std::sort(s1.begin(), s1.end());\n    long long int min = std::stoll(s1);\n    if (min == n) {\n        return std::nullopt;\n    }\n    std::string s2 = std::to_string(n);\n    std::sort(s2.begin(), s2.end());\n    std::reverse(s2.begin(), s2.end());\n    long long int max1 = std::stoll(s2);\n    if (max1 == n) {\n        return std::nullopt;\n    }\n    std::string s3 = std::to_string(n);\n    std::sort(s3.begin(), s3.end());\n    long long int min1 = std::stoll(s3);\n    if (min1 == n) {\n        return std::nullopt;\n    }\n    std::string s4 = std::to_string(n);\n    std::sort(s4.begin(), s4.end());\n    std::reverse(s4.begin(), s4.end());\n    long long int max2 = std::stoll(s4);\n    if (max2 == n) {\n        return std::nullopt;\n    }\n    std::string s5 = std::to_string(n);\n    std::sort(s5.begin(), s5.end());\n    long long int min2 = std::stoll(s5);\n    if (min2 == n) {\n        return std::nullopt;\n    }\n    std::string s6 = std::to_string(n);\n    std::sort(s6.begin(), s6.end());\n    std::reverse(s6.begin(), s6.end());\n    long long int max3 = std::stoll",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    while(i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return -1;\n    }\n    int j = len - 1;\n    while(s[j] <= s[i-1]) {\n        j--;\n    }\n    std::swap(s[i-1], s[j]);\n    j = len - 1;\n    while(i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    std::stringstream ss;\n    ss << s;\n    long result;\n    ss >> result;\n    return result;",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i-1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i-1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return -1;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    std::sort(digits.begin() + i, digits.end());\n    long result = 0;\n    for(auto d: digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while(s[j] <= s[i-1]) {\n        j--;\n    }\n    std::swap(s[i-1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i - 1] >= s[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.size() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    if (s[0] == '0') {\n        return -1;\n    }\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n>0) {\n        digits.push_back(n%10);\n        n/=10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size()-1;\n    while(i>0 && digits[i-1]>=digits[i]) {\n        i--;\n    }\n    if(i==0) {\n        return -1;\n    }\n    int j = digits.size()-1;\n    while(digits[j]<=digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    j = digits.size()-1;\n    while(i<j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for(int i=0;i<digits.size();i++) {\n        result = result*10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = i;\n    while (j < s.size() && s[j] > s[i - 1]) {\n        j++;\n    }\n    std::swap(s[i - 1], s[j - 1]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::any();\n    }\n    int j = s.size() - 1;\n    while(s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.size() - 1;\n    while(i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i-1]) i--;\n    if(i == 0) return std::nullopt;\n    int j = s.size() - 1;\n    while(s[j] <= s[i-1]) j--;\n    std::swap(s[i-1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    std::string s1 = std::to_string(n);\n    if (s == s1) {\n        return std::nullopt;\n    }\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = i;\n    while(j < s.size() && s[j] > s[i-1]) {\n        j++;\n    }\n    std::swap(s[i-1], s[j-1]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i] <= digits[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long res = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        res = res * 10 + digits[i];\n    }\n    return res;",
    "  std::string s = std::to_string(n);\n  std::sort(s.begin(), s.end());\n  std::reverse(s.begin(), s.end());\n  return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return -1;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while(s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::string::iterator it = s.begin();\n    std::string::iterator it2 = s.end();\n    it2--;\n    while (it2 != s.begin()) {\n        if (*it2 > *(it2 - 1)) {\n            break;\n        }\n        it2--;\n    }\n    if (it2 == s.begin()) {\n        return std::nullopt;\n    }\n    it = it2;\n    it2--;\n    while (it != s.end()) {\n        if (*it < *it2) {\n            break;\n        }\n        it++;\n    }\n    std::swap(*it, *it2);\n    std::sort(it2 + 1, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    std::next_permutation(digits.begin(), digits.end());\n    long result = 0;\n    for (auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    std::sort(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = digits.size() - 1; i > 0; i--) {\n        if (digits[i] > digits[i - 1]) {\n            int j = i;\n            while (j < digits.size() && digits[j] > digits[i - 1]) {\n                j++;\n            }\n            std::swap(digits[i - 1], digits[j - 1]);\n            std::sort(digits.begin() + i, digits.end());\n            long result = 0;\n            for (int k = 0; k < digits.size(); k++) {\n                result = result * 10 + digits[k];\n            }\n            return result;\n        }\n    }\n    return -1;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if(i <= 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    j = digits.size() - 1;\n    while(i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for(int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int i = s.length() - 1;\n    while(i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.length() - 1;\n    while(s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    std::stringstream ss;\n    ss << s;\n    long result;\n    ss >> result;\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.length() - 1;\n    while (i > 0 && s[i - 1] >= s[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return std::nullopt;\n    }\n    int j = s.length() - 1;\n    while (j > 0 && s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.length() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = i;\n    while(j < digits.size() && digits[j] > digits[i - 1]) {\n        j++;\n    }\n    std::swap(digits[i - 1], digits[j - 1]);\n    std::sort(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "  std::vector<int> digits;\n  while (n > 0) {\n    digits.push_back(n % 10);\n    n /= 10;\n  }\n  std::reverse(digits.begin(), digits.end());\n  std::next_permutation(digits.begin(), digits.end());\n  long res = 0;\n  for (auto d : digits) {\n    res = res * 10 + d;\n  }\n  return res;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while(s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "  std::vector<int> digits;\n  while(n > 0) {\n    digits.push_back(n % 10);\n    n /= 10;\n  }\n  std::reverse(digits.begin(), digits.end());\n  int i = 0;\n  while(i < digits.size() - 1 && digits[i] >= digits[i + 1]) {\n    i++;\n  }\n  if(i == digits.size() - 1) {\n    return std::nullopt;\n  }\n  int j = i + 1;\n  while(j < digits.size() && digits[j] > digits[i]) {\n    j++;\n  }\n  j--;\n  std::swap(digits[i], digits[j]);\n  std::sort(digits.begin() + i + 1, digits.end());\n  long result = 0;\n  for(int i = 0; i < digits.size(); i++) {\n    result = result * 10 + digits[i];\n  }\n  return result;",
    "    std::string s = std::to_string(n);\n    int i = s.length() - 1;\n    while (i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.length() - 1;\n    while (s[j] <= s[i-1]) {\n        j--;\n    }\n    std::swap(s[i-1], s[j]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string num = std::to_string(n);\n    int len = num.length();\n    int i = len - 1;\n    while(i > 0 && num[i] <= num[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return -1;\n    }\n    int j = len - 1;\n    while(num[j] <= num[i-1]) {\n        j--;\n    }\n    std::swap(num[i-1], num[j]);\n    std::sort(num.begin() + i, num.end());\n    return std::stol(num);",
    "  std::string s = std::to_string(n);\n  std::sort(s.begin(), s.end(), std::greater<char>());\n  return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long bigger = std::stol(s);\n    if (bigger > n) {\n        return bigger;\n    }\n    return -1;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string str = std::to_string(n);\n    int len = str.length();\n    int i = len - 1;\n    while(i > 0 && str[i - 1] >= str[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return -1;\n    }\n    int j = len - 1;\n    while(j > 0 && str[j] <= str[i - 1]) {\n        j--;\n    }\n    std::swap(str[i - 1], str[j]);\n    j = len - 1;\n    while(i < j) {\n        std::swap(str[i], str[j]);\n        i++;\n        j--;\n    }\n    return str;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "\tstd::vector<int> digits;\n\twhile (n) {\n\t\tdigits.push_back(n % 10);\n\t\tn /= 10;\n\t}\n\tstd::reverse(digits.begin(), digits.end());\n\tauto it = std::is_sorted_until(digits.rbegin(), digits.rend());\n\tif (it == digits.rend()) {\n\t\treturn std::nullopt;\n\t}\n\tauto it2 = std::upper_bound(digits.rbegin(), it, *it);\n\tstd::swap(*it, *it2);\n\tstd::sort(digits.rbegin(), it);\n\tlong result = 0;\n\tfor (auto d : digits) {\n\t\tresult = result * 10 + d;\n\t}\n\treturn result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    auto digits = std::to_string(n);\n    auto it = std::is_sorted_until(digits.rbegin(), digits.rend());\n    if (it == digits.rend()) {\n        return std::nullopt;\n    }\n    auto pivot = std::distance(it, digits.rend()) - 1;\n    auto next = std::upper_bound(digits.rbegin(), it, digits[pivot]);\n    std::iter_swap(next, digits.rbegin() + pivot);\n    std::sort(digits.rbegin(), next);\n    return std::stol(digits);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    std::stringstream ss;\n    ss << s;\n    long result;\n    ss >> result;\n    return result;",
    "    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::sort(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    while(i > 0 && s[i] <= s[i-1]) i--;\n    if(i == 0) return std::nullopt;\n    int j = len - 1;\n    while(s[j] <= s[i-1]) j--;\n    std::swap(s[j], s[i-1]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    j = digits.size() - 1;\n    while (i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for (auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return -1;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return s;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return -1;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[j], s[i - 1]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[j], s[i - 1]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "  std::string s = std::to_string(n);\n  int i = s.size() - 1;\n  while(i > 0 && s[i] <= s[i - 1]) {\n    i--;\n  }\n  if(i == 0) {\n    return std::nullopt;\n  }\n  int j = s.size() - 1;\n  while(s[j] <= s[i - 1]) {\n    j--;\n  }\n  std::swap(s[i - 1], s[j]);\n  std::reverse(s.begin() + i, s.end());\n  return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = i;\n    while (j < s.size() && s[j] > s[i - 1]) {\n        j++;\n    }\n    std::swap(s[i - 1], s[j - 1]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    // Find the first digit that is smaller than the digit to its right\n    int i = 0;\n    for(; i < digits.size()-1; ++i) {\n        if(digits[i] < digits[i+1]) {\n            break;\n        }\n    }\n    if(i == digits.size()-1) {\n        return std::nullopt;\n    }\n    // Find the smallest digit to the right of i that is greater than digits[i]\n    int j = i+1;\n    for(; j < digits.size(); ++j) {\n        if(digits[j] > digits[i]) {\n            break;\n        }\n    }\n    // Swap digits[i] and digits[j]\n    std::swap(digits[i], digits[j]);\n    // Sort the digits to the right of i\n    std::sort(digits.begin()+i+1, digits.end());\n    // Reconstruct the number\n    long result = 0;\n    for(int i = 0; i < digits.size(); ++i) {\n        result = result*10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    j = digits.size() - 1;\n    while (i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for (auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return s;",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i-1] >= digits[i])\n        i--;\n    if(i == 0)\n        return std::nullopt;\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i-1])\n        j--;\n    std::swap(digits[i-1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long res = 0;\n    for(int i = 0; i < digits.size(); i++)\n        res = res * 10 + digits[i];\n    return res;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long max = std::stol(s);\n    if (max == n) {\n        return std::nullopt;\n    }\n    std::string s1 = std::to_string(n);\n    std::sort(s1.begin(), s1.end());\n    long min = std::stol(s1);\n    if (min == n) {\n        return max;\n    }\n    for (long i = n + 1; i < max; i++) {\n        std::string s2 = std::to_string(i);\n        std::sort(s2.begin(), s2.end());\n        if (s2 == s1) {\n            return i;\n        }\n    }\n    return std::nullopt;",
    "    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = len - 1;\n    while (j >= i && s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i - 1] >= s[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.size() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return -1;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.size() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    while(i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = len - 1;\n    while(s[j] <= s[i-1]) {\n        j--;\n    }\n    std::swap(s[i-1], s[j]);\n    j = len - 1;\n    while(i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    auto digits = std::to_string(n);\n    auto it = std::is_sorted_until(digits.rbegin(), digits.rend());\n    if (it == digits.rend()) {\n        return std::nullopt;\n    }\n    auto pivot = std::distance(it, digits.rend()) - 1;\n    auto it2 = std::upper_bound(digits.rbegin(), it, digits[pivot]);\n    std::iter_swap(it2, it);\n    std::reverse(digits.begin() + pivot + 1, digits.end());\n    return std::stol(digits);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i] <= digits[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(j > i && digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    std::sort(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = digits.size() - 1; i > 0; i--) {\n        if (digits[i] > digits[i - 1]) {\n            int min_index = i;\n            for (int j = i + 1; j < digits.size(); j++) {\n                if (digits[j] > digits[i - 1] && digits[j] < digits[min_index]) {\n                    min_index = j;\n                }\n            }\n            std::swap(digits[i - 1], digits[min_index]);\n            std::sort(digits.begin() + i, digits.end());\n            long result = 0;\n            for (int i = 0; i < digits.size(); i++) {\n                result = result * 10 + digits[i];\n            }\n            return result;\n        }\n    }\n    return -1;",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    if (len == 1) {\n        return -1;\n    }\n    int i = len - 1;\n    while (i > 0) {\n        if (s[i] > s[i - 1]) {\n            break;\n        }\n        i--;\n    }\n    if (i == 0) {\n        return -1;\n    }\n    int x = s[i - 1], min = i;\n    for (int j = i + 1; j < len; j++) {\n        if (s[j] > x && s[j] < s[min]) {\n            min = j;\n        }\n    }\n    std::swap(s[i - 1], s[min]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "  std::vector<int> digits;\n  while(n) {\n    digits.push_back(n%10);\n    n /= 10;\n  }\n  std::sort(digits.begin(), digits.end());\n  long ans = 0;\n  for(int i = digits.size() - 1; i >= 0; i--) {\n    ans = ans * 10 + digits[i];\n  }\n  return ans;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long max = std::stol(s);\n    if (max == n) {\n        return std::nullopt;\n    }\n    std::string s1 = std::to_string(n);\n    std::sort(s1.begin(), s1.end());\n    std::reverse(s1.begin(), s1.end());\n    long min = std::stol(s1);\n    if (min == n) {\n        return std::nullopt;\n    }\n    std::string s2 = std::to_string(n);\n    std::sort(s2.begin(), s2.end());\n    long min1 = std::stol(s2);\n    if (min1 == n) {\n        return std::nullopt;\n    }\n    std::string s3 = std::to_string(n);\n    std::sort(s3.begin(), s3.end());\n    std::reverse(s3.begin(), s3.end());\n    long max1 = std::stol(s3);\n    if (max1 == n) {\n        return std::nullopt;\n    }\n    std::string s4 = std::to_string(n);\n    std::sort(s4.begin(), s4.end());\n    long min2 = std::stol(s4);\n    if (min2 == n) {\n        return std::nullopt;\n    }\n    std::string s5 = std::to_string(n);\n    std::sort(s5.begin(), s5.end());\n    std::reverse(s5.begin(), s5.end());\n    long max2 = std::stol(s5);\n    if (max2 == n) {\n        return std::nullopt;\n    }\n    std::string s6 = std::to_string(n);\n    std::sort(s6.begin(), s6.end());\n    long min3 = std::stol(s6);\n    if (min3 == n) {",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "  std::vector<int> digits;\n  while(n > 0) {\n    digits.push_back(n % 10);\n    n /= 10;\n  }\n  std::reverse(digits.begin(), digits.end());\n  std::next_permutation(digits.begin(), digits.end());\n  long result = 0;\n  for(auto d : digits) {\n    result = result * 10 + d;\n  }\n  return result;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    std::vector<int>::iterator it = std::is_sorted_until(digits.begin(), digits.end(), std::greater<int>());\n    if(it == digits.end()) {\n        return std::nullopt;\n    }\n    std::vector<int>::iterator it2 = std::upper_bound(digits.begin(), digits.end(), *it, std::greater<int>());\n    std::swap(*it, *it2);\n    std::sort(it + 1, digits.end(), std::greater<int>());\n    long result = 0;\n    for(auto it = digits.begin(); it != digits.end(); ++it) {\n        result = result * 10 + *it;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = digits.size() - 1; i > 0; --i) {\n        if (digits[i] > digits[i - 1]) {\n            int j = i;\n            while (j < digits.size() && digits[j] > digits[i - 1]) ++j;\n            std::swap(digits[i - 1], digits[j - 1]);\n            std::sort(digits.begin() + i, digits.end());\n            long result = 0;\n            for (int k = 0; k < digits.size(); ++k) {\n                result = result * 10 + digits[k];\n            }\n            return result;\n        }\n    }\n    return -1;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i-1]) i--;\n    if(i == 0) return std::nullopt;\n    int j = i;\n    while(j < s.size() && s[j] > s[i-1]) j++;\n    std::swap(s[i-1], s[j-1]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    std::stringstream ss(s);\n    long res;\n    ss >> res;\n    return res;",
    "    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = digits.size() - 1; i > 0; i--) {\n        if (digits[i] > digits[i - 1]) {\n            int j = i;\n            while (j < digits.size() && digits[j] > digits[i - 1]) {\n                j++;\n            }\n            std::swap(digits[i - 1], digits[j - 1]);\n            std::sort(digits.begin() + i, digits.end());\n            break;\n        }\n    }\n    long result = 0;\n    for (int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    std::sort(digits.begin(), digits.end());\n    long result = 0;\n    for(auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    std::next_permutation(digits.begin(), digits.end());\n    long result = 0;\n    for (auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while(s[j] <= s[i-1]) {\n        j--;\n    }\n    std::swap(s[i-1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return s;",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = len - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = len - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = len - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = len - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    j = digits.size() - 1;\n    while(i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "  std::string s = std::to_string(n);\n  std::sort(s.begin(), s.end());\n  std::reverse(s.begin(), s.end());\n  return s;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i-1])\n        i--;\n    if(i == 0)\n        return std::nullopt;\n    int j = s.size() - 1;\n    while(s[j] <= s[i-1])\n        j--;\n    std::swap(s[i-1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.size() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = digits.size() - 1; i > 0; i--) {\n        if (digits[i] > digits[i - 1]) {\n            std::swap(digits[i], digits[i - 1]);\n            std::sort(digits.begin() + i, digits.end());\n            long result = 0;\n            for (int j = 0; j < digits.size(); j++) {\n                result = result * 10 + digits[j];\n            }\n            return result;\n        }\n    }\n    return std::nullopt;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::sort(digits.begin(), digits.end());\n    long result = 0;\n    for(int i = digits.size() - 1; i >= 0; i--) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::vector<int> v;\n    while(n) {\n        v.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(v.begin(), v.end());\n    int i = v.size()-1;\n    while(i>0 && v[i-1] >= v[i]) {\n        i--;\n    }\n    if(i==0) {\n        return -1;\n    }\n    int j = v.size()-1;\n    while(v[j] <= v[i-1]) {\n        j--;\n    }\n    std::swap(v[i-1], v[j]);\n    std::sort(v.begin()+i, v.end());\n    long result = 0;\n    for(int i=0; i<v.size(); i++) {\n        result = result*10 + v[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    if (s[0] == '0') {\n        return -1;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.size() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);"
  ]
}