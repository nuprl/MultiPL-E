{
  "name": "mbpp_407_rearrange_bigger",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nstd::any rearrange_bigger(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = rearrange_bigger;\n    assert(candidate((12)) == (std::any(21)));\n    assert(candidate((10)) == (std::any(false)));\n    assert(candidate((102)) == (std::any(120)));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::any();\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    j = digits.size() - 1;\n    while (i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for (int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::sort(digits.begin(), digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result += digits[i] * pow(10, i);\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stoll(s);",
    "    std::string s = std::to_string(n);\n    std::vector<int> v;\n    for (int i = 0; i < s.size(); i++) {\n        v.push_back(s[i] - '0');\n    }\n    std::sort(v.begin(), v.end());\n    std::reverse(v.begin(), v.end());\n    std::string s1 = \"\";\n    for (int i = 0; i < v.size(); i++) {\n        s1 += std::to_string(v[i]);\n    }\n    return std::stol(s1);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long result = std::stol(s);\n    if (result > n) {\n        return result;\n    }\n    return -1;",
    "    std::string s = std::to_string(n);\n    std::vector<int> v;\n    for(int i=0;i<s.size();i++) {\n        v.push_back(s[i]-'0');\n    }\n    int i = v.size()-1;\n    while(i>0 && v[i]<=v[i-1]) {\n        i--;\n    }\n    if(i==0) {\n        return -1;\n    }\n    int j = v.size()-1;\n    while(v[j]<=v[i-1]) {\n        j--;\n    }\n    std::swap(v[i-1],v[j]);\n    j = v.size()-1;\n    while(i<j) {\n        std::swap(v[i],v[j]);\n        i++;\n        j--;\n    }\n    long long int ans = 0;\n    for(int i=0;i<v.size();i++) {\n        ans = ans*10 + v[i];\n    }\n    return ans;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return s;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    while(i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = i;\n    while(j < len && s[j] > s[i - 1]) {\n        j++;\n    }\n    std::swap(s[i - 1], s[j - 1]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "  std::vector<int> digits;\n  while(n) {\n    digits.push_back(n % 10);\n    n /= 10;\n  }\n  std::reverse(digits.begin(), digits.end());\n  int i = digits.size() - 1;\n  while(i > 0 && digits[i] <= digits[i - 1]) {\n    i--;\n  }\n  if(i == 0) {\n    return std::nullopt;\n  }\n  int j = digits.size() - 1;\n  while(digits[j] <= digits[i - 1]) {\n    j--;\n  }\n  std::swap(digits[i - 1], digits[j]);\n  std::reverse(digits.begin() + i, digits.end());\n  long result = 0;\n  for(auto d : digits) {\n    result = result * 10 + d;\n  }\n  return result;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    std::string s2 = std::to_string(n);\n    if(s == s2) {\n        return std::nullopt;\n    }\n    std::sort(s2.begin(), s2.end());\n    std::reverse(s2.begin(), s2.end());\n    int i = 0;\n    for(; i < s2.size(); i++) {\n        if(s2[i] != s[i]) {\n            break;\n        }\n    }\n    std::swap(s2[i], s2[i+1]);\n    return std::stol(s2);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    std::stringstream ss(s);\n    long long result;\n    ss >> result;\n    return result;",
    "    std::string str = std::to_string(n);\n    std::sort(str.begin(), str.end());\n    std::reverse(str.begin(), str.end());\n    return std::stol(str);"
  ]
}