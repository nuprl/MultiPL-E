{
  "name": "mbpp_585_expensive_items",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_float{\n    std::string f0;\n    float f1;    Union_std_string_float(std::string _f0) : f0(_f0) {}\n    Union_std_string_float(float _f1) : f1(_f1) {}\n    ~Union_std_string_float() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the n most expensive items in a given dataset.\nstd::vector<std::map<std::string,Union_std_string_float>> expensive_items(std::vector<std::map<std::string,Union_std_string_float>> items, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = expensive_items;\n    assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}})})), (1)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}})})));\n    assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-3\"}, {\"price\", 45.09}})})), (2)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1}})})));\n    assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-3\"}, {\"price\", 45.09}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-4\"}, {\"price\", 22.75}})})), (1)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}})})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::map<std::string,Union_std_string_float> temp;\n    std::vector<float> prices;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it2 = (*it).begin(); it2 != (*it).end(); it2++) {\n            if((*it2).first == \"price\") {\n                prices.push_back((*it2).second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for(int i = 0; i < n; i++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it2 = (*it).begin(); it2 != (*it).end(); it2++) {\n                if((*it2).first == \"price\") {\n                    if((*it2).second.f1 == prices[i]) {\n                        result.push_back(*it);\n                    }\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float, std::map<std::string,Union_std_string_float>>> v;\n    for (auto item : items) {\n        if (item.find(\"price\") != item.end()) {\n            v.push_back(std::make_pair(item[\"price\"].f1, item));\n        }\n    }\n    std::sort(v.begin(), v.end());\n    for (int i = v.size() - 1; i >= v.size() - n; i--) {\n        result.push_back(v[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float,std::map<std::string,Union_std_string_float>>> v;\n    for(auto i:items){\n        v.push_back(std::make_pair(i[\"price\"],i));\n    }\n    std::sort(v.begin(),v.end());\n    for(long i=0;i<n;i++){\n        result.push_back(v[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::map<std::string,Union_std_string_float> item;\n    std::map<std::string,Union_std_string_float> item1;\n    std::map<std::string,Union_std_string_float> item2;\n    std::map<std::string,Union_std_string_float> item3;\n    std::map<std::string,Union_std_string_float> item4;\n    std::map<std::string,Union_std_string_float> item5;\n    std::map<std::string,Union_std_string_float> item6;\n    std::map<std::string,Union_std_string_float> item7;\n    std::map<std::string,Union_std_string_float> item8;\n    std::map<std::string,Union_std_string_float> item9;\n    std::map<std::string,Union_std_string_float> item10;\n    std::map<std::string,Union_std_string_float> item11;\n    std::map<std::string,Union_std_string_float> item12;\n    std::map<std::string,Union_std_string_float> item13;\n    std::map<std::string,Union_std_string_float> item14;\n    std::map<std::string,Union_std_string_float> item15;\n    std::map<std::string,Union_std_string_float> item16;\n    std::map<std::string,Union_std_string_float> item17;\n    std::map<std::string,Union_std_string_float> item18;\n    std::map<std::string,Union_std_string_float> item19;\n    std::map<std::string,Union_std_string_float> item20;\n    std::map<std::string,Union_std_string_float> item21;\n    std::map<std::string,Union_std_string_float> item22;\n    std::map<",
    "    // Write your code here\n    // To print results to the standard output you can use the cout stream\n    // Example: cout << \"Hello world!\";\n    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> temp;\n    for(auto i : items){\n        for(auto j : i){\n            if(j.first == \"price\"){\n                temp.push_back(std::make_pair(i[\"name\"],j.second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(),temp.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b){\n        return a.second > b.second;\n    });\n    for(int i = 0; i < n; i++){\n        for(auto j : items){\n            if(j[\"name\"] == temp[i].first){\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](auto &left, auto &right) {\n        return left[\"price\"] > right[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float, std::map<std::string,Union_std_string_float>>> v;\n    for (auto item : items) {\n        v.push_back(std::make_pair(item[\"price\"].f1, item));\n    }\n    std::sort(v.begin(), v.end());\n    for (int i = 0; i < n; i++) {\n        result.push_back(v[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it2;\n    std::map<std::string,Union_std_string_float>::iterator it3;\n    std::map<std::string,Union_std_string_float>::iterator it4;\n    std::vector<float> prices;\n    std::vector<float>::iterator it5;\n    std::vector<float>::iterator it6;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it3 = it->begin(); it3 != it->end(); it3++) {\n            if(it3->first == \"price\") {\n                prices.push_back(it3->second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for(it5 = prices.begin(); it5 != prices.end(); it5++) {\n        for(it2 = items.begin(); it2 != items.end(); it2++) {\n            for(it4 = it2->begin(); it4 != it2->end(); it4++) {\n                if(it4->first == \"price\" && it4->second.f1 == *it5) {\n                    result.push_back(*it2);\n                }\n            }\n        }\n    }\n    return result;",
    "    // Write your code here\n    // To print results to the standard output you can use the cout\n    // stream like this:\n    // cout << \"Hello world!\";\n    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::map<std::string,Union_std_string_float> temp;\n    std::vector<float> price;\n    for(int i=0;i<items.size();i++){\n        for(auto it=items[i].begin();it!=items[i].end();it++){\n            if(it->first==\"price\"){\n                price.push_back(it->second.f1);\n            }\n        }\n    }\n    std::sort(price.begin(),price.end());\n    for(int i=0;i<n;i++){\n        for(int j=0;j<items.size();j++){\n            for(auto it=items[j].begin();it!=items[j].end();it++){\n                if(it->first==\"price\"){\n                    if(it->second.f1==price[price.size()-1-i]){\n                        temp=items[j];\n                        result.push_back(temp);\n                    }\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for(long i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::vector<float> prices;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it2 = it->begin(); it2 != it->end(); it2++) {\n            if(it2->first == \"price\") {\n                prices.push_back(it2->second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    std::vector<float>::iterator it3;\n    for(it3 = prices.begin(); it3 != prices.end(); it3++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it2 = it->begin(); it2 != it->end(); it2++) {\n                if(it2->first == \"price\" && it2->second.f1 == *it3) {\n                    result.push_back(*it);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (long i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float,std::map<std::string,Union_std_string_float>>> price_items;\n    for(auto item : items){\n        price_items.push_back(std::make_pair(item[\"price\"],item));\n    }\n    std::sort(price_items.begin(),price_items.end());\n    for(int i=0;i<n;i++){\n        result.push_back(price_items[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string, float>> price_list;\n    for (auto item : items) {\n        price_list.push_back(std::make_pair(item[\"name\"], item[\"price\"]));\n    }\n    std::sort(price_list.begin(), price_list.end(), [](std::pair<std::string, float> a, std::pair<std::string, float> b) {\n        return a.second > b.second;\n    });\n    for (int i = 0; i < n; i++) {\n        for (auto item : items) {\n            if (item[\"name\"] == price_list[i].first) {\n                result.push_back(item);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::vector<float> prices;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it2 = it->begin(); it2 != it->end(); it2++) {\n            if(it2->first == \"price\") {\n                prices.push_back(it2->second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for(int i = 0; i < n; i++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it2 = it->begin(); it2 != it->end(); it2++) {\n                if(it2->first == \"price\" && it2->second.f1 == prices[i]) {\n                    result.push_back(*it);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it1;\n    std::vector<float> prices;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it1 = it->begin(); it1 != it->end(); it1++) {\n            if(it1->first == \"price\") {\n                prices.push_back(it1->second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    std::vector<float>::iterator it2;\n    for(it2 = prices.begin(); it2 != prices.end(); it2++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it1 = it->begin(); it1 != it->end(); it1++) {\n                if(it1->first == \"price\") {\n                    if(it1->second.f1 == *it2) {\n                        result.push_back(*it);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it3;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it4;\n    for(it3 = result.begin(); it3 != result.end(); it3++) {\n        for(it4 = it3 + 1; it4 != result.end(); it4++) {\n            if(*it3 == *it4) {\n                result.erase(it4);\n            }\n        }\n    }\n    if(result.size() > n) {\n        result.erase(result.begin() + n, result.end());\n    }\n    return result;"
  ]
}