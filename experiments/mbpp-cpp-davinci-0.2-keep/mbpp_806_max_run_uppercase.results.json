{
  "name": "mbpp_806_max_run_uppercase",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if(current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if(current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0, current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    return std::max(max_run, current_run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "tmpq4puwurg: /tmp/tmpq4puwurg.cpp:22: int main(): Assertion `candidate((\"PrECIOusMOVemENTSYT\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            curr_run++;\n            if(curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            curr_run = 0;\n        }\n        if (curr_run > max_run) {\n            max_run = curr_run;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  // Write your code here\n  long max_run = 0;\n  long current_run = 0;\n  for(int i = 0; i < test_str.length(); i++){\n    if(isupper(test_str[i])){\n      current_run++;\n      if(current_run > max_run){\n        max_run = current_run;\n      }\n    }\n    else{\n      current_run = 0;\n    }\n  }\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    return std::max(max_run, run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(run, max_run);\n            run = 0;\n        }\n    }\n    max_run = std::max(run, max_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            current_run++;\n            if(current_run > max_run) {\n                max_run = current_run;\n            }\n        }\n        else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "tmph0rxvqbq: /tmp/tmph0rxvqbq.cpp:22: int main(): Assertion `candidate((\"PrECIOusMOVemENTSYT\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    int max_run = 0;\n    int cur_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "tmp56lwe99f: /tmp/tmp56lwe99f.cpp:22: int main(): Assertion `candidate((\"PrECIOusMOVemENTSYT\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_count = 0;\n  long count = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      count++;\n    } else {\n      if (count > max_count) {\n        max_count = count;\n      }\n      count = 0;\n    }\n  }\n  if (count > max_count) {\n    max_count = count;\n  }\n  return max_count;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long cur_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            cur_run++;\n        } else {\n            max_run = std::max(max_run, cur_run);\n            cur_run = 0;\n        }\n    }\n    max_run = std::max(max_run, cur_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            run++;\n        }\n        else {\n            if(run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if(run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z') {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long cur_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            cur_run++;\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123298,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    return std::max(max_run, current_run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n            max_run = std::max(max_run, curr_run);\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "tmph0rxvqbq: /tmp/tmph0rxvqbq.cpp:22: int main(): Assertion `candidate((\"PrECIOusMOVemENTSYT\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    return std::max(max_run, current_run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123298,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            max_run = std::max(max_run, current_run);\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(isupper(test_str[i])) {\n            run++;\n        } else {\n            if(run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if(run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long run = 0;\n  for (int i = 0; i < test_str.size(); i++) {\n    if (isupper(test_str[i])) {\n      run++;\n    } else {\n      max_run = std::max(max_run, run);\n      run = 0;\n    }\n  }\n  max_run = std::max(max_run, run);\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  // Write your code here\n  long count = 0;\n  long max = 0;\n  for(int i = 0; i < test_str.length(); i++){\n    if(isupper(test_str[i])){\n      count++;\n      if(count > max){\n        max = count;\n      }\n    }\n    else{\n      count = 0;\n    }\n  }\n  return max;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n\tlong max_run = 0;\n\tlong current_run = 0;\n\tfor (int i = 0; i < test_str.length(); i++) {\n\t\tif (isupper(test_str[i])) {\n\t\t\tcurrent_run++;\n\t\t}\n\t\telse {\n\t\t\tif (current_run > max_run) {\n\t\t\t\tmax_run = current_run;\n\t\t\t}\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\treturn max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "tmp2ia5wcv1: /tmp/tmp2ia5wcv1.cpp:23: int main(): Assertion `candidate((\"PrECIOusMOVemENTSYT\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  // Write your code here\n  long count = 0, max = 0;\n  for(int i = 0; i < test_str.length(); i++) {\n    if(isupper(test_str[i])) {\n      count++;\n    } else {\n      if(count > max) {\n        max = count;\n      }\n      count = 0;\n    }\n  }\n  if(count > max) {\n    max = count;\n  }\n  return max;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long cur_run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "tmptd5rlc1u: /tmp/tmptd5rlc1u.cpp:22: int main(): Assertion `candidate((\"PrECIOusMOVemENTSYT\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long cur_run = 0;\n  for (auto c : test_str) {\n    if (isupper(c)) {\n      cur_run++;\n    } else {\n      if (cur_run > max_run) {\n        max_run = cur_run;\n      }\n      cur_run = 0;\n    }\n  }\n  if (cur_run > max_run) {\n    max_run = cur_run;\n  }\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long cur_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            cur_run++;\n            max_run = std::max(max_run, cur_run);\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long cur_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            cur_run++;\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n            max_run = std::max(run, max_run);\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long cur_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            cur_run++;\n        } else {\n            cur_run = 0;\n        }\n        max_run = std::max(max_run, cur_run);\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0, curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n            max_run = std::max(max_run, curr_run);\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_count = 0;\n    long count = 0;\n    for(int i=0; i<test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            count++;\n        } else {\n            if(count > max_count) {\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if(count > max_count) {\n        max_count = count;\n    }\n    return max_count;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n    } else {\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n      current_run = 0;\n    }\n  }\n  if (current_run > max_run) {\n    max_run = current_run;\n  }\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(isupper(test_str[i])) {\n            curr_run++;\n            if(curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long run = 0;\n  for (int i = 0; i < test_str.size(); i++) {\n    if (isupper(test_str[i])) {\n      run++;\n    } else {\n      if (run > max_run) {\n        max_run = run;\n      }\n      run = 0;\n    }\n  }\n  if (run > max_run) {\n    max_run = run;\n  }\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (auto ch : test_str) {\n        if (isupper(ch)) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "tmp6izugn15: /tmp/tmp6izugn15.cpp:22: int main(): Assertion `candidate((\"PrECIOusMOVemENTSYT\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    return std::max(max_run, curr_run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123298,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123298,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n            max_run = std::max(max_run, curr_run);\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      run++;\n    } else {\n      if (run > max_run) {\n        max_run = run;\n      }\n      run = 0;\n    }\n  }\n  if (run > max_run) {\n    max_run = run;\n  }\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    int max_run = 0;\n    int curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n    } else {\n      current_run = 0;\n    }\n  }\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123298,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            max_run = std::max(max_run, current_run);\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long run = 0;\n  for (int i = 0; i < test_str.size(); i++) {\n    if (isupper(test_str[i])) {\n      run++;\n    } else {\n      run = 0;\n    }\n    if (run > max_run) {\n      max_run = run;\n    }\n  }\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    return std::max(max_run, current_run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long current_run = 0;\n  for (auto c : test_str) {\n    if (isupper(c)) {\n      current_run++;\n    } else {\n      max_run = std::max(current_run, max_run);\n      current_run = 0;\n    }\n  }\n  return std::max(current_run, max_run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long run = 0;\n  for (auto c : test_str) {\n    if (isupper(c)) {\n      run++;\n    } else {\n      max_run = std::max(max_run, run);\n      run = 0;\n    }\n  }\n  return std::max(max_run, run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123298,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long cur_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if (cur_run > max_run) {\n        max_run = cur_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long cur_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            cur_run++;\n        } else {\n            cur_run = 0;\n        }\n        max_run = std::max(max_run, cur_run);\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      run++;\n    } else {\n      if (run > max_run) {\n        max_run = run;\n      }\n      run = 0;\n    }\n  }\n  if (run > max_run) {\n    max_run = run;\n  }\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            max_run = std::max(max_run, current_run);\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for(auto ch : test_str) {\n        if(isupper(ch)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    return std::max(max_run, run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_count = 0;\n    long count = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n        } else {\n            if (count > max_count) {\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if (count > max_count) {\n        max_count = count;\n    }\n    return max_count;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n            max_run = std::max(max_run, curr_run);\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long curr_run = 0;\n  for (int i = 0; i < test_str.size(); i++) {\n    if (isupper(test_str[i])) {\n      curr_run++;\n    } else {\n      max_run = std::max(max_run, curr_run);\n      curr_run = 0;\n    }\n  }\n  max_run = std::max(max_run, curr_run);\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long curr_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      curr_run++;\n    } else {\n      if (curr_run > max_run) {\n        max_run = curr_run;\n      }\n      curr_run = 0;\n    }\n  }\n  if (curr_run > max_run) {\n    max_run = curr_run;\n  }\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    return std::max(max_run, curr_run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    int max_run = 0;\n    int curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "tmps0e7zelg: /tmp/tmps0e7zelg.cpp:22: int main(): Assertion `candidate((\"PrECIOusMOVemENTSYT\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "tmpsgyu5r7y: /tmp/tmpsgyu5r7y.cpp:22: int main(): Assertion `candidate((\"PrECIOusMOVemENTSYT\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n    } else {\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n      current_run = 0;\n    }\n  }\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "tmps7y407dl: /tmp/tmps7y407dl.cpp:22: int main(): Assertion `candidate((\"PrECIOusMOVemENTSYT\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n\tlong max_run = 0;\n\tlong current_run = 0;\n\tfor (int i = 0; i < test_str.length(); i++) {\n\t\tif (isupper(test_str[i])) {\n\t\t\tcurrent_run++;\n\t\t}\n\t\telse {\n\t\t\tif (current_run > max_run) {\n\t\t\t\tmax_run = current_run;\n\t\t\t}\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\tif (current_run > max_run) {\n\t\tmax_run = current_run;\n\t}\n\treturn max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            run++;\n        } else {\n            if(run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if(run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    int count = 0;\n    int max = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            count++;\n            if(count > max) {\n                max = count;\n            }\n        }\n        else {\n            count = 0;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    return std::max(max_run, curr_run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    return std::max(max_run, curr_run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n    } else {\n      max_run = std::max(max_run, current_run);\n      current_run = 0;\n    }\n  }\n  return std::max(max_run, current_run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      run++;\n    } else {\n      if (run > max_run) {\n        max_run = run;\n      }\n      run = 0;\n    }\n  }\n  if (run > max_run) {\n    max_run = run;\n  }\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n\tlong max_run = 0;\n\tlong run = 0;\n\tfor (int i = 0; i < test_str.length(); i++) {\n\t\tif (isupper(test_str[i])) {\n\t\t\trun++;\n\t\t\tif (run > max_run) {\n\t\t\t\tmax_run = run;\n\t\t\t}\n\t\t} else {\n\t\t\trun = 0;\n\t\t}\n\t}\n\treturn max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n    } else {\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n      current_run = 0;\n    }\n  }\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "tmps7y407dl: /tmp/tmps7y407dl.cpp:22: int main(): Assertion `candidate((\"PrECIOusMOVemENTSYT\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n    } else {\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n      current_run = 0;\n    }\n  }\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "tmps7y407dl: /tmp/tmps7y407dl.cpp:22: int main(): Assertion `candidate((\"PrECIOusMOVemENTSYT\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long cur_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if (cur_run > max_run) {\n        max_run = cur_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n\tlong max_run = 0;\n\tlong curr_run = 0;\n\tfor (int i = 0; i < test_str.length(); i++) {\n\t\tif (isupper(test_str[i])) {\n\t\t\tcurr_run++;\n\t\t\tif (curr_run > max_run) {\n\t\t\t\tmax_run = curr_run;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tcurr_run = 0;\n\t\t}\n\t}\n\treturn max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long cur_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            cur_run++;\n        } else {\n            max_run = std::max(max_run, cur_run);\n            cur_run = 0;\n        }\n    }\n    max_run = std::max(max_run, cur_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    return std::max(max_run, curr_run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    int count = 0;\n    int max = 0;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(isupper(test_str[i])) {\n            count++;\n            if(count > max) {\n                max = count;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long cur_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      cur_run++;\n      if (cur_run > max_run) {\n        max_run = cur_run;\n      }\n    } else {\n      cur_run = 0;\n    }\n  }\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_count = 0;\n    long count = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n            if (count > max_count) {\n                max_count = count;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return max_count;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n            max_run = std::max(max_run, curr_run);\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (auto ch : test_str) {\n        if (isupper(ch)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123298,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            max_run = std::max(max_run, current_run);\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "tmplurqx10c: /tmp/tmplurqx10c.cpp:22: int main(): Assertion `candidate((\"PrECIOusMOVemENTSYT\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.size(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n    } else {\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n      current_run = 0;\n    }\n  }\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "tmpay_8pvoj: /tmp/tmpay_8pvoj.cpp:22: int main(): Assertion `candidate((\"PrECIOusMOVemENTSYT\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n    } else {\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n      current_run = 0;\n    }\n  }\n  if (current_run > max_run) {\n    max_run = current_run;\n  }\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n\tlong count = 0, max_count = 0;\n\tfor (int i = 0; i < test_str.length(); i++) {\n\t\tif (isupper(test_str[i])) {\n\t\t\tcount++;\n\t\t}\n\t\telse {\n\t\t\tif (count > max_count) {\n\t\t\t\tmax_count = count;\n\t\t\t}\n\t\t\tcount = 0;\n\t\t}\n\t}\n\tif (count > max_count) {\n\t\tmax_count = count;\n\t}\n\treturn max_count;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if(curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n            max_run = std::max(max_run, curr_run);\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto i : test_str) {\n        if (isupper(i)) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_count = 0;\n    long count = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n            if (count > max_count) {\n                max_count = count;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return max_count;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            max_run = std::max(max_run, current_run);\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long curr_run = 0;\n  for (auto c : test_str) {\n    if (isupper(c)) {\n      curr_run++;\n    } else {\n      max_run = std::max(max_run, curr_run);\n      curr_run = 0;\n    }\n  }\n  max_run = std::max(max_run, curr_run);\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            curr_run++;\n            if(curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long run = 0;\n  for (auto c : test_str) {\n    if (isupper(c)) {\n      run++;\n    } else {\n      max_run = std::max(max_run, run);\n      run = 0;\n    }\n  }\n  max_run = std::max(max_run, run);\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123298,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            max_run = std::max(max_run, current_run);\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    return std::max(max_run, curr_run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123298,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(isupper(test_str[i])) {\n            curr_run++;\n            if(curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    int max_count = 0;\n    int count = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n        } else {\n            if (count > max_count) {\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if (count > max_count) {\n        max_count = count;\n    }\n    return max_count;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n    } else {\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n      current_run = 0;\n    }\n  }\n  return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "tmps7y407dl: /tmp/tmps7y407dl.cpp:22: int main(): Assertion `candidate((\"PrECIOusMOVemENTSYT\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    return std::max(max_run, curr_run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    int max_run = 0;\n    int current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    return std::max(max_run, run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    return std::max(max_run, run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for(auto i : test_str) {\n        if(isupper(i)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    return std::max(max_run, curr_run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if(current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "tmpmfb9ph7y: /tmp/tmpmfb9ph7y.cpp:22: int main(): Assertion `candidate((\"PrECIOusMOVemENTSYT\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long count = 0;\n    long max_count = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n        } else {\n            if (count > max_count) {\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if (count > max_count) {\n        max_count = count;\n    }\n    return max_count;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    return std::max(max_run, current_run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    return std::max(max_run, current_run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long current_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            max_run = std::max(max_run, current_run);\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "tmph0rxvqbq: /tmp/tmph0rxvqbq.cpp:22: int main(): Assertion `candidate((\"PrECIOusMOVemENTSYT\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    return std::max(max_run, curr_run);\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    long max_count = 0;\n    long count = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n            if (count > max_count) {\n                max_count = count;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return max_count;\n}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}