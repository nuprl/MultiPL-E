{
  "name": "mbpp_299_max_aggregate",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to calculate the maximum aggregate from the list of tuples.\nUnion_std_string_long max_aggregate(std::vector<Union_std_string_long> stdata) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = max_aggregate;\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 90), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 88), (std::tuple<std::string, long>)std::make_tuple(\"Peter Nichols\", 7), (std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 122), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 84)}))) == std::make_tuple(\"Juan Whelan\", 212));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 50), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 48), (std::tuple<std::string, long>)std::make_tuple(\"Peter Nichols\", 37), (std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 22), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 14)}))) == std::make_tuple(\"Juan Whelan\", 72));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 10), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 20), (std::tuple<std::string, long>)std::make_tuple(\"Peter Nichols\", 30), (std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 40), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 50)}))) == std::make_tuple(\"Sabah Colley\", 70));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    std::string max_string = \"\";\n    long max_long = 0;\n    for (auto i : stdata) {\n        if (i.f0.size() > max_string.size()) {\n            max_string = i.f0;\n        }\n        if (i.f1 > max_long) {\n            max_long = i.f1;\n        }\n    }\n    if (max_string.size() > max_long) {\n        return Union_std_string_long(max_string);\n    } else {\n        return Union_std_string_long(max_long);\n    }",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (auto i = stdata.begin() + 1; i != stdata.end(); ++i) {\n        if (i->f1 > max_aggregate.f1) {\n            max_aggregate = *i;\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for(int i = 1; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate_value = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate_value.f1) {\n            max_aggregate_value = stdata[i];\n        }\n    }\n    return max_aggregate_value;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (max_aggregate.f1 < stdata[i].f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for(int i = 1; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for(int i = 1; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f0 > max_aggregate.f0) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for(int i = 1; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i] > max_aggregate) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (max_aggregate.f1 < stdata[i].f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = Union_std_string_long(\"\");\n    for (auto it = stdata.begin(); it != stdata.end(); ++it) {\n        if (it->f0 == \"\") {\n            if (max_aggregate.f0 == \"\") {\n                max_aggregate = Union_std_string_long(it->f1);\n            } else {\n                if (max_aggregate.f1 < it->f1) {\n                    max_aggregate = Union_std_string_long(it->f1);\n                }\n            }\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for(int i=1;i<stdata.size();i++) {\n        if(stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f0 > max_aggregate.f0) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i] > max_aggregate) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_value = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_value.f1) {\n            max_value = stdata[i];\n        }\n    }\n    return max_value;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for(int i = 1; i < stdata.size(); i++) {\n        if(stdata[i].f0 == \"max\") {\n            if(stdata[i].f1 > max_aggregate.f1) {\n                max_aggregate = stdata[i];\n            }\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 0; i < stdata.size(); i++) {\n        if (stdata[i] > max) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    std::vector<Union_std_string_long>::iterator it;\n    Union_std_string_long max = stdata[0];\n    for(it = stdata.begin(); it != stdata.end(); it++) {\n        if(max.f1 < it->f1) {\n            max.f1 = it->f1;\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate_value;\n    max_aggregate_value = stdata[0];\n    for(int i = 1; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max_aggregate_value.f1) {\n            max_aggregate_value = stdata[i];\n        }\n    }\n    return max_aggregate_value;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_agg = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (max_agg.f1 < stdata[i].f1) {\n            max_agg = stdata[i];\n        }\n    }\n    return max_agg;",
    "    std::string max_str = \"\";\n    long max_int = 0;\n    for (auto i : stdata) {\n        if (i.f0 != \"\") {\n            if (i.f0.length() > max_str.length()) {\n                max_str = i.f0;\n            }\n        } else {\n            if (i.f1 > max_int) {\n                max_int = i.f1;\n            }\n        }\n    }\n    if (max_str != \"\") {\n        return max_str;\n    } else {\n        return max_int;\n    }",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 0; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 0; i < stdata.size(); i++) {\n        if (max_aggregate.f1 < stdata[i].f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for(int i = 1; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    std::vector<Union_std_string_long>::iterator it;\n    Union_std_string_long max = stdata[0];\n    for (it = stdata.begin(); it != stdata.end(); it++) {\n        if (max.f1 < it->f1) {\n            max = *it;\n        }\n    }\n    return max;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i] > max_aggregate) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    std::vector<Union_std_string_long>::iterator it;\n    Union_std_string_long max = stdata[0];\n    for (it = stdata.begin(); it != stdata.end(); ++it) {\n        if (it->f1 > max.f1) {\n            max = *it;\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 0; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for(int i = 1; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate_value = stdata[0];\n    for(int i = 0; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max_aggregate_value.f1) {\n            max_aggregate_value = stdata[i];\n        }\n    }\n    return max_aggregate_value;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_agg = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_agg.f1) {\n            max_agg = stdata[i];\n        }\n    }\n    return max_agg;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i] > max_aggregate) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate_value = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i] > max_aggregate_value) {\n            max_aggregate_value = stdata[i];\n        }\n    }\n    return max_aggregate_value;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (max.f1 < stdata[i].f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for(auto i : stdata) {\n        if(i.f1 > max_aggregate.f1) {\n            max_aggregate = i;\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate_value;\n    max_aggregate_value = stdata[0];\n    for (auto i = stdata.begin(); i != stdata.end(); i++) {\n        if (max_aggregate_value.f1 < i->f1) {\n            max_aggregate_value = *i;\n        }\n    }\n    return max_aggregate_value;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for(int i = 1; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate_value = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate_value.f1) {\n            max_aggregate_value = stdata[i];\n        }\n    }\n    return max_aggregate_value;",
    "    Union_std_string_long max_aggregate_value = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate_value.f1) {\n            max_aggregate_value = stdata[i];\n        }\n    }\n    return max_aggregate_value;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for(int i = 0; i < stdata.size(); i++) {\n        if(max_aggregate.f1 < stdata[i].f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for(int i = 0; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i] > max) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f0 == \"\") {\n            if (max_aggregate.f0 == \"\") {\n                if (stdata[i].f1 > max_aggregate.f1) {\n                    max_aggregate = stdata[i];\n                }\n            }\n        } else {\n            if (max_aggregate.f0 != \"\") {\n                if (stdata[i].f0 > max_aggregate.f0) {\n                    max_aggregate = stdata[i];\n                }\n            }\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    std::vector<Union_std_string_long>::iterator it;\n    Union_std_string_long max_agg = stdata[0];\n    for (it = stdata.begin(); it != stdata.end(); it++) {\n        if (max_agg.f1 < it->f1) {\n            max_agg = *it;\n        }\n    }\n    return max_agg;",
    "    std::vector<Union_std_string_long>::iterator it;\n    Union_std_string_long max = stdata[0];\n    for (it = stdata.begin(); it != stdata.end(); it++) {\n        if (max.f1 < it->f1) {\n            max = *it;\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i] > max_aggregate) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    std::map<std::string, long> m;\n    for (auto i : stdata) {\n        if (i.f0 != \"\") {\n            m[i.f0] += 1;\n        } else {\n            m[std::to_string(i.f1)] += 1;\n        }\n    }\n    std::string max_key = \"\";\n    long max_value = 0;\n    for (auto i : m) {\n        if (i.second > max_value) {\n            max_key = i.first;\n            max_value = i.second;\n        }\n    }\n    return Union_std_string_long(max_key);",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (max.f1 < stdata[i].f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (auto i = stdata.begin(); i != stdata.end(); i++) {\n        if (max_aggregate.f1 < i->f1) {\n            max_aggregate = *i;\n        }\n    }\n    return max_aggregate;",
    "    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std::vector<Union_std_string_long>::iterator it26;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for(int i = 1; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for(int i = 1; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    std::vector<Union_std_string_long>::iterator it = stdata.begin();\n    Union_std_string_long max = *it;\n    for (it = stdata.begin(); it != stdata.end(); it++) {\n        if (max.f1 < it->f1) {\n            max = *it;\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for(int i = 0; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate_result;\n    max_aggregate_result.f0 = \"\";\n    max_aggregate_result.f1 = 0;\n    for (int i = 0; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate_result.f1) {\n            max_aggregate_result.f0 = stdata[i].f0;\n            max_aggregate_result.f1 = stdata[i].f1;\n        }\n    }\n    return max_aggregate_result;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i] > max) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i] > max_aggregate) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (auto i : stdata) {\n        if (i.f1 > max_aggregate.f1) {\n            max_aggregate = i;\n        }\n    }\n    return max_aggregate;",
    "    std::vector<Union_std_string_long>::iterator it;\n    Union_std_string_long max_aggregate = stdata[0];\n    for (it = stdata.begin(); it != stdata.end(); it++) {\n        if (max_aggregate.f1 < it->f1) {\n            max_aggregate = *it;\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); ++i) {\n        if (stdata[i] > max_aggregate) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 0; i < stdata.size(); i++) {\n        if (stdata[i] > max) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i] > max_aggregate) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i] > max_aggregate) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for(int i = 1; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    std::string max_string = \"\";\n    long max_long = 0;\n    for(int i = 0; i < stdata.size(); i++) {\n        if(stdata[i].f0.size() > max_string.size()) {\n            max_string = stdata[i].f0;\n        }\n        if(stdata[i].f1 > max_long) {\n            max_long = stdata[i].f1;\n        }\n    }\n    if(max_string.size() > max_long) {\n        return Union_std_string_long(max_string);\n    }\n    return Union_std_string_long(max_long);",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    std::vector<Union_std_string_long>::iterator it;\n    Union_std_string_long max = stdata[0];\n    for(it = stdata.begin(); it != stdata.end(); it++) {\n        if(max.f1 < it->f1) {\n            max = *it;\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f0 > max_aggregate.f0) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 0; i < stdata.size(); i++) {\n        if (max_aggregate.f1 < stdata[i].f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i] > max_aggregate) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_agg = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_agg.f1) {\n            max_agg = stdata[i];\n        }\n    }\n    return max_agg;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for(int i=1;i<stdata.size();i++) {\n        if(stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate_value = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (max_aggregate_value.f1 < stdata[i].f1) {\n            max_aggregate_value = stdata[i];\n        }\n    }\n    return max_aggregate_value;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std::vector<Union_std_string_long>::iterator it26;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std::vector<Union_std_string_long>::iterator it26;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 0; i < stdata.size(); ++i) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f0 > max_aggregate.f0) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    std::vector<Union_std_string_long>::iterator it;\n    Union_std_string_long max = stdata[0];\n    for (it = stdata.begin(); it != stdata.end(); it++) {\n        if (max.f1 < it->f1) {\n            max = *it;\n        }\n    }\n    return max;",
    "    Union_std_string_long max_agg = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_agg.f1) {\n            max_agg = stdata[i];\n        }\n    }\n    return max_agg;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    std::string max_string = \"\";\n    long max_long = 0;\n    for (auto &i : stdata) {\n        if (i.f0.size() > max_string.size()) {\n            max_string = i.f0;\n        }\n        if (i.f1 > max_long) {\n            max_long = i.f1;\n        }\n    }\n    if (max_string.size() > max_long) {\n        return max_string;\n    } else {\n        return max_long;\n    }",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (auto it = stdata.begin(); it != stdata.end(); it++) {\n        if (it->f1 > max_aggregate.f1) {\n            max_aggregate = *it;\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (auto i = stdata.begin(); i != stdata.end(); i++) {\n        if (max_aggregate.f1 < i->f1) {\n            max_aggregate = *i;\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (max.f1 < stdata[i].f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for(int i=1;i<stdata.size();i++) {\n        if(stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for(int i = 1; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for(int i = 1; i < stdata.size(); i++) {\n        if(stdata[i] > max_aggregate) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    std::vector<std::string> v1;\n    std::vector<long> v2;\n    for (auto i : stdata) {\n        if (i.f0 != \"\") {\n            v1.push_back(i.f0);\n        } else {\n            v2.push_back(i.f1);\n        }\n    }\n    std::sort(v1.begin(), v1.end());\n    std::sort(v2.begin(), v2.end());\n    if (v1.size() > 0) {\n        return Union_std_string_long(v1[v1.size() - 1]);\n    } else {\n        return Union_std_string_long(v2[v2.size() - 1]);\n    }",
    "    std::string max_string = \"\";\n    long max_long = 0;\n    for (auto &i : stdata) {\n        if (i.f0.length() > max_string.length()) {\n            max_string = i.f0;\n        }\n        if (i.f1 > max_long) {\n            max_long = i.f1;\n        }\n    }\n    if (max_string.length() > max_long) {\n        return max_string;\n    }\n    return max_long;",
    "    Union_std_string_long max_agg = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_agg.f1) {\n            max_agg = stdata[i];\n        }\n    }\n    return max_agg;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f0 > max_aggregate.f0) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for(int i = 0; i < stdata.size(); i++) {\n        if(stdata[i].f0 == \"sum\") {\n            max_aggregate.f1 += stdata[i].f1;\n        }\n        else if(stdata[i].f0 == \"max\") {\n            max_aggregate.f1 = std::max(max_aggregate.f1, stdata[i].f1);\n        }\n        else if(stdata[i].f0 == \"min\") {\n            max_aggregate.f1 = std::min(max_aggregate.f1, stdata[i].f1);\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_agg = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_agg.f1) {\n            max_agg = stdata[i];\n        }\n    }\n    return max_agg;",
    "    Union_std_string_long max_aggregate;\n    max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate_value = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i] > max_aggregate_value) {\n            max_aggregate_value = stdata[i];\n        }\n    }\n    return max_aggregate_value;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f0 == \"max\") {\n            if (stdata[i].f1 > max_aggregate.f1) {\n                max_aggregate.f1 = stdata[i].f1;\n            }\n        }\n    }\n    return max_aggregate;",
    "    long max = 0;\n    std::string max_str = \"\";\n    for (auto i : stdata) {\n        if (i.f0.length() > max) {\n            max = i.f0.length();\n            max_str = i.f0;\n        }\n        if (i.f1 > max) {\n            max = i.f1;\n            max_str = \"\";\n        }\n    }\n    if (max_str == \"\") {\n        return Union_std_string_long(max);\n    } else {\n        return Union_std_string_long(max_str);\n    }",
    "    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std::vector<Union_std_string_long>::iterator it26;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    std::vector<Union_std_string_long>::iterator it;\n    Union_std_string_long max_val = stdata[0];\n    for (it = stdata.begin(); it != stdata.end(); it++) {\n        if (max_val.f1 < it->f1) {\n            max_val = *it;\n        }\n    }\n    return max_val;",
    "    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std::vector<Union_std_string_long>::iterator it26;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max = stdata[0];\n    for (auto i = stdata.begin(); i != stdata.end(); i++) {\n        if (max.f1 < i->f1) {\n            max = *i;\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (max_aggregate.f1 < stdata[i].f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate_value = stdata[0];\n    for(int i = 1; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max_aggregate_value.f1) {\n            max_aggregate_value = stdata[i];\n        }\n    }\n    return max_aggregate_value;",
    "    std::vector<std::string> v1;\n    std::vector<long> v2;\n    for(int i=0;i<stdata.size();i++){\n        if(stdata[i].f0 == stdata[i].f0){\n            v1.push_back(stdata[i].f0);\n        }\n        else{\n            v2.push_back(stdata[i].f1);\n        }\n    }\n    if(v1.size()>v2.size()){\n        std::sort(v1.begin(),v1.end());\n        return v1[v1.size()-1];\n    }\n    else{\n        std::sort(v2.begin(),v2.end());\n        return v2[v2.size()-1];\n    }",
    "    std::vector<Union_std_string_long>::iterator it;\n    Union_std_string_long max = stdata[0];\n    for (it = stdata.begin(); it != stdata.end(); it++) {\n        if (max.f1 < it->f1) {\n            max = *it;\n        }\n    }\n    return max;",
    "    std::string max_string = \"\";\n    long max_long = 0;\n    for (auto i : stdata) {\n        if (i.f0.size() > max_string.size()) {\n            max_string = i.f0;\n        }\n        if (i.f1 > max_long) {\n            max_long = i.f1;\n        }\n    }\n    if (max_string.size() > max_long) {\n        return max_string;\n    } else {\n        return max_long;\n    }",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (auto i : stdata) {\n        if (i.f1 > max_aggregate.f1) {\n            max_aggregate = i;\n        }\n    }\n    return max_aggregate;",
    "    std::vector<Union_std_string_long>::iterator it;\n    std::string max_string;\n    long max_long = 0;\n    for (it = stdata.begin(); it != stdata.end(); ++it) {\n        if (it->f0.length() > max_string.length()) {\n            max_string = it->f0;\n        }\n        if (it->f1 > max_long) {\n            max_long = it->f1;\n        }\n    }\n    if (max_string.length() > max_long) {\n        return max_string;\n    } else {\n        return max_long;\n    }",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for(int i = 1; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate_value = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f0 == \"max\") {\n            if (stdata[i].f1 > max_aggregate_value.f1) {\n                max_aggregate_value.f1 = stdata[i].f1;\n            }\n        }\n    }\n    return max_aggregate_value;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f0.length() > max_aggregate.f0.length()) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    std::vector<Union_std_string_long>::iterator it;\n    Union_std_string_long max_agg = stdata[0];\n    for(it = stdata.begin(); it != stdata.end(); it++) {\n        if(max_agg.f1 < it->f1) {\n            max_agg = *it;\n        }\n    }\n    return max_agg;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;"
  ]
}