{
  "name": "mbpp_772_remove_length",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all the words with k length in the given string.\nstd::string remove_length(std::string test_str, long K) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = remove_length;\n    assert(candidate((\"The person is most value tet\"), (3)) == (\"person is most value\"));\n    assert(candidate((\"If you told me about this ok\"), (4)) == (\"If you me about ok\"));\n    assert(candidate((\"Forces of darkeness is come into the play\"), (4)) == (\"Forces of darkeness is the\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] != ' ') {\n            word += test_str[i];\n        } else {\n            if (word.length() != K) {\n                result += word + \" \";\n            }\n            word = \"\";\n        }\n    }\n    if (word.length() != K) {\n        result += word;\n    }\n    return result;",
    "    std::string result;\n    std::stringstream ss(test_str);\n    std::string word;\n    while(ss >> word) {\n        if(word.length() != K) {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] == ' ') {\n            if (word.length() != K) {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += test_str[i];\n        }\n    }\n    if (word.length() != K) {\n        result += word;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] != ' ') {\n            word += test_str[i];\n        } else {\n            if(word.length() != K) {\n                result += word + \" \";\n            }\n            word = \"\";\n        }\n    }\n    if(word.length() != K) {\n        result += word;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (long i = 0; i < test_str.length(); i++) {\n        if (test_str[i] == ' ') {\n            if (word.length() != K) {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += test_str[i];\n        }\n    }\n    if (word.length() != K) {\n        result += word;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string temp = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] != ' ') {\n            temp += test_str[i];\n        }\n        else {\n            if (temp.length() != K) {\n                result += temp + \" \";\n            }\n            temp = \"\";\n        }\n    }\n    if (temp.length() != K) {\n        result += temp;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] != ' ') {\n            word += test_str[i];\n        } else {\n            if (word.length() != K) {\n                result += word + \" \";\n            }\n            word = \"\";\n        }\n    }\n    if (word.length() != K) {\n        result += word;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::stringstream ss(test_str);\n    std::string word;\n    while(ss >> word) {\n        if(word.length() != K) {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::stringstream ss(test_str);\n    std::string word;\n    while(ss >> word) {\n        if(word.length() != K) {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] == ' ') {\n            if (word.length() != K) {\n                result += word;\n                result += ' ';\n            }\n            word = \"\";\n        } else {\n            word += test_str[i];\n        }\n    }\n    if (word.length() != K) {\n        result += word;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] == ' ') {\n            if (word.length() != K) {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += test_str[i];\n        }\n    }\n    if (word.length() != K) {\n        result += word;\n    }\n    return result;",
    "    std::string result;\n    std::stringstream ss(test_str);\n    std::string word;\n    while(ss >> word) {\n        if(word.length() != K) {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::stringstream ss(test_str);\n    std::string word;\n    while(ss >> word) {\n        if(word.length() != K) {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (long i = 0; i < test_str.length(); i++) {\n        if (test_str[i] == ' ') {\n            if (word.length() != K) {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += test_str[i];\n        }\n    }\n    if (word.length() != K) {\n        result += word;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] == ' ') {\n            if(word.length() != K) {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += test_str[i];\n        }\n    }\n    if(word.length() != K) {\n        result += word;\n    }\n    return result;",
    "  std::string result = \"\";\n  std::string word = \"\";\n  for (long i = 0; i < test_str.length(); i++) {\n    if (test_str[i] == ' ') {\n      if (word.length() != K) {\n        result += word + \" \";\n      }\n      word = \"\";\n    } else {\n      word += test_str[i];\n    }\n  }\n  if (word.length() != K) {\n    result += word;\n  }\n  return result;",
    "    std::string result = \"\";\n    std::stringstream ss(test_str);\n    std::string word;\n    while (ss >> word) {\n        if (word.length() != K) {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string temp = \"\";\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] == ' ') {\n            if(temp.length() != K) {\n                result += temp + \" \";\n            }\n            temp = \"\";\n        }\n        else {\n            temp += test_str[i];\n        }\n    }\n    if(temp.length() != K) {\n        result += temp;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (long i = 0; i < test_str.length(); i++) {\n        if (test_str[i] == ' ') {\n            if (word.length() != K) {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += test_str[i];\n        }\n    }\n    if (word.length() != K) {\n        result += word;\n    }\n    return result;",
    "    std::string result;\n    std::stringstream ss(test_str);\n    std::string word;\n    while(ss >> word) {\n        if(word.length() != K) {\n            result += word + \" \";\n        }\n    }\n    return result;"
  ]
}