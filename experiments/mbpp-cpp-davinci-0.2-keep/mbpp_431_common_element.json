{
  "name": "mbpp_431_common_element",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes two lists and returns true if they have at least one common element.\nstd::optional<bool> common_element(std::any list1, std::any list2) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = common_element;\n    assert(candidate((std::any({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::any({(long)5, (long)6, (long)7, (long)8, (long)9}))) == true);\n    assert(candidate((std::any({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::any({(long)6, (long)7, (long)8, (long)9}))) == std::nullopt);\n    assert(candidate((std::any({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})), (std::any({(std::string)\"d\", (std::string)\"b\", (std::string)\"e\"}))) == true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        auto list1_ = std::any_cast<std::vector<int>>(list1);\n        auto list2_ = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set1(list1_.begin(), list1_.end());\n        std::unordered_set<int> set2(list2_.begin(), list2_.end());\n        for(auto i : set1) {\n            if(set2.find(i) != set2.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_ = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_ = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> set1(list1_.begin(), list1_.end());\n        std::unordered_set<std::string> set2(list2_.begin(), list2_.end());\n        for(auto i : set1) {\n            if(set2.find(i) != set2.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> s;\n        for (auto i : l1) {\n            s.insert(i);\n        }\n        for (auto i : l2) {\n            if (s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::list<int>)) {\n        auto l1 = std::any_cast<std::list<int>>(list1);\n        auto l2 = std::any_cast<std::list<int>>(list2);\n        std::unordered_set<int> s;\n        for (auto i : l1) {\n            s.insert(i);\n        }\n        for (auto i : l2) {\n            if (s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> list1_set(list1_vector.begin(), list1_vector.end());\n    std::unordered_set<int> list2_set(list2_vector.begin(), list2_vector.end());\n    for (auto element : list1_set) {\n        if (list2_set.find(element) != list2_set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> s;\n        for(auto i : l1) {\n            s.insert(i);\n        }\n        for(auto i : l2) {\n            if(s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::list<int>)) {\n        std::list<int> l1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> l2 = std::any_cast<std::list<int>>(list2);\n        std::unordered_set<int> s;\n        for(auto i : l1) {\n            s.insert(i);\n        }\n        for(auto i : l2) {\n            if(s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto list1_vec = std::any_cast<std::vector<int>>(list1);\n        auto list2_vec = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set;\n        for (auto i : list1_vec) {\n            set.insert(i);\n        }\n        for (auto i : list2_vec) {\n            if (set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_vec = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_vec = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> set;\n        for (auto i : list1_vec) {\n            set.insert(i);\n        }\n        for (auto i : list2_vec) {\n            if (set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::any_cast<std::vector<int>>(list1);\n    std::any_cast<std::vector<int>>(list2);\n    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::sort(v1.begin(), v1.end());\n    std::sort(v2.begin(), v2.end());\n    std::vector<int> v3;\n    std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), std::back_inserter(v3));\n    if (v3.size() > 0) {\n        return true;\n    }\n    return false;",
    "    // TODO: Implement this function\n    return std::nullopt;",
    "    std::unordered_set<int> set;\n    for(auto i: list1) {\n        set.insert(i);\n    }\n    for(auto i: list2) {\n        if(set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        auto list1_vector = std::any_cast<std::vector<int>>(list1);\n        auto list2_vector = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set(list1_vector.begin(), list1_vector.end());\n        for(auto i : list2_vector) {\n            if(set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_vector = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_vector = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> set(list1_vector.begin(), list1_vector.end());\n        for(auto i : list2_vector) {\n            if(set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if(list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> list1_set;\n    for(auto i : list1_vector) {\n        list1_set.insert(i);\n    }\n    for(auto i : list2_vector) {\n        if(list1_set.find(i) != list1_set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<int> set;\n    for (auto &i : list1) {\n        set.insert(i);\n    }\n    for (auto &i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::set<std::any> set1;\n    std::set<std::any> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        for(auto i : l1) {\n            for(auto j : l2) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::list<int>)) {\n        auto l1 = std::any_cast<std::list<int>>(list1);\n        auto l2 = std::any_cast<std::list<int>>(list2);\n        for(auto i : l1) {\n            for(auto j : l2) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::set<int>)) {\n        auto l1 = std::any_cast<std::set<int>>(list1);\n        auto l2 = std::any_cast<std::set<int>>(list2);\n        for(auto i : l1) {\n            for(auto j : l2) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::any_cast<int>(list1);\n    std::any_cast<int>(list2);\n    return true;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i : l1) {\n            if (std::binary_search(l2.begin(), l2.end(), i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        auto l1 = std::any_cast<std::vector<double>>(list1);\n        auto l2 = std::any_cast<std::vector<double>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i : l1) {\n            if (std::binary_search(l2.begin(), l2.end(), i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i : l1) {\n            if (std::binary_search(l2.begin(), l2.end(), i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i = l1.begin(), j = l2.begin(); i != l1.end() && j != l2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i = l1.begin(), j = l2.begin(); i != l1.end() && j != l2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<std::any> set1;\n    std::unordered_set<std::any> set2;\n    for (auto element : list1) {\n        set1.insert(element);\n    }\n    for (auto element : list2) {\n        set2.insert(element);\n    }\n    for (auto element : set1) {\n        if (set2.find(element) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<int> s;\n    for (auto i : list1) {\n        s.insert(i);\n    }\n    for (auto i : list2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> list1_set(list1_vector.begin(), list1_vector.end());\n    for(auto element : list2_vector) {\n        if(list1_set.find(element) != list1_set.end()) {\n            return true;\n        }\n    }\n    return false;"
  ]
}