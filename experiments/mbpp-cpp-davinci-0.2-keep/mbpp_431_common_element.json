{
  "name": "mbpp_431_common_element",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes two lists and returns true if they have at least one common element.\nstd::optional<bool> common_element(std::any list1, std::any list2) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = common_element;\n    assert(candidate((std::any({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::any({(long)5, (long)6, (long)7, (long)8, (long)9}))) == true);\n    assert(candidate((std::any({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::any({(long)6, (long)7, (long)8, (long)9}))) == std::nullopt);\n    assert(candidate((std::any({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})), (std::any({(std::string)\"d\", (std::string)\"b\", (std::string)\"e\"}))) == true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        auto list1_ = std::any_cast<std::vector<int>>(list1);\n        auto list2_ = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set1(list1_.begin(), list1_.end());\n        std::unordered_set<int> set2(list2_.begin(), list2_.end());\n        for(auto i : set1) {\n            if(set2.find(i) != set2.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_ = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_ = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> set1(list1_.begin(), list1_.end());\n        std::unordered_set<std::string> set2(list2_.begin(), list2_.end());\n        for(auto i : set1) {\n            if(set2.find(i) != set2.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> s;\n        for (auto i : l1) {\n            s.insert(i);\n        }\n        for (auto i : l2) {\n            if (s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::list<int>)) {\n        auto l1 = std::any_cast<std::list<int>>(list1);\n        auto l2 = std::any_cast<std::list<int>>(list2);\n        std::unordered_set<int> s;\n        for (auto i : l1) {\n            s.insert(i);\n        }\n        for (auto i : l2) {\n            if (s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> list1_set(list1_vector.begin(), list1_vector.end());\n    std::unordered_set<int> list2_set(list2_vector.begin(), list2_vector.end());\n    for (auto element : list1_set) {\n        if (list2_set.find(element) != list2_set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> s;\n        for(auto i : l1) {\n            s.insert(i);\n        }\n        for(auto i : l2) {\n            if(s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::list<int>)) {\n        std::list<int> l1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> l2 = std::any_cast<std::list<int>>(list2);\n        std::unordered_set<int> s;\n        for(auto i : l1) {\n            s.insert(i);\n        }\n        for(auto i : l2) {\n            if(s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto list1_vec = std::any_cast<std::vector<int>>(list1);\n        auto list2_vec = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set;\n        for (auto i : list1_vec) {\n            set.insert(i);\n        }\n        for (auto i : list2_vec) {\n            if (set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_vec = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_vec = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> set;\n        for (auto i : list1_vec) {\n            set.insert(i);\n        }\n        for (auto i : list2_vec) {\n            if (set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::any_cast<std::vector<int>>(list1);\n    std::any_cast<std::vector<int>>(list2);\n    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::sort(v1.begin(), v1.end());\n    std::sort(v2.begin(), v2.end());\n    std::vector<int> v3;\n    std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), std::back_inserter(v3));\n    if (v3.size() > 0) {\n        return true;\n    }\n    return false;",
    "    // TODO: Implement this function\n    return std::nullopt;",
    "    std::unordered_set<int> set;\n    for(auto i: list1) {\n        set.insert(i);\n    }\n    for(auto i: list2) {\n        if(set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        auto list1_vector = std::any_cast<std::vector<int>>(list1);\n        auto list2_vector = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set(list1_vector.begin(), list1_vector.end());\n        for(auto i : list2_vector) {\n            if(set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_vector = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_vector = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> set(list1_vector.begin(), list1_vector.end());\n        for(auto i : list2_vector) {\n            if(set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if(list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> list1_set;\n    for(auto i : list1_vector) {\n        list1_set.insert(i);\n    }\n    for(auto i : list2_vector) {\n        if(list1_set.find(i) != list1_set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<int> set;\n    for (auto &i : list1) {\n        set.insert(i);\n    }\n    for (auto &i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::set<std::any> set1;\n    std::set<std::any> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        for(auto i : l1) {\n            for(auto j : l2) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::list<int>)) {\n        auto l1 = std::any_cast<std::list<int>>(list1);\n        auto l2 = std::any_cast<std::list<int>>(list2);\n        for(auto i : l1) {\n            for(auto j : l2) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::set<int>)) {\n        auto l1 = std::any_cast<std::set<int>>(list1);\n        auto l2 = std::any_cast<std::set<int>>(list2);\n        for(auto i : l1) {\n            for(auto j : l2) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::any_cast<int>(list1);\n    std::any_cast<int>(list2);\n    return true;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i : l1) {\n            if (std::binary_search(l2.begin(), l2.end(), i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        auto l1 = std::any_cast<std::vector<double>>(list1);\n        auto l2 = std::any_cast<std::vector<double>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i : l1) {\n            if (std::binary_search(l2.begin(), l2.end(), i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i : l1) {\n            if (std::binary_search(l2.begin(), l2.end(), i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i = l1.begin(), j = l2.begin(); i != l1.end() && j != l2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i = l1.begin(), j = l2.begin(); i != l1.end() && j != l2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<std::any> set1;\n    std::unordered_set<std::any> set2;\n    for (auto element : list1) {\n        set1.insert(element);\n    }\n    for (auto element : list2) {\n        set2.insert(element);\n    }\n    for (auto element : set1) {\n        if (set2.find(element) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<int> s;\n    for (auto i : list1) {\n        s.insert(i);\n    }\n    for (auto i : list2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> list1_set(list1_vector.begin(), list1_vector.end());\n    for(auto element : list2_vector) {\n        if(list1_set.find(element) != list1_set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set(l1.begin(), l1.end());\n        for (auto i : l2) {\n            if (set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::list<int>)) {\n        auto l1 = std::any_cast<std::list<int>>(list1);\n        auto l2 = std::any_cast<std::list<int>>(list2);\n        std::unordered_set<int> set(l1.begin(), l1.end());\n        for (auto i : l2) {\n            if (set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> set(l1.begin(), l1.end());\n        for (auto i : l2) {\n            if (set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::list<std::string>)) {\n        auto l1 = std::any_cast<std::list<std::string>>(list1);\n        auto l2 = std::any_cast<std::list<std::string>>(list2);\n        std::",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n    }\n    if (list1.type() == typeid(std::list<int>)) {\n        std::list<int> l1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> l2 = std::any_cast<std::list<int>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;",
    "    if(list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_vec = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_vec = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set;\n        for(auto& elem : list1_vec) {\n            set.insert(elem);\n        }\n        for(auto& elem : list2_vec) {\n            if(set.find(elem) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    } else {\n        return {};\n    }",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (auto i : l1) {\n        s.insert(i);\n    }\n    for (auto i : l2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    // TODO: Implement this function\n    return std::nullopt;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while(i < l1.size() && j < l2.size()) {\n            if(l1[i] == l2[j]) {\n                return true;\n            }\n            if(l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::list<int>)) {\n        std::list<int> l1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> l2 = std::any_cast<std::list<int>>(list2);\n        l1.sort();\n        l2.sort();\n        auto it1 = l1.begin();\n        auto it2 = l2.begin();\n        while(it1 != l1.end() && it2 != l2.end()) {\n            if(*it1 == *it2) {\n                return true;\n            }\n            if(*it1 < *it2) {\n                it1++;\n            } else {\n                it2++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<std::any> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        auto list1_ = std::any_cast<std::vector<int>>(list1);\n        auto list2_ = std::any_cast<std::vector<int>>(list2);\n        for (auto i : list1_) {\n            for (auto j : list2_) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n    }\n    return {};",
    "  std::set<int> set1;\n  std::set<int> set2;\n  for (auto i : list1) {\n    set1.insert(i);\n  }\n  for (auto i : list2) {\n    set2.insert(i);\n  }\n  for (auto i : set1) {\n    if (set2.find(i) != set2.end()) {\n      return true;\n    }\n  }\n  return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::list<int>)) {\n        std::list<int> l1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> l2 = std::any_cast<std::list<int>>(list2);\n        l1.sort();\n        l2.sort();\n        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n                if (l1[i] == l2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::set<int>)) {\n        std::set<int> s1 = std::any_cast<std::set<int>>(list1);\n        std::set<int> s2 = std::any_cast<std::set<int>>(list2);\n        for (int i = 0; i < s1.size(); i++) {\n            for (int j = 0; j < s2.size(); j++) {\n                if (s1[i] == s2[j]) {\n                    return true;\n                }",
    "    if(list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n    int i = 0, j = 0;\n    while(i < l1.size() && j < l2.size()) {\n        if(l1[i] == l2[j]) {\n            return true;\n        }\n        if(l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return false;",
    "    try {\n        std::vector<int> vector1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> vector2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(vector1.begin(), vector1.end());\n        std::sort(vector2.begin(), vector2.end());\n        int i = 0, j = 0;\n        while (i < vector1.size() && j < vector2.size()) {\n            if (vector1[i] == vector2[j]) {\n                return true;\n            }\n            if (vector1[i] < vector2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } catch (const std::bad_any_cast &e) {\n        std::cout << e.what() << std::endl;\n        return std::nullopt;\n    }",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        auto l1 = std::any_cast<std::vector<double>>(list1);\n        auto l2 = std::any_cast<std::vector<double>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    if (list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> list1_set(list1_vector.begin(), list1_vector.end());\n    std::unordered_set<int> list2_set(list2_vector.begin(), list2_vector.end());\n    for (auto element : list1_set) {\n        if (list2_set.find(element) != list2_set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for(int i = 0; i < v1.size(); i++) {\n            for(int j = 0; j < v2.size(); j++) {\n                if(v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::list<int>)) {\n        std::list<int> v1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> v2 = std::any_cast<std::list<int>>(list2);\n        v1.sort();\n        v2.sort();\n        for(int i = 0; i < v1.size(); i++) {\n            for(int j = 0; j < v2.size(); j++) {\n                if(v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::set<int>)) {\n        std::set<int> v1 = std::any_cast<std::set<int>>(list1);\n        std::set<int> v2 = std::any_cast<std::set<int>>(list2);\n        for(int i = 0; i < v1.size(); i++) {\n            for(int j = 0; j < v2.size(); j++) {\n                if(v1[i] == v2[j]) {\n                    return true;\n                }",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set;\n    for (auto i : list1_vector) {\n        set.insert(i);\n    }\n    for (auto i : list2_vector) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n                if (l1[i] == l2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> l1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n                if (l1[i] == l2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set;\n    for (int i = 0; i < list1_vector.size(); i++) {\n        set.insert(list1_vector[i]);\n    }\n    for (int i = 0; i < list2_vector.size(); i++) {\n        if (set.find(list2_vector[i]) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (auto i = v1.begin(), j = v2.begin(); i != v1.end() && j != v2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            else if (*i < *j) {\n                i++;\n            }\n            else {\n                j++;\n            }\n        }\n    }\n    else if (list1.type() == typeid(std::list<int>)) {\n        std::list<int> l1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> l2 = std::any_cast<std::list<int>>(list2);\n        l1.sort();\n        l2.sort();\n        for (auto i = l1.begin(), j = l2.begin(); i != l1.end() && j != l2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            else if (*i < *j) {\n                i++;\n            }\n            else {\n                j++;\n            }\n        }\n    }\n    else if (list1.type() == typeid(std::set<int>)) {\n        std::set<int> s1 = std::any_cast<std::set<int>>(list1);\n        std::set<int> s2 = std::any_cast<std::set<int>>(list2);\n        for (auto i = s1.begin(), j = s2.begin(); i != s1.end() && j != s2.end();",
    "  if(list1.empty() || list2.empty()) {\n    return std::nullopt;\n  }\n  std::unordered_set<std::any> set1;\n  for(auto& elem : list1) {\n    set1.insert(elem);\n  }\n  for(auto& elem : list2) {\n    if(set1.find(elem) != set1.end()) {\n      return true;\n    }\n  }\n  return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (auto i : l1) {\n        s.insert(i);\n    }\n    for (auto i : l2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n        std::sort(list1_vector.begin(), list1_vector.end());\n        std::sort(list2_vector.begin(), list2_vector.end());\n        int i = 0, j = 0;\n        while (i < list1_vector.size() && j < list2_vector.size()) {\n            if (list1_vector[i] == list2_vector[j]) {\n                return true;\n            }\n            if (list1_vector[i] < list2_vector[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while(i < l1.size() && j < l2.size()) {\n            if(l1[i] == l2[j]) {\n                return true;\n            }\n            if(l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> l1 = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> l2 = std::any_cast<std::vector<double>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while(i < l1.size() && j < l2.size()) {\n            if(l1[i] == l2[j]) {\n                return true;\n            }\n            if(l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<char>)) {\n        std::vector<char> l1 = std::any_cast<std::vector<char>>(list1);\n        std::vector<char> l2 = std::any_cast<std::vector<char>>(list2);",
    "    if(list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_vec = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_vec = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set;\n        for(int i = 0; i < list1_vec.size(); i++) {\n            set.insert(list1_vec[i]);\n        }\n        for(int i = 0; i < list2_vec.size(); i++) {\n            if(set.find(list2_vec[i]) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    else {\n        return std::nullopt;\n    }",
    "    std::set<int> set1;\n    std::set<int> set2;\n    for(auto i : list1) {\n        set1.insert(i);\n    }\n    for(auto i : list2) {\n        set2.insert(i);\n    }\n    for(auto i : set1) {\n        if(set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s1(v1.begin(), v1.end());\n    std::unordered_set<int> s2(v2.begin(), v2.end());\n    for (auto i : s1) {\n        if (s2.find(i) != s2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set1;\n    for (auto i : vec1) {\n        set1.insert(i);\n    }\n    for (auto i : vec2) {\n        if (set1.find(i) != set1.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.empty() || list2.empty()) {\n        return std::nullopt;\n    }\n    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n        std::sort(list1_vector.begin(), list1_vector.end());\n        std::sort(list2_vector.begin(), list2_vector.end());\n        int i = 0, j = 0;\n        while(i < list1_vector.size() && j < list2_vector.size()) {\n            if(list1_vector[i] == list2_vector[j]) {\n                return true;\n            }\n            if(list1_vector[i] < list2_vector[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<char>)) {\n        std::vector<char> list1_vector = std::any_cast<std::vector<char>>(list1);\n        std::vector<char> list2_vector = std::any_cast<std::vector<char>>(list2);\n        std::sort(list1_vector.begin(), list1_vector.end());\n        std::sort(list2_vector.begin(), list2_vector.end());\n        int i = 0, j = 0;\n        while(i < list1_vector.size() && j < list2_vector.size()) {\n            if(list1_vector[i] == list2_vector[j]) {\n                return true;\n            }\n            if(list1_vector[i] < list2_vector[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        std::",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n        std::sort(list1_vector.begin(), list1_vector.end());\n        std::sort(list2_vector.begin(), list2_vector.end());\n        for (auto i = list1_vector.begin(), j = list2_vector.begin(); i != list1_vector.end() && j != list2_vector.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n    }\n    if (list1.type() == typeid(std::list<int>)) {\n        std::list<int> list1_list = std::any_cast<std::list<int>>(list1);\n        std::list<int> list2_list = std::any_cast<std::list<int>>(list2);\n        list1_list.sort();\n        list2_list.sort();\n        for (auto i = list1_list.begin(), j = list2_list.begin(); i != list1_list.end() && j != list2_list.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> list1_set;\n    for (auto i : list1_vector) {\n        list1_set.insert(i);\n    }\n    for (auto i : list2_vector) {\n        if (list1_set.find(i) != list1_set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i = l1.begin(), j = l2.begin(); i != l1.end() && j != l2.end();) {\n            if (*i == *j) {\n                return true;\n            } else if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> l1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i = l1.begin(), j = l2.begin(); i != l1.end() && j != l2.end();) {\n            if (*i == *j) {\n                return true;\n            } else if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else {\n        return std::nullopt;\n    }",
    "    if(list1.empty() || list2.empty()) {\n        return std::nullopt;\n    }\n    std::set<int> set1;\n    std::set<int> set2;\n    for(auto i : list1) {\n        set1.insert(i);\n    }\n    for(auto i : list2) {\n        set2.insert(i);\n    }\n    for(auto i : set1) {\n        if(set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<std::any> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set(l1.begin(), l1.end());\n        for(auto i : l2) {\n            if(set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> l1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> set(l1.begin(), l1.end());\n        for(auto i : l2) {\n            if(set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::list<int>)) {\n        std::list<int> v1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> v2 = std::any_cast<std::list<int>>(list2);\n        v1.sort();\n        v2.sort();\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        auto list1_vector = std::any_cast<std::vector<int>>(list1);\n        auto list2_vector = std::any_cast<std::vector<int>>(list2);\n        for(auto i : list1_vector) {\n            for(auto j : list2_vector) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_vector = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_vector = std::any_cast<std::vector<std::string>>(list2);\n        for(auto i : list1_vector) {\n            for(auto j : list2_vector) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<double>)) {\n        auto list1_vector = std::any_cast<std::vector<double>>(list1);\n        auto list2_vector = std::any_cast<std::vector<double>>(list2);\n        for(auto i : list1_vector) {\n            for(auto j : list2_vector) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    // TODO: implement\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> s(l1.begin(), l1.end());\n        for (auto i : l2) {\n            if (s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> s(l1.begin(), l1.end());\n        for (auto i : l2) {\n            if (s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<int> set;\n    for (auto elem : list1) {\n        set.insert(elem);\n    }\n    for (auto elem : list2) {\n        if (set.find(elem) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<int> set;\n    for(auto i : list1) {\n        set.insert(i);\n    }\n    for(auto i : list2) {\n        if(set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto v1 = std::any_cast<std::vector<int>>(list1);\n        auto v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (auto i = v1.begin(), j = v2.begin(); i != v1.end() && j != v2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            if (*i < *j) {\n                ++i;\n            } else {\n                ++j;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::list<int>)) {\n        auto v1 = std::any_cast<std::list<int>>(list1);\n        auto v2 = std::any_cast<std::list<int>>(list2);\n        v1.sort();\n        v2.sort();\n        for (auto i = v1.begin(), j = v2.begin(); i != v1.end() && j != v2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            if (*i < *j) {\n                ++i;\n            } else {\n                ++j;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        return std::any(std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), l1.begin()) != l1.end());\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        return std::any(std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), l1.begin()) != l1.end());\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        auto l1 = std::any_cast<std::vector<double>>(list1);\n        auto l2 = std::any_cast<std::vector<double>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        return std::any(std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), l1.begin()) != l1.end());\n    }\n    return std::nullopt;",
    "    std::unordered_set<std::any> set;\n    for (auto &i : list1) {\n        set.insert(i);\n    }\n    for (auto &i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::list<int>) || list2.type() != typeid(std::list<int>)) {\n        return std::nullopt;\n    }\n    std::list<int> l1 = std::any_cast<std::list<int>>(list1);\n    std::list<int> l2 = std::any_cast<std::list<int>>(list2);\n    std::unordered_set<int> s1(l1.begin(), l1.end());\n    std::unordered_set<int> s2(l2.begin(), l2.end());\n    std::vector<int> v(s1.size() + s2.size());\n    auto it = std::set_intersection(s1.begin(), s1.end(), s2.begin(), s2.end(), v.begin());\n    v.resize(it - v.begin());\n    return v.size() > 0;",
    "    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto list1_ = std::any_cast<std::vector<int>>(list1);\n        auto list2_ = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set(list1_.begin(), list1_.end());\n        for (auto i : list2_) {\n            if (set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_ = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_ = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> set(list1_.begin(), list1_.end());\n        for (auto i : list2_) {\n            if (set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> l1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> l2 = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "  // Your code here\n  return std::nullopt;",
    "    std::unordered_set<int> set;\n    for(auto x : list1) {\n        set.insert(x);\n    }\n    for(auto x : list2) {\n        if(set.find(x) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n        std::sort(list1_.begin(), list1_.end());\n        std::sort(list2_.begin(), list2_.end());\n        for (int i = 0; i < list1_.size(); i++) {\n            if (std::binary_search(list2_.begin(), list2_.end(), list1_[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> list1_ = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> list2_ = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(list1_.begin(), list1_.end());\n        std::sort(list2_.begin(), list2_.end());\n        for (int i = 0; i < list1_.size(); i++) {\n            if (std::binary_search(list2_.begin(), list2_.end(), list1_[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    // TODO: Implement\n    return std::nullopt;",
    "    std::unordered_set<int> s;\n    for (auto i : list1) {\n        s.insert(i);\n    }\n    for (auto i : list2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<std::any> set1;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        if (set1.find(i) != set1.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.empty() || list2.empty()) {\n        return std::nullopt;\n    }\n    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<std::any> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<std::any> set;\n    for (auto& i : list1) {\n        set.insert(i);\n    }\n    for (auto& i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        for(int i = 0; i < vec1.size(); i++) {\n            for(int j = 0; j < vec2.size(); j++) {\n                if(vec1[i] == vec2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> vec1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> vec2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        for(int i = 0; i < vec1.size(); i++) {\n            for(int j = 0; j < vec2.size(); j++) {\n                if(vec1[i] == vec2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<int> set;\n    for (auto x : list1) {\n        set.insert(x);\n    }\n    for (auto x : list2) {\n        if (set.find(x) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        if (list2.type() == typeid(std::vector<int>)) {\n            std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n            for (int i = 0; i < l1.size(); i++) {\n                for (int j = 0; j < l2.size(); j++) {\n                    if (l1[i] == l2[j]) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        else if (list2.type() == typeid(std::list<int>)) {\n            std::list<int> l2 = std::any_cast<std::list<int>>(list2);\n            for (int i = 0; i < l1.size(); i++) {\n                for (auto j = l2.begin(); j != l2.end(); j++) {\n                    if (l1[i] == *j) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        else {\n            return {};\n        }\n    }\n    else if (list1.type() == typeid(std::list<int>)) {\n        std::list<int> l1 = std::any_cast<std::list<int>>(list1);\n        if (list2.type() == typeid(std::vector<int>)) {\n            std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n            for (auto i = l1.begin(); i != l1.end(); i++) {\n                for (int j = 0; j < l2.size(); j++) {\n                    if (*i == l2[j]) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        else if (list2.type() == typeid(std::list<int>)) {\n            std::list",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i = l1.begin(), j = l2.begin(); i != l1.end() && j != l2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<char>)) {\n        auto l1 = std::any_cast<std::vector<char>>(list1);\n        auto l2 = std::any_cast<std::vector<char>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i = l1.begin(), j = l2.begin(); i != l1.end() && j != l2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i",
    "    if (list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set;\n        for (auto i : list1_) {\n            set.insert(i);\n        }\n        for (auto i : list2_) {\n            if (set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return {};",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i = l1.begin(), j = l2.begin(); i != l1.end() && j != l2.end();) {\n            if (*i == *j) {\n                return true;\n            } else if (*i < *j) {\n                ++i;\n            } else {\n                ++j;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i = l1.begin(), j = l2.begin(); i != l1.end() && j != l2.end();) {\n            if (*i == *j) {\n                return true;\n            } else if (*i < *j) {\n                ++i;\n            } else {\n                ++j;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1[i] == l2[j]) {\n                    return true;\n                }\n            }\n        }\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> l1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1[i] == l2[j]) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (int i = 0; i < l1.size(); i++) {\n            if (std::binary_search(l2.begin(), l2.end(), l1[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::list<int>)) {\n        std::list<int> l1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> l2 = std::any_cast<std::list<int>>(list2);\n        l1.sort();\n        l2.sort();\n        for (int i = 0; i < l1.size(); i++) {\n            if (std::binary_search(l2.begin(), l2.end(), l1[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::set<int>)) {\n        std::set<int> l1 = std::any_cast<std::set<int>>(list1);\n        std::set<int> l2 = std::any_cast<std::set<int>>(list2);\n        for (int i = 0; i < l1.size(); i++) {\n            if (std::binary_search(l2.begin(), l2.end(), l1[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::unordered_set",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        auto list1_ = std::any_cast<std::vector<int>>(list1);\n        auto list2_ = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set;\n        for(auto i : list1_) {\n            set.insert(i);\n        }\n        for(auto i : list2_) {\n            if(set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_ = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_ = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> set;\n        for(auto i : list1_) {\n            set.insert(i);\n        }\n        for(auto i : list2_) {\n            if(set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "  if(list1.empty() || list2.empty()) {\n    return std::nullopt;\n  }\n  std::unordered_set<int> set;\n  for(auto i : list1) {\n    set.insert(i);\n  }\n  for(auto i : list2) {\n    if(set.find(i) != set.end()) {\n      return true;\n    }\n  }\n  return false;",
    "    std::unordered_set<int> set;\n    for(auto i: list1) {\n        set.insert(i);\n    }\n    for(auto i: list2) {\n        if(set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::set<std::any> set1;\n    std::set<std::any> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        int i = 0, j = 0;\n        while(i < v1.size() && j < v2.size()) {\n            if(v1[i] == v2[j]) {\n                return true;\n            }\n            if(v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::list<int>)) {\n        std::list<int> v1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> v2 = std::any_cast<std::list<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        int i = 0, j = 0;\n        while(i < v1.size() && j < v2.size()) {\n            if(v1[i] == v2[j]) {\n                return true;\n            }\n            if(v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n                if (l1[i] == l2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::list<int>)) {\n        std::list<int> l1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> l2 = std::any_cast<std::list<int>>(list2);\n        for (auto i = l1.begin(); i != l1.end(); i++) {\n            for (auto j = l2.begin(); j != l2.end(); j++) {\n                if (*i == *j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::set<int>)) {\n        std::set<int> l1 = std::any_cast<std::set<int>>(list1);\n        std::set<int> l2 = std::any_cast<std::set<int>>(list2);\n        for (auto i = l1.begin(); i != l1.end(); i++) {\n            for (auto j = l2.begin(); j != l2.end(); j++) {\n                if (*i == *j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    } else if (list1.type() == typeid(std::list<int>)) {\n        std::list<int> v1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> v2 = std::any_cast<std::list<int>>(list2);\n        v1.sort();\n        v2.sort();\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    } else {\n        return std::nullopt;\n    }",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while(i < l1.size() && j < l2.size()) {\n            if(l1[i] == l2[j]) {\n                return true;\n            } else if(l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> l1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while(i < l1.size() && j < l2.size()) {\n            if(l1[i] == l2[j]) {\n                return true;\n            } else if(l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else {\n        return std::nullopt;\n    }",
    "    if(list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set;\n    for(auto i : list1_) {\n        set.insert(i);\n    }\n    for(auto i : list2_) {\n        if(set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n        for (int i = 0; i < list1_vector.size(); i++) {\n            for (int j = 0; j < list2_vector.size(); j++) {\n                if (list1_vector[i] == list2_vector[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return {};",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for(int i=0; i<v1.size(); i++) {\n            for(int j=0; j<v2.size(); j++) {\n                if(v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::list<int>)) {\n        std::list<int> l1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> l2 = std::any_cast<std::list<int>>(list2);\n        l1.sort();\n        l2.sort();\n        for(int i=0; i<l1.size(); i++) {\n            for(int j=0; j<l2.size(); j++) {\n                if(l1[i] == l2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::set<int>)) {\n        std::set<int> s1 = std::any_cast<std::set<int>>(list1);\n        std::set<int> s2 = std::any_cast<std::set<int>>(list2);\n        for(int i=0; i<s1.size(); i++) {\n            for(int j=0; j<s2.size(); j++) {\n                if(s1[i] == s2[j]) {\n                    return true;\n                }",
    "    if(list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n        std::vector<int> vec3;\n        std::set_intersection(vec1.begin(), vec1.end(), vec2.begin(), vec2.end(), std::back_inserter(vec3));\n        if(vec3.size() > 0) {\n            return true;\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<int> s;\n    for (auto i : list1) {\n        s.insert(i);\n    }\n    for (auto i : list2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        std::vector<int> v3;\n        std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), std::back_inserter(v3));\n        return v3.size() > 0;\n    }\n    if (list1.type() == typeid(std::list<int>)) {\n        std::list<int> v1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> v2 = std::any_cast<std::list<int>>(list2);\n        v1.sort();\n        v2.sort();\n        std::list<int> v3;\n        std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), std::back_inserter(v3));\n        return v3.size() > 0;\n    }\n    if (list1.type() == typeid(std::set<int>)) {\n        std::set<int> v1 = std::any_cast<std::set<int>>(list1);\n        std::set<int> v2 = std::any_cast<std::set<int>>(list2);\n        std::set<int> v3;\n        std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), std::inserter(v3, v3.begin()));\n        return v3.size() > 0;\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::list<int>) || list2.type() != typeid(std::list<int>)) {\n        return std::nullopt;\n    }\n    std::list<int> list1_ = std::any_cast<std::list<int>>(list1);\n    std::list<int> list2_ = std::any_cast<std::list<int>>(list2);\n    std::unordered_set<int> set1;\n    for (auto i : list1_) {\n        set1.insert(i);\n    }\n    for (auto i : list2_) {\n        if (set1.find(i) != set1.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    else if (list1.type() == typeid(std::vector<std::string>) && list2.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> l1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> l2 = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    else {\n        return std::nullopt;\n    }",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> s(l1.begin(), l1.end());\n        for(auto i : l2) {\n            if(s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> s(l1.begin(), l1.end());\n        for(auto i : l2) {\n            if(s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    // TODO: Implement this function\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (int i = 0; i < l1.size(); i++) {\n        s.insert(l1[i]);\n    }\n    for (int i = 0; i < l2.size(); i++) {\n        if (s.find(l2[i]) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (int i = 0; i < l1.size(); i++) {\n            if (std::binary_search(l2.begin(), l2.end(), l1[i])) {\n                return true;\n            }\n        }\n        return false;\n    } else if (list1.type() == typeid(std::list<int>)) {\n        std::list<int> l1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> l2 = std::any_cast<std::list<int>>(list2);\n        l1.sort();\n        l2.sort();\n        for (int i : l1) {\n            if (std::binary_search(l2.begin(), l2.end(), i)) {\n                return true;\n            }\n        }\n        return false;\n    } else if (list1.type() == typeid(std::set<int>)) {\n        std::set<int> l1 = std::any_cast<std::set<int>>(list1);\n        std::set<int> l2 = std::any_cast<std::set<int>>(list2);\n        for (int i : l1) {\n            if (l2.find(i) != l2.end()) {\n                return true;\n            }\n        }\n        return false;\n    } else {\n        return std::nullopt;\n    }",
    "    // TODO: Implement this function\n    return std::nullopt;",
    "    std::unordered_set<std::any> s;\n    for (auto x : list1) {\n        s.insert(x);\n    }\n    for (auto x : list2) {\n        if (s.find(x) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        auto vec1 = std::any_cast<std::vector<int>>(list1);\n        auto vec2 = std::any_cast<std::vector<int>>(list2);\n        for(auto i : vec1) {\n            for(auto j : vec2) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::list<int>)) {\n        auto l1 = std::any_cast<std::list<int>>(list1);\n        auto l2 = std::any_cast<std::list<int>>(list2);\n        for(auto i : l1) {\n            for(auto j : l2) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto vec1 = std::any_cast<std::vector<int>>(list1);\n        auto vec2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set(vec1.begin(), vec1.end());\n        for (auto i : vec2) {\n            if (set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto vec1 = std::any_cast<std::vector<std::string>>(list1);\n        auto vec2 = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> set(vec1.begin(), vec1.end());\n        for (auto i : vec2) {\n            if (set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    // TODO: Write your code here\n    return {};",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto v1 = std::any_cast<std::vector<int>>(list1);\n        auto v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        return std::any(std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), v1.begin()) != v1.end());\n    }\n    if (list1.type() == typeid(std::list<int>)) {\n        auto l1 = std::any_cast<std::list<int>>(list1);\n        auto l2 = std::any_cast<std::list<int>>(list2);\n        l1.sort();\n        l2.sort();\n        return std::any(std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), l1.begin()) != l1.end());\n    }\n    return std::nullopt;",
    "  // TODO: Implement this function\n  return std::nullopt;",
    "    std::unordered_set<std::any> set1;\n    std::unordered_set<std::any> set2;\n    for (auto &i : list1) {\n        set1.insert(i);\n    }\n    for (auto &i : list2) {\n        set2.insert(i);\n    }\n    for (auto &i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n        if (list2.type() == typeid(std::vector<int>)) {\n            std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n            for (auto i : list1_) {\n                for (auto j : list2_) {\n                    if (i == j) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        else if (list2.type() == typeid(std::list<int>)) {\n            std::list<int> list2_ = std::any_cast<std::list<int>>(list2);\n            for (auto i : list1_) {\n                for (auto j : list2_) {\n                    if (i == j) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        else if (list2.type() == typeid(std::set<int>)) {\n            std::set<int> list2_ = std::any_cast<std::set<int>>(list2);\n            for (auto i : list1_) {\n                for (auto j : list2_) {\n                    if (i == j) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        else if (list2.type() == typeid(std::unordered_set<int>)) {\n            std::unordered_set<int> list2_ = std::any_cast<std::unordered_set<int>>(list2);\n            for (auto i : list1_) {\n                for (auto j : list2_) {\n                    if (i == j) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n    }\n    else if (list1.type() == typeid(std::list<int>)) {\n        std::list<int> list1",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto list1_vector = std::any_cast<std::vector<int>>(list1);\n        auto list2_vector = std::any_cast<std::vector<int>>(list2);\n        for (auto i : list1_vector) {\n            for (auto j : list2_vector) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_vector = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_vector = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : list1_vector) {\n            for (auto j : list2_vector) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n        std::sort(list1_.begin(), list1_.end());\n        std::sort(list2_.begin(), list2_.end());\n        for (int i = 0; i < list1_.size(); i++) {\n            if (std::binary_search(list2_.begin(), list2_.end(), list1_[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<char>)) {\n        std::vector<char> list1_ = std::any_cast<std::vector<char>>(list1);\n        std::vector<char> list2_ = std::any_cast<std::vector<char>>(list2);\n        std::sort(list1_.begin(), list1_.end());\n        std::sort(list2_.begin(), list2_.end());\n        for (int i = 0; i < list1_.size(); i++) {\n            if (std::binary_search(list2_.begin(), list2_.end(), list1_[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> list1_ = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> list2_ = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(list1_.begin(), list1_.end());\n        std::sort(list2_.begin(), list2_.end());\n        for (int i = 0; i < list1_.size();",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i : l1) {\n            if (std::binary_search(l2.begin(), l2.end(), i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::list<int>)) {\n        auto l1 = std::any_cast<std::list<int>>(list1);\n        auto l2 = std::any_cast<std::list<int>>(list2);\n        l1.sort();\n        l2.sort();\n        for (auto i : l1) {\n            if (std::binary_search(l2.begin(), l2.end(), i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n    for (int i = 0; i < l1.size(); i++) {\n        for (int j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    auto list1_vector = std::any_cast<std::vector<int>>(list1);\n    auto list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set;\n    for (auto element : list1_vector) {\n        set.insert(element);\n    }\n    for (auto element : list2_vector) {\n        if (set.find(element) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::list<int>)) {\n        std::list<int> v1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> v2 = std::any_cast<std::list<int>>(list2);\n        v1.sort();\n        v2.sort();\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    return std::nullopt;",
    "    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> s;\n        for (auto i : l1) {\n            s.insert(i);\n        }\n        for (auto i : l2) {\n            if (s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> s;\n        for (auto i : l1) {\n            s.insert(i);\n        }\n        for (auto i : l2) {\n            if (s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    auto l1 = std::any_cast<std::vector<int>>(list1);\n    auto l2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (auto i : l1) {\n        s.insert(i);\n    }\n    for (auto i : l2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set;\n        for(auto i : l1) {\n            set.insert(i);\n        }\n        for(auto i : l2) {\n            if(set.find(i) != set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "  std::unordered_set<std::any> set1;\n  std::unordered_set<std::any> set2;\n  for (auto i : list1) {\n    set1.insert(i);\n  }\n  for (auto i : list2) {\n    set2.insert(i);\n  }\n  for (auto i : set1) {\n    if (set2.find(i) != set2.end()) {\n      return true;\n    }\n  }\n  return false;",
    "    if(list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n        std::sort(list1_vector.begin(), list1_vector.end());\n        std::sort(list2_vector.begin(), list2_vector.end());\n        int i = 0, j = 0;\n        while(i < list1_vector.size() && j < list2_vector.size()) {\n            if(list1_vector[i] == list2_vector[j]) {\n                return true;\n            }\n            else if(list1_vector[i] < list2_vector[j]) {\n                i++;\n            }\n            else {\n                j++;\n            }\n        }\n        return false;\n    }\n    else if(list1.type() == typeid(std::vector<char>) && list2.type() == typeid(std::vector<char>)) {\n        std::vector<char> list1_vector = std::any_cast<std::vector<char>>(list1);\n        std::vector<char> list2_vector = std::any_cast<std::vector<char>>(list2);\n        std::sort(list1_vector.begin(), list1_vector.end());\n        std::sort(list2_vector.begin(), list2_vector.end());\n        int i = 0, j = 0;\n        while(i < list1_vector.size() && j < list2_vector.size()) {\n            if(list1_vector[i] == list2_vector[j]) {\n                return true;\n            }\n            else if(list1_vector[i] < list2_vector[j]) {\n                i++;\n            }\n            else {\n                j++;\n            }\n        }\n        return false;\n    }\n    else if(list1.type() == typeid(std",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            }\n            if (l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            }\n            if (l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for(auto i = l1.begin(), j = l2.begin(); i != l1.end() && j != l2.end();) {\n            if(*i == *j) {\n                return true;\n            }\n            if(*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for(auto i = l1.begin(), j = l2.begin(); i != l1.end() && j != l2.end();) {\n            if(*i == *j) {\n                return true;\n            }\n            if(*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            }\n            if (l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            }\n            if (l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    // TODO: Write your code here\n    return {};",
    "    std::unordered_set<std::any> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for(int i = 0; i < v1.size(); i++) {\n            for(int j = 0; j < v2.size(); j++) {\n                if(v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for(int i = 0; i < v1.size(); i++) {\n            for(int j = 0; j < v2.size(); j++) {\n                if(v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.empty() || list2.empty()) {\n        return std::nullopt;\n    }\n    std::unordered_set<int> set;\n    for (auto& i : list1) {\n        set.insert(i);\n    }\n    for (auto& i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            }\n            if (l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> l1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            }\n            if (l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (auto i : l1) {\n        s.insert(i);\n    }\n    for (auto i : l2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> list1_set(list1_vector.begin(), list1_vector.end());\n        for(auto element : list2_vector) {\n            if(list1_set.find(element) != list1_set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n        for (auto x : list1_vector) {\n            for (auto y : list2_vector) {\n                if (x == y) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    } else {\n        return {};\n    }",
    "  // TODO: Implement this function\n  return std::nullopt;",
    "    return std::nullopt;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        auto list1_vector = std::any_cast<std::vector<int>>(list1);\n        auto list2_vector = std::any_cast<std::vector<int>>(list2);\n        for(auto i : list1_vector) {\n            for(auto j : list2_vector) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_vector = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_vector = std::any_cast<std::vector<std::string>>(list2);\n        for(auto i : list1_vector) {\n            for(auto j : list2_vector) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for(auto i : list1) {\n        set1.insert(i);\n    }\n    for(auto i : list2) {\n        set2.insert(i);\n    }\n    for(auto i : set1) {\n        if(set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1[i] == l2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<char>)) {\n        std::vector<char> l1 = std::any_cast<std::vector<char>>(list1);\n        std::vector<char> l2 = std::any_cast<std::vector<char>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1[i] == l2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> l1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n       ",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            } else if (l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else if (list1.type() == typeid(std::list<int>)) {\n        std::list<int> l1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> l2 = std::any_cast<std::list<int>>(list2);\n        l1.sort();\n        l2.sort();\n        auto it1 = l1.begin();\n        auto it2 = l2.begin();\n        while (it1 != l1.end() && it2 != l2.end()) {\n            if (*it1 == *it2) {\n                return true;\n            } else if (*it1 < *it2) {\n                it1++;\n            } else {\n                it2++;\n            }\n        }\n        return false;\n    } else if (list1.type() == typeid(std::set<int>)) {\n        std::set<int> l1 = std::any_cast<std::set<int>>(list1);\n        std::set<int> l2 = std::any_cast<std::set<int>>(list2);\n        auto it1 = l1.begin();\n",
    "    if(list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> list1_set(list1_vector.begin(), list1_vector.end());\n        for(auto i : list2_vector) {\n            if(list1_set.find(i) != list1_set.end()) {\n                return true;\n            }\n        }\n        return false;\n    } else {\n        return std::nullopt;\n    }",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n    } else if (list1.type() == typeid(std::list<int>)) {\n        auto l1 = std::any_cast<std::list<int>>(list1);\n        auto l2 = std::any_cast<std::list<int>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n    } else if (list1.type() == typeid(std::set<int>)) {\n        auto l1 = std::any_cast<std::set<int>>(list1);\n        auto l2 = std::any_cast<std::set<int>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n    } else {\n        return std::nullopt;\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> list1_set;\n    for (auto element : list1_vector) {\n        list1_set.insert(element);\n    }\n    for (auto element : list2_vector) {\n        if (list1_set.find(element) != list1_set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n        std::sort(list1_.begin(), list1_.end());\n        std::sort(list2_.begin(), list2_.end());\n        int i = 0, j = 0;\n        while (i < list1_.size() && j < list2_.size()) {\n            if (list1_[i] == list2_[j]) {\n                return true;\n            } else if (list1_[i] < list2_[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> list1_ = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> list2_ = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(list1_.begin(), list1_.end());\n        std::sort(list2_.begin(), list2_.end());\n        int i = 0, j = 0;\n        while (i < list1_.size() && j < list2_.size()) {\n            if (list1_[i] == list2_[j]) {\n                return true;\n            } else if (list1_[i] < list2_[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_vec = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_vec = std::any_cast<std::vector<int>>(list2);\n        std::sort(list1_vec.begin(), list1_vec.end());\n        std::sort(list2_vec.begin(), list2_vec.end());\n        int i = 0;\n        int j = 0;\n        while(i < list1_vec.size() && j < list2_vec.size()) {\n            if(list1_vec[i] == list2_vec[j]) {\n                return true;\n            }\n            if(list1_vec[i] < list2_vec[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<float>)) {\n        std::vector<float> list1_vec = std::any_cast<std::vector<float>>(list1);\n        std::vector<float> list2_vec = std::any_cast<std::vector<float>>(list2);\n        std::sort(list1_vec.begin(), list1_vec.end());\n        std::sort(list2_vec.begin(), list2_vec.end());\n        int i = 0;\n        int j = 0;\n        while(i < list1_vec.size() && j < list2_vec.size()) {\n            if(list1_vec[i] == list2_vec[j]) {\n                return true;\n            }\n            if(list1_vec[i] < list2_vec[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto list1_vector = std::any_cast<std::vector<int>>(list1);\n        auto list2_vector = std::any_cast<std::vector<int>>(list2);\n        for (auto element : list1_vector) {\n            if (std::find(list2_vector.begin(), list2_vector.end(), element) != list2_vector.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_vector = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_vector = std::any_cast<std::vector<std::string>>(list2);\n        for (auto element : list1_vector) {\n            if (std::find(list2_vector.begin(), list2_vector.end(), element) != list2_vector.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> s;\n        for (auto i : l1) {\n            s.insert(i);\n        }\n        for (auto i : l2) {\n            if (s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> s;\n        for (auto i : l1) {\n            s.insert(i);\n        }\n        for (auto i : l2) {\n            if (s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<std::any> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    // TODO: Implement this function\n    return std::nullopt;",
    "    std::unordered_set<std::any> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set1(list1_.begin(), list1_.end());\n    std::unordered_set<int> set2(list2_.begin(), list2_.end());\n    std::vector<int> intersection;\n    std::set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), std::back_inserter(intersection));\n    return !intersection.empty();",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> list1_set(list1_vector.begin(), list1_vector.end());\n    std::unordered_set<int> list2_set(list2_vector.begin(), list2_vector.end());\n    std::vector<int> intersection;\n    std::set_intersection(list1_set.begin(), list1_set.end(), list2_set.begin(), list2_set.end(), std::back_inserter(intersection));\n    return intersection.size() > 0;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (auto i : v1) {\n        s.insert(i);\n    }\n    for (auto i : v2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "  if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n    return std::nullopt;\n  }\n  std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n  std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n  std::sort(list1_.begin(), list1_.end());\n  std::sort(list2_.begin(), list2_.end());\n  int i = 0, j = 0;\n  while (i < list1_.size() && j < list2_.size()) {\n    if (list1_[i] == list2_[j]) {\n      return true;\n    }\n    if (list1_[i] < list2_[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return false;",
    "    std::unordered_set<int> set;\n    for (auto x : list1) {\n        set.insert(x);\n    }\n    for (auto x : list2) {\n        if (set.find(x) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i : l1) {\n            if (std::binary_search(l2.begin(), l2.end(), i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i : l1) {\n            if (std::binary_search(l2.begin(), l2.end(), i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if(list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vec = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vec = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set1(list1_vec.begin(), list1_vec.end());\n    for(auto& i : list2_vec) {\n        if(set1.find(i) != set1.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<int> set;\n    for(auto i : list1) {\n        set.insert(i);\n    }\n    for(auto i : list2) {\n        if(set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto list1_ = std::any_cast<std::vector<int>>(list1);\n        auto list2_ = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set1(list1_.begin(), list1_.end());\n        for (auto x : list2_) {\n            if (set1.find(x) != set1.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_ = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_ = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> set1(list1_.begin(), list1_.end());\n        for (auto x : list2_) {\n            if (set1.find(x) != set1.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while(i < l1.size() && j < l2.size()) {\n            if(l1[i] == l2[j]) {\n                return true;\n            }\n            if(l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<int> set;\n    for(auto it = list1.begin(); it != list1.end(); it++) {\n        set.insert(*it);\n    }\n    for(auto it = list2.begin(); it != list2.end(); it++) {\n        if(set.find(*it) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    auto list1_ = std::any_cast<std::vector<int>>(list1);\n    auto list2_ = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set;\n    for (auto i : list1_) {\n        set.insert(i);\n    }\n    for (auto i : list2_) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "  if (list1.type() == typeid(std::vector<int>)) {\n    auto list_1 = std::any_cast<std::vector<int>>(list1);\n    if (list2.type() == typeid(std::vector<int>)) {\n      auto list_2 = std::any_cast<std::vector<int>>(list2);\n      for (auto i : list_1) {\n        for (auto j : list_2) {\n          if (i == j) {\n            return true;\n          }\n        }\n      }\n      return false;\n    } else if (list2.type() == typeid(std::list<int>)) {\n      auto list_2 = std::any_cast<std::list<int>>(list2);\n      for (auto i : list_1) {\n        for (auto j : list_2) {\n          if (i == j) {\n            return true;\n          }\n        }\n      }\n      return false;\n    } else if (list2.type() == typeid(std::set<int>)) {\n      auto list_2 = std::any_cast<std::set<int>>(list2);\n      for (auto i : list_1) {\n        for (auto j : list_2) {\n          if (i == j) {\n            return true;\n          }\n        }\n      }\n      return false;\n    } else {\n      return std::nullopt;\n    }\n  } else if (list1.type() == typeid(std::list<int>)) {\n    auto list_1 = std::any_cast<std::list<int>>(list1);\n    if (list2.type() == typeid(std::vector<int>)) {\n      auto list_2 = std::any_cast<std::vector<int>>(list2);\n      for (auto i : list_1) {\n        for (auto j : list_2) {\n          if (i == j) {\n            return true;\n          }\n        }\n      }\n      return false;\n    } else if (list2.type() == typeid(std::list",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        auto l1 = std::any_cast<std::vector<double>>(list1);\n        auto l2 = std::any_cast<std::vector<double>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if(list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> s(l1.begin(), l1.end());\n        for(auto i : l2) {\n            if(s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return {};",
    "  if (list1.type() != list2.type()) {\n    return std::nullopt;\n  }\n  if (list1.type() == typeid(std::vector<int>)) {\n    auto l1 = std::any_cast<std::vector<int>>(list1);\n    auto l2 = std::any_cast<std::vector<int>>(list2);\n    for (auto i : l1) {\n      if (std::find(l2.begin(), l2.end(), i) != l2.end()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  if (list1.type() == typeid(std::vector<std::string>)) {\n    auto l1 = std::any_cast<std::vector<std::string>>(list1);\n    auto l2 = std::any_cast<std::vector<std::string>>(list2);\n    for (auto i : l1) {\n      if (std::find(l2.begin(), l2.end(), i) != l2.end()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  return std::nullopt;",
    "    if (list1.type() != typeid(std::list<int>) || list2.type() != typeid(std::list<int>)) {\n        return std::nullopt;\n    }\n    std::list<int> l1 = std::any_cast<std::list<int>>(list1);\n    std::list<int> l2 = std::any_cast<std::list<int>>(list2);\n    std::unordered_set<int> s;\n    for (auto i : l1) {\n        s.insert(i);\n    }\n    for (auto i : l2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    auto list1_vector = std::any_cast<std::vector<int>>(list1);\n    auto list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set;\n    for (auto item : list1_vector) {\n        set.insert(item);\n    }\n    for (auto item : list2_vector) {\n        if (set.find(item) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "  // TODO: Implement this function\n  return std::nullopt;",
    "    for (auto i : list1) {\n        for (auto j : list2) {\n            if (i == j) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;",
    "    std::set<int> s;\n    for (auto i : list1) {\n        s.insert(i);\n    }\n    for (auto i : list2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            } else if (l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> l1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            } else if (l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else {\n        return std::nullopt;\n    }",
    "    if (list1.type() != list2.type())\n        return std::nullopt;\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto list1_ = std::any_cast<std::vector<int>>(list1);\n        auto list2_ = std::any_cast<std::vector<int>>(list2);\n        for (auto i : list1_) {\n            for (auto j : list2_) {\n                if (i == j)\n                    return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::list<int>)) {\n        auto list1_ = std::any_cast<std::list<int>>(list1);\n        auto list2_ = std::any_cast<std::list<int>>(list2);\n        for (auto i : list1_) {\n            for (auto j : list2_) {\n                if (i == j)\n                    return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_ = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_ = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : list1_) {\n            for (auto j : list2_) {\n                if (i == j)\n                    return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::list<std::string>)) {\n        auto list1_ = std::any_cast<std::list<std::string>>(list1);\n        auto list2_ = std::any_cast<std::list<std::string>>(list2);\n        for (auto i : list1_) {\n            for (auto j : list2_) {\n                if (i == j)\n                    return true;\n            }\n        }\n        return false;\n    }\n    return std::",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    auto l1 = std::any_cast<std::vector<int>>(list1);\n    auto l2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s(l1.begin(), l1.end());\n    for (auto i : l2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n        std::sort(list1_vector.begin(), list1_vector.end());\n        std::sort(list2_vector.begin(), list2_vector.end());\n        int i = 0;\n        int j = 0;\n        while (i < list1_vector.size() && j < list2_vector.size()) {\n            if (list1_vector[i] == list2_vector[j]) {\n                return true;\n            }\n            if (list1_vector[i] < list2_vector[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> list1_vector = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> list2_vector = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(list1_vector.begin(), list1_vector.end());\n        std::sort(list2_vector.begin(), list2_vector.end());\n        int i = 0;\n        int j = 0;\n        while (i < list1_vector.size() && j < list2_vector.size()) {\n            if (list1_vector[i] == list2_vector[j]) {\n                return true;\n            }\n            if (list1_vector[i] < list2_vector[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n                if (l1[i] == l2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return {};",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_vec = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_vec = std::any_cast<std::vector<int>>(list2);\n        std::sort(list1_vec.begin(), list1_vec.end());\n        std::sort(list2_vec.begin(), list2_vec.end());\n        int i = 0, j = 0;\n        while(i < list1_vec.size() && j < list2_vec.size()) {\n            if(list1_vec[i] == list2_vec[j]) {\n                return true;\n            }\n            if(list1_vec[i] < list2_vec[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> list1_vec = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> list2_vec = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(list1_vec.begin(), list1_vec.end());\n        std::sort(list2_vec.begin(), list2_vec.end());\n        int i = 0, j = 0;\n        while(i < list1_vec.size() && j < list2_vec.size()) {\n            if(list1_vec[i] == list2_vec[j]) {\n                return true;\n            }\n            if(list1_vec[i] < list2_vec[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else {\n        return std::nullopt;\n    }",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::list<int>)) {\n        std::list<int> v1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> v2 = std::any_cast<std::list<int>>(list2);\n        v1.sort();\n        v2.sort();\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::set<int>)) {\n        std::set<int> v1 = std::any_cast<std::set<int>>(list1);\n        std::set<int> v2 = std::any_cast<std::set<int>>(list2);\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for(auto i : list1) {\n        set1.insert(i);\n    }\n    for(auto i : list2) {\n        set2.insert(i);\n    }\n    for(auto i : set1) {\n        if(set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        int i = 0, j = 0;\n        while(i < vec1.size() && j < vec2.size()) {\n            if(vec1[i] == vec2[j]) {\n                return true;\n            } else if(vec1[i] < vec2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else if(list1.type() == typeid(std::list<int>) && list2.type() == typeid(std::list<int>)) {\n        std::list<int> l1 = std::any_cast<std::list<int>>(list1);\n        std::list<int> l2 = std::any_cast<std::list<int>>(list2);\n        l1.sort();\n        l2.sort();\n        std::list<int>::iterator it1 = l1.begin();\n        std::list<int>::iterator it2 = l2.begin();\n        while(it1 != l1.end() && it2 != l2.end()) {\n            if(*it1 == *it2) {\n                return true;\n            } else if(*it1 < *it2) {\n                it1++;\n            } else {\n                it2++;\n            }\n        }\n        return false;\n    } else if(list1.type() == typeid(std::set<int>) && list2.type() == typeid(std::set<int>)) {\n        std::set<int> s1 = std::any_cast<std::set<int>>(list1);\n        std::set<int",
    "    if(list1.empty() || list2.empty()) {\n        return std::nullopt;\n    }\n    for(auto i : list1) {\n        for(auto j : list2) {\n            if(i == j) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    std::set<int> set1;\n    std::set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (auto i : l1) {\n        s.insert(i);\n    }\n    for (auto i : l2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            }\n            if (l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else {\n        return std::nullopt;\n    }",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_vec = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_vec = std::any_cast<std::vector<int>>(list2);\n        std::sort(list1_vec.begin(), list1_vec.end());\n        std::sort(list2_vec.begin(), list2_vec.end());\n        for (int i = 0; i < list1_vec.size(); i++) {\n            for (int j = 0; j < list2_vec.size(); j++) {\n                if (list1_vec[i] == list2_vec[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> list1_vec = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> list2_vec = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(list1_vec.begin(), list1_vec.end());\n        std::sort(list2_vec.begin(), list2_vec.end());\n        for (int i = 0; i < list1_vec.size(); i++) {\n            for (int j = 0; j < list2_vec.size(); j++) {\n                if (list1_vec[i] == list2_vec[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "  if(list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n    return std::nullopt;\n  }\n  std::vector<int> list1_vec = std::any_cast<std::vector<int>>(list1);\n  std::vector<int> list2_vec = std::any_cast<std::vector<int>>(list2);\n  std::unordered_set<int> list1_set(list1_vec.begin(), list1_vec.end());\n  for(auto elem : list2_vec) {\n    if(list1_set.find(elem) != list1_set.end()) {\n      return true;\n    }\n  }\n  return false;",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for (auto it = list1.begin(); it != list1.end(); it++) {\n        set1.insert(*it);\n    }\n    for (auto it = list2.begin(); it != list2.end(); it++) {\n        set2.insert(*it);\n    }\n    for (auto it = set1.begin(); it != set1.end(); it++) {\n        if (set2.find(*it) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n    }\n    if (list1.type() == typeid(std::list<int>)) {\n        auto l1 = std::any_cast<std::list<int>>(list1);\n        auto l2 = std::any_cast<std::list<int>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;",
    "    std::unordered_set<std::any> set;\n    for (auto &i : list1) {\n        set.insert(i);\n    }\n    for (auto &i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set1(l1.begin(), l1.end());\n        std::unordered_set<int> set2(l2.begin(), l2.end());\n        for(auto i : set1) {\n            if(set2.find(i) != set2.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> set1(l1.begin(), l1.end());\n        std::unordered_set<std::string> set2(l2.begin(), l2.end());\n        for(auto i : set1) {\n            if(set2.find(i) != set2.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;"
  ]
}