{
  "name": "mbpp_88_freq_count",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nstd::map<long,long> freq_count(std::vector<long> list1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = freq_count;\n    assert(candidate((std::vector<long>({(long)10, (long)10, (long)10, (long)10, (long)20, (long)20, (long)20, (long)20, (long)40, (long)40, (long)50, (long)50, (long)30}))) == (std::map<long,long>({{10, 4}, {20, 4}, {40, 2}, {50, 2}, {30, 1}})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)4, (long)1, (long)3, (long)1, (long)4}))) == (std::map<long,long>({{1, 3}, {2, 2}, {3, 3}, {4, 3}})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)4, (long)9, (long)10, (long)4, (long)5, (long)6, (long)7, (long)9, (long)5}))) == (std::map<long,long>({{10, 1}, {5, 3}, {6, 2}, {7, 2}, {4, 2}, {9, 2}})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::map<long,long> freq;\n    for(auto i:list1) {\n        freq[i]++;\n    }\n    return freq;",
    "    std::map<long,long> freq_dict;\n    for(long i=0;i<list1.size();i++) {\n        freq_dict[list1[i]]++;\n    }\n    return freq_dict;",
    "    std::map<long,long> freq;\n    for(long i=0;i<list1.size();i++) {\n        freq[list1[i]]++;\n    }\n    return freq;",
    "    std::map<long,long> freq;\n    for(auto i:list1)\n        freq[i]++;\n    return freq;",
    "    std::map<long,long> dict;\n    for(auto i:list1) {\n        dict[i]++;\n    }\n    return dict;",
    "    std::map<long,long> freq;\n    for(long i=0;i<list1.size();i++) {\n        freq[list1[i]]++;\n    }\n    return freq;",
    "    std::map<long,long> freq;\n    for(long i=0;i<list1.size();i++) {\n        freq[list1[i]]++;\n    }\n    return freq;",
    "    std::map<long,long> freq;\n    for(long i=0;i<list1.size();i++) {\n        freq[list1[i]]++;\n    }\n    return freq;",
    "    std::map<long,long> freq;\n    for(long i=0;i<list1.size();i++) {\n        freq[list1[i]]++;\n    }\n    return freq;",
    "    std::map<long,long> freq_dict;\n    for (auto i = list1.begin(); i != list1.end(); i++) {\n        freq_dict[*i]++;\n    }\n    return freq_dict;",
    "    std::map<long,long> freq_dict;\n    for(auto i:list1) {\n        freq_dict[i]++;\n    }\n    return freq_dict;",
    "    std::map<long,long> freq;\n    for (auto i : list1) {\n        freq[i]++;\n    }\n    return freq;",
    "    std::map<long,long> freq;\n    for(auto i:list1) {\n        freq[i]++;\n    }\n    return freq;",
    "    std::map<long,long> freq_dict;\n    for(auto i:list1) {\n        if(freq_dict.find(i) == freq_dict.end()) {\n            freq_dict[i] = 1;\n        }\n        else {\n            freq_dict[i] += 1;\n        }\n    }\n    return freq_dict;",
    "    std::map<long,long> freq_dict;\n    for (long i = 0; i < list1.size(); i++) {\n        freq_dict[list1[i]]++;\n    }\n    return freq_dict;",
    "    std::map<long,long> freq_dict;\n    for(auto i:list1) {\n        freq_dict[i]++;\n    }\n    return freq_dict;",
    "    std::map<long,long> freq;\n    for(auto i:list1) {\n        freq[i]++;\n    }\n    return freq;",
    "    std::map<long,long> freq;\n    for(int i=0;i<list1.size();i++) {\n        freq[list1[i]]++;\n    }\n    return freq;",
    "    std::map<long,long> dict1;\n    for (auto i:list1) {\n        dict1[i]++;\n    }\n    return dict1;",
    "    std::map<long,long> freq_dict;\n    for(long i=0;i<list1.size();i++) {\n        freq_dict[list1[i]]++;\n    }\n    return freq_dict;"
  ]
}