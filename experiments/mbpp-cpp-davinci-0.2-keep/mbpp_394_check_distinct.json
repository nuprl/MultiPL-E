{
  "name": "mbpp_394_check_distinct",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if given tuple contains no duplicates.\nbool check_distinct(long test_tup) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = check_distinct;\n    assert(candidate(std::make_tuple(1, 4, 5, 6, 1, 4)) == (false));\n    assert(candidate(std::make_tuple(1, 4, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(2, 3, 4, 5, 6)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "\tstd::set<int> s;\n\twhile (test_tup > 0) {\n\t\ts.insert(test_tup % 10);\n\t\ttest_tup /= 10;\n\t}\n\treturn s.size() == 4;",
    "    int arr[10] = {0};\n    while(test_tup) {\n        int digit = test_tup % 10;\n        if(arr[digit]) {\n            return false;\n        }\n        arr[digit] = 1;\n        test_tup /= 10;\n    }\n    return true;",
    "    long mask = 0;\n    for (int i = 0; i < 4; i++) {\n        long digit = test_tup % 10;\n        if (digit == 0) {\n            return false;\n        }\n        if (mask & (1 << digit)) {\n            return false;\n        }\n        mask |= (1 << digit);\n        test_tup /= 10;\n    }\n    return true;",
    "    int count = 0;\n    int i = 0;\n    while (test_tup) {\n        if (test_tup & 1) {\n            count++;\n        }\n        test_tup = test_tup >> 1;\n        i++;\n    }\n    return count == i;",
    "    std::set<int> s;\n    while (test_tup) {\n        s.insert(test_tup % 10);\n        test_tup /= 10;\n    }\n    return (s.size() == 4);",
    "    std::vector<int> digits;\n    while(test_tup > 0) {\n        digits.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    std::sort(digits.begin(), digits.end());\n    for(int i = 0; i < digits.size() - 1; i++) {\n        if(digits[i] == digits[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    std::vector<int> digits;\n    while (test_tup > 0) {\n        digits.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    std::sort(digits.begin(), digits.end());\n    for (int i = 0; i < digits.size() - 1; i++) {\n        if (digits[i] == digits[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    long mask = 0;\n    for (int i = 0; i < sizeof(long); i++) {\n        int bit = (test_tup >> i) & 1;\n        if (bit) {\n            if (mask & (1 << bit)) {\n                return false;\n            }\n            mask |= (1 << bit);\n        }\n    }\n    return true;",
    "  std::set<int> s;\n  while (test_tup > 0) {\n    s.insert(test_tup % 10);\n    test_tup /= 10;\n  }\n  return s.size() == 4;",
    "    std::set<int> s;\n    for (int i = 0; i < 4; i++) {\n        s.insert(test_tup % 10);\n        test_tup /= 10;\n    }\n    return s.size() == 4;",
    "    long mask = 0;\n    while (test_tup) {\n        if (mask & (1 << (test_tup % 10))) {\n            return false;\n        }\n        mask |= (1 << (test_tup % 10));\n        test_tup /= 10;\n    }\n    return true;",
    "    int count[10] = {0};\n    while(test_tup) {\n        count[test_tup%10]++;\n        test_tup /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(count[i] > 1) {\n            return false;\n        }\n    }\n    return true;",
    "    long mask = 0;\n    for (int i = 0; i < 32; i++) {\n        if ((test_tup & (1 << i)) != 0) {\n            if ((mask & (1 << i)) != 0) {\n                return false;\n            }\n            mask |= (1 << i);\n        }\n    }\n    return true;",
    "    int a[10] = {0};\n    while(test_tup) {\n        a[test_tup%10]++;\n        test_tup /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(a[i] > 1)\n            return false;\n    }\n    return true;",
    "    std::set<int> s;\n    while (test_tup > 0) {\n        s.insert(test_tup % 10);\n        test_tup /= 10;\n    }\n    return s.size() == 4;",
    "    std::set<int> s;\n    while (test_tup) {\n        s.insert(test_tup % 10);\n        test_tup /= 10;\n    }\n    return s.size() == 4;",
    "    int n = test_tup;\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count == 3;",
    "    std::vector<int> digits;\n    while (test_tup > 0) {\n        digits.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    std::sort(digits.begin(), digits.end());\n    for (int i = 0; i < digits.size() - 1; ++i) {\n        if (digits[i] == digits[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "  int bits[64];\n  for (int i = 0; i < 64; i++) {\n    bits[i] = test_tup & 1;\n    test_tup >>= 1;\n  }\n  std::sort(bits, bits + 64);\n  for (int i = 1; i < 64; i++) {\n    if (bits[i] == bits[i - 1]) {\n      return false;\n    }\n  }\n  return true;",
    "    std::set<int> s;\n    while (test_tup) {\n        s.insert(test_tup % 10);\n        test_tup /= 10;\n    }\n    return s.size() == 4;"
  ]
}