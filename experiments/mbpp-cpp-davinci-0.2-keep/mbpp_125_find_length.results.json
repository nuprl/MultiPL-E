{
  "name": "mbpp_125_find_length",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long count = 0;\n  for (int i = 0; i < string.length(); i++) {\n    if (string[i] == '1') {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmpzo8bq81x: /tmp/tmpzo8bq81x.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmps3oqpqbt: /tmp/tmps3oqpqbt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long max_length = 0;\n    long count_zero = 0;\n    long count_one = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count_zero++;\n        } else {\n            count_one++;\n        }\n        if(count_zero == count_one) {\n            length = count_zero + count_one;\n            max_length = std::max(length, max_length);\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmp__ucfl5k: /tmp/tmp__ucfl5k.cpp:24: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int index = 0; string[index] != '\\0'; ++index) {\n        if(string[index] == '1') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmpkbsww0i4: /tmp/tmpkbsww0i4.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpciv3v228: /tmp/tmpciv3v228.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpciv3v228: /tmp/tmpciv3v228.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '1') {\n\t\t\tlength++;\n\t\t}\n\t}\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmp_iy39rd3: /tmp/tmp_iy39rd3.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmps3oqpqbt: /tmp/tmps3oqpqbt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong count = 0;\n\tfor(long i = 0; i < string.length(); i++) {\n\t\tif(string[i] == '1') {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmpp86e0t5s: /tmp/tmpp86e0t5s.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpciv3v228: /tmp/tmpciv3v228.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.size(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpnrvclxp9: /tmp/tmpnrvclxp9.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.size(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpoiul2zvs: /tmp/tmpoiul2zvs.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count_zero = 0;\n    long count_one = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string[i] == '0') {\n            count_zero++;\n        }\n        else {\n            count_one++;\n        }\n        if (count_zero == count_one) {\n            length = std::max(length, count_zero + count_one);\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmp9o9rl62g: /tmp/tmp9o9rl62g.cpp:23: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = 0;\n\tlong count = 0;\n\tfor (long i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '0') {\n\t\t\tcount++;\n\t\t} else {\n\t\t\tcount--;\n\t\t}\n\t\tif (count == 0) {\n\t\t\tlength = std::max(length, i + 1);\n\t\t}\n\t}\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "tmpielcshkm: /tmp/tmpielcshkm.cpp:21: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong count = 0;\n\tfor(int i = 0; i < string.length(); i++) {\n\t\tif(string[i] == '1') {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpi78nhewm: /tmp/tmpi78nhewm.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    int count = 0;\n    int max_count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count++;\n        } else {\n            count--;\n        }\n        if(count < 0) {\n            count = 0;\n        }\n        if(count > max_count) {\n            max_count = count;\n        }\n    }\n    return max_count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        } else {\n            count--;\n        }\n        if(count == 0) {\n            length = i + 1;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmp4_ir108o: /tmp/tmp4_ir108o.cpp:21: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpt2yedf7r: /tmp/tmpt2yedf7r.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long length = string.length();\n  return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmps0jvzftx: /tmp/tmps0jvzftx.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count_0 = 0;\n    long count_1 = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count_0++;\n        } else {\n            count_1++;\n        }\n        if(count_0 == count_1) {\n            length = std::max(length, count_0 + count_1);\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmp_n4trtf0: /tmp/tmp_n4trtf0.cpp:22: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long length = string.length();\n  return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmps0jvzftx: /tmp/tmps0jvzftx.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    int count = 0;\n    long max_count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count++;\n        }\n        else {\n            count--;\n        }\n        if(count < 0) {\n            count = 0;\n        }\n        if(count > max_count) {\n            max_count = count;\n        }\n    }\n    return max_count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "tmpz9bkr8fg: /tmp/tmpz9bkr8fg.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long max_length = 0;\n    long count_zero = 0;\n    long count_one = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count_zero++;\n        }\n        else {\n            count_one++;\n        }\n        if(count_zero == count_one) {\n            length = count_zero + count_one;\n            if(length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpuw56j2tt: /tmp/tmpuw56j2tt.cpp:27: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmps3oqpqbt: /tmp/tmps3oqpqbt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpt2yedf7r: /tmp/tmpt2yedf7r.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmps3oqpqbt: /tmp/tmps3oqpqbt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long max_length = 0;\n    long count_zero = 0;\n    long count_one = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count_zero++;\n        }\n        else {\n            count_one++;\n        }\n        if(count_zero == count_one) {\n            max_length = std::max(max_length, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for(long i = string.length() - 1; i >= 0; i--) {\n        if(string[i] == '0') {\n            count_zero++;\n        }\n        else {\n            count_one++;\n        }\n        if(count_zero == count_one) {\n            max_length = std::max(max_length, count_zero + count_one);\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmp7dazpvke: /tmp/tmp7dazpvke.cpp:36: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpt2yedf7r: /tmp/tmpt2yedf7r.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '1') {\n\t\t\tlength++;\n\t\t}\n\t}\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmp_iy39rd3: /tmp/tmp_iy39rd3.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '1') {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "tmp8mg5df1w: /tmp/tmp8mg5df1w.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.size(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpnrvclxp9: /tmp/tmpnrvclxp9.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            count++;\n        } else {\n            count--;\n        }\n        if (count == 0) {\n            length = i + 1;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpjtn94g9h: /tmp/tmpjtn94g9h.cpp:21: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = 0;\n\tfor(int i = 0; i < string.length(); i++) {\n\t\tif(string[i] == '1') {\n\t\t\tlength++;\n\t\t}\n\t}\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpoxl34rr4: /tmp/tmpoxl34rr4.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '1') {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "tmp8mg5df1w: /tmp/tmp8mg5df1w.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count_0 = 0;\n    long count_1 = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count_0++;\n        } else {\n            count_1++;\n        }\n        if(count_0 == count_1) {\n            length = std::max(length, count_0 + count_1);\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmp_n4trtf0: /tmp/tmp_n4trtf0.cpp:22: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n        else {\n            count--;\n        }\n        if(count == 0) {\n            length = i + 1;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "tmp6qxuh83o: /tmp/tmp6qxuh83o.cpp:22: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for (long i = 0; i < string.size(); i++) {\n        if (string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "tmpeu2p02uc: /tmp/tmpeu2p02uc.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count_0 = 0;\n    long count_1 = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string[i] == '0') {\n            count_0++;\n        } else {\n            count_1++;\n        }\n        if (count_0 == count_1) {\n            length = std::max(length, count_0 + count_1);\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpohny3iw6: /tmp/tmpohny3iw6.cpp:22: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long max_length = 0;\n    long count_zero = 0;\n    long count_one = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count_zero++;\n        }\n        else {\n            count_one++;\n        }\n        if(count_zero == count_one) {\n            length = count_zero + count_one;\n            if(length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for(long i = string.length() - 1; i >= 0; i--) {\n        if(string[i] == '0') {\n            count_zero++;\n        }\n        else {\n            count_one++;\n        }\n        if(count_zero == count_one) {\n            length = count_zero + count_one;\n            if(length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "tmp6ckm_iwq: /tmp/tmp6ckm_iwq.cpp:43: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "tmpz9bkr8fg: /tmp/tmpz9bkr8fg.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '1') {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "tmp8mg5df1w: /tmp/tmp8mg5df1w.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count_0 = 0;\n    long count_1 = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count_0++;\n        } else {\n            count_1++;\n        }\n        if(count_0 == count_1) {\n            length = std::max(length, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for(long i = string.length() - 1; i >= 0; i--) {\n        if(string[i] == '0') {\n            count_0++;\n        } else {\n            count_1++;\n        }\n        if(count_0 == count_1) {\n            length = std::max(length, count_0 + count_1);\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmp39ij3ole: /tmp/tmp39ij3ole.cpp:34: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n        else {\n            count--;\n        }\n        if(count == 0) {\n            length = i + 1;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "tmp6qxuh83o: /tmp/tmp6qxuh83o.cpp:22: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmps3oqpqbt: /tmp/tmps3oqpqbt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpt2yedf7r: /tmp/tmpt2yedf7r.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long length = 0;\n  for(int i = 0; i < string.length(); i++) {\n    if(string[i] == '1') {\n      length++;\n    }\n  }\n  return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpywrz27_3: /tmp/tmpywrz27_3.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpciv3v228: /tmp/tmpciv3v228.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    long max_count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count++;\n        }\n        else {\n            count--;\n        }\n        if(count > max_count) {\n            max_count = count;\n        }\n    }\n    return max_count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpqw7pzn48: /tmp/tmpqw7pzn48.cpp:22: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmps3oqpqbt: /tmp/tmps3oqpqbt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count_0 = 0;\n    long count_1 = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count_0++;\n        }\n        else {\n            count_1++;\n        }\n        if(count_0 == count_1) {\n            length = std::max(length, count_0 + count_1);\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmp286c4h5w: /tmp/tmp286c4h5w.cpp:23: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    int count = 0;\n    int max_count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count++;\n        }\n        else {\n            count--;\n        }\n        if(count < 0) {\n            count = 0;\n        }\n        if(count > max_count) {\n            max_count = count;\n        }\n    }\n    return max_count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmps3oqpqbt: /tmp/tmps3oqpqbt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = 0;\n\tfor (long i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '1') {\n\t\t\tlength++;\n\t\t}\n\t}\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmp_hfy6w8v: /tmp/tmp_hfy6w8v.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long max_length = 0;\n    long count_0 = 0;\n    long count_1 = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count_0++;\n        } else {\n            count_1++;\n        }\n        if(count_0 == count_1) {\n            length = count_0 + count_1;\n            if(length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmph824ir1x: /tmp/tmph824ir1x.cpp:26: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "tmps3oqpqbt: /tmp/tmps3oqpqbt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "tmpz9bkr8fg: /tmp/tmpz9bkr8fg.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmp261sgxca: /tmp/tmp261sgxca.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count += 1;\n        }\n        else {\n            count -= 1;\n        }\n        if(count == 0) {\n            length = std::max(length, i + 1);\n        }\n        if(count < 0) {\n            count = 0;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmp0margdjq: /tmp/tmp0margdjq.cpp:25: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.size();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpro893etx: /tmp/tmpro893etx.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i=0; i<string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpd8qdukai: /tmp/tmpd8qdukai.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count_0 = 0;\n    long count_1 = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string[i] == '0') {\n            count_0++;\n        } else {\n            count_1++;\n        }\n        if (count_0 == count_1) {\n            length = std::max(length, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for (long i = string.length() - 1; i >= 0; i--) {\n        if (string[i] == '0') {\n            count_0++;\n        } else {\n            count_1++;\n        }\n        if (count_0 == count_1) {\n            length = std::max(length, count_0 + count_1);\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpjged6wfc: /tmp/tmpjged6wfc.cpp:34: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long max_length = 0;\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count++;\n        } else {\n            count--;\n        }\n        if(count == 0) {\n            max_length = std::max(max_length, i + 1);\n        }\n        if(count < 0) {\n            count = 0;\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpqvlzcy29.cpp: In function \u2018long int find_length(std::string)\u2019:\n/tmp/tmpqvlzcy29.cpp:14:52: error: no matching function for call to \u2018max(long int&, int)\u2019\n   14 |             max_length = std::max(max_length, i + 1);\n      |                                                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpqvlzcy29.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5: note:   template argument deduction/substitution failed:\n/tmp/tmpqvlzcy29.cpp:14:52: note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019 and \u2018int\u2019)\n   14 |             max_length = std::max(max_length, i + 1);\n      |                                                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpqvlzcy29.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:268:5: note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp& __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:268:5: note:   template argument deduction/substitution failed:\n/tmp/tmpqvlzcy29.cpp:14:52: note:   deduc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long length = string.length();\n  return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmps0jvzftx: /tmp/tmps0jvzftx.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long length = string.length();\n  return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmps0jvzftx: /tmp/tmps0jvzftx.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmpxegrvsmq: /tmp/tmpxegrvsmq.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long max_length = 0;\n    for (long i = 0; i < string.size(); i++) {\n        if (string[i] == '0') {\n            length++;\n        } else {\n            length--;\n        }\n        if (length < 0) {\n            length = 0;\n        }\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpciv3v228: /tmp/tmpciv3v228.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.size(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmp9pvug6g5: /tmp/tmp9pvug6g5.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpt2yedf7r: /tmp/tmpt2yedf7r.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count_0 = 0;\n    long count_1 = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count_0++;\n        } else {\n            count_1++;\n        }\n        if(count_0 == count_1) {\n            length = std::max(length, count_0 + count_1);\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "tmp_n4trtf0: /tmp/tmp_n4trtf0.cpp:22: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}