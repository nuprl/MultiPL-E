{
  "name": "mbpp_623_nth_nums",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to compute the n-th power of each number in a list.\nstd::vector<long> nth_nums(std::vector<long> nums, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = nth_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25, (long)36, (long)49, (long)64, (long)81, (long)100})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)30})), (3)) == (std::vector<long>({(long)1000, (long)8000, (long)27000})));\n    assert(candidate((std::vector<long>({(long)12, (long)15})), (5)) == (std::vector<long>({(long)248832, (long)759375})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    for(int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> res;\n    for (auto num : nums) {\n        res.push_back(pow(num, n));\n    }\n    return res;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=0;i<nums.size();i++)\n    {\n        long temp=1;\n        for(int j=0;j<n;j++)\n        {\n            temp=temp*nums[i];\n        }\n        result.push_back(temp);\n    }\n    return result;",
    "  std::vector<long> result;\n  for (auto num : nums) {\n    result.push_back(pow(num, n));\n  }\n  return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "  std::vector<long> result;\n  for (int i = 0; i < nums.size(); i++) {\n    result.push_back(pow(nums[i], n));\n  }\n  return result;",
    "    std::vector<long> result;\n    for(auto i: nums) {\n        result.push_back(pow(i, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto i : nums) {\n        result.push_back(pow(i, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto i: nums) {\n        result.push_back(pow(i, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "  std::vector<long> result;\n  for (auto num : nums) {\n    result.push_back(pow(num, n));\n  }\n  return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(std::pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "  std::vector<long> result;\n  for (int i = 0; i < nums.size(); i++) {\n    result.push_back(pow(nums[i], n));\n  }\n  return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=0;i<nums.size();i++){\n        result.push_back(pow(nums[i],n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "  std::vector<long> result;\n  for (auto num : nums) {\n    result.push_back(pow(num, n));\n  }\n  return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=0;i<nums.size();i++){\n        result.push_back(pow(nums[i],n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "  std::vector<long> result;\n  for (long num : nums) {\n    result.push_back(pow(num, n));\n  }\n  return result;",
    "    std::vector<long> res;\n    for(auto i: nums) {\n        res.push_back(pow(i, n));\n    }\n    return res;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "  std::vector<long> result;\n  for (auto num : nums) {\n    result.push_back(pow(num, n));\n  }\n  return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto num: nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> res;\n    for (auto i : nums) {\n        res.push_back(pow(i, n));\n    }\n    return res;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : nums) {\n        result.push_back(pow(i, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(std::pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=0;i<nums.size();i++){\n        result.push_back(pow(nums[i],n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "  std::vector<long> result;\n  for (long num : nums) {\n    result.push_back(pow(num, n));\n  }\n  return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "  std::vector<long> result;\n  for (auto num : nums) {\n    result.push_back(pow(num, n));\n  }\n  return result;",
    "  std::vector<long> result;\n  for (auto num : nums) {\n    result.push_back(pow(num, n));\n  }\n  return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        long num = nums[i];\n        long result_num = 1;\n        for (int j = 0; j < n; j++) {\n            result_num *= num;\n        }\n        result.push_back(result_num);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> v;\n    for(int i=0;i<nums.size();i++){\n        v.push_back(pow(nums[i],n));\n    }\n    return v;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i=0; i<nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> nth_nums;\n    for (long num : nums) {\n        nth_nums.push_back(pow(num, n));\n    }\n    return nth_nums;",
    "    std::vector<long> ans;\n    for (auto i : nums) {\n        ans.push_back(pow(i, n));\n    }\n    return ans;",
    "    std::vector<long> result;\n    for(auto i: nums) {\n        result.push_back(pow(i, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto num: nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=0; i<nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(std::pow(num, n));\n    }\n    return result;",
    "    std::vector<long> nth_nums;\n    for (long i = 0; i < nums.size(); i++) {\n        nth_nums.push_back(pow(nums[i], n));\n    }\n    return nth_nums;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto i: nums) {\n        result.push_back(pow(i, n));\n    }\n    return result;",
    "    std::vector<long> ans;\n    for(int i = 0; i < nums.size(); i++) {\n        ans.push_back(pow(nums[i], n));\n    }\n    return ans;",
    "    std::vector<long> result;\n    for (auto it = nums.begin(); it != nums.end(); ++it) {\n        result.push_back(pow(*it, n));\n    }\n    return result;",
    "\tstd::vector<long> ans;\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\tans.push_back(pow(nums[i], n));\n\t}\n\treturn ans;",
    "    std::vector<long> result;\n    for(auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "\tstd::vector<long> result;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tresult.push_back(pow(nums[i], n));\n\t}\n\treturn result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "  std::vector<long> res;\n  for (long i = 0; i < nums.size(); i++) {\n    res.push_back(pow(nums[i], n));\n  }\n  return res;",
    "    std::vector<long> result;\n    for(int i=0;i<nums.size();i++){\n        result.push_back(pow(nums[i],n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=0;i<nums.size();i++){\n        result.push_back(pow(nums[i],n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "\tstd::vector<long> result;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tresult.push_back(pow(nums[i], n));\n\t}\n\treturn result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "\tstd::vector<long> result;\n\tfor (auto i : nums) {\n\t\tresult.push_back(pow(i, n));\n\t}\n\treturn result;",
    "  std::vector<long> result;\n  for (auto num : nums) {\n    result.push_back(pow(num, n));\n  }\n  return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> res;\n    for(auto i: nums) {\n        res.push_back(pow(i, n));\n    }\n    return res;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "  std::vector<long> result;\n  for (long i = 0; i < nums.size(); i++) {\n    result.push_back(pow(nums[i], n));\n  }\n  return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(std::pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "  std::vector<long> result;\n  for(int i = 0; i < nums.size(); i++) {\n    result.push_back(pow(nums[i], n));\n  }\n  return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(std::pow(num, n));\n    }\n    return result;",
    "  std::vector<long> result;\n  for (auto num : nums) {\n    result.push_back(pow(num, n));\n  }\n  return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "  std::vector<long> result;\n  for (long i = 0; i < nums.size(); i++) {\n    result.push_back(pow(nums[i], n));\n  }\n  return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;"
  ]
}