{
  "name": "mbpp_623_nth_nums",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to compute the n-th power of each number in a list.\nstd::vector<long> nth_nums(std::vector<long> nums, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = nth_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25, (long)36, (long)49, (long)64, (long)81, (long)100})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)30})), (3)) == (std::vector<long>({(long)1000, (long)8000, (long)27000})));\n    assert(candidate((std::vector<long>({(long)12, (long)15})), (5)) == (std::vector<long>({(long)248832, (long)759375})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    for(int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> res;\n    for (auto num : nums) {\n        res.push_back(pow(num, n));\n    }\n    return res;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=0;i<nums.size();i++)\n    {\n        long temp=1;\n        for(int j=0;j<n;j++)\n        {\n            temp=temp*nums[i];\n        }\n        result.push_back(temp);\n    }\n    return result;",
    "  std::vector<long> result;\n  for (auto num : nums) {\n    result.push_back(pow(num, n));\n  }\n  return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto num : nums) {\n        result.push_back(pow(num, n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], n));\n    }\n    return result;"
  ]
}