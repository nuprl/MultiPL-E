{
  "name": "mbpp_584_find_adverbs",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the first adverb ending with ly and its positions in a given string.\nstd::string find_adverbs(std::string text) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = find_adverbs;\n    assert(candidate((\"Clearly, he has no excuse for such behavior.\")) == (\"0-7: Clearly\"));\n    assert(candidate((\"Please handle the situation carefuly\")) == (\"28-36: carefuly\"));\n    assert(candidate((\"Complete the task quickly\")) == (\"18-25: quickly\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  std::string result;\n  std::string::size_type pos = 0;\n  while ((pos = text.find(\"ly\", pos)) != std::string::npos) {\n    result += \" \" + std::to_string(pos);\n    ++pos;\n  }\n  return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb;\n    std::string result;\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                result += adverb + \" \" + std::to_string(pos) + \" \";\n            }\n            adverb.clear();\n            pos = i + 1;\n        }\n        else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        result += adverb + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb = \"\";\n    std::string adverb_list = \"\";\n    int position = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 3 && adverb[adverb.size() - 2] == 'l' && adverb[adverb.size() - 1] == 'y') {\n                adverb_list += adverb + \" \" + std::to_string(position) + \" \";\n            }\n            adverb = \"\";\n            position = i + 1;\n        }\n        else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 3 && adverb[adverb.size() - 2] == 'l' && adverb[adverb.size() - 1] == 'y') {\n        adverb_list += adverb + \" \" + std::to_string(position) + \" \";\n    }\n    return adverb_list;",
    "    std::string result = \"\";\n    std::string adverb = \"\";\n    int pos = 0;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            if(adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                result += adverb + \" \" + std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if(adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n        result += adverb + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb;\n    int pos = 0;\n    std::stringstream ss(text);\n    std::string word;\n    while(ss >> word) {\n        if(word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            adverb = word;\n            break;\n        }\n        pos += word.size() + 1;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "    std::string adverb;\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        adverb = text.substr(pos - 1, 3);\n        if (adverb.find_first_of(\"aeiou\") == std::string::npos) {\n            return adverb;\n        }\n        ++pos;\n    }\n    return \"\";",
    "    std::regex r(\"\\\\w+ly\");\n    std::smatch m;\n    std::string result;\n    while(std::regex_search(text, m, r)) {\n        result = m.str();\n        text = m.suffix().str();\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "  std::string adverb;\n  int pos = 0;\n  std::stringstream ss(text);\n  std::string word;\n  while (ss >> word) {\n    if (word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n      adverb = word;\n      break;\n    }\n    pos += word.length() + 1;\n  }\n  return adverb + \" \" + std::to_string(pos);",
    "    std::string adverb = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                return adverb + \" \" + std::to_string(pos);\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        return adverb + \" \" + std::to_string(pos);\n    }\n    return \"\";",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \";\n            }\n            word = \"\";\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string::size_type pos = 0;\n    while((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        result += \" \" + std::to_string(pos);\n        ++pos;\n    }\n    return result;",
    "    std::string result;\n    std::stringstream ss(text);\n    std::string word;\n    int i = 0;\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n            result += std::to_string(i) + \" \";\n        }\n        i++;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int position = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n                result += word + \" \" + std::to_string(position) + \" \";\n            }\n            word = \"\";\n            position = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n        result += word + \" \" + std::to_string(position) + \" \";\n    }\n    return result;"
  ]
}