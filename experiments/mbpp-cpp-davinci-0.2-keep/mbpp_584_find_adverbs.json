{
  "name": "mbpp_584_find_adverbs",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the first adverb ending with ly and its positions in a given string.\nstd::string find_adverbs(std::string text) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = find_adverbs;\n    assert(candidate((\"Clearly, he has no excuse for such behavior.\")) == (\"0-7: Clearly\"));\n    assert(candidate((\"Please handle the situation carefuly\")) == (\"28-36: carefuly\"));\n    assert(candidate((\"Complete the task quickly\")) == (\"18-25: quickly\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  std::string result;\n  std::string::size_type pos = 0;\n  while ((pos = text.find(\"ly\", pos)) != std::string::npos) {\n    result += \" \" + std::to_string(pos);\n    ++pos;\n  }\n  return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb;\n    std::string result;\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                result += adverb + \" \" + std::to_string(pos) + \" \";\n            }\n            adverb.clear();\n            pos = i + 1;\n        }\n        else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        result += adverb + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb = \"\";\n    std::string adverb_list = \"\";\n    int position = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 3 && adverb[adverb.size() - 2] == 'l' && adverb[adverb.size() - 1] == 'y') {\n                adverb_list += adverb + \" \" + std::to_string(position) + \" \";\n            }\n            adverb = \"\";\n            position = i + 1;\n        }\n        else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 3 && adverb[adverb.size() - 2] == 'l' && adverb[adverb.size() - 1] == 'y') {\n        adverb_list += adverb + \" \" + std::to_string(position) + \" \";\n    }\n    return adverb_list;",
    "    std::string result = \"\";\n    std::string adverb = \"\";\n    int pos = 0;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            if(adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                result += adverb + \" \" + std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if(adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n        result += adverb + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb;\n    int pos = 0;\n    std::stringstream ss(text);\n    std::string word;\n    while(ss >> word) {\n        if(word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            adverb = word;\n            break;\n        }\n        pos += word.size() + 1;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "    std::string adverb;\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        adverb = text.substr(pos - 1, 3);\n        if (adverb.find_first_of(\"aeiou\") == std::string::npos) {\n            return adverb;\n        }\n        ++pos;\n    }\n    return \"\";",
    "    std::regex r(\"\\\\w+ly\");\n    std::smatch m;\n    std::string result;\n    while(std::regex_search(text, m, r)) {\n        result = m.str();\n        text = m.suffix().str();\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "  std::string adverb;\n  int pos = 0;\n  std::stringstream ss(text);\n  std::string word;\n  while (ss >> word) {\n    if (word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n      adverb = word;\n      break;\n    }\n    pos += word.length() + 1;\n  }\n  return adverb + \" \" + std::to_string(pos);",
    "    std::string adverb = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                return adverb + \" \" + std::to_string(pos);\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        return adverb + \" \" + std::to_string(pos);\n    }\n    return \"\";",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \";\n            }\n            word = \"\";\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string::size_type pos = 0;\n    while((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        result += \" \" + std::to_string(pos);\n        ++pos;\n    }\n    return result;",
    "    std::string result;\n    std::stringstream ss(text);\n    std::string word;\n    int i = 0;\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n            result += std::to_string(i) + \" \";\n        }\n        i++;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int position = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n                result += word + \" \" + std::to_string(position) + \" \";\n            }\n            word = \"\";\n            position = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n        result += word + \" \" + std::to_string(position) + \" \";\n    }\n    return result;",
    "  std::string result;\n  std::string::size_type pos = 0;\n  while ((pos = text.find(\"ly\", pos)) != std::string::npos) {\n    result += \" \" + std::to_string(pos);\n    ++pos;\n  }\n  return result;",
    "    std::string adverbs;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.length() >= 2) {\n            if(word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                adverbs += word + \" \";\n            }\n        }\n    }\n    return adverbs;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb = \"\";\n    std::string result = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 2 && adverb[adverb.size() - 2] == 'l' && adverb[adverb.size() - 1] == 'y') {\n                result += adverb + \" \";\n                result += std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 2 && adverb[adverb.size() - 2] == 'l' && adverb[adverb.size() - 1] == 'y') {\n        result += adverb + \" \";\n        result += std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb;\n    std::string::size_type pos = 0;\n    std::string::size_type prev_pos = 0;\n    while((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        std::string::size_type temp_pos = pos;\n        while(temp_pos > 0 && isalpha(text[temp_pos])) {\n            --temp_pos;\n        }\n        if(!isalpha(text[temp_pos])) {\n            ++temp_pos;\n        }\n        if(temp_pos == prev_pos) {\n            adverb = text.substr(temp_pos, pos - temp_pos + 1);\n            break;\n        }\n        prev_pos = temp_pos;\n        ++pos;\n    }\n    return adverb;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n        i++;\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word;\n    }\n    return result;",
    "    std::string adverb;\n    int pos = 0;\n    std::stringstream ss(text);\n    std::string word;\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            adverb = word;\n            break;\n        }\n        pos += word.size() + 1;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "    std::regex r(\"\\\\b[a-zA-Z]+ly\\\\b\");\n    std::smatch m;\n    std::string result;\n    while(std::regex_search(text, m, r)) {\n        result += m.str() + \" \";\n        text = m.suffix().str();\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    int pos = 0;\n    while (ss >> word) {\n        if (word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n            result += std::to_string(pos) + \" \";\n        }\n        pos += word.size() + 1;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int position = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() >= 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(position) + \" \";\n            }\n            word = \"\";\n            position = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.length() >= 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(position) + \" \";\n    }\n    return result;",
    "    std::string adverb;\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            pos = i;\n        }\n        if (text[i] == 'l' && text[i + 1] == 'y') {\n            adverb = text.substr(pos + 1, i - pos + 1);\n            break;\n        }\n    }\n    return adverb;",
    "    std::string adverb = \"\";\n    int pos = 0;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            if(adverb.length() > 0) {\n                if(adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                    return adverb + \" \" + std::to_string(pos);\n                }\n                adverb = \"\";\n                pos = 0;\n            }\n        } else {\n            adverb += text[i];\n            pos = i;\n        }\n    }\n    return \"\";",
    "    std::string adverb;\n    std::string result;\n    int position = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 2 && adverb[adverb.size() - 2] == 'l' && adverb[adverb.size() - 1] == 'y') {\n                result = adverb;\n                position = i - adverb.size();\n                break;\n            }\n            adverb = \"\";\n        }\n        else {\n            adverb += text[i];\n        }\n    }\n    return result + \" \" + std::to_string(position);",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n    }\n    if (word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() >= 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "  std::string adverb = \"\";\n  int start = 0;\n  int end = 0;\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == ' ') {\n      end = i;\n      if (text.substr(start, end - start).find(\"ly\") != std::string::npos) {\n        adverb = text.substr(start, end - start);\n        break;\n      }\n      start = i + 1;\n    }\n  }\n  return adverb;",
    "    std::string result;\n    std::string word;\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb;\n    int position = 0;\n    std::string result;\n    std::stringstream ss(text);\n    while (ss >> adverb) {\n        if (adverb.size() > 2 && adverb.substr(adverb.size() - 2) == \"ly\") {\n            result += adverb + \" \" + std::to_string(position) + \" \";\n        }\n        position += adverb.size() + 1;\n    }\n    return result;",
    "    std::string adverb;\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (text[i] == 'l' && text[i + 1] == 'y') {\n            adverb += text[i - 1];\n            adverb += text[i];\n            adverb += text[i + 1];\n            adverb += \" \";\n            adverb += std::to_string(i - 1);\n            adverb += \" \";\n            adverb += std::to_string(i);\n            adverb += \" \";\n            adverb += std::to_string(i + 1);\n            adverb += \" \";\n            i++;\n            continue;\n        }\n        i++;\n    }\n    return adverb;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "\tstd::string result = \"\";\n\tstd::string word = \"\";\n\tint pos = 0;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tif (word.length() >= 2) {\n\t\t\t\tif (word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n\t\t\t\t\tresult += word + \" \" + std::to_string(pos) + \" \";\n\t\t\t\t}\n\t\t\t}\n\t\t\tword = \"\";\n\t\t\tpos = i + 1;\n\t\t}\n\t\telse {\n\t\t\tword += text[i];\n\t\t}\n\t}\n\tif (word.length() >= 2) {\n\t\tif (word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n\t\t\tresult += word + \" \" + std::to_string(pos) + \" \";\n\t\t}\n\t}\n\treturn result;",
    "    std::string adverb = \"\";\n    int pos = -1;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                return adverb + \" \" + std::to_string(pos);\n            }\n            adverb = \"\";\n            pos = -1;\n        } else {\n            if (pos == -1) {\n                pos = i;\n            }\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        return adverb + \" \" + std::to_string(pos);\n    }\n    return \"\";",
    "  std::string result = \"\";\n  std::string word = \"\";\n  int pos = 0;\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == ' ') {\n      if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n      }\n      word = \"\";\n      pos = i + 1;\n    } else {\n      word += text[i];\n    }\n  }\n  if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n    result += word + \" \" + std::to_string(pos) + \" \";\n  }\n  return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int position = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n                result += word + \" \" + std::to_string(position) + \" \";\n            }\n            word = \"\";\n            position = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n        result += word + \" \" + std::to_string(position) + \" \";\n    }\n    return result;",
    "    std::string adverb;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while (ss >> word) {\n        if (word.length() >= 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n            adverb = word;\n            break;\n        }\n        pos += word.length() + 1;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "    std::regex pattern(\"\\\\w+ly\");\n    std::smatch matches;\n    std::string result;\n    if (std::regex_search(text, matches, pattern)) {\n        result = matches[0];\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(i - word.size()) + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(text.size() - word.size());\n    }\n    return result;",
    "    std::string adverb;\n    int pos = 0;\n    std::stringstream ss(text);\n    std::string word;\n    while(ss >> word) {\n        if(word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            adverb = word;\n            break;\n        }\n        pos += word.size() + 1;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \";\n                result += std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \";\n        result += std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n    }\n    if (word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos);\n    }\n    return result;",
    "    std::string adverb;\n    std::string adverbs;\n    std::string::size_type pos = 0;\n    while(pos < text.size()) {\n        pos = text.find(\"ly\", pos);\n        if(pos == std::string::npos) {\n            break;\n        }\n        adverb = text.substr(pos - 2, 2);\n        if(adverb == \"ly\") {\n            adverbs += adverb;\n            adverbs += \" \";\n        }\n        pos += 2;\n    }\n    return adverbs;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "  std::string result = \"\";\n  std::string adverb = \"\";\n  int pos = 0;\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == ' ') {\n      if (adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n        result += adverb + \" \" + std::to_string(pos) + \" \";\n      }\n      adverb = \"\";\n      pos = i + 1;\n    } else {\n      adverb += text[i];\n    }\n  }\n  if (adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n    result += adverb + \" \" + std::to_string(pos) + \" \";\n  }\n  return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "\tstd::string result;\n\tstd::string word;\n\tstd::stringstream ss(text);\n\twhile (ss >> word) {\n\t\tif (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l' && word[word.size() - 3] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n    }\n    if (word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l' && word[word.size() - 3] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n            result += std::to_string(pos) + \" \";\n        }\n        pos += word.size() + 1;\n    }\n    return result;",
    "    std::string adverb;\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == 'l' && text[i + 1] == 'y') {\n            adverb += text[i - 1];\n            adverb += text[i];\n            adverb += text[i + 1];\n            adverb += \" \";\n            adverb += std::to_string(i - 1);\n            adverb += \" \";\n            adverb += std::to_string(i);\n            adverb += \" \";\n            adverb += std::to_string(i + 1);\n            adverb += \" \";\n            count++;\n        }\n    }\n    if (count == 0) {\n        adverb = \"No adverbs ending with ly found\";\n    }\n    return adverb;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int position = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(position) + \" \";\n            }\n            word = \"\";\n            position = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(position) + \" \";\n    }\n    return result;",
    "    std::string adverb;\n    int pos = 0;\n    std::stringstream ss(text);\n    std::string word;\n    while(ss >> word) {\n        if(word.size() > 2 && word.substr(word.size()-2) == \"ly\") {\n            adverb = word;\n            break;\n        }\n        pos += word.size() + 1;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "    std::string result = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (text[i - 1] == 'y' && text[i - 2] == 'l' && text[i - 3] == 'y') {\n                result = text.substr(pos, i - pos);\n                break;\n            }\n            pos = i + 1;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int position = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.size() >= 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(position) + \" \";\n            }\n            word = \"\";\n            position = i + 1;\n        }\n    }\n    if (word.size() >= 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(position) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int position = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(position) + \" \";\n            }\n            word = \"\";\n            position = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(position) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] == ' ') {\n            if (text[i - 1] == 'y' && text[i - 2] == 'l' && text[i - 3] == 'l' && text[i - 4] == 'e') {\n                result += std::to_string(pos);\n                result += \" \";\n            }\n            pos = i + 1;\n        }\n        i++;\n    }\n    if (text[i - 1] == 'y' && text[i - 2] == 'l' && text[i - 3] == 'l' && text[i - 4] == 'e') {\n        result += std::to_string(pos);\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::vector<int> positions;\n    std::string word = \"\";\n    int position = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result = word;\n                positions.push_back(position);\n            }\n            word = \"\";\n            position = i + 1;\n        }\n        else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result = word;\n        positions.push_back(position);\n    }\n    std::string positions_string = \"\";\n    for (int i = 0; i < positions.size(); i++) {\n        positions_string += std::to_string(positions[i]) + \" \";\n    }\n    return result + \" \" + positions_string;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    int start = 0;\n    while (pos != -1) {\n        pos = text.find(\"ly\", start);\n        if (pos != -1) {\n            result += std::to_string(pos) + \" \";\n            start = pos + 1;\n        }\n    }\n    return result;",
    "  std::regex e(\"[a-zA-Z]+ly\");\n  std::smatch m;\n  std::string result;\n  while (std::regex_search(text, m, e)) {\n    result = m.str();\n    text = m.suffix().str();\n  }\n  return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n        else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb;\n    std::string::size_type pos = 0;\n    std::string::size_type pos_end = 0;\n    while (true) {\n        pos = text.find(\"ly\", pos);\n        if (pos == std::string::npos) {\n            break;\n        }\n        pos_end = pos;\n        while (text[pos_end] != ' ' && text[pos_end] != '.') {\n            pos_end--;\n        }\n        adverb = text.substr(pos_end + 1, pos - pos_end - 1);\n        if (adverb.find(\"ly\") != std::string::npos) {\n            return adverb;\n        }\n        pos++;\n    }\n    return \"\";",
    "    std::string adverbs = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                adverbs += word + \" \";\n            }\n            word = \"\";\n        }\n    }\n    return adverbs;",
    "    std::string result;\n    std::string word;\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            pos = i;\n            word = \"\";\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb;\n    std::string::size_type pos = 0;\n    while((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        adverb = text.substr(pos - 1, 3);\n        if(adverb[0] == ' ') {\n            return adverb;\n        }\n        ++pos;\n    }\n    return adverb;",
    "    std::string result = \"\";\n    std::string adverb = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 2 && adverb[adverb.length() - 2] == 'l' && adverb[adverb.length() - 1] == 'y') {\n                result += adverb + \" \" + std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.length() > 2 && adverb[adverb.length() - 2] == 'l' && adverb[adverb.length() - 1] == 'y') {\n        result += adverb + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string adverb;\n    int pos = 0;\n    int len = text.length();\n    while (pos < len) {\n        while (pos < len && text[pos] != ' ') {\n            adverb += text[pos];\n            pos++;\n        }\n        if (adverb.length() > 2 && adverb[adverb.length() - 2] == 'l' && adverb[adverb.length() - 1] == 'y') {\n            result += adverb + \" \";\n        }\n        adverb.clear();\n        pos++;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int i = 0;\n    while(i < text.size()) {\n        if(text[i] == ' ') {\n            if(word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n        i++;\n    }\n    if(word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word;\n    }\n    return result;",
    "  std::string result;\n  std::string word;\n  std::stringstream ss(text);\n  while (ss >> word) {\n    if (word.length() >= 2 && word.substr(word.length() - 2) == \"ly\") {\n      result += word + \" \";\n    }\n  }\n  return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] == ' ') {\n            if(word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n        i++;\n    }\n    if(word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n        result += word;\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int count = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(count) + \" \";\n            }\n            word = \"\";\n            count++;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(count) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb;\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (text[i] == 'l' && text[i + 1] == 'y') {\n            int j = i;\n            while (text[j] != ' ' && j >= 0) {\n                j--;\n            }\n            adverb = text.substr(j + 1, i - j + 1);\n            break;\n        }\n        i++;\n    }\n    return adverb;",
    "    std::string adverb;\n    std::stringstream ss(text);\n    std::string word;\n    int count = 0;\n    while(ss >> word) {\n        if(word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            adverb = word;\n            break;\n        }\n        count++;\n    }\n    if(adverb.size() == 0) {\n        return \"Adverb not found!\";\n    }\n    return \"Adverb: \" + adverb + \" Position: \" + std::to_string(count);",
    "    std::string adverb;\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                return adverb + \" \" + std::to_string(pos);\n            }\n            adverb.clear();\n            pos = 0;\n        } else {\n            adverb += text[i];\n            pos++;\n        }\n    }\n    return \"\";",
    "    std::string adverb;\n    std::string result;\n    int pos = 0;\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 0) {\n                if (adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                    result += adverb + \" \" + std::to_string(pos) + \" \";\n                }\n                adverb.clear();\n                pos = i + 1;\n            }\n        }\n        else {\n            adverb += text[i];\n        }\n        i++;\n    }\n    if (adverb.size() > 0) {\n        if (adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n            result += adverb + \" \" + std::to_string(pos) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::vector<int> positions;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result = word;\n            positions.push_back(ss.tellg());\n        }\n    }\n    std::stringstream ss2;\n    ss2 << result << \" \";\n    for (auto i : positions) {\n        ss2 << i << \" \";\n    }\n    return ss2.str();",
    "    std::string adverb;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while (ss >> word) {\n        if (word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n            adverb = word;\n            break;\n        }\n        pos += word.length() + 1;\n    }\n    if (adverb.length() == 0) {\n        return \"Not found!\";\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 2) {\n                if (adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                    return adverb + \" \" + std::to_string(pos);\n                }\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 2) {\n        if (adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n            return adverb + \" \" + std::to_string(pos);\n        }\n    }\n    return \"\";",
    "  std::string result = \"\";\n  std::string word = \"\";\n  int pos = 0;\n  for (int i = 0; i < text.size(); i++) {\n    if (text[i] == ' ') {\n      if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n      }\n      word = \"\";\n      pos = i + 1;\n    } else {\n      word += text[i];\n    }\n  }\n  if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n    result += word + \" \" + std::to_string(pos);\n  }\n  return result;",
    "  std::string result = \"\";\n  std::string word = \"\";\n  int pos = 0;\n  for (int i = 0; i < text.size(); i++) {\n    if (text[i] == ' ') {\n      if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n      }\n      word = \"\";\n      pos = i + 1;\n    } else {\n      word += text[i];\n    }\n  }\n  if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n    result += word + \" \" + std::to_string(pos) + \" \";\n  }\n  return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n        i++;\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word;\n    }\n    return result;",
    "    std::string adverb;\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                return adverb + \" \" + std::to_string(pos);\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n        return adverb + \" \" + std::to_string(pos);\n    }\n    return \"\";",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb;\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        if (pos == 0 || text[pos - 1] == ' ') {\n            adverb = text.substr(pos, 2);\n            break;\n        }\n        pos += 2;\n    }\n    return adverb;",
    "    std::string adverb = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                return adverb + \" \" + std::to_string(pos);\n            }\n            adverb = \"\";\n            pos = 0;\n        }\n        else {\n            adverb += text[i];\n            pos = i;\n        }\n    }\n    if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        return adverb + \" \" + std::to_string(pos);\n    }\n    return \"\";",
    "    std::string adverb = \"\";\n    int position = 0;\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            position = i;\n            if (adverb.length() > 2 && adverb[adverb.length() - 2] == 'l' && adverb[adverb.length() - 1] == 'y') {\n                result += adverb + \" \" + std::to_string(position) + \" \";\n            }\n            adverb = \"\";\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.length() > 2 && adverb[adverb.length() - 2] == 'l' && adverb[adverb.length() - 1] == 'y') {\n        result += adverb + \" \" + std::to_string(text.length()) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "  std::string result = \"\";\n  int pos = 0;\n  std::string word = \"\";\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == ' ') {\n      if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result = word;\n        pos = i - word.length();\n        break;\n      }\n      word = \"\";\n    } else {\n      word += text[i];\n    }\n  }\n  return result + \" \" + std::to_string(pos);",
    "    std::string result;\n    std::string adverb;\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        adverb = text.substr(pos - 1, 3);\n        if (adverb[0] == ' ') {\n            result += adverb + \" \";\n        }\n        pos += 2;\n    }\n    return result;",
    "    std::string adverb = \"\";\n    std::string result = \"\";\n    int position = 0;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n            if(adverb.size() >= 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                result += adverb + \" \";\n                result += std::to_string(position) + \" \";\n            }\n            adverb = \"\";\n            position = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if(adverb.size() >= 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        result += adverb + \" \";\n        result += std::to_string(position) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n        i++;\n    }\n    if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n        result += word + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.size() >= 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \";\n            }\n            word = \"\";\n        }\n        i++;\n    }\n    if (word.size() >= 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    int start = 0;\n    while(text.find(\"ly\", start) != std::string::npos) {\n        pos = text.find(\"ly\", start);\n        if(pos > 0) {\n            if(text[pos - 1] == ' ') {\n                result += text.substr(pos - 1, 2);\n                result += \" \";\n            }\n        }\n        start = pos + 1;\n    }\n    return result;",
    "    std::string adverb = \"\";\n    std::string result = \"\";\n    int pos = 0;\n    for(auto i : text) {\n        if(i == ' ') {\n            if(adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                result += adverb + \" \" + std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = 0;\n        } else {\n            adverb += i;\n            pos++;\n        }\n    }\n    if(adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        result += adverb + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb = \"\";\n    int start = 0;\n    int end = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            end = i;\n            if (text.substr(start, end - start).find(\"ly\") != std::string::npos) {\n                adverb = text.substr(start, end - start);\n                break;\n            }\n            start = i + 1;\n        }\n    }\n    return adverb;",
    "    std::regex regex(\"[a-zA-Z]+ly\");\n    std::smatch match;\n    std::string result;\n    while(std::regex_search(text, match, regex)) {\n        result = match.str();\n        text = match.suffix().str();\n    }\n    return result;",
    "    std::string adverb;\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        if (pos == 0) {\n            adverb = \"\";\n            break;\n        }\n        if (text[pos - 1] == ' ') {\n            adverb = text.substr(pos - 1, 2);\n            break;\n        }\n        ++pos;\n    }\n    return adverb;",
    "\tstd::string adverb;\n\tstd::stringstream ss(text);\n\tstd::string word;\n\tint pos = 0;\n\twhile (ss >> word) {\n\t\tif (word.size() >= 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n\t\t\tadverb = word;\n\t\t\tbreak;\n\t\t}\n\t\tpos += word.size() + 1;\n\t}\n\tif (adverb.empty()) {\n\t\treturn \"\";\n\t}\n\treturn adverb + \" \" + std::to_string(pos);",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l' && word[word.size() - 3] == 'y') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n    }\n    if (word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l' && word[word.size() - 3] == 'y') {\n        result += word + \" \" + std::to_string(pos);\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n        i++;\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word;\n    }\n    return result;",
    "    std::string adverb;\n    int pos = 0;\n    int pos_end = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            pos = i;\n            for (int j = i + 1; j < text.length(); j++) {\n                if (text[j] == ' ') {\n                    pos_end = j;\n                    break;\n                }\n            }\n            adverb = text.substr(pos + 1, pos_end - pos - 1);\n            if (adverb.length() >= 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                return adverb;\n            }\n        }\n    }\n    return \"\";",
    "    std::string adverb;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while (ss >> word) {\n        if (word.find(\"ly\") == word.size() - 2) {\n            adverb = word;\n            break;\n        }\n        pos += word.size() + 1;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word;\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "  std::string adverb;\n  std::stringstream ss(text);\n  std::string word;\n  int i = 0;\n  while(ss >> word) {\n    if(word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n      adverb = word;\n      break;\n    }\n    i++;\n  }\n  return adverb + \" \" + std::to_string(i);",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int position = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.size() >= 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(position) + \" \";\n            }\n            position += word.size() + 1;\n            word = \"\";\n        }\n    }\n    if (word.size() >= 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(position) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 2 && adverb[adverb.length() - 2] == 'l' && adverb[adverb.length() - 1] == 'y') {\n                return adverb + \" \" + std::to_string(pos);\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.length() > 2 && adverb[adverb.length() - 2] == 'l' && adverb[adverb.length() - 1] == 'y') {\n        return adverb + \" \" + std::to_string(pos);\n    }\n    return \"\";",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::stringstream ss(text);\n    std::string word;\n    int i = 0;\n    while(ss >> word) {\n        if(word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \" + std::to_string(i) + \" \";\n        }\n        i++;\n    }\n    return result;",
    "    std::string adverb;\n    std::string adverb_positions;\n    int position = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            position++;\n        }\n        if (text[i] == 'l' && text[i + 1] == 'y') {\n            for (int j = i; j >= 0; j--) {\n                if (text[j] == ' ') {\n                    break;\n                }\n                adverb = text[j] + adverb;\n            }\n            adverb_positions += std::to_string(position) + \" \";\n        }\n    }\n    return adverb + \" \" + adverb_positions;",
    "    std::string adverb = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (text[i] == 'l' && text[i + 1] == 'y') {\n            int j = i;\n            while (text[j] != ' ') {\n                adverb += text[j];\n                j++;\n            }\n            adverb += \" \";\n            i = j;\n        }\n        else {\n            i++;\n        }\n    }\n    return adverb;",
    "    std::string result;\n    std::string word;\n    int pos = 0;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        pos++;\n        if (word.size() >= 2 && word.substr(word.size() - 2, 2) == \"ly\") {\n            result += word + \" \" + std::to_string(pos) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    int pos = 0;\n    int len = text.length();\n    for (int i = 0; i < len; i++) {\n        if (text[i] == ' ') {\n            if (text[i - 1] == 'y' && text[i - 2] == 'l' && text[i - 3] == 'l' && text[i - 4] == 'e') {\n                result = text.substr(pos, i - pos);\n                break;\n            }\n            pos = i + 1;\n        }\n    }\n    return result;",
    "    std::string adverb;\n    std::stringstream ss(text);\n    std::string word;\n    std::vector<std::string> words;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    for (auto word : words) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            adverb = word;\n            break;\n        }\n    }\n    return adverb;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n                result += word + \" \";\n            }\n            word = \"\";\n        }\n        else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n        result += word + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n    }\n    return result;",
    "    std::string adverbs;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            adverbs += word + \" \";\n        }\n    }\n    return adverbs;",
    "    std::string adverb;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            adverb = word;\n            break;\n        }\n        pos += word.size() + 1;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (text[i - 1] == 'y' && text[i - 2] == 'l' && text[i - 3] == 'l') {\n                result += text.substr(pos, i - pos);\n                result += \" \";\n            }\n            pos = i + 1;\n        }\n    }\n    if (text[text.length() - 1] == 'y' && text[text.length() - 2] == 'l' && text[text.length() - 3] == 'l') {\n        result += text.substr(pos, text.length() - pos);\n    }\n    return result;",
    "    std::string adverb;\n    std::string result;\n    int pos = 0;\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 0) {\n                if (adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                    result += adverb + \" \" + std::to_string(pos) + \" \";\n                }\n                pos = i + 1;\n                adverb = \"\";\n            }\n        } else {\n            adverb += text[i];\n        }\n        i++;\n    }\n    if (adverb.length() > 0) {\n        if (adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n            result += adverb + \" \" + std::to_string(pos) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    std::string word = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \";\n                result += std::to_string(pos) + \" \";\n            }\n            pos = i + 1;\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \";\n        result += std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb;\n    std::string adverb_list;\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        adverb = text.substr(pos - 1, 3);\n        adverb_list += adverb + \" \";\n        pos += 2;\n    }\n    return adverb_list;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (text.substr(pos, i - pos).size() > 2 && text.substr(pos, i - pos).substr(text.substr(pos, i - pos).size() - 2, 2) == \"ly\") {\n                result += text.substr(pos, i - pos) + \" \" + std::to_string(pos) + \" \";\n            }\n            pos = i + 1;\n        }\n    }\n    if (text.substr(pos, text.size() - pos).size() > 2 && text.substr(pos, text.size() - pos).substr(text.substr(pos, text.size() - pos).size() - 2, 2) == \"ly\") {\n        result += text.substr(pos, text.size() - pos) + \" \" + std::to_string(pos);\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "\tstd::string adverb;\n\tint pos = 0;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tif (adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n\t\t\t\treturn adverb + \" \" + std::to_string(pos);\n\t\t\t}\n\t\t\tadverb = \"\";\n\t\t\tpos = i + 1;\n\t\t}\n\t\telse {\n\t\t\tadverb += text[i];\n\t\t}\n\t}\n\treturn \"\";",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while (ss >> word) {\n        if (word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n            result += std::to_string(pos) + \" \";\n        }\n        pos += word.size() + 1;\n    }\n    return result;",
    "    std::string adverb;\n    std::string result;\n    int pos = 0;\n    int pos_start = 0;\n    while (pos < text.size()) {\n        if (text[pos] == ' ') {\n            adverb = text.substr(pos_start, pos - pos_start);\n            if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                result += adverb + \" \";\n            }\n            pos_start = pos + 1;\n        }\n        pos++;\n    }\n    adverb = text.substr(pos_start, pos - pos_start);\n    if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        result += adverb + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int position = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \";\n                result += std::to_string(position) + \" \";\n            }\n            word = \"\";\n            position = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \";\n        result += std::to_string(position) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "\tstd::string result = \"\";\n\tint pos = 0;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tif (text[i - 1] == 'y' && text[i - 2] == 'l' && text[i - 3] == 'y') {\n\t\t\t\tresult = text.substr(pos, i - pos);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpos = i + 1;\n\t\t}\n\t}\n\treturn result;",
    "    std::string adverb;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            adverb = word;\n            break;\n        }\n        pos += word.size() + 1;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "    std::string result;\n    std::string temp;\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            if (temp.length() > 2 && temp[temp.length() - 1] == 'y' && temp[temp.length() - 2] == 'l') {\n                result += temp + \" \";\n            }\n            temp = \"\";\n        } else {\n            temp += text[i];\n        }\n        i++;\n    }\n    if (temp.length() > 2 && temp[temp.length() - 1] == 'y' && temp[temp.length() - 2] == 'l') {\n        result += temp + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string adverb = \"\";\n    int position = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 0) {\n                if (adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                    result += adverb + \" \" + std::to_string(position) + \" \";\n                }\n                adverb = \"\";\n                position = 0;\n            }\n        } else {\n            adverb += text[i];\n            position++;\n        }\n    }\n    if (adverb.length() > 0) {\n        if (adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n            result += adverb + \" \" + std::to_string(position) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] == ' ') {\n            if(word.length() >= 2) {\n                if(word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                    result += word + \" \";\n                }\n            }\n            word = \"\";\n        }\n        else {\n            word += text[i];\n        }\n        i++;\n    }\n    if(word.length() >= 2) {\n        if(word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb;\n    std::string result;\n    int position = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                result += adverb + \" \" + std::to_string(position) + \" \";\n            }\n            adverb.clear();\n            position = i + 1;\n        }\n        else {\n            adverb += text[i];\n        }\n    }\n    if (adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n        result += adverb + \" \" + std::to_string(position) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n                result = word;\n                break;\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n        i++;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string adverb = \"\";\n    int position = 0;\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                result += adverb + \" \" + std::to_string(position) + \" \";\n            }\n            adverb = \"\";\n            position = i + 1;\n        } else {\n            adverb += text[i];\n        }\n        i++;\n    }\n    if (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n        result += adverb + \" \" + std::to_string(position) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word.substr(word.length() - 2, 2) == \"ly\") {\n                result = word;\n                pos = i - word.length();\n                break;\n            }\n            word = \"\";\n        }\n        else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word.substr(word.length() - 2, 2) == \"ly\") {\n        result = word;\n        pos = text.length() - word.length();\n    }\n    return result + \" \" + std::to_string(pos);",
    "    std::string result;\n    std::vector<int> positions;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result = word;\n            positions.push_back(pos);\n        }\n        pos += word.size() + 1;\n    }\n    std::stringstream ss2;\n    ss2 << result << \" \";\n    for (auto i : positions) {\n        ss2 << i << \" \";\n    }\n    return ss2.str();",
    "    std::string adverb;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            adverb = word;\n            break;\n        }\n        pos += word.size() + 1;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string adverb = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                result += adverb + \" \" + std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        result += adverb + \" \" + std::to_string(pos);\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int position = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n                result += word + \" \" + std::to_string(position) + \" \";\n            }\n            word = \"\";\n            position = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n        result += word + \" \" + std::to_string(position) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        result += std::to_string(pos) + \" \";\n        pos += 2;\n    }\n    return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    while (text.find(\"ly\", pos) != std::string::npos) {\n        pos = text.find(\"ly\", pos);\n        if (pos > 0 && text[pos - 1] != ' ') {\n            pos++;\n            continue;\n        }\n        if (pos + 2 < text.size() && text[pos + 2] != ' ') {\n            pos++;\n            continue;\n        }\n        result += text.substr(pos - 1, 3) + \" \";\n        pos++;\n    }\n    return result;",
    "    std::regex pattern(\"\\\\b[a-zA-Z]+ly\\\\b\");\n    std::smatch matches;\n    std::string result;\n    while (std::regex_search(text, matches, pattern)) {\n        result = matches.str();\n        text = matches.suffix().str();\n    }\n    return result;",
    "    std::string adverb;\n    std::stringstream ss(text);\n    std::string word;\n    std::vector<std::string> words;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i].size() >= 2 && words[i].substr(words[i].size() - 2, 2) == \"ly\") {\n            adverb = words[i];\n            break;\n        }\n    }\n    return adverb;",
    "    std::string result = \"\";\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() >= 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb;\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 0) {\n                if (adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                    return adverb + \" \" + std::to_string(pos);\n                }\n                adverb = \"\";\n                pos = 0;\n            }\n        } else {\n            adverb += text[i];\n            pos++;\n        }\n    }\n    if (adverb.length() > 0) {\n        if (adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n            return adverb + \" \" + std::to_string(pos);\n        }\n    }\n    return \"Not found\";",
    "    std::string result = \"\";\n    std::string word = \"\";\n    std::string adverb = \"\";\n    int pos = 0;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n            word = text.substr(pos, i - pos);\n            if(word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                adverb = word;\n                break;\n            }\n            pos = i + 1;\n        }\n    }\n    if(adverb == \"\") {\n        return \"\";\n    }\n    result += adverb;\n    result += \" \";\n    result += std::to_string(text.find(adverb));\n    result += \" \";\n    result += std::to_string(text.find(adverb) + adverb.size() - 1);\n    return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    while (pos < text.size()) {\n        int space = text.find(\" \", pos);\n        if (space == std::string::npos) {\n            space = text.size();\n        }\n        std::string word = text.substr(pos, space - pos);\n        if (word.size() >= 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n            result += word + \" \";\n        }\n        pos = space + 1;\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    std::string adverb = \"\";\n    int position = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            word = text.substr(position, i - position);\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                adverb = word;\n                break;\n            }\n            position = i + 1;\n        }\n    }\n    if (adverb != \"\") {\n        result += adverb + \" \" + std::to_string(position);\n    }\n    return result;",
    "  std::string result = \"\";\n  std::string word = \"\";\n  int pos = 0;\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == ' ') {\n      if (word.length() > 2 && word.substr(word.length() - 2, 2) == \"ly\") {\n        result += word + \" \" + std::to_string(pos) + \" \";\n      }\n      word = \"\";\n      pos = i + 1;\n    } else {\n      word += text[i];\n    }\n  }\n  if (word.length() > 2 && word.substr(word.length() - 2, 2) == \"ly\") {\n    result += word + \" \" + std::to_string(pos) + \" \";\n  }\n  return result;",
    "\tstd::string adverb;\n\tint pos = 0;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tif (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n\t\t\t\treturn adverb + \" \" + std::to_string(pos);\n\t\t\t}\n\t\t\tadverb = \"\";\n\t\t\tpos = i + 1;\n\t\t}\n\t\telse {\n\t\t\tadverb += text[i];\n\t\t}\n\t}\n\tif (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n\t\treturn adverb + \" \" + std::to_string(pos);\n\t}\n\treturn \"\";",
    "    std::string adverb = \"\";\n    std::string adverbs = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            pos = i;\n            if (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                adverbs += adverb + \" \" + std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n        } else {\n            adverb += text[i];\n        }\n    }\n    return adverbs;",
    "    std::string adverb;\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (text[i] == 'l' && text[i + 1] == 'y') {\n            int j = i;\n            while (text[j] != ' ' && j >= 0) {\n                j--;\n            }\n            adverb = text.substr(j + 1, i - j + 1);\n            break;\n        }\n        i++;\n    }\n    return adverb;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(count) + \" \";\n            }\n            word = \"\";\n            count++;\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(count) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n            if(word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if(word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string adverb = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                result += adverb + \" \" + std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = i + 1;\n        }\n        else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        result += adverb + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;"
  ]
}