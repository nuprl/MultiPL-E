{
  "name": "mbpp_166_find_even_pair",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long even_pairs = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                even_pairs++;\n            }\n        }\n    }\n    return even_pairs;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++){\n        for(int j=i+1;j<A.size();j++){\n            if((A[i]^A[j])%2==0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(long i = 0; i < A.size(); i++) {\n        for(long j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long even_count = 0;\n    for(long i = 0; i < A.size(); i++) {\n        for(long j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                even_count++;\n            }\n        }\n    }\n    return even_count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i+1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++)\n    {\n        for(int j=i+1;j<A.size();j++)\n        {\n            if((A[i]^A[j])%2==0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++){\n        for(int j=i+1;j<A.size();j++){\n            if((A[i]^A[j])%2==0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++){\n        for(int j=i+1;j<A.size();j++){\n            if((A[i]^A[j])%2==0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0; i<A.size(); i++) {\n        for(int j=i+1; j<A.size(); j++) {\n            if((A[i]^A[j])%2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if( (A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(long i = 0; i < A.size(); i++) {\n        for(long j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++) {\n        for(int j=i+1;j<A.size();j++) {\n            if((A[i]^A[j])%2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i+1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++)\n    {\n        for(int j=i+1;j<A.size();j++)\n        {\n            if((A[i]^A[j])%2==0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n\tlong count = 0;\n\tfor (int i = 0; i < A.size(); i++) {\n\t\tfor (int j = i + 1; j < A.size(); j++) {\n\t\t\tif ((A[i] ^ A[j]) % 2 == 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++){\n        for(int j=i+1;j<A.size();j++){\n            if((A[i]^A[j])%2==0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    std::vector<long> even;\n    std::vector<long> odd;\n    for(int i=0; i<A.size(); i++) {\n        if(A[i]%2 == 0) even.push_back(A[i]);\n        else odd.push_back(A[i]);\n    }\n    long even_pairs = even.size()*(even.size()-1)/2;\n    long odd_pairs = odd.size()*(odd.size()-1)/2;\n    return even_pairs + odd_pairs;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i+1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++){\n        for(int j=i+1;j<A.size();j++){\n            if((A[i]^A[j])%2==0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if(!(A[i] ^ A[j] & 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "tmp2x4jn379: /tmp/tmp2x4jn379.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    // Write your code here\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++)\n    {\n        for(int j=i+1;j<A.size();j++)\n        {\n            if((A[i]^A[j])%2==0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0; i<A.size(); i++) {\n        for(int j=i+1; j<A.size(); j++) {\n            if((A[i]^A[j])%2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    // Write your code here\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i]^A[j])%2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    int n = A.size();\n    long count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(long i = 0; i < A.size(); i++) {\n        for(long j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    // Write your code here\n    long count = 0;\n    for(int i = 0; i < A.size(); i++){\n        for(int j = i+1; j < A.size(); j++){\n            if((A[i]^A[j])%2 == 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++){\n        for(int j=i+1;j<A.size();j++){\n            if((A[i]^A[j])%2==0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (long i = 0; i < A.size(); i++) {\n        for (long j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++){\n        for(int j=i+1;j<A.size();j++){\n            if((A[i]^A[j])%2==0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++)\n    {\n        for(int j=i+1;j<A.size();j++)\n        {\n            if((A[i]^A[j])%2==0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++){\n        for(int j=i+1;j<A.size();j++){\n            if((A[i]^A[j])%2==0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count=0;\n    for(int i=0;i<A.size();i++)\n    {\n        for(int j=i+1;j<A.size();j++)\n        {\n            if((A[i]^A[j])%2==0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (long i = 0; i < A.size(); i++) {\n        for (long j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i]^A[j])%2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++) {\n        for(int j=i+1;j<A.size();j++) {\n            if((A[i]^A[j])%2==0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long even_count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                even_count++;\n            }\n        }\n    }\n    return even_count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0)\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n\tlong count = 0;\n\tfor (int i = 0; i < A.size(); i++) {\n\t\tfor (int j = i + 1; j < A.size(); j++) {\n\t\t\tif ((A[i] ^ A[j]) % 2 == 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    // Write your code here\n    long count = 0;\n    for(int i = 0; i < A.size(); i++){\n        for(int j = i+1; j < A.size(); j++){\n            if((A[i]^A[j])%2 == 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long even_pair_count = 0;\n    std::vector<long> even_numbers;\n    std::vector<long> odd_numbers;\n    for(auto i : A) {\n        if(i % 2 == 0) {\n            even_numbers.push_back(i);\n        } else {\n            odd_numbers.push_back(i);\n        }\n    }\n    even_pair_count += even_numbers.size() * odd_numbers.size();\n    even_pair_count += (even_numbers.size() * (even_numbers.size() - 1)) / 2;\n    even_pair_count += (odd_numbers.size() * (odd_numbers.size() - 1)) / 2;\n    return even_pair_count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "tmpm078z5dl: /tmp/tmpm078z5dl.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long even_count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                even_count++;\n            }\n        }\n    }\n    return even_count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0; i<A.size(); i++) {\n        for(int j=i+1; j<A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++)\n    {\n        for(int j=i+1;j<A.size();j++)\n        {\n            if((A[i]^A[j])%2==0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++){\n        for(int j=i+1;j<A.size();j++){\n            if((A[i]^A[j])%2==0)\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    // Write your code here\n    long count=0;\n    for(int i=0;i<A.size();i++){\n        for(int j=i+1;j<A.size();j++){\n            if((A[i]^A[j])%2==0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++)\n    {\n        for(int j=i+1;j<A.size();j++)\n        {\n            if((A[i]^A[j])%2==0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long even_pairs = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                even_pairs++;\n            }\n        }\n    }\n    return even_pairs;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++){\n        for(int j=i+1;j<A.size();j++){\n            if((A[i]^A[j])%2==0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++){\n        for(int j=i+1;j<A.size();j++){\n            if((A[i]^A[j])%2==0)\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(long i = 0; i < A.size(); i++) {\n        for(long j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++){\n        for(int j=i+1;j<A.size();j++){\n            if((A[i]^A[j])%2==0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    // Write your code here\n    long count = 0;\n    for(int i = 0; i < A.size(); i++){\n        for(int j = i+1; j < A.size(); j++){\n            if((A[i] ^ A[j]) % 2 == 0)\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122765,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i]^A[j])%2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0;i<A.size();i++){\n        for(int j=i+1;j<A.size();j++){\n            if((A[i]^A[j])%2==0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long even_count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                even_count++;\n            }\n        }\n    }\n    return even_count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long even_pair = 0;\n    std::vector<long> even_num;\n    std::vector<long> odd_num;\n    for(int i = 0; i < A.size(); i++) {\n        if(A[i] % 2 == 0) {\n            even_num.push_back(A[i]);\n        } else {\n            odd_num.push_back(A[i]);\n        }\n    }\n    even_pair = even_num.size() * odd_num.size();\n    return even_pair;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122765,
      "stdout": "",
      "stderr": "tmp6_xlr48t: /tmp/tmp6_xlr48t.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n\tlong count = 0;\n\tfor (int i = 0; i < A.size(); i++) {\n\t\tfor (int j = i + 1; j < A.size(); j++) {\n\t\t\tif ((A[i] ^ A[j]) % 2 == 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if( (A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122765,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    std::vector<long> even;\n    std::vector<long> odd;\n    for(int i = 0; i < A.size(); i++) {\n        if(A[i] % 2 == 0) {\n            even.push_back(A[i]);\n        }\n        else {\n            odd.push_back(A[i]);\n        }\n    }\n    count += even.size() * (even.size() - 1) / 2;\n    count += odd.size() * (odd.size() - 1) / 2;\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122765,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++){\n        for(int j = i+1; j < A.size(); j++){\n            if((A[i] ^ A[j]) % 2 == 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122765,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i+1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i=0; i<A.size(); i++) {\n        for(int j=i+1; j<A.size(); j++) {\n            if((A[i]^A[j])%2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i + 1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for(int i = 0; i < A.size(); i++) {\n        for(int j = i+1; j < A.size(); j++) {\n            if((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long count = 0;\n    for (int i = 0; i < A.size(); i++) {\n        for (int j = i + 1; j < A.size(); j++) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long even_pair_count = 0;\n    for(int i=0;i<A.size();i++) {\n        for(int j=i+1;j<A.size();j++) {\n            if((A[i]^A[j])%2 == 0) {\n                even_pair_count++;\n            }\n        }\n    }\n    return even_pair_count;\n}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n",
      "timestamp": 1666122765,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}