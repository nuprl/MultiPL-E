{
  "name": "mbpp_463_max_subarray_product",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum product subarray of the given array.\nlong max_subarray_product(std::vector<long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = max_subarray_product;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)0, (long)7, (long)-8, (long)-2}))) == (112));\n    assert(candidate((std::vector<long>({(long)6, (long)-3, (long)-10, (long)0, (long)2}))) == (180));\n    assert(candidate((std::vector<long>({(long)-2, (long)-40, (long)0, (long)-2, (long)-3}))) == (80));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = 1;\n    long min_so_far = 1;\n    long max_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_product = 1;\n    long min_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_product = max_product * arr[i];\n            min_product = std::min(min_product * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            long temp = max_product;\n            max_product = std::max(min_product * arr[i], 1L);\n            min_product = temp * arr[i];\n        }\n        if(max_so_far < max_product) {\n            max_so_far = max_product;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = 1;\n    long min_so_far = 1;\n    long max_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "  long max_ending_here = 1;\n  long min_ending_here = 1;\n  long max_so_far = 1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0) {\n      max_ending_here = max_ending_here * arr[i];\n      min_ending_here = std::min(min_ending_here * arr[i], 1L);\n    } else if (arr[i] == 0) {\n      max_ending_here = 1;\n      min_ending_here = 1;\n    } else {\n      long temp = max_ending_here;\n      max_ending_here = std::max(min_ending_here * arr[i], 1L);\n      min_ending_here = temp * arr[i];\n    }\n    if (max_so_far < max_ending_here)\n      max_so_far = max_ending_here;\n  }\n  return max_so_far;",
    "    long max_product = 1;\n    long min_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_product = max_product * arr[i];\n            min_product = std::min(min_product * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            long temp = max_product;\n            max_product = std::max(min_product * arr[i], 1L);\n            min_product = temp * arr[i];\n        }\n        if(max_so_far < max_product) {\n            max_so_far = max_product;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "\tlong max_ending_here = 1;\n\tlong min_ending_here = 1;\n\tlong max_so_far = 1;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] > 0) {\n\t\t\tmax_ending_here = max_ending_here * arr[i];\n\t\t\tmin_ending_here = std::min(min_ending_here * arr[i], 1);\n\t\t} else if (arr[i] == 0) {\n\t\t\tmax_ending_here = 1;\n\t\t\tmin_ending_here = 1;\n\t\t} else {\n\t\t\tlong temp = max_ending_here;\n\t\t\tmax_ending_here = std::max(min_ending_here * arr[i], 1);\n\t\t\tmin_ending_here = temp * arr[i];\n\t\t}\n\t\tif (max_so_far < max_ending_here) {\n\t\t\tmax_so_far = max_ending_here;\n\t\t}\n\t}\n\treturn max_so_far;",
    "    long max_product = 1;\n    long min_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_product = max_product * arr[i];\n            min_product = std::min(min_product * arr[i], 1);\n        } else if(arr[i] == 0) {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            long temp = max_product;\n            max_product = std::max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n        if(max_so_far < max_product) {\n            max_so_far = max_product;\n        }\n    }\n    return max_so_far;",
    "  long max_ending_here = 1;\n  long min_ending_here = 1;\n  long max_so_far = 1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0) {\n      max_ending_here = max_ending_here * arr[i];\n      min_ending_here = std::min(min_ending_here * arr[i], 1L);\n    } else if (arr[i] == 0) {\n      max_ending_here = 1;\n      min_ending_here = 1;\n    } else {\n      long temp = max_ending_here;\n      max_ending_here = std::max(min_ending_here * arr[i], 1L);\n      min_ending_here = temp * arr[i];\n    }\n    if (max_so_far < max_ending_here) {\n      max_so_far = max_ending_here;\n    }\n  }\n  return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1L);\n            min_ending_here = temp*arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = 1;\n    long min_so_far = 1;\n    long max_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long min_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_product = max_product * arr[i];\n            min_product = std::min(min_product * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            long temp = max_product;\n            max_product = std::max(min_product * arr[i], 1L);\n            min_product = temp * arr[i];\n        }\n        if(max_so_far < max_product) {\n            max_so_far = max_product;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "  long max_product = 1;\n  long min_product = 1;\n  long max_so_far = 1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0) {\n      max_product = max_product * arr[i];\n      min_product = std::min(min_product * arr[i], 1L);\n    } else if (arr[i] == 0) {\n      max_product = 1;\n      min_product = 1;\n    } else {\n      long temp = max_product;\n      max_product = std::max(min_product * arr[i], 1L);\n      min_product = temp * arr[i];\n    }\n    if (max_so_far < max_product) {\n      max_so_far = max_product;\n    }\n  }\n  return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = 1;\n    long min_so_far = 1;\n    long max_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1);\n        }\n        else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        }\n        else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;"
  ]
}