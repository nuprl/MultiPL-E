{
  "name": "mbpp_457_Find_Min",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sublist having minimum length.\nstd::any Find_Min(std::any lst) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = Find_Min;\n    assert(candidate((std::any({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})}))) == (std::any({(long)1})));\n    assert(candidate((std::any({(std::vector<long>)std::vector<long>({(long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)7, (long)8})}))) == (std::any({(long)1, (long)1})));\n    assert(candidate((std::any({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"})}))) == (std::any({(std::string)\"x\"})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    assert(lst.type() == typeid(std::vector<std::any>));\n    std::any min_sublist = lst;\n    for (auto sublist: lst) {\n        assert(sublist.type() == typeid(std::vector<std::any>));\n        if (sublist.size() < min_sublist.size()) {\n            min_sublist = sublist;\n        }\n    }\n    return min_sublist;",
    "    // write your code here\n    int min = INT_MAX;\n    std::any sublist;\n    for (auto i : lst) {\n        if (len(i) < min) {\n            min = len(i);\n            sublist = i;\n        }\n    }\n    return sublist;",
    "    int min = lst[0].length();\n    int min_index = 0;\n    for(int i=1;i<lst.length();i++) {\n        if(lst[i].length() < min) {\n            min = lst[i].length();\n            min_index = i;\n        }\n    }\n    return lst[min_index];",
    "    // write your code here\n    int min=lst[0].size();\n    int index=0;\n    for(int i=1;i<lst.size();i++){\n        if(lst[i].size()<min){\n            min=lst[i].size();\n            index=i;\n        }\n    }\n    return lst[index];",
    "\t// write your code here\n\tint min = INT_MAX;\n\tstd::any min_list;\n\tfor (auto i : lst) {\n\t\tif (min > i.size()) {\n\t\t\tmin = i.size();\n\t\t\tmin_list = i;\n\t\t}\n\t}\n\treturn min_list;",
    "\t// write your code here\n\tstd::any min_list = lst[0];\n\tfor (auto i = lst.begin(); i != lst.end(); i++) {\n\t\tif (min_list.size() > i->size()) {\n\t\t\tmin_list = *i;\n\t\t}\n\t}\n\treturn min_list;",
    "    std::any min_list = lst[0];\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // Your code here\n    std::any min_list = lst[0];\n    for(int i=1;i<lst.size();i++)\n    {\n        if(lst[i].size()<min_list.size())\n        {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(auto i:lst){\n        if(len(i)<len(min_list)){\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_len) {\n            min_len = lst[i].size();\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "\t// write your code here\n\tstd::any min_sublist = lst[0];\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i].size() < min_sublist.size()) {\n\t\t\tmin_sublist = lst[i];\n\t\t}\n\t}\n\treturn min_sublist;",
    "\t// write your code here\n\tstd::any min_list;\n\tint min_len = INT_MAX;\n\tfor (auto i : lst) {\n\t\tif (i.size() < min_len) {\n\t\t\tmin_len = i.size();\n\t\t\tmin_list = i;\n\t\t}\n\t}\n\treturn min_list;",
    "\tassert(lst.type() == typeid(std::vector<std::vector<int>>));\n\tstd::vector<std::vector<int>> lst1 = std::any_cast<std::vector<std::vector<int>>>(lst);\n\tstd::vector<int> min_lst;\n\tint min_len = INT_MAX;\n\tfor (auto i : lst1) {\n\t\tif (i.size() < min_len) {\n\t\t\tmin_len = i.size();\n\t\t\tmin_lst = i;\n\t\t}\n\t}\n\treturn min_lst;",
    "\tstd::any min_list = lst[0];\n\tfor (auto i : lst) {\n\t\tif (len(i) < len(min_list)) {\n\t\t\tmin_list = i;\n\t\t}\n\t}\n\treturn min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_length = INT_MAX;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(auto i : lst){\n        if(min_len > i.size()){\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_sublist = lst[0];\n    for(auto i:lst){\n        if(len(i)<len(min_sublist)){\n            min_sublist = i;\n        }\n    }\n    return min_sublist;",
    "    // Your code here\n    std::any min_lst;\n    int min_len = INT_MAX;\n    for (auto i : lst) {\n        if (min_len > i.size()) {\n            min_len = i.size();\n            min_lst = i;\n        }\n    }\n    return min_lst;",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_len) {\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    std::any min_list = lst[0];\n    for (auto i : lst) {\n        if (len(i) < len(min_list)) {\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // Write your code here\n    int min = INT_MAX;\n    std::any sublist;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].size()<min){\n            min = lst[i].size();\n            sublist = lst[i];\n        }\n    }\n    return sublist;",
    "    // write your code here\n    int min = lst[0].size();\n    int index = 0;\n    for(int i=1;i<lst.size();i++)\n    {\n        if(lst[i].size()<min)\n        {\n            min = lst[i].size();\n            index = i;\n        }\n    }\n    return lst[index];",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for (auto i : lst) {\n        if (min_len > i.size()) {\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    std::any min_list;\n    int min_len = INT_MAX;\n    for (auto i : lst) {\n        if (len(i) < min_len) {\n            min_list = i;\n            min_len = len(i);\n        }\n    }\n    return min_list;",
    "    std::any min_sublist = lst[0];\n    for (auto sublist : lst) {\n        if (len(sublist) < len(min_sublist)) {\n            min_sublist = sublist;\n        }\n    }\n    return min_sublist;",
    "    // Your code here\n    std::any min_list;\n    int min_length = INT_MAX;\n    for(auto i : lst) {\n        if(i.size() < min_length) {\n            min_length = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    assert(lst.type() == typeid(std::list<std::list<int>>));\n    std::list<std::list<int>> l = std::any_cast<std::list<std::list<int>>>(lst);\n    std::list<std::list<int>>::iterator it = l.begin();\n    int min_size = it->size();\n    std::list<std::list<int>>::iterator min_it = it;\n    for(it++; it != l.end(); it++) {\n        if(it->size() < min_size) {\n            min_size = it->size();\n            min_it = it;\n        }\n    }\n    return *min_it;",
    "    int min_len = INT_MAX;\n    std::any min_list;\n    for(auto i: lst) {\n        if(len(i) < min_len) {\n            min_len = len(i);\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    std::any min_list;\n    int min_len=0;\n    for(auto i:lst) {\n        if(min_len==0) {\n            min_len=i.size();\n            min_list=i;\n        }\n        else if(i.size()<min_len) {\n            min_len=i.size();\n            min_list=i;\n        }\n    }\n    return min_list;",
    "    std::any min_list = lst[0];\n    for (auto i : lst) {\n        if (len(i) < len(min_list)) {\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    assert(lst.type() == typeid(std::vector<std::any>));\n    std::vector<std::any> lst1 = std::any_cast<std::vector<std::any>>(lst);\n    int min = lst1[0].type() == typeid(std::vector<std::any>) ? std::any_cast<std::vector<std::any>>(lst1[0]).size() : 1;\n    int index = 0;\n    for (int i = 1; i < lst1.size(); i++) {\n        if (lst1[i].type() == typeid(std::vector<std::any>)) {\n            int size = std::any_cast<std::vector<std::any>>(lst1[i]).size();\n            if (size < min) {\n                min = size;\n                index = i;\n            }\n        }\n    }\n    return lst1[index];",
    "    // write your code here\n    std::any min_list = lst[0];\n    for (auto i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_length = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_length) {\n            min_length = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // Write your code here\n    std::any sublist;\n    int min_length = INT_MAX;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].size()<min_length){\n            min_length = lst[i].size();\n            sublist = lst[i];\n        }\n    }\n    return sublist;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(int i=1;i<lst.size();i++){\n        if(lst[i].size()<min_list.size()){\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "\tint min_len = INT_MAX;\n\tstd::any min_list;\n\tfor (auto i : lst) {\n\t\tif (len(i) < min_len) {\n\t\t\tmin_len = len(i);\n\t\t\tmin_list = i;\n\t\t}\n\t}\n\treturn min_list;",
    "    // write your code here\n    std::any min_lst = lst[0];\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].size()<min_lst.size()){\n            min_lst = lst[i];\n        }\n    }\n    return min_lst;",
    "    std::any min_list = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "\t// write your code here\n\tint min = lst[0].size();\n\tint index = 0;\n\tfor (int i = 1; i < lst.size(); i++) {\n\t\tif (lst[i].size() < min) {\n\t\t\tmin = lst[i].size();\n\t\t\tindex = i;\n\t\t}\n\t}\n\treturn lst[index];",
    "\t// write your code here\n\tstd::any min_list = lst[0];\n\tfor (auto i : lst) {\n\t\tif (len(i) < len(min_list)) {\n\t\t\tmin_list = i;\n\t\t}\n\t}\n\treturn min_list;",
    "  std::any min_list = lst[0];\n  for (auto i : lst) {\n    if (len(i) < len(min_list)) {\n      min_list = i;\n    }\n  }\n  return min_list;",
    "    assert(lst.type() == typeid(std::vector<std::vector<int>>));\n    std::vector<std::vector<int>> lst1 = std::any_cast<std::vector<std::vector<int>>>(lst);\n    int min = lst1[0].size();\n    int index = 0;\n    for(int i = 0; i < lst1.size(); i++) {\n        if(min > lst1[i].size()) {\n            min = lst1[i].size();\n            index = i;\n        }\n    }\n    return lst1[index];",
    "    // Your code here\n    std::any min_list = lst[0];\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    int min = lst[0].size();\n    int index = 0;\n    for(int i=1;i<lst.size();i++){\n        if(lst[i].size()<min){\n            min = lst[i].size();\n            index = i;\n        }\n    }\n    return lst[index];",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(auto i:lst){\n        if(len(i)<len(min_list)){\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    int min = lst[0].size();\n    int index = 0;\n    for(int i=1;i<lst.size();i++){\n        if(lst[i].size()<min){\n            min = lst[i].size();\n            index = i;\n        }\n    }\n    return lst[index];",
    "    // write your code here\n    int min_len = INT_MAX;\n    std::any min_list;\n    for (auto i : lst) {\n        if (min_len > i.size()) {\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    int min = lst[0].size();\n    int index = 0;\n    for(int i=0;i<lst.size();i++){\n        if(min>lst[i].size()){\n            min = lst[i].size();\n            index = i;\n        }\n    }\n    return lst[index];",
    "    assert(lst.type() == typeid(std::vector<std::any>));\n    std::vector<std::any> lst1 = std::any_cast<std::vector<std::any>>(lst);\n    int min = lst1[0].type() == typeid(std::vector<std::any>) ? std::any_cast<std::vector<std::any>>(lst1[0]).size() : 1;\n    int index = 0;\n    for (int i = 1; i < lst1.size(); i++) {\n        if (lst1[i].type() == typeid(std::vector<std::any>)) {\n            if (std::any_cast<std::vector<std::any>>(lst1[i]).size() < min) {\n                min = std::any_cast<std::vector<std::any>>(lst1[i]).size();\n                index = i;\n            }\n        }\n        else {\n            if (1 < min) {\n                min = 1;\n                index = i;\n            }\n        }\n    }\n    return lst1[index];",
    "  // Your code here\n  std::any min_list;\n  int min_len = INT_MAX;\n  for (auto i : lst) {\n    if (i.size() < min_len) {\n      min_len = i.size();\n      min_list = i;\n    }\n  }\n  return min_list;",
    "    std::any min_sublist = lst[0];\n    for (auto i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_sublist.size()) {\n            min_sublist = lst[i];\n        }\n    }\n    return min_sublist;",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(auto i:lst){\n        if(min_len>i.size()){\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    std::any min_list = lst[0];\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    std::any min_list = lst[0];\n    for (auto i = 1; i < lst.size(); i++) {\n        if (min_list.size() > lst[i].size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "\t// write your code here\n\tstd::any min_list;\n\tint min_len = INT_MAX;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i].size() < min_len) {\n\t\t\tmin_len = lst[i].size();\n\t\t\tmin_list = lst[i];\n\t\t}\n\t}\n\treturn min_list;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(int i=1;i<lst.size();i++)\n    {\n        if(lst[i].size()<min_list.size())\n        {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(int i=1;i<lst.size();i++){\n        if(lst[i].size()<min_list.size()){\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    //\n    // Write your code here\n    //\n    std::any min_list = lst[0];\n    for(auto i : lst){\n        if(len(i) < len(min_list)){\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    std::any min_sublist = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_sublist.size()) {\n            min_sublist = lst[i];\n        }\n    }\n    return min_sublist;",
    "    std::any min_list = [];\n    int min_len = INT_MAX;\n    for (auto sub_list : lst) {\n        if (len(sub_list) < min_len) {\n            min_len = len(sub_list);\n            min_list = sub_list;\n        }\n    }\n    return min_list;",
    "    std::any min_lst = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_lst.size()) {\n            min_lst = lst[i];\n        }\n    }\n    return min_lst;",
    "    // write your code here\n    std::any min_list;\n    int min_size = INT_MAX;\n    for (auto it = lst.begin(); it != lst.end(); ++it) {\n        if (it->size() < min_size) {\n            min_size = it->size();\n            min_list = *it;\n        }\n    }\n    return min_list;",
    "\t// Write your code here\n\tint min = lst[0].size();\n\tint index = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i].size() < min) {\n\t\t\tmin = lst[i].size();\n\t\t\tindex = i;\n\t\t}\n\t}\n\treturn lst[index];",
    "    // write your code here\n    int min_len=INT_MAX;\n    std::any min_list;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].size()<min_len){\n            min_len=lst[i].size();\n            min_list=lst[i];\n        }\n    }\n    return min_list;",
    "    std::any min_list = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    int min_len = INT_MAX;\n    std::any min_list;\n    for(auto i : lst) {\n        if(i.size() < min_len) {\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].size() < min_list.size()){\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    int min_len = INT_MAX;\n    std::any sublist;\n    for(auto i: lst){\n        if(min_len > i.size()){\n            min_len = i.size();\n            sublist = i;\n        }\n    }\n    return sublist;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(auto i: lst){\n        if(len(i) < len(min_list)){\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(auto i:lst){\n        if(len(i) < len(min_list)){\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    std::any min_list = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(int i=1;i<lst.size();i++){\n        if(lst[i].size()<min_list.size()){\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // Your code here\n    std::any min_sublist;\n    int min_len = INT_MAX;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].size()<min_len){\n            min_len = lst[i].size();\n            min_sublist = lst[i];\n        }\n    }\n    return min_sublist;",
    "    // write your code here\n    std::any min_list;\n    int min_length = INT_MAX;\n    for(auto i:lst){\n        if(i.size()<min_length){\n            min_length = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    int min = lst[0].size();\n    std::any min_list;\n    for(auto i:lst){\n        if(i.size()<min){\n            min = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].size() < min_list.size()){\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    int min = lst[0].size();\n    int min_index = 0;\n    for(int i=1;i<lst.size();i++)\n    {\n        if(lst[i].size() < min)\n        {\n            min = lst[i].size();\n            min_index = i;\n        }\n    }\n    return lst[min_index];",
    "    // write your code here\n    int min = INT_MAX;\n    std::any sublist;\n    for (auto i : lst) {\n        if (std::any_cast<std::any>(i).size() < min) {\n            min = std::any_cast<std::any>(i).size();\n            sublist = i;\n        }\n    }\n    return sublist;",
    "\tstd::any min_list = lst[0];\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (min_list.size() > lst[i].size()) {\n\t\t\tmin_list = lst[i];\n\t\t}\n\t}\n\treturn min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_length = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_length) {\n            min_length = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "\t// write your code here\n\tstd::any min_list;\n\tint min_len = INT_MAX;\n\tfor (auto i : lst) {\n\t\tif (i.size() < min_len) {\n\t\t\tmin_len = i.size();\n\t\t\tmin_list = i;\n\t\t}\n\t}\n\treturn min_list;",
    "    // Please add your code here\n    std::any min_list = lst[0];\n    for(int i=1;i<lst.size();i++){\n        if(lst[i].size() < min_list.size()){\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "  // write your code here\n  std::any min_list;\n  int min_len = INT_MAX;\n  for (auto i : lst) {\n    if (min_len > i.size()) {\n      min_len = i.size();\n      min_list = i;\n    }\n  }\n  return min_list;",
    "    std::any min_list;\n    int min_len = INT_MAX;\n    for (auto sublist: lst) {\n        if (min_len > sublist.size()) {\n            min_len = sublist.size();\n            min_list = sublist;\n        }\n    }\n    return min_list;",
    "  // Your code here\n  std::any min_list = lst[0];\n  for(int i=1;i<lst.size();i++){\n    if(lst[i].size()<min_list.size()){\n      min_list = lst[i];\n    }\n  }\n  return min_list;",
    "    // Your code here\n    std::any min_list = lst[0];\n    for(int i=1;i<lst.size();i++)\n    {\n        if(lst[i].size() < min_list.size())\n        {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for (auto i : lst) {\n        if (min_len > i.size()) {\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "\t// write your code here\n\tstd::any min_list;\n\tint min_len = INT_MAX;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i].size() < min_len) {\n\t\t\tmin_len = lst[i].size();\n\t\t\tmin_list = lst[i];\n\t\t}\n\t}\n\treturn min_list;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(int i=1;i<lst.size();i++)\n    {\n        if(lst[i].size()<min_list.size())\n        {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // Your code here\n    int min_length = INT_MAX;\n    std::any min_list;\n    for(auto i:lst){\n        if(min_length > i.size()){\n            min_length = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_length = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_length) {\n            min_length = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    std::any min_lst = lst[0];\n    for (auto i : lst) {\n        if (len(i) < len(min_lst)) {\n            min_lst = i;\n        }\n    }\n    return min_lst;",
    "    std::any min_list = lst[0];\n    for (auto sub_list : lst) {\n        if (len(sub_list) < len(min_list)) {\n            min_list = sub_list;\n        }\n    }\n    return min_list;",
    "    // Your code here\n    std::any min_list = lst[0];\n    for(int i=1;i<lst.size();i++){\n        if(lst[i].size()<min_list.size()){\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    std::any min_list = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    std::any min_list = [];\n    int min_length = INT_MAX;\n    for (auto sublist : lst) {\n        if (len(sublist) < min_length) {\n            min_list = sublist;\n            min_length = len(sublist);\n        }\n    }\n    return min_list;",
    "\t// write your code here\n\tstd::any min_list = lst[0];\n\tfor (auto i : lst) {\n\t\tif (len(i) < len(min_list)) {\n\t\t\tmin_list = i;\n\t\t}\n\t}\n\treturn min_list;",
    "    // Your code here\n    // You can add another function as well, if required\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(auto i:lst){\n        if(min_len > i.size()){\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "\tint min_len = INT_MAX;\n\tstd::any min_list;\n\tfor (auto i : lst) {\n\t\tif (typeid(i) == typeid(std::list<int>)) {\n\t\t\tif (min_len > i.size()) {\n\t\t\t\tmin_len = i.size();\n\t\t\t\tmin_list = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_list;",
    "\t// write your code here\n\tstd::any min_list;\n\tint min_len = INT_MAX;\n\tfor (auto i : lst) {\n\t\tif (min_len > i.size()) {\n\t\t\tmin_len = i.size();\n\t\t\tmin_list = i;\n\t\t}\n\t}\n\treturn min_list;",
    "    assert(lst.type() == typeid(std::list<std::list<int>>));\n    std::list<std::list<int>> lst1 = std::any_cast<std::list<std::list<int>>>(lst);\n    std::list<int> min_lst;\n    int min_size = INT_MAX;\n    for (auto i : lst1) {\n        if (i.size() < min_size) {\n            min_size = i.size();\n            min_lst = i;\n        }\n    }\n    return min_lst;",
    "\tstd::any min_list = lst[0];\n\tfor (int i = 1; i < lst.size(); i++) {\n\t\tif (lst[i].size() < min_list.size()) {\n\t\t\tmin_list = lst[i];\n\t\t}\n\t}\n\treturn min_list;",
    "    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // ",
    "    std::any min_list = lst[0];\n    for (auto i : lst) {\n        if (len(i) < len(min_list)) {\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    int min=lst[0].size();\n    int pos=0;\n    for(int i=1;i<lst.size();i++){\n        if(lst[i].size()<min){\n            min=lst[i].size();\n            pos=i;\n        }\n    }\n    return lst[pos];",
    "    // Write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(auto i:lst){\n        if(min_len > i.size()){\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // Write your code here\n    int min_len = INT_MAX;\n    std::any min_list;\n    for(auto i:lst)\n    {\n        if(min_len > i.size())\n        {\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    int min_len = INT_MAX;\n    std::any min_list;\n    for (auto i : lst) {\n        if (len(i) < min_len) {\n            min_len = len(i);\n            min_list = i;\n        }\n    }\n    return min_list;",
    "\t// Write your code here\n\tstd::any min_list;\n\tint min_len = INT_MAX;\n\tfor (auto i : lst) {\n\t\tif (min_len > i.size()) {\n\t\t\tmin_len = i.size();\n\t\t\tmin_list = i;\n\t\t}\n\t}\n\treturn min_list;",
    "    std::any min_list = lst[0];\n    for(int i=1;i<lst.size();i++) {\n        if(lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(auto i:lst){\n        if(min_len > i.size()){\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "  // write your code here\n  std::any min_list;\n  int min_length = INT_MAX;\n  for(auto i:lst){\n    if(i.size()<min_length){\n      min_length = i.size();\n      min_list = i;\n    }\n  }\n  return min_list;",
    "  std::any min_list;\n  int min_len = INT_MAX;\n  for (auto sublist : lst) {\n    if (len(sublist) < min_len) {\n      min_len = len(sublist);\n      min_list = sublist;\n    }\n  }\n  return min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(auto i : lst)\n    {\n        if(i.size() < min_len)\n        {\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "\t// Write your code here\n\tstd::any min_list = lst[0];\n\tfor (auto i : lst) {\n\t\tif (len(i) < len(min_list)) {\n\t\t\tmin_list = i;\n\t\t}\n\t}\n\treturn min_list;",
    "    // Write your code here\n    std::any min_list;\n    int min_length = INT_MAX;\n    for (auto it = lst.begin(); it != lst.end(); ++it) {\n        if (it->size() < min_length) {\n            min_length = it->size();\n            min_list = *it;\n        }\n    }\n    return min_list;",
    "    std::any min_lst = lst[0];\n    for (auto i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_lst.size()) {\n            min_lst = lst[i];\n        }\n    }\n    return min_lst;",
    "    // write your code here\n    std::any min_sublist = lst[0];\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_sublist.size()) {\n            min_sublist = lst[i];\n        }\n    }\n    return min_sublist;",
    "    // Your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(auto i:lst){\n        if(min_len > i.size()){\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "\t// Write your code here\n\tstd::any min_list = lst[0];\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i].size() < min_list.size()) {\n\t\t\tmin_list = lst[i];\n\t\t}\n\t}\n\treturn min_list;",
    "    std::any min_list = lst[0];\n    for (auto i : lst) {\n        if (len(i) < len(min_list)) {\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    std::any min_list;\n    int min_len = INT_MAX;\n    for (auto sub_list : lst) {\n        if (min_len > sub_list.size()) {\n            min_len = sub_list.size();\n            min_list = sub_list;\n        }\n    }\n    return min_list;",
    "    std::any min_list = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    int min_len = INT_MAX;\n    std::any min_list;\n    for (auto i : lst) {\n        if (len(i) < min_len) {\n            min_len = len(i);\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    int min = lst[0].size();\n    int index = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (min > lst[i].size()) {\n            min = lst[i].size();\n            index = i;\n        }\n    }\n    return lst[index];",
    "    std::any min_list = lst[0];\n    for (auto i : lst) {\n        if (len(i) < len(min_list)) {\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    int min_len = INT_MAX;\n    std::any min_list;\n    for (auto sublist : lst) {\n        if (min_len > sublist.size()) {\n            min_len = sublist.size();\n            min_list = sublist;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for (auto i : lst) {\n        if (len(i) < len(min_list)) {\n            min_list = i;\n        }\n    }\n    return min_list;",
    "\t// Write your code here\n\tstd::any min_list = lst[0];\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i].size() < min_list.size()) {\n\t\t\tmin_list = lst[i];\n\t\t}\n\t}\n\treturn min_list;",
    "    assert(lst.type() == typeid(std::vector<std::vector<int>>));\n    std::vector<std::vector<int>> lst1 = std::any_cast<std::vector<std::vector<int>>>(lst);\n    int min = lst1[0].size();\n    int index = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1[i].size() < min) {\n            min = lst1[i].size();\n            index = i;\n        }\n    }\n    return lst1[index];",
    "    assert(lst.type() == typeid(std::vector<std::any>));\n    std::vector<std::any> lst1 = std::any_cast<std::vector<std::any>>(lst);\n    int min = lst1[0].type() == typeid(std::vector<std::any>) ? std::any_cast<std::vector<std::any>>(lst1[0]).size() : 1;\n    int index = 0;\n    for (int i = 1; i < lst1.size(); i++) {\n        int size = lst1[i].type() == typeid(std::vector<std::any>) ? std::any_cast<std::vector<std::any>>(lst1[i]).size() : 1;\n        if (size < min) {\n            min = size;\n            index = i;\n        }\n    }\n    return lst1[index];",
    "    std::any min_list = lst[0];\n    for(std::any i : lst) {\n        if(len(i) < len(min_list)) {\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    int min_len = std::any_cast<int>(lst[0]).size();\n    std::any min_lst = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (std::any_cast<int>(lst[i]).size() < min_len) {\n            min_len = std::any_cast<int>(lst[i]).size();\n            min_lst = lst[i];\n        }\n    }\n    return min_lst;",
    "    // Your code here\n    int min = lst[0].size();\n    int index = 0;\n    for(int i=1;i<lst.size();i++){\n        if(lst[i].size()<min){\n            min = lst[i].size();\n            index = i;\n        }\n    }\n    return lst[index];",
    "    std::any min_list;\n    int min_len = INT_MAX;\n    for (auto i : lst) {\n        if (typeid(i) == typeid(std::any)) {\n            if (min_len > i.size()) {\n                min_len = i.size();\n                min_list = i;\n            }\n        }\n    }\n    return min_list;",
    "    int min_len = INT_MAX;\n    std::any min_list;\n    for(auto i : lst) {\n        if(min_len > i.size()) {\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // Your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(auto i : lst) {\n        if(i.size() < min_len) {\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    std::any min_list = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    std::any min_list;\n    int min_length = INT_MAX;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].size() < min_list.size()){\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    int min = lst[0].size();\n    int index = 0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].size()<min){\n            min = lst[i].size();\n            index = i;\n        }\n    }\n    return lst[index];",
    "    std::any min_list = lst[0];\n    for (std::any i : lst) {\n        if (len(i) < len(min_list)) {\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    std::any min_list = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    int min = INT_MAX;\n    std::any sublist;\n    for(auto i : lst) {\n        if(typeid(i) == typeid(std::list<int>)) {\n            if(i.size() < min) {\n                min = i.size();\n                sublist = i;\n            }\n        }\n    }\n    return sublist;",
    "    std::any min_list;\n    int min_len = INT_MAX;\n    for (auto i : lst) {\n        if (len(i) < min_len) {\n            min_len = len(i);\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    assert(lst.size()>0);\n    int min_len = lst[0].size();\n    std::any min_lst = lst[0];\n    for(int i=1;i<lst.size();i++) {\n        if(lst[i].size()<min_len) {\n            min_len = lst[i].size();\n            min_lst = lst[i];\n        }\n    }\n    return min_lst;",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(auto i:lst){\n        if(min_len > i.size()){\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // Write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(auto i : lst) {\n        if(i.size() < min_len) {\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    assert(lst.type() == typeid(std::vector<std::any>));\n    std::vector<std::any> lst1 = std::any_cast<std::vector<std::any>>(lst);\n    int min_len = INT_MAX;\n    std::vector<std::any> min_lst;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1[i].type() == typeid(std::vector<std::any>)) {\n            std::vector<std::any> lst2 = std::any_cast<std::vector<std::any>>(lst1[i]);\n            if (lst2.size() < min_len) {\n                min_len = lst2.size();\n                min_lst = lst2;\n            }\n        }\n    }\n    return min_lst;",
    "    assert(lst.type() == typeid(std::list<std::list<int>>));\n    std::list<std::list<int>> lst1 = std::any_cast<std::list<std::list<int>>>(lst);\n    std::list<int> min_lst;\n    int min_len = INT_MAX;\n    for (auto i : lst1) {\n        if (i.size() < min_len) {\n            min_len = i.size();\n            min_lst = i;\n        }\n    }\n    return min_lst;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(int i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    std::any min_list = lst[0];\n    for (auto i : lst) {\n        if (len(i) < len(min_list)) {\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // Your code here\n    std::any min_list;\n    int min_length = INT_MAX;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].size()<min_length){\n            min_length = lst[i].size();\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "\tassert(lst.type() == typeid(std::vector<std::any>));\n\tstd::vector<std::any> lst1 = std::any_cast<std::vector<std::any>>(lst);\n\tint min = lst1[0].type() == typeid(std::vector<std::any>) ? std::any_cast<std::vector<std::any>>(lst1[0]).size() : 1;\n\tint index = 0;\n\tfor (int i = 1; i < lst1.size(); i++) {\n\t\tif (lst1[i].type() == typeid(std::vector<std::any>)) {\n\t\t\tif (std::any_cast<std::vector<std::any>>(lst1[i]).size() < min) {\n\t\t\t\tmin = std::any_cast<std::vector<std::any>>(lst1[i]).size();\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (1 < min) {\n\t\t\t\tmin = 1;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn lst1[index];",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(auto i : lst)\n    {\n        if(min_len > i.size())\n        {\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(int i=1;i<lst.size();i++){\n        if(lst[i].size()<min_list.size()){\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    std::any min_sublist = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_sublist.size()) {\n            min_sublist = lst[i];\n        }\n    }\n    return min_sublist;",
    "\t// write your code here\n\tstd::any min_lst = lst[0];\n\tfor (auto i = lst.begin(); i != lst.end(); i++) {\n\t\tif (min_lst.size() > i.size()) {\n\t\t\tmin_lst = i;\n\t\t}\n\t}\n\treturn min_lst;",
    "    std::any min_list = lst[0];\n    for(auto i : lst) {\n        if(len(i) < len(min_list)) {\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    std::any min_list;\n    int min_length = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_length) {\n            min_length = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    std::any min_list = lst[0];\n    for(int i=1;i<lst.size();i++) {\n        if(lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(auto i:lst){\n        if(min_len > i.size()){\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    std::any min_len = len(lst[0]);\n    std::any min_list = lst[0];\n    for (std::any i = 1; i < len(lst); i++) {\n        if (len(lst[i]) < min_len) {\n            min_len = len(lst[i]);\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    std::any min_list = lst[0];\n    for (auto i : lst) {\n        if (len(i) < len(min_list)) {\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    int min = lst[0].size();\n    int index = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (min > lst[i].size()) {\n            min = lst[i].size();\n            index = i;\n        }\n    }\n    return lst[index];",
    "    assert(lst.type() == typeid(std::vector<std::any>));\n    std::vector<std::any> lst1 = std::any_cast<std::vector<std::any>>(lst);\n    std::vector<std::any> lst2;\n    for (auto i : lst1) {\n        assert(i.type() == typeid(std::vector<std::any>));\n        lst2.push_back(std::any_cast<std::vector<std::any>>(i).size());\n    }\n    int min = std::any_cast<std::vector<std::any>>(lst1[0]).size();\n    int index = 0;\n    for (int i = 0; i < lst2.size(); i++) {\n        if (std::any_cast<int>(lst2[i]) < min) {\n            min = std::any_cast<int>(lst2[i]);\n            index = i;\n        }\n    }\n    return lst1[index];",
    "    assert(lst.type() == typeid(std::vector<std::vector<int>>));\n    std::vector<std::vector<int>> lst_vector = std::any_cast<std::vector<std::vector<int>>>(lst);\n    int min_length = lst_vector[0].size();\n    int min_index = 0;\n    for (int i = 1; i < lst_vector.size(); i++) {\n        if (lst_vector[i].size() < min_length) {\n            min_length = lst_vector[i].size();\n            min_index = i;\n        }\n    }\n    return lst_vector[min_index];",
    "    // Your code here\n    std::any min_list = lst[0];\n    for (auto i : lst) {\n        if (len(i) < len(min_list)) {\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for (auto i : lst) {\n        if (len(i) < min_len) {\n            min_len = len(i);\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // Your code here\n    std::any lst1;\n    int min = INT_MAX;\n    for(auto i: lst){\n        if(i.size() < min){\n            min = i.size();\n            lst1 = i;\n        }\n    }\n    return lst1;",
    "\t// write your code here\n\tint min_len = INT_MAX;\n\tstd::any min_list;\n\tfor (auto i : lst) {\n\t\tif (min_len > i.size()) {\n\t\t\tmin_len = i.size();\n\t\t\tmin_list = i;\n\t\t}\n\t}\n\treturn min_list;",
    "\t// write your code here\n\tstd::any min_lst;\n\tint min_len = INT_MAX;\n\tfor (auto i : lst) {\n\t\tif (i.size() < min_len) {\n\t\t\tmin_len = i.size();\n\t\t\tmin_lst = i;\n\t\t}\n\t}\n\treturn min_lst;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for (auto i : lst) {\n        if (len(i) < len(min_list)) {\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_len) {\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    std::any min_list = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_len) {\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for (auto i : lst) {\n        if (len(i) < len(min_list)) {\n            min_list = i;\n        }\n    }\n    return min_list;",
    "\t// write your code here\n\tstd::any min_list = lst[0];\n\tfor (auto i = 0; i < lst.size(); i++) {\n\t\tif (lst[i].size() < min_list.size()) {\n\t\t\tmin_list = lst[i];\n\t\t}\n\t}\n\treturn min_list;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(auto i:lst){\n        if(len(i)<len(min_list)){\n            min_list = i;\n        }\n    }\n    return min_list;",
    "\t// write your code here\n\tstd::any sublist = lst[0];\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (sublist.size() > lst[i].size()) {\n\t\t\tsublist = lst[i];\n\t\t}\n\t}\n\treturn sublist;",
    "    // write your code here\n    std::any min_list;\n    int min_length = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_length) {\n            min_length = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    std::any min_list = lst[0];\n    int min_len = len(lst[0]);\n    for(int i = 1; i < len(lst); i++) {\n        if(len(lst[i]) < min_len) {\n            min_list = lst[i];\n            min_len = len(lst[i]);\n        }\n    }\n    return min_list;",
    "    assert(lst.type() == typeid(std::vector<std::vector<int>>));\n    std::vector<std::vector<int>> lst1 = std::any_cast<std::vector<std::vector<int>>>(lst);\n    int min_len = lst1[0].size();\n    int index = 0;\n    for (int i = 1; i < lst1.size(); i++) {\n        if (lst1[i].size() < min_len) {\n            min_len = lst1[i].size();\n            index = i;\n        }\n    }\n    return lst1[index];",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(int i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(auto i : lst){\n        if(min_len > i.size()){\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_len) {\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    std::any min_list = lst[0];\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "\t// write your code here\n\tstd::any sublist = lst[0];\n\tfor (auto i = 0; i < lst.size(); i++) {\n\t\tif (lst[i].size() < sublist.size()) {\n\t\t\tsublist = lst[i];\n\t\t}\n\t}\n\treturn sublist;",
    "    // Your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(auto i : lst){\n        if(i.size() < min_len){\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    assert(lst.type() == typeid(std::vector<std::vector<int>>));\n    std::vector<std::vector<int>> lst1 = std::any_cast<std::vector<std::vector<int>>>(lst);\n    int min = lst1[0].size();\n    int index = 0;\n    for(int i=1;i<lst1.size();i++){\n        if(lst1[i].size() < min){\n            min = lst1[i].size();\n            index = i;\n        }\n    }\n    return lst1[index];",
    "    // Your code here\n    int min = INT_MAX;\n    std::any ans;\n    for(auto i : lst){\n        if(min > i.size()){\n            min = i.size();\n            ans = i;\n        }\n    }\n    return ans;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(int i=1;i<lst.size();i++){\n        if(lst[i].size()<min_list.size()){\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "  int min_len = INT_MAX;\n  std::any min_sublist;\n  for (auto sublist : lst) {\n    if (len(sublist) < min_len) {\n      min_len = len(sublist);\n      min_sublist = sublist;\n    }\n  }\n  return min_sublist;",
    "\t// write your code here\n\tstd::any min_list = lst[0];\n\tfor (int i = 1; i < lst.size(); i++) {\n\t\tif (lst[i].size() < min_list.size()) {\n\t\t\tmin_list = lst[i];\n\t\t}\n\t}\n\treturn min_list;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(auto i : lst){\n        if(len(i) < len(min_list)){\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    int min=lst[0].size();\n    int index=0;\n    for(int i=0;i<lst.size();i++)\n    {\n        if(lst[i].size()<min)\n        {\n            min=lst[i].size();\n            index=i;\n        }\n    }\n    return lst[index];",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(auto i:lst){\n        if(min_len > i.size()){\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any sub_list;\n    int min_len = INT_MAX;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].size()<min_len){\n            min_len = lst[i].size();\n            sub_list = lst[i];\n        }\n    }\n    return sub_list;"
  ]
}