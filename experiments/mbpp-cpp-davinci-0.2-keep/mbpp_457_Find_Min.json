{
  "name": "mbpp_457_Find_Min",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sublist having minimum length.\nstd::any Find_Min(std::any lst) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = Find_Min;\n    assert(candidate((std::any({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})}))) == (std::any({(long)1})));\n    assert(candidate((std::any({(std::vector<long>)std::vector<long>({(long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)7, (long)8})}))) == (std::any({(long)1, (long)1})));\n    assert(candidate((std::any({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"})}))) == (std::any({(std::string)\"x\"})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    assert(lst.type() == typeid(std::vector<std::any>));\n    std::any min_sublist = lst;\n    for (auto sublist: lst) {\n        assert(sublist.type() == typeid(std::vector<std::any>));\n        if (sublist.size() < min_sublist.size()) {\n            min_sublist = sublist;\n        }\n    }\n    return min_sublist;",
    "    // write your code here\n    int min = INT_MAX;\n    std::any sublist;\n    for (auto i : lst) {\n        if (len(i) < min) {\n            min = len(i);\n            sublist = i;\n        }\n    }\n    return sublist;",
    "    int min = lst[0].length();\n    int min_index = 0;\n    for(int i=1;i<lst.length();i++) {\n        if(lst[i].length() < min) {\n            min = lst[i].length();\n            min_index = i;\n        }\n    }\n    return lst[min_index];",
    "    // write your code here\n    int min=lst[0].size();\n    int index=0;\n    for(int i=1;i<lst.size();i++){\n        if(lst[i].size()<min){\n            min=lst[i].size();\n            index=i;\n        }\n    }\n    return lst[index];",
    "\t// write your code here\n\tint min = INT_MAX;\n\tstd::any min_list;\n\tfor (auto i : lst) {\n\t\tif (min > i.size()) {\n\t\t\tmin = i.size();\n\t\t\tmin_list = i;\n\t\t}\n\t}\n\treturn min_list;",
    "\t// write your code here\n\tstd::any min_list = lst[0];\n\tfor (auto i = lst.begin(); i != lst.end(); i++) {\n\t\tif (min_list.size() > i->size()) {\n\t\t\tmin_list = *i;\n\t\t}\n\t}\n\treturn min_list;",
    "    std::any min_list = lst[0];\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_list.size()) {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // Your code here\n    std::any min_list = lst[0];\n    for(int i=1;i<lst.size();i++)\n    {\n        if(lst[i].size()<min_list.size())\n        {\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list = lst[0];\n    for(auto i:lst){\n        if(len(i)<len(min_list)){\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_len) {\n            min_len = lst[i].size();\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "\t// write your code here\n\tstd::any min_sublist = lst[0];\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i].size() < min_sublist.size()) {\n\t\t\tmin_sublist = lst[i];\n\t\t}\n\t}\n\treturn min_sublist;",
    "\t// write your code here\n\tstd::any min_list;\n\tint min_len = INT_MAX;\n\tfor (auto i : lst) {\n\t\tif (i.size() < min_len) {\n\t\t\tmin_len = i.size();\n\t\t\tmin_list = i;\n\t\t}\n\t}\n\treturn min_list;",
    "\tassert(lst.type() == typeid(std::vector<std::vector<int>>));\n\tstd::vector<std::vector<int>> lst1 = std::any_cast<std::vector<std::vector<int>>>(lst);\n\tstd::vector<int> min_lst;\n\tint min_len = INT_MAX;\n\tfor (auto i : lst1) {\n\t\tif (i.size() < min_len) {\n\t\t\tmin_len = i.size();\n\t\t\tmin_lst = i;\n\t\t}\n\t}\n\treturn min_lst;",
    "\tstd::any min_list = lst[0];\n\tfor (auto i : lst) {\n\t\tif (len(i) < len(min_list)) {\n\t\t\tmin_list = i;\n\t\t}\n\t}\n\treturn min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_length = INT_MAX;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n            min_list = lst[i];\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for(auto i : lst){\n        if(min_len > i.size()){\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    // write your code here\n    std::any min_sublist = lst[0];\n    for(auto i:lst){\n        if(len(i)<len(min_sublist)){\n            min_sublist = i;\n        }\n    }\n    return min_sublist;",
    "    // Your code here\n    std::any min_lst;\n    int min_len = INT_MAX;\n    for (auto i : lst) {\n        if (min_len > i.size()) {\n            min_len = i.size();\n            min_lst = i;\n        }\n    }\n    return min_lst;",
    "    // write your code here\n    std::any min_list;\n    int min_len = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_len) {\n            min_len = i.size();\n            min_list = i;\n        }\n    }\n    return min_list;",
    "    std::any min_list = lst[0];\n    for (auto i : lst) {\n        if (len(i) < len(min_list)) {\n            min_list = i;\n        }\n    }\n    return min_list;"
  ]
}