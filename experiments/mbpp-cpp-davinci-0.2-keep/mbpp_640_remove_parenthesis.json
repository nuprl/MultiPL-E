{
  "name": "mbpp_640_remove_parenthesis",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result = \"\";\n    for(auto item : items) {\n        if(item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item[0] == '(') {\n            item.erase(0, 1);\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.front() == '(') {\n            item.erase(item.begin());\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            result += item.substr(1, item.size() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.size() > 0 && item[0] == '(') {\n            item.erase(0, 1);\n        }\n        if (item.size() > 0 && item[item.size() - 1] == ')') {\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") != std::string::npos) {\n            item = item.substr(0, item.find(\"(\"));\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (std::string item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;",
    "  std::string result = \"\";\n  for (auto item : items) {\n    if (item[0] == '(') {\n      item.erase(0, 1);\n    }\n    if (item[item.size() - 1] == ')') {\n      item.erase(item.size() - 1, 1);\n    }\n    result += item;\n  }\n  return result;",
    "  std::string result;\n  for (auto item : items) {\n    if (item.find(\"(\") != std::string::npos) {\n      item.erase(item.find(\"(\"), item.find(\")\") - item.find(\"(\") + 1);\n    }\n    result += item;\n  }\n  return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item.find('(') != std::string::npos) {\n            item = item.substr(0, item.find('('));\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item = item.substr(0, item.find('('));\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.find(\"(\"), item.find(\")\") - item.find(\"(\") + 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            auto pos = item.find(\"(\");\n            item.erase(pos, item.size() - pos);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] != \"(\") {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n            item.pop_back();\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        } else {\n            result += item.substr(0, item.find('('));\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if(item.find(\")\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            result += item.substr(0, item.find('('));\n        } else {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        }\n        else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;",
    "  std::string result = \"\";\n  for (auto item : items) {\n    if (item[0] == '(') {\n      item.erase(0, 1);\n      item.erase(item.end() - 1);\n    }\n    result += item;\n  }\n  return result;",
    "    std::string result;\n    for(auto item : items) {\n        std::string temp;\n        for(auto c : item) {\n            if(c != '(' && c != ')') {\n                temp += c;\n            }\n        }\n        result += temp;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            result += item.substr(1, item.size() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.begin() + item.find(\"(\"), item.begin() + item.find(\")\") + 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.find(\"(\"), item.find(\")\") - item.find(\"(\") + 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item == \"(\") {\n            continue;\n        }\n        if (item == \")\") {\n            continue;\n        }\n        result += item;\n    }\n    return result;",
    "    std::string res;\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        res += item;\n    }\n    return res;",
    "    std::string result;\n    for(auto item : items) {\n        if(item[0] == '(') {\n            item.erase(item.begin());\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if (item.find(\")\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            auto pos = item.find(\"(\");\n            item.erase(pos, item.size() - pos);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.find(\"(\"), item.find(\")\") - item.find(\"(\") + 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto item: items) {\n        if(item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if(item.find(\")\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            std::string temp = item.substr(item.find(\"(\") + 1, item.find(\")\") - item.find(\"(\") - 1);\n            result += temp;\n        } else {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            int i = 1;\n            while (item[i] != ')') {\n                i++;\n            }\n            result += item.substr(i+1, item.size()-i-1);\n        } else {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item == \"(\" || item == \")\") {\n            continue;\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for(auto item : items) {\n        if(item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if (item.find(\")\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0,1);\n            item.erase(item.size()-1,1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.size() == 0) {\n            continue;\n        }\n        if (item[0] == '(' && item[item.size() - 1] == ')') {\n            result += item.substr(1, item.size() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.size() > 0 && item[0] == '(') {\n            item = item.substr(1, item.size() - 2);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.length() > 0 && item[0] != '(') {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item = item.substr(0, item.find(\"(\"));\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "  std::string result = \"\";\n  for (int i = 0; i < items.size(); i++) {\n    if (items[i] != \"(\" && items[i] != \")\") {\n      result += items[i];\n    }\n  }\n  return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item[0] == '(') {\n            item.erase(0,1);\n        }\n        if(item[item.size()-1] == ')') {\n            item.erase(item.size()-1,1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "  std::string result = \"\";\n  for (auto item : items) {\n    if (item.find(\"(\") != std::string::npos) {\n      int start = item.find(\"(\");\n      int end = item.find(\")\");\n      item.erase(start, end - start + 1);\n    }\n    result += item;\n  }\n  return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") != std::string::npos) {\n            item.erase(item.find(\"(\"), item.find(\")\") - item.find(\"(\") + 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] != '(') {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item[0] == '(') {\n            item.erase(item.begin());\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] != '(') {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.size() == 0) {\n            continue;\n        }\n        if (item[0] == '(') {\n            item.erase(item.begin());\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") != std::string::npos) {\n            item.erase(item.find(\"(\"), item.find(\")\") - item.find(\"(\") + 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item.size() > 1) {\n            result += item.substr(1, item.size() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item: items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.find(\"(\"), item.find(\")\") - item.find(\"(\") + 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "  std::string result = \"\";\n  for(int i = 0; i < items.size(); i++) {\n    if(items[i] == \"(\") {\n      while(items[i] != \")\") {\n        i++;\n      }\n    } else {\n      result += items[i];\n    }\n  }\n  return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.find(\"(\"), item.find(\")\") - item.find(\"(\") + 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    std::stack<char> stk;\n    for (auto item : items) {\n        for (auto ch : item) {\n            if (ch == '(') {\n                stk.push(ch);\n            } else if (ch == ')') {\n                stk.pop();\n            } else if (stk.empty()) {\n                result.push_back(ch);\n            }\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            result += item.substr(1, item.length() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        }\n        else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.begin() + item.find(\"(\"), item.begin() + item.find(\")\") + 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item = item.substr(0, item.find('('));\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.find(\"(\"), item.find(\")\") - item.find(\"(\") + 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for(auto item: items) {\n        if(item[0] == '(') {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0,1);\n        }\n        if (item[item.size()-1] == ')') {\n            item.erase(item.size()-1,1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.size() == 0) {\n            continue;\n        }\n        if (item[0] == '(') {\n            item = item.substr(1, item.size() - 2);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (std::string item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\" || items[i] == \")\") {\n            continue;\n        }\n        result += items[i];\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        }\n        else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item = item.substr(1, item.size() - 2);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if (item.find(\")\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item[0] == '(') {\n            result += item.substr(1, item.size() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if (item.find(')') != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item = item.substr(1, item.size()-2);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n            item.pop_back();\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (std::string item : items) {\n        if (item.size() == 0) {\n            continue;\n        }\n        if (item[0] == '(') {\n            item = item.substr(1, item.size() - 2);\n        }\n        result += item;\n    }\n    return result;",
    "  std::string result = \"\";\n  for (int i = 0; i < items.size(); i++) {\n    if (items[i] == \"(\" || items[i] == \")\") {\n      continue;\n    }\n    result += items[i];\n  }\n  return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] != \"(\" && items[i] != \")\") {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item.erase(item.find('('), item.find(')') - item.find('(') + 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item.erase(item.find('('), item.find(')') - item.find('(') + 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item.erase(item.find('('), item.find(')') - item.find('(') + 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.begin() + item.find(\"(\"), item.begin() + item.find(\")\") + 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] != \"(\") {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    std::stack<char> st;\n    for(auto item: items) {\n        for(auto c: item) {\n            if(c == '(') {\n                st.push(c);\n            } else if(c == ')') {\n                st.pop();\n            } else {\n                if(st.empty()) {\n                    result += c;\n                }\n            }\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            int j = i + 1;\n            while (items[j] != \")\") {\n                j++;\n            }\n            i = j;\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        std::string item = items[i];\n        if (item[0] == '(') {\n            int j = 1;\n            while (item[j] != ')') {\n                j++;\n            }\n            result += item.substr(j + 1);\n        } else {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item = item.substr(1, item.size() - 2);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item.find('(') != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.size() == 1) {\n            result += item;\n        } else {\n            result += item.substr(1, item.size() - 2);\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            i++;\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for(auto item : items) {\n        if(item[0] != '(' && item[item.size() - 1] != ')') {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            std::string temp = item.substr(item.find(\"(\") + 1, item.find(\")\") - item.find(\"(\") - 1);\n            item.replace(item.find(\"(\"), item.find(\")\") - item.find(\"(\") + 1, \"\");\n            item.replace(item.find(temp), temp.length(), \"\");\n        }\n        result += item + \" \";\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] != \"(\" && items[i] != \")\") {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(auto item : items) {\n        if(item.find(\"(\") != std::string::npos) {\n            item.erase(item.find(\"(\"), item.find(\")\"));\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.size() > 1) {\n            result += item.substr(1, item.size() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.find(\"(\"), item.find(\")\"));\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0,1);\n        }\n        if (item[item.size()-1] == ')') {\n            item.erase(item.size()-1,1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n        }\n        if (item[item.size()-1] == ')') {\n            item.erase(item.size()-1, 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.size() == 0) {\n            continue;\n        }\n        if (item[0] == '(') {\n            result += remove_parenthesis(item.substr(1, item.size() - 2));\n        } else {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            result += item.substr(0, item.find('('));\n        } else {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item.erase(item.find('('), item.find(')') - item.find('(') + 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for(std::string item : items) {\n        if(item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item + \" \";\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(auto item : items) {\n        if(item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "  std::string result;\n  for (auto item : items) {\n    if (item.find('(') == std::string::npos) {\n      result += item;\n    }\n  }\n  return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.size() == 1) {\n            result += item;\n        } else {\n            assert(item[0] == '(');\n            assert(item[item.size() - 1] == ')');\n            result += item.substr(1, item.size() - 2);\n        }\n    }\n    return result;",
    "  std::string result = \"\";\n  for (auto item : items) {\n    if (item.find(\"(\") != std::string::npos) {\n      item.erase(item.find(\"(\"), item.find(\")\") - item.find(\"(\") + 1);\n    }\n    result += item;\n  }\n  return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.begin() + item.find(\"(\"), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n        }\n        if (item[item.size()-1] == ')') {\n            item.erase(item.end()-1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if (item.find(\")\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;"
  ]
}