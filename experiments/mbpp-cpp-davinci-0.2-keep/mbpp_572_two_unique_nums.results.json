{
  "name": "mbpp_572_two_unique_nums",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> nums_set;\n    for (long num : nums) {\n        if (nums_set.find(num) == nums_set.end()) {\n            nums_set.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmpe5jmmkba: /tmp/tmpe5jmmkba.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n            ans.push_back(num);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmptob5edz7: /tmp/tmptob5edz7.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (long num : nums) {\n        map[num]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmpgvzap2ar: /tmp/tmpgvzap2ar.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for(long i = 0; i < nums.size(); i++) {\n        if(s.find(nums[i]) == s.end()) {\n            s.insert(nums[i]);\n            result.push_back(nums[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmp4zz9_w56: /tmp/tmp4zz9_w56.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmp5ck22j8z: /tmp/tmp5ck22j8z.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    long xor_num = 0;\n    for (auto num : nums) {\n        xor_num ^= num;\n    }\n    int rightmost_set_bit = xor_num & ~(xor_num - 1);\n    long num1 = 0;\n    long num2 = 0;\n    for (auto num : nums) {\n        if (num & rightmost_set_bit) {\n            num1 ^= num;\n        } else {\n            num2 ^= num;\n        }\n    }\n    return {num1, num2};\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmpl0w90nn5: /tmp/tmpl0w90nn5.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto num : nums) {\n        if (set.find(num) == set.end()) {\n            result.push_back(num);\n            set.insert(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmp3wi548da: /tmp/tmp3wi548da.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmpxdgykqas: /tmp/tmpxdgykqas.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmptlt57won: /tmp/tmptlt57won.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    // return a vector containing two unique numbers\n    std::vector<long> result;\n    std::unordered_set<long> set;\n    for(auto num: nums){\n        if(set.find(num) == set.end()){\n            set.insert(num);\n        }\n    }\n    for(auto num: set){\n        result.push_back(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmp_rv_q5rq: /tmp/tmp_rv_q5rq.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long num : nums) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmp5i_rs8ev: /tmp/tmp5i_rs8ev.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> set;\n    std::unordered_set<long> duplicate;\n    for (auto num : nums) {\n        if (set.find(num) == set.end()) {\n            set.insert(num);\n        } else {\n            duplicate.insert(num);\n        }\n    }\n    for (auto num : nums) {\n        if (duplicate.find(num) == duplicate.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> res;\n    std::unordered_map<long, int> m;\n    for (auto n : nums) {\n        m[n]++;\n    }\n    for (auto n : nums) {\n        if (m[n] == 1) {\n            res.push_back(n);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    // return a vector with two unique numbers\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(auto num : nums)\n    {\n        map[num]++;\n    }\n    for(auto num : nums)\n    {\n        if(map[num] == 1)\n        {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> count;\n    for (auto num : nums) {\n        count[num]++;\n    }\n    for (auto num : nums) {\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (long num : nums) {\n        map[num]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmpgvzap2ar: /tmp/tmpgvzap2ar.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> ans;\n    std::unordered_map<long, int> m;\n    for (long num : nums) {\n        m[num]++;\n    }\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second == 1) {\n            ans.push_back(it->first);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmpnudg21le: /tmp/tmpnudg21le.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmpxdgykqas: /tmp/tmpxdgykqas.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    // return a vector containing two unique numbers\n    std::vector<long> result;\n    long xor_result = 0;\n    for (auto num : nums) {\n        xor_result ^= num;\n    }\n    long mask = xor_result & ~(xor_result - 1);\n    long first_num = 0;\n    long second_num = 0;\n    for (auto num : nums) {\n        if (num & mask) {\n            first_num ^= num;\n        } else {\n            second_num ^= num;\n        }\n    }\n    result.push_back(first_num);\n    result.push_back(second_num);\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmpv_p6fvx9: /tmp/tmpv_p6fvx9.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (long num : nums) {\n        map[num]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmpgvzap2ar: /tmp/tmpgvzap2ar.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmptlt57won: /tmp/tmptlt57won.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_map<long, int> freq;\n    for (auto num : nums) {\n        freq[num]++;\n    }\n    for (auto num : nums) {\n        if (freq[num] == 1) {\n            ans.push_back(num);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n  // Write your code here\n  // return a vector containing two unique numbers\n  std::vector<long> result;\n  std::unordered_map<long, int> map;\n  for (auto i : nums) {\n    map[i]++;\n  }\n  for (auto i : map) {\n    if (i.second == 1) {\n      result.push_back(i.first);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmp4_snaoa8: /tmp/tmp4_snaoa8.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (long num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmpfme7yov6: /tmp/tmpfme7yov6.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmpbm_v8df8: /tmp/tmpbm_v8df8.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for(auto i: nums){\n        if(s.find(i) == s.end()){\n            s.insert(i);\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmp6q27o2z6: /tmp/tmp6q27o2z6.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    std::unordered_map<long, int> mp;\n    for (auto i : nums) {\n        mp[i]++;\n    }\n    for (auto i : nums) {\n        if (mp[i] == 1) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> m;\n    for (auto num : nums) {\n        m[num]++;\n    }\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmprwthdhd_: /tmp/tmprwthdhd_.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> unique_nums;\n    std::unordered_set<long> unique_set;\n    for (auto num : nums) {\n        if (unique_set.find(num) == unique_set.end()) {\n            unique_set.insert(num);\n            unique_nums.push_back(num);\n        }\n    }\n    return unique_nums;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmpi1fsgt72: /tmp/tmpi1fsgt72.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_map<long, int> freq;\n    for (auto num : nums) {\n        freq[num]++;\n    }\n    for (auto num : nums) {\n        if (freq[num] == 1) {\n            ans.push_back(num);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> res;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n        }\n    }\n    for (auto num : s) {\n        res.push_back(num);\n    }\n    return res;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmp866sxu1p: /tmp/tmp866sxu1p.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> count;\n    for (auto num : nums) {\n        count[num]++;\n    }\n    for (auto num : nums) {\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> res;\n    std::unordered_map<long, int> mp;\n    for (int i = 0; i < nums.size(); i++) {\n        mp[nums[i]]++;\n    }\n    for (auto it = mp.begin(); it != mp.end(); it++) {\n        if (it->second == 1) {\n            res.push_back(it->first);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmpaoqfuzim: /tmp/tmpaoqfuzim.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto num : nums) {\n        if (set.find(num) == set.end()) {\n            set.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmpb02klz1p: /tmp/tmpb02klz1p.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n        } else {\n            seen.erase(num);\n        }\n    }\n    for (long num : seen) {\n        result.push_back(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmp583ljdxw: /tmp/tmp583ljdxw.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto num : nums) {\n        if (set.find(num) == set.end()) {\n            set.insert(num);\n        }\n    }\n    for (auto num : set) {\n        result.push_back(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmp3p78zmk1: /tmp/tmp3p78zmk1.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    long xor_val = 0;\n    for(auto num: nums) {\n        xor_val ^= num;\n    }\n    long right_most_set_bit = xor_val & ~(xor_val - 1);\n    long first_num = 0;\n    long second_num = 0;\n    for(auto num: nums) {\n        if(num & right_most_set_bit) {\n            first_num ^= num;\n        } else {\n            second_num ^= num;\n        }\n    }\n    ans.push_back(first_num);\n    ans.push_back(second_num);\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmps1qhwd8w: /tmp/tmps1qhwd8w.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (long num : nums) {\n        if (s.count(num) == 0) {\n            s.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmpzj_nws2e: /tmp/tmpzj_nws2e.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    long xor_result = 0;\n    for (long num : nums) {\n        xor_result ^= num;\n    }\n    long right_most_set_bit = xor_result & ~(xor_result - 1);\n    long first_num = 0;\n    long second_num = 0;\n    for (long num : nums) {\n        if (num & right_most_set_bit) {\n            first_num ^= num;\n        } else {\n            second_num ^= num;\n        }\n    }\n    result.push_back(first_num);\n    result.push_back(second_num);\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmpzb24pt93: /tmp/tmpzb24pt93.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> num_count;\n    for (auto num : nums) {\n        num_count[num]++;\n    }\n    for (auto num : nums) {\n        if (num_count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    // return a vector containing two unique numbers\n    std::vector<long> ans;\n    long xor_sum = 0;\n    for(auto num: nums){\n        xor_sum ^= num;\n    }\n    long right_most_set_bit = xor_sum & ~(xor_sum - 1);\n    long first_num = 0;\n    long second_num = 0;\n    for(auto num: nums){\n        if(num & right_most_set_bit){\n            first_num ^= num;\n        }\n        else{\n            second_num ^= num;\n        }\n    }\n    ans.push_back(first_num);\n    ans.push_back(second_num);\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmp41i0fy9l: /tmp/tmp41i0fy9l.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (long i : nums) {\n        map[i]++;\n    }\n    for (auto i : map) {\n        if (i.second == 1) {\n            result.push_back(i.first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmpsntxz360: /tmp/tmpsntxz360.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> res;\n    std::unordered_map<long, int> m;\n    for (auto num : nums) {\n        m[num]++;\n    }\n    for (auto num : nums) {\n        if (m[num] == 1) {\n            res.push_back(num);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    std::unordered_set<long> set;\n    for(auto num: nums){\n        if(set.find(num) == set.end()){\n            set.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmpl2mziv8v: /tmp/tmpl2mziv8v.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(auto i : nums)\n        map[i]++;\n    for(auto i : map)\n        if(i.second == 1)\n            result.push_back(i.first);\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmp7bn3kuga: /tmp/tmp7bn3kuga.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    // Return the two unique numbers\n    std::vector<long> ans;\n    std::unordered_map<long, int> mp;\n    for(auto i: nums)\n        mp[i]++;\n    for(auto i: mp)\n        if(i.second == 1)\n            ans.push_back(i.first);\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmp14b6tp3a: /tmp/tmp14b6tp3a.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> unique_nums;\n    std::unordered_set<long> unique_set;\n    for (auto num : nums) {\n        if (unique_set.find(num) == unique_set.end()) {\n            unique_set.insert(num);\n            unique_nums.push_back(num);\n        }\n    }\n    return unique_nums;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmpi1fsgt72: /tmp/tmpi1fsgt72.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(int i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    for(auto i = map.begin(); i != map.end(); i++) {\n        if(i->second == 1) {\n            result.push_back(i->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmp1nup21d7: /tmp/tmp1nup21d7.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num: nums) {\n        if (map.find(num) == map.end()) {\n            map[num] = 1;\n        } else {\n            map[num]++;\n        }\n    }\n    for (auto num: nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for(auto i:nums)\n    {\n        if(s.find(i)==s.end())\n        {\n            s.insert(i);\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmpoo8tr5_n: /tmp/tmpoo8tr5_n.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n            ans.push_back(num);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmptob5edz7: /tmp/tmptob5edz7.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> hash_set;\n    for (auto num : nums) {\n        if (hash_set.find(num) == hash_set.end()) {\n            hash_set.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmp6_pyvx49: /tmp/tmp6_pyvx49.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    // To print results to the standard output you can use Print\n    // Example: Print(\"Hello world!\")\n    std::vector<long> ans;\n    std::unordered_map<long, int> mp;\n    for(int i = 0; i < nums.size(); i++){\n        mp[nums[i]]++;\n    }\n    for(auto it = mp.begin(); it != mp.end(); it++){\n        if(it->second == 1){\n            ans.push_back(it->first);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmplwk9tj3v: /tmp/tmplwk9tj3v.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmp5ck22j8z: /tmp/tmp5ck22j8z.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> unique_nums;\n    for(auto num : nums) {\n        if(unique_nums.find(num) == unique_nums.end()) {\n            unique_nums.insert(num);\n        }\n    }\n    for(auto num : unique_nums) {\n        result.push_back(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmpqk7t5g68: /tmp/tmpqk7t5g68.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    // return a vector containing two unique numbers\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(auto i:nums){\n        map[i]++;\n    }\n    for(auto i:map){\n        if(i.second==1){\n            result.push_back(i.first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmp3i9h0xj0: /tmp/tmp3i9h0xj0.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmp5ck22j8z: /tmp/tmp5ck22j8z.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(auto num : nums) {\n        map[num]++;\n    }\n    for(auto num : nums) {\n        if(map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n        }\n    }\n    for (auto num : s) {\n        result.push_back(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmp3f0ongw7: /tmp/tmp3f0ongw7.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmp5ck22j8z: /tmp/tmp5ck22j8z.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for(long num : nums) {\n        if(s.find(num) == s.end()) {\n            s.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "tmphp88mwty: /tmp/tmphp88mwty.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for(auto num: nums) {\n        if(s.find(num) == s.end()) {\n            s.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmp3_gveqaj: /tmp/tmp3_gveqaj.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::sort(nums.begin(), nums.end());\n    for (int i = 0; i < nums.size(); i++) {\n        if (i == 0) {\n            result.push_back(nums[i]);\n        }\n        else if (nums[i] != nums[i-1]) {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmp8i_c8qgd: /tmp/tmp8i_c8qgd.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_set<long> s;\n    for (long num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n            ans.push_back(num);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmpcty7cj7b: /tmp/tmpcty7cj7b.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto i : nums) {\n        map[i]++;\n    }\n    for (auto i : nums) {\n        if (map[i] == 1) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for(auto num : nums) {\n        if(s.find(num) == s.end()) {\n            s.insert(num);\n        }\n    }\n    for(auto num : nums) {\n        if(s.find(num) != s.end()) {\n            result.push_back(num);\n            s.erase(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmpmv1dl_qg: /tmp/tmpmv1dl_qg.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    // return a vector containing two unique numbers\n    std::vector<long> ans;\n    std::unordered_map<long, int> mp;\n    for (auto i : nums) {\n        mp[i]++;\n    }\n    for (auto i : mp) {\n        if (i.second == 1) {\n            ans.push_back(i.first);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmp7hyn2xo5: /tmp/tmp7hyn2xo5.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> count;\n    for (auto num : nums) {\n        count[num]++;\n    }\n    for (auto num : nums) {\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    std::unordered_set<long> seen_twice;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n        } else {\n            seen_twice.insert(num);\n        }\n    }\n    for (auto num : nums) {\n        if (seen_twice.find(num) == seen_twice.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_set<long> s;\n    for(auto num : nums) {\n        if(s.find(num) == s.end()) {\n            s.insert(num);\n            ans.push_back(num);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmp4h_k7pix: /tmp/tmp4h_k7pix.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> res;\n    std::unordered_set<long> s;\n    for(auto num: nums) {\n        if(s.find(num) == s.end()) {\n            s.insert(num);\n            res.push_back(num);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmpmtvh8qv0: /tmp/tmpmtvh8qv0.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (int i = 0; i < nums.size(); i++) {\n        if (seen.count(nums[i]) == 0) {\n            seen.insert(nums[i]);\n            result.push_back(nums[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmpors7yayn: /tmp/tmpors7yayn.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmp5ck22j8z: /tmp/tmp5ck22j8z.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_map<long, int> map;\n    for(int i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    for(auto it = map.begin(); it != map.end(); it++) {\n        if(it->second == 1) {\n            ans.push_back(it->first);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmpggd_dbah: /tmp/tmpggd_dbah.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n        }\n    }\n    for (auto num : s) {\n        result.push_back(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmp3f0ongw7: /tmp/tmp3f0ongw7.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    // return a vector containing two unique numbers\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(int i=0; i<nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    for(auto it=map.begin(); it!=map.end(); it++) {\n        if(it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "tmpmetk955v: /tmp/tmpmetk955v.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_map<long, int> m;\n    for (auto num : nums) {\n        m[num]++;\n    }\n    for (auto num : nums) {\n        if (m[num] == 1) {\n            ans.push_back(num);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> res;\n    std::unordered_set<long> s;\n    for (long num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n            res.push_back(num);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "tmpxvb5htab: /tmp/tmpxvb5htab.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> count;\n    for (auto num : nums) {\n        count[num]++;\n    }\n    for (auto num : nums) {\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.count(num) == 0) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "tmpbjv67wkf: /tmp/tmpbjv67wkf.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (long num : nums) {\n        map[num]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmpgvzap2ar: /tmp/tmpgvzap2ar.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long num : nums) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmp5i_rs8ev: /tmp/tmp5i_rs8ev.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmp5ck22j8z: /tmp/tmp5ck22j8z.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> two_unique_nums;\n    std::sort(nums.begin(), nums.end());\n    int i = 0;\n    while (i < nums.size()) {\n        two_unique_nums.push_back(nums[i]);\n        i += 2;\n    }\n    return two_unique_nums;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "tmpsq8i6enu: /tmp/tmpsq8i6enu.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> counts;\n    for (long num : nums) {\n        counts[num]++;\n    }\n    for (long num : nums) {\n        if (counts[num] == 1) {\n            result.push_back(num);\n            if (result.size() == 2) {\n                return result;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "tmp782um4_i: /tmp/tmp782um4_i.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_map<long, int> m;\n    for (long num : nums) {\n        m[num]++;\n    }\n    for (auto it : m) {\n        if (it.second == 1) {\n            ans.push_back(it.first);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "tmpch_8ouef: /tmp/tmpch_8ouef.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(auto num : nums) {\n        if(map.find(num) == map.end()) {\n            map[num] = 1;\n        } else {\n            map[num] += 1;\n        }\n    }\n    for(auto num : nums) {\n        if(map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for(auto i:nums){\n        if(s.find(i)==s.end()){\n            s.insert(i);\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "tmpl9_7txou: /tmp/tmpl9_7txou.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_set<long> s;\n    for(int i=0;i<nums.size();i++){\n        if(s.find(nums[i])==s.end()){\n            s.insert(nums[i]);\n            ans.push_back(nums[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "tmpwwngdaxe: /tmp/tmpwwngdaxe.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    // return a vector containing two unique numbers\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for(auto i:nums)\n    {\n        if(s.find(i)==s.end())\n        {\n            s.insert(i);\n        }\n        else\n        {\n            s.erase(i);\n        }\n    }\n    for(auto i:s)\n    {\n        result.push_back(i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "tmpf3k8_f5m: /tmp/tmpf3k8_f5m.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_map<long, int> mp;\n    for(auto x : nums) {\n        mp[x]++;\n    }\n    for(auto x : mp) {\n        if(x.second == 1) {\n            ans.push_back(x.first);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "tmp9fhlav0y: /tmp/tmp9fhlav0y.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> res;\n    std::unordered_set<long> s;\n    for(auto num : nums) {\n        if(s.find(num) == s.end()) {\n            s.insert(num);\n            res.push_back(num);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "tmp94yhhzk_: /tmp/tmp94yhhzk_.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> unique_nums;\n    for (auto num : nums) {\n        if (unique_nums.find(num) == unique_nums.end()) {\n            unique_nums.insert(num);\n        }\n    }\n    for (auto num : unique_nums) {\n        result.push_back(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "tmp__jnl3vw: /tmp/tmp__jnl3vw.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmptlt57won: /tmp/tmptlt57won.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (int i = 0; i < nums.size(); i++) {\n        if (set.find(nums[i]) == set.end()) {\n            set.insert(nums[i]);\n        }\n    }\n    for (auto it = set.begin(); it != set.end(); it++) {\n        result.push_back(*it);\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "tmp5sckao80: /tmp/tmp5sckao80.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmp5ck22j8z: /tmp/tmp5ck22j8z.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(int i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    for(auto it = map.begin(); it != map.end(); it++) {\n        if(it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "tmpdcqogaq7: /tmp/tmpdcqogaq7.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_map<long, int> map;\n    for(auto num: nums) {\n        map[num]++;\n    }\n    for(auto num: nums) {\n        if(map[num] == 1) {\n            ans.push_back(num);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> count;\n    for (auto num : nums) {\n        count[num]++;\n    }\n    for (auto num : nums) {\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> count;\n    for (auto num : nums) {\n        count[num]++;\n    }\n    for (auto num : nums) {\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        s.insert(num);\n    }\n    for (auto num : s) {\n        ans.push_back(num);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "tmpl7tkzbdu: /tmp/tmpl7tkzbdu.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> count;\n    for (auto num : nums) {\n        count[num]++;\n    }\n    for (auto num : nums) {\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n        }\n    }\n    for (auto num : s) {\n        result.push_back(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmp3f0ongw7: /tmp/tmp3f0ongw7.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_set<long> s;\n    for (long num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n            ans.push_back(num);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmpcty7cj7b: /tmp/tmpcty7cj7b.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_map<long, int> mp;\n    for(auto num : nums) {\n        mp[num]++;\n    }\n    for(auto num : nums) {\n        if(mp[num] == 1) {\n            ans.push_back(num);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::sort(nums.begin(), nums.end());\n    for (int i = 0; i < nums.size(); i++) {\n        if (i == 0 || nums[i] != nums[i-1]) {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "tmp3319_j8a: /tmp/tmp3319_j8a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> count;\n    for (auto num : nums) {\n        count[num]++;\n    }\n    for (auto num : nums) {\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> freq;\n    for (auto num : nums) {\n        freq[num]++;\n    }\n    for (auto num : nums) {\n        if (freq[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(int i=0; i<nums.size(); i++){\n        if(map.find(nums[i]) == map.end()){\n            map[nums[i]] = 1;\n        }\n        else{\n            map[nums[i]]++;\n        }\n    }\n    for(auto it = map.begin(); it != map.end(); it++){\n        if(it->second == 1){\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "tmpin19584b: /tmp/tmpin19584b.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    long xor_num = 0;\n    for (auto num : nums) {\n        xor_num ^= num;\n    }\n    long right_most_set_bit = xor_num & ~(xor_num - 1);\n    long first_num = 0;\n    long second_num = 0;\n    for (auto num : nums) {\n        if (num & right_most_set_bit) {\n            first_num ^= num;\n        } else {\n            second_num ^= num;\n        }\n    }\n    ans.push_back(first_num);\n    ans.push_back(second_num);\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "tmp_ggu3isa: /tmp/tmp_ggu3isa.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmp5ck22j8z: /tmp/tmp5ck22j8z.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> count;\n    for (auto i : nums) {\n        count[i]++;\n    }\n    for (auto i : nums) {\n        if (count[i] == 1) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> unique_nums;\n    for (auto num : nums) {\n        if (unique_nums.find(num) == unique_nums.end()) {\n            unique_nums.insert(num);\n        }\n    }\n    for (auto num : unique_nums) {\n        result.push_back(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "tmp__jnl3vw: /tmp/tmp__jnl3vw.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    std::unordered_map<long, int> mp;\n    for(int i=0; i<nums.size(); i++){\n        mp[nums[i]]++;\n    }\n    for(auto i:mp){\n        if(i.second==1){\n            result.push_back(i.first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmpgtagxby8: /tmp/tmpgtagxby8.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> hashmap;\n    for (auto num : nums) {\n        hashmap[num]++;\n    }\n    for (auto num : nums) {\n        if (hashmap[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (long i = 0; i < nums.size(); i++) {\n        if (s.find(nums[i]) == s.end()) {\n            s.insert(nums[i]);\n        }\n    }\n    for (long i = 0; i < nums.size(); i++) {\n        if (s.find(nums[i]) != s.end()) {\n            result.push_back(nums[i]);\n            s.erase(nums[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmp2j1tewo1: /tmp/tmp2j1tewo1.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    long xor_result = 0;\n    for(long num : nums){\n        xor_result ^= num;\n    }\n    long right_most_set_bit = xor_result & ~(xor_result - 1);\n    long first_num = 0;\n    long second_num = 0;\n    for(long num : nums){\n        if(num & right_most_set_bit){\n            first_num ^= num;\n        }\n        else{\n            second_num ^= num;\n        }\n    }\n    std::vector<long> result;\n    result.push_back(first_num);\n    result.push_back(second_num);\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124181,
      "stdout": "",
      "stderr": "tmpi5qqg7hi: /tmp/tmpi5qqg7hi.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(int i=0; i<nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    for(auto it=map.begin(); it!=map.end(); it++) {\n        if(it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmpzk12nck9: /tmp/tmpzk12nck9.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (long num : nums) {\n        map[num]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmpgvzap2ar: /tmp/tmpgvzap2ar.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmpxdgykqas: /tmp/tmpxdgykqas.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    // return a vector containing two unique numbers\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(auto i: nums) {\n        map[i]++;\n    }\n    for(auto i: map) {\n        if(i.second == 1) {\n            result.push_back(i.first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmpvxbvo1vr: /tmp/tmpvxbvo1vr.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n\tstd::vector<long> result;\n\tstd::unordered_set<long> s;\n\tfor(int i = 0; i < nums.size(); i++) {\n\t\tif(s.find(nums[i]) == s.end()) {\n\t\t\ts.insert(nums[i]);\n\t\t}\n\t}\n\tfor(auto it = s.begin(); it != s.end(); it++) {\n\t\tresult.push_back(*it);\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmpe50yqm8m: /tmp/tmpe50yqm8m.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long num : nums) {\n        if (set.find(num) == set.end()) {\n            set.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmpss0f12t8: /tmp/tmpss0f12t8.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (long num : nums) {\n        map[num]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmpgvzap2ar: /tmp/tmpgvzap2ar.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmptlt57won: /tmp/tmptlt57won.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> nums_set;\n    for (long num : nums) {\n        if (nums_set.find(num) == nums_set.end()) {\n            nums_set.insert(num);\n        }\n    }\n    for (long num : nums_set) {\n        result.push_back(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmp7hozsisu: /tmp/tmp7hozsisu.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(auto num: nums){\n        map[num]++;\n    }\n    for(auto num: nums){\n        if(map[num] == 1){\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> count;\n    for (auto num : nums) {\n        count[num]++;\n    }\n    for (auto num : nums) {\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> res;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n            res.push_back(num);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmpvbfdgfz9: /tmp/tmpvbfdgfz9.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(auto i: nums){\n        if(map.find(i) == map.end()){\n            map[i] = 1;\n        }\n        else{\n            map[i]++;\n        }\n    }\n    for(auto i: map){\n        if(i.second == 1){\n            result.push_back(i.first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmprylk05je: /tmp/tmprylk05je.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (long num : nums) {\n        map[num]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmpgvzap2ar: /tmp/tmpgvzap2ar.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> ans;\n    std::unordered_map<long, int> mp;\n    for(int i = 0; i < nums.size(); i++) {\n        mp[nums[i]]++;\n    }\n    for(auto it = mp.begin(); it != mp.end(); it++) {\n        if(it->second == 1) {\n            ans.push_back(it->first);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmptmd1zdup: /tmp/tmptmd1zdup.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    int xor_result = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        xor_result ^= nums[i];\n    }\n    int right_most_set_bit = xor_result & ~(xor_result - 1);\n    int x = 0, y = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] & right_most_set_bit) {\n            x ^= nums[i];\n        } else {\n            y ^= nums[i];\n        }\n    }\n    return {x, y};\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmp49uqir8l: /tmp/tmp49uqir8l.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (long num : nums) {\n        if (s.find(num) == s.end()) {\n            result.push_back(num);\n            s.insert(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmpjqvwc_gg: /tmp/tmpjqvwc_gg.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto num : nums) {\n        if (set.find(num) == set.end()) {\n            set.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmpb02klz1p: /tmp/tmpb02klz1p.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n        }\n    }\n    for (auto num : s) {\n        result.push_back(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmp3f0ongw7: /tmp/tmp3f0ongw7.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for(auto num : nums) {\n        if(s.find(num) == s.end()) {\n            s.insert(num);\n        }\n    }\n    for(auto num : s) {\n        result.push_back(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmpr4tlps7a: /tmp/tmpr4tlps7a.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> count;\n    for (auto num : nums) {\n        count[num]++;\n    }\n    for (auto num : nums) {\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> res;\n    std::unordered_set<long> s;\n    for(auto i : nums) {\n        if(s.find(i) == s.end()) {\n            s.insert(i);\n        }\n    }\n    for(auto i : s) {\n        res.push_back(i);\n    }\n    return res;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmpt7zlptnq: /tmp/tmpt7zlptnq.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmpxdgykqas: /tmp/tmpxdgykqas.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> num_count;\n    for (auto num : nums) {\n        num_count[num]++;\n    }\n    for (auto num : nums) {\n        if (num_count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_set<long> s;\n    for(int i = 0; i < nums.size(); i++) {\n        if(s.find(nums[i]) == s.end()) {\n            s.insert(nums[i]);\n            ans.push_back(nums[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmpzjwto3_1: /tmp/tmpzjwto3_1.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto num : nums) {\n        if (set.find(num) == set.end()) {\n            set.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmpb02klz1p: /tmp/tmpb02klz1p.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::sort(nums.begin(), nums.end());\n    for (int i = 0; i < nums.size(); i++) {\n        if (i == 0) {\n            result.push_back(nums[i]);\n        } else if (nums[i] != nums[i - 1]) {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmpfzevllvg: /tmp/tmpfzevllvg.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (int i = 0; i < nums.size(); i++) {\n        if (s.find(nums[i]) == s.end()) {\n            s.insert(nums[i]);\n            result.push_back(nums[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmpyv14u8w1: /tmp/tmpyv14u8w1.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long num : nums) {\n        if (seen.count(num) == 0) {\n            result.push_back(num);\n            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmp8hyqbiri: /tmp/tmp8hyqbiri.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> unique_nums;\n    for (auto num : nums) {\n        if (unique_nums.find(num) == unique_nums.end()) {\n            unique_nums.insert(num);\n        }\n    }\n    for (auto num : unique_nums) {\n        result.push_back(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "tmp__jnl3vw: /tmp/tmp__jnl3vw.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    // return a vector containing two unique numbers\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto i : nums) {\n        map[i]++;\n    }\n    for (auto i : map) {\n        if (i.second == 1) {\n            result.push_back(i.first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmps9kkjxyb: /tmp/tmps9kkjxyb.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> res;\n    std::unordered_map<long, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    for (auto i : map) {\n        if (i.second == 1) {\n            res.push_back(i.first);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmp24srhlsr: /tmp/tmp24srhlsr.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n            ans.push_back(num);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmptob5edz7: /tmp/tmptob5edz7.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_map<long, int> mp;\n    for (auto num : nums) {\n        mp[num]++;\n    }\n    for (auto num : nums) {\n        if (mp[num] == 1) {\n            ans.push_back(num);\n        }\n        if (ans.size() == 2) {\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "tmp19t4liax: /tmp/tmp19t4liax.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmp5ck22j8z: /tmp/tmp5ck22j8z.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> count;\n    for (long num : nums) {\n        count[num]++;\n    }\n    for (long num : nums) {\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    std::unordered_map<long,int> map;\n    for(int i=0;i<nums.size();i++)\n    {\n        map[nums[i]]++;\n    }\n    for(auto it=map.begin();it!=map.end();it++)\n    {\n        if(it->second==1)\n        {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "tmp6djo4pzy: /tmp/tmp6djo4pzy.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_set<long> s;\n    for(auto num : nums) {\n        if(s.find(num) == s.end()) {\n            s.insert(num);\n            ans.push_back(num);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "tmp4h_k7pix: /tmp/tmp4h_k7pix.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(auto i: nums){\n        map[i]++;\n    }\n    for(auto i: map){\n        if(i.second==1){\n            result.push_back(i.first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "tmp6b9nr3nj: /tmp/tmp6b9nr3nj.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto i : nums) {\n        if (s.find(i) == s.end()) {\n            result.push_back(i);\n            s.insert(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "tmpyesgu6h0: /tmp/tmpyesgu6h0.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto num : nums) {\n        if (set.find(num) == set.end()) {\n            set.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmpb02klz1p: /tmp/tmpb02klz1p.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> hash_map;\n    for(auto num : nums) {\n        hash_map[num]++;\n    }\n    for(auto num : nums) {\n        if(hash_map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> num_counts;\n    for (long num : nums) {\n        num_counts[num]++;\n    }\n    for (auto it = num_counts.begin(); it != num_counts.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "tmpqjj2s4fw: /tmp/tmpqjj2s4fw.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> res;\n    std::unordered_map<long, int> mp;\n    for(auto i: nums) {\n        mp[i]++;\n    }\n    for(auto i: mp) {\n        if(i.second == 1) {\n            res.push_back(i.first);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "tmpsz4kokd0: /tmp/tmpsz4kokd0.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto i : nums) {\n        map[i]++;\n    }\n    for (auto i : map) {\n        if (i.second == 1) {\n            result.push_back(i.first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "tmpvwikgmbm: /tmp/tmpvwikgmbm.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            ans.push_back(num);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "tmpy55w11rp: /tmp/tmpy55w11rp.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> res;\n    std::unordered_map<long, int> map;\n    for(auto num : nums) {\n        map[num]++;\n    }\n    for(auto num : nums) {\n        if(map[num] == 1) {\n            res.push_back(num);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    std::unordered_map<long, int> m;\n    for (int i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "tmp4ceafmqn: /tmp/tmp4ceafmqn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto num : nums) {\n        if (set.find(num) == set.end()) {\n            set.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmpb02klz1p: /tmp/tmpb02klz1p.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmpxdgykqas: /tmp/tmpxdgykqas.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    // return a vector containing two unique numbers\n    std::vector<long> result;\n    std::unordered_map<long, int> count;\n    for (auto num : nums) {\n        count[num]++;\n    }\n    for (auto num : nums) {\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n        if (result.size() == 2) {\n            break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "tmpe8vu4sm0: /tmp/tmpe8vu4sm0.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto num : nums) {\n        if (set.find(num) == set.end()) {\n            set.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124175,
      "stdout": "",
      "stderr": "tmpb02klz1p: /tmp/tmpb02klz1p.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> num_set;\n    for (auto num : nums) {\n        if (num_set.find(num) == num_set.end()) {\n            num_set.insert(num);\n        }\n    }\n    for (auto num : nums) {\n        if (num_set.find(num) != num_set.end()) {\n            result.push_back(num);\n            num_set.erase(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "tmpau_mqpct: /tmp/tmpau_mqpct.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665517149,
      "stdout": "",
      "stderr": "tmpxdgykqas: /tmp/tmpxdgykqas.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> res;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            res.push_back(num);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    // return a vector containing two unique numbers\n    std::vector<long> res;\n    std::unordered_set<long> s;\n    for(auto i : nums){\n        if(s.find(i) == s.end()){\n            s.insert(i);\n        }\n    }\n    for(auto i : s){\n        res.push_back(i);\n    }\n    return res;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "tmpkgzmkftc: /tmp/tmpkgzmkftc.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            ans.push_back(num);\n            seen.insert(num);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "tmpuwvp817f: /tmp/tmpuwvp817f.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> res;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n            res.push_back(num);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "tmpvbfdgfz9: /tmp/tmpvbfdgfz9.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> count;\n    for (long num : nums) {\n        count[num]++;\n    }\n    for (auto it : count) {\n        if (it.second == 1) {\n            result.push_back(it.first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "tmph8lfy60x: /tmp/tmph8lfy60x.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    // return a vector containing two unique numbers\n    std::vector<long> result;\n    std::unordered_map<long, int> m;\n    for(auto i : nums){\n        m[i]++;\n    }\n    for(auto i : m){\n        if(i.second == 1){\n            result.push_back(i.first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "tmp01hsvi6e: /tmp/tmp01hsvi6e.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> mp;\n    for (auto num : nums) {\n        mp[num]++;\n    }\n    for (auto num : nums) {\n        if (mp[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    // Write your code here\n    // Return the list of unique numbers\n    std::vector<long> res;\n    std::unordered_map<long, int> mp;\n    for(auto i: nums){\n        mp[i]++;\n    }\n    for(auto i: mp){\n        if(i.second == 1){\n            res.push_back(i.first);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "tmp06efypgi: /tmp/tmp06efypgi.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::map<long, int> m;\n    for (auto num : nums) {\n        m[num]++;\n    }\n    for (auto num : nums) {\n        if (m[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> unique_nums;\n    for (long num : nums) {\n        if (unique_nums.find(num) == unique_nums.end()) {\n            unique_nums.insert(num);\n        }\n    }\n    for (long num : unique_nums) {\n        result.push_back(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "tmpigo1d8s4: /tmp/tmpigo1d8s4.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for(auto num : nums) {\n        if(s.find(num) == s.end()) {\n            s.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124186,
      "stdout": "",
      "stderr": "tmptvvp91uf: /tmp/tmptvvp91uf.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    for (auto i : map) {\n        if (i.second == 1) {\n            result.push_back(i.first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124186,
      "stdout": "",
      "stderr": "tmp6n1yv17v: /tmp/tmp6n1yv17v.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (int i = 0; i < nums.size(); i++) {\n        if (s.find(nums[i]) == s.end()) {\n            s.insert(nums[i]);\n        }\n    }\n    for (auto it = s.begin(); it != s.end(); it++) {\n        result.push_back(*it);\n    }\n    return result;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124186,
      "stdout": "",
      "stderr": "tmp0p4tznhg: /tmp/tmp0p4tznhg.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::unordered_map<long, int> m;\n    for(auto x: nums) {\n        m[x]++;\n    }\n    for(auto x: nums) {\n        if(m[x] == 1) {\n            ans.push_back(x);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::vector<long> ans;\n    std::sort(nums.begin(), nums.end());\n    for (int i = 0; i < nums.size() - 1; i++) {\n        if (nums[i] != nums[i + 1]) {\n            ans.push_back(nums[i]);\n        }\n    }\n    ans.push_back(nums[nums.size() - 1]);\n    return ans;\n}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666124186,
      "stdout": "",
      "stderr": "tmpr3bx3ret: /tmp/tmpr3bx3ret.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}