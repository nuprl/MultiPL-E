{
  "name": "mbpp_66_pos_count",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n\tlong count = 0;\n\tfor (long i = 0; i < list.size(); i++) {\n\t\tif (list[i] > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(auto i : list) {\n        if(i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (auto i : list) {\n        if (i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (auto i : list) {\n        if (i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(auto i : list) {\n        if(i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(int i=0;i<list.size();i++)\n    {\n        if(list[i]>0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n\tlong count = 0;\n\tfor (int i = 0; i < list.size(); i++) {\n\t\tif (list[i] > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(auto i : list) {\n        if(i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (auto i = list.begin(); i != list.end(); i++) {\n        if (*i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (auto i = list.begin(); i != list.end(); ++i) {\n        if (*i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(auto i : list) {\n        if(i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i=0;i<list.size();i++){\n        if(list[i]>0){\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (auto i = list.begin(); i != list.end(); i++) {\n        if (*i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(auto i: list) {\n        if(i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (auto i : list) {\n        if (i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(int i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(int i=0;i<list.size();i++){\n        if(list[i]>0){\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(auto i : list) {\n        if(i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (auto i : list) {\n        if (i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(int i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n\tlong count = 0;\n\tfor (long i = 0; i < list.size(); i++) {\n\t\tif (list[i] > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (auto i : list) {\n        if (i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i=0;i<list.size();i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(int i=0;i<list.size();i++)\n    {\n        if(list[i]>0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i=0;i<list.size();i++)\n    {\n        if(list[i]>0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i=0;i<list.size();i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (auto i : list) {\n        if (i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(auto i : list) {\n        if(i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i=0; i<list.size(); i++) {\n        if(list[i] > 0)\n            count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i=0;i<list.size();i++){\n        if(list[i]>0){\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (auto i : list) {\n        if (i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (auto i = list.begin(); i != list.end(); i++) {\n        if (*i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (auto i = list.begin(); i != list.end(); i++) {\n        if (*i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count=0;\n    for(long i=0;i<list.size();i++)\n    {\n        if(list[i]>0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (auto i : list) {\n        if (i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(int i=0;i<list.size();i++)\n    {\n        if(list[i]>0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n\tlong count = 0;\n\tfor (auto i = list.begin(); i != list.end(); i++) {\n\t\tif (*i > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n\tlong count = 0;\n\tfor (long i = 0; i < list.size(); i++) {\n\t\tif (list[i] > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (auto i : list) {\n        if (i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(int i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(int i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i=0; i<list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (auto i = list.begin(); i != list.end(); i++) {\n        if (*i > 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i=0;i<list.size();i++) {\n        if(list[i]>0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of positive numbers in a list.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for(long i = 0; i < list.size(); i++) {\n        if(list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}