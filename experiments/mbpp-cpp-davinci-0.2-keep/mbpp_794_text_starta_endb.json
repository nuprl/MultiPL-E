{
  "name": "mbpp_794_text_starta_endb",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nbool text_starta_endb(std::string text) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = text_starta_endb;\n    assert(candidate((\"aabbbb\")) == (true));\n    assert(candidate((\"aabAbbbc\")) == (false));\n    assert(candidate((\"accddbbjjj\")) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if(text.size() < 2) {\n        return false;\n    }\n    if(text[0] != 'a') {\n        return false;\n    }\n    if(text[text.size() - 1] != 'b') {\n        return false;\n    }\n    return true;",
    "    return std::regex_match(text, std::regex(\"a.*b\"));",
    "    bool flag = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == 'a') {\n            for (int j = i; j < text.length(); j++) {\n                if (text[j] == 'b') {\n                    flag = true;\n                    break;\n                }\n            }\n        }\n    }\n    return flag;",
    "    if (text.length() == 0) {\n        return false;\n    }\n    if (text.length() == 1) {\n        return false;\n    }\n    if (text[0] == 'a' && text[text.length() - 1] == 'b') {\n        return true;\n    }\n    return false;",
    "    return std::regex_match(text, std::regex(\"a.*b\"));",
    "    if (text.size() < 2) {\n        return false;\n    }\n    if (text[0] == 'a') {\n        if (text[text.size() - 1] == 'b') {\n            return true;\n        }\n    }\n    return false;",
    "    // write your code here\n    int len = text.length();\n    if(len == 0)\n        return false;\n    if(text[0] == 'a' && text[len-1] == 'b')\n        return true;\n    return false;",
    "    return std::regex_match(text, std::regex(\"a.*b\"));",
    "    bool flag = false;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == 'a') {\n            for (int j = i + 1; j < text.size(); j++) {\n                if (text[j] == 'b') {\n                    flag = true;\n                    break;\n                }\n            }\n        }\n    }\n    return flag;",
    "    bool match = false;\n    if (text.size() >= 2) {\n        if (text[0] == 'a') {\n            if (text[text.size() - 1] == 'b') {\n                match = true;\n            }\n        }\n    }\n    return match;",
    "    return std::regex_match(text, std::regex(\"a.*b\"));",
    "    if (text.size() == 0) {\n        return false;\n    }\n    if (text[0] != 'a') {\n        return false;\n    }\n    if (text[text.size() - 1] != 'b') {\n        return false;\n    }\n    return true;",
    "    bool result = false;\n    if(text.size() >= 2) {\n        if(text.at(0) == 'a') {\n            if(text.at(text.size() - 1) == 'b') {\n                result = true;\n            }\n        }\n    }\n    return result;",
    "    std::regex pattern(\"a.*b\");\n    return std::regex_match(text, pattern);",
    "    return std::regex_match(text, std::regex(\"a.*b\"));",
    "    return std::regex_match(text, std::regex(\"a.*b\"));",
    "    bool starta = false;\n    bool endb = false;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == 'a') {\n            starta = true;\n        }\n        if (text[i] == 'b') {\n            endb = true;\n        }\n    }\n    if (starta && endb) {\n        return true;\n    }\n    return false;",
    "    bool flag = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == 'a') {\n            for (int j = i + 1; j < text.length(); j++) {\n                if (text[j] == 'b') {\n                    flag = true;\n                    break;\n                }\n            }\n        }\n    }\n    return flag;",
    "    if(text.size() < 2) {\n        return false;\n    }\n    if(text[0] != 'a') {\n        return false;\n    }\n    if(text[text.size() - 1] != 'b') {\n        return false;\n    }\n    return true;",
    "    int len = text.length();\n    if (len < 2) {\n        return false;\n    }\n    if (text[0] == 'a' && text[len - 1] == 'b') {\n        return true;\n    }\n    return false;"
  ]
}