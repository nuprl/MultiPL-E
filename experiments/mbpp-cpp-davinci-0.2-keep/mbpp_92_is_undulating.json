{
  "name": "mbpp_92_is_undulating",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n) {\n        curr_digit = n % 10;\n        if (curr_digit == prev_digit) {\n            return false;\n        }\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;",
    "    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;",
    "    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;",
    "    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;",
    "  int last_digit = n % 10;\n  n /= 10;\n  while (n > 0) {\n    int current_digit = n % 10;\n    if (current_digit != last_digit) {\n      return false;\n    }\n    last_digit = current_digit;\n    n /= 10;\n  }\n  return true;",
    "\tint prev_digit = n % 10;\n\tn /= 10;\n\tint curr_digit = n % 10;\n\tn /= 10;\n\tbool is_increasing = curr_digit > prev_digit;\n\twhile (n > 0) {\n\t\tprev_digit = curr_digit;\n\t\tcurr_digit = n % 10;\n\t\tn /= 10;\n\t\tif (is_increasing) {\n\t\t\tif (curr_digit > prev_digit) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (curr_digit < prev_digit) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tis_increasing = !is_increasing;\n\t}\n\treturn true;",
    "\tint last_digit = n % 10;\n\tn /= 10;\n\tint next_digit = n % 10;\n\tn /= 10;\n\twhile (n > 0) {\n\t\tif (last_digit != next_digit) {\n\t\t\tlast_digit = next_digit;\n\t\t\tnext_digit = n % 10;\n\t\t\tn /= 10;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
    "    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n) {\n        int digit = n % 10;\n        if (is_increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;",
    "    std::string s = std::to_string(n);\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;",
    "    int prev = n % 10;\n    n /= 10;\n    while (n) {\n        int curr = n % 10;\n        if (prev == curr) return false;\n        prev = curr;\n        n /= 10;\n    }\n    return true;",
    "    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit == last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;",
    "    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit >= prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit <= prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;",
    "    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit == last_digit) {\n            return false;\n        }\n        if (is_increasing) {\n            if (curr_digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = curr_digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    for (int i = 0; i < digits.size() - 2; ++i) {\n        if (digits[i] != digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;",
    "    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;",
    "    if(n<10)\n        return false;\n    long prev_digit = n%10;\n    n/=10;\n    long curr_digit = n%10;\n    n/=10;\n    bool is_increasing = curr_digit>prev_digit;\n    while(n>0) {\n        prev_digit = curr_digit;\n        curr_digit = n%10;\n        n/=10;\n        if(is_increasing) {\n            if(curr_digit>=prev_digit)\n                return false;\n        } else {\n            if(curr_digit<=prev_digit)\n                return false;\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;",
    "    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int current_digit = n % 10;\n        if (current_digit != last_digit) {\n            return false;\n        }\n        last_digit = current_digit;\n        n /= 10;\n    }\n    return true;",
    "    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int next_digit = n % 10;\n        if (next_digit == last_digit) {\n            return false;\n        }\n        last_digit = next_digit;\n        n /= 10;\n    }\n    return true;",
    "    int last_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (increasing) {\n            if (curr_digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < last_digit) {\n                return false;\n            }\n        }\n        increasing = !increasing;\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;",
    "    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (curr == prev) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;"
  ]
}