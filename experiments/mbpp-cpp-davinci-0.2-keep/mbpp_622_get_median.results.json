{
  "name": "mbpp_622_get_median",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n <= 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmp0updt8bl.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp0updt8bl.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmpu_0vlzto.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpu_0vlzto.cpp:15:16: error: \u2018median\u2019 was not declared in this scope\n   15 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmp6js4wx7x.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp6js4wx7x.cpp:13:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmp6js4wx7x.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    float median = 0.0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmpo3txw72b.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpo3txw72b.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) return -1;\n    if(n == 1) return (arr1[0] + arr2[0]) / 2.0;\n    if(n == 2) return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if(m1 == m2) return m1;\n    if(m1 < m2) {\n        if(n % 2 == 0) return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmpk6xawfg0.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpk6xawfg0.cpp:8:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n    8 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpk6xawfg0.cpp:9:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n    9 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510631,
      "stdout": "",
      "stderr": "/tmp/tmpvs3w3tqx.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpvs3w3tqx.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpvs3w3tqx.cpp:16:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   16 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmp4q80h9lq.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp4q80h9lq.cpp:16:16: error: \u2018median\u2019 was not declared in this scope\n   16 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmpml7qo7c6.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpml7qo7c6.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0.0;\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for(long count = 0; count <= n; count++) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        } else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpybhrm4jk: /tmp/tmpybhrm4jk.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510631,
      "stdout": "",
      "stderr": "/tmp/tmpwwer8zfp.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpwwer8zfp.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        } else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpjkds25nj: /tmp/tmpjkds25nj.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n%2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n%2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmpewxrz6e4.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpewxrz6e4.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpewxrz6e4.cpp:16:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   16 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1;\n    long m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "/tmp/tmpor2ox3ul.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpor2ox3ul.cpp:12:16: error: \u2018median\u2019 was not declared in this scope\n   12 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1;\n    long m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1;\n    long m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0.0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "/tmp/tmp6p8tr57u.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp6p8tr57u.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmp6p8tr57u.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "/tmp/tmpbac8q1wj.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpbac8q1wj.cpp:13:16: error: \u2018median\u2019 was not declared in this scope\n   13 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1),\n                          std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1),\n                      std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "/tmp/tmpgli68dcq.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpgli68dcq.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpgli68dcq.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n        }\n        return get_median(arr1 + n / 2, arr2, n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1);\n    }\n    return get_median(arr2 + n / 2, arr1, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123827,
      "stdout": "",
      "stderr": "/tmp/tmpvi06c0zv.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpvi06c0zv.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n/tmp/tmpvi06c0zv.cpp:21:36: error: no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019)\n   21 |             return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                               ~~~~ ^ ~~~~~\n      |                               |        |\n      |                               |        long int\n      |                               std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpvi06c0zv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpvi06c0zv.cpp:21:42: note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018long int\u2019\n   21 |             return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0.0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1.begin() + n / 2 - 1, arr2.begin(), n - n / 2 + 1);\n        }\n        return get_median(arr1.begin() + n / 2, arr2.begin(), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(arr2.begin() + n / 2 - 1, arr1.begin(), n - n / 2 + 1);\n    }\n    return get_median(arr2.begin() + n / 2, arr1.begin(), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "/tmp/tmppgwbtg_5.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmppgwbtg_5.cpp:13:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmppgwbtg_5.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmppgwbtg_5.cpp:20:52: error: could not convert \u2018arr1.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator+((n / 2)).__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator-(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   20 |             return get_median(arr1.begin() + n / 2 - 1, arr2.begin(), n - n / 2 + 1);\n      |                               ~~~~~~~~~~~~~~~~~~~~~^~~\n      |                                                    |\n      |                                                    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmppgwbtg_5.cpp:22:40: error: could not convert \u2018arr1.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator+((n / 2))\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   22 |         return get_median(arr1.begin() + n / 2, arr2.begin(), n - n / 2);\n      |                           ~~~~~~~~~~~~~^~~~~~~\n      |                                        |\n      |                                        __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmppgwbtg_5.cpp:25:48: error: could not convert \u2018arr2.std::vect",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n==1) {\n        return (arr1[0]+arr2[0])/2;\n    }\n    if(n==2) {\n        return (std::max(arr1[0],arr2[0])+std::min(arr1[1],arr2[1]))/2;\n    }\n    float m1 = median(arr1,n);\n    float m2 = median(arr2,n);\n    if(m1==m2) {\n        return m1;\n    }\n    if(m1<m2) {\n        if(n%2==0) {\n            return get_median(std::vector<long>(arr1.begin()+n/2-1,arr1.end()),std::vector<long>(arr2.begin(),arr2.begin()+n/2+1),n-n/2+1);\n        }\n        return get_median(std::vector<long>(arr1.begin()+n/2,arr1.end()),std::vector<long>(arr2.begin(),arr2.begin()+n/2+1),n-n/2);\n    }\n    if(n%2==0) {\n        return get_median(std::vector<long>(arr1.begin(),arr1.begin()+n/2+1),std::vector<long>(arr2.begin()+n/2-1,arr2.end()),n-n/2+1);\n    }\n    return get_median(std::vector<long>(arr1.begin(),arr1.begin()+n/2+1),std::vector<long>(arr2.begin()+n/2,arr2.end()),n-n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "/tmp/tmpdji3cx49.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpdji3cx49.cpp:11:16: error: \u2018median\u2019 was not declared in this scope\n   11 |     float m1 = median(arr1,n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if(n == 1) return (arr1[0] + arr2[0])/2;\n    if(n == 2) return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if(m1 == m2) return m1;\n    if(m1 < m2) {\n        if(n%2 == 0) return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        else return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    else {\n        if(n%2 == 0) return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n        else return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2);\n    }\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "/tmp/tmpwwdddgdo.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpwwdddgdo.cpp:10:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   10 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpwwdddgdo.cpp:11:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   11 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "/tmp/tmpjg_2a49w.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpjg_2a49w.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float median1 = get_median(arr1, n);\n    float median2 = get_median(arr2, n);\n    if (median1 == median2) {\n        return median1;\n    }\n    if (median1 < median2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "/tmp/tmpy0mscpa0.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpy0mscpa0.cpp:13:38: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float median1 = get_median(arr1, n);\n      |                                      ^\n      |                                      |\n      |                                      long int\n/tmp/tmpy0mscpa0.cpp:14:38: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float median2 = get_median(arr2, n);\n      |                                      ^\n      |                                      |\n      |                                      long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1;\n    long m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmpu_0vlzto.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpu_0vlzto.cpp:15:16: error: \u2018median\u2019 was not declared in this scope\n   15 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "/tmp/tmpl49ef7wh.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpl49ef7wh.cpp:14:15: error: \u2018median\u2019 was not declared in this scope\n   14 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n%2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n%2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "/tmp/tmpxcqsr20a.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpxcqsr20a.cpp:11:16: error: \u2018median\u2019 was not declared in this scope\n   11 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    long m1 = -1;\n    long m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n        }\n        return get_median(arr1 + n / 2, arr2, n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1);\n    }\n    return get_median(arr2 + n / 2, arr1, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123827,
      "stdout": "",
      "stderr": "/tmp/tmpvi06c0zv.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpvi06c0zv.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n/tmp/tmpvi06c0zv.cpp:21:36: error: no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019)\n   21 |             return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                               ~~~~ ^ ~~~~~\n      |                               |        |\n      |                               |        long int\n      |                               std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpvi06c0zv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpvi06c0zv.cpp:21:42: note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018long int\u2019\n   21 |             return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        } else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpjkds25nj: /tmp/tmpjkds25nj.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1;\n    long m2 = -1;\n    for(count = 0; count <= n; count++) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmpml7qo7c6.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpml7qo7c6.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "/tmp/tmpn6zsz_2o.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpn6zsz_2o.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "/tmp/tmp00ncocu_.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp00ncocu_.cpp:14:15: error: \u2018median\u2019 was not declared in this scope\n   14 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        } else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpjkds25nj: /tmp/tmpjkds25nj.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i=0, j=0;\n    long m1=-1, m2=-1;\n    for(long count=0; count<=n; count++) {\n        if(i==n) {\n            m1=m2;\n            m2=arr2[0];\n            break;\n        }\n        if(j==n) {\n            m1=m2;\n            m2=arr1[0];\n            break;\n        }\n        if(arr1[i]<arr2[j]) {\n            m1=m2;\n            m2=arr1[i];\n            i++;\n        } else {\n            m1=m2;\n            m2=arr2[j];\n            j++;\n        }\n    }\n    return (m1+m2)/2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i=0, j=0;\n    long m1, m2;\n    for(long c=0; c<=n; c++) {\n        if(i==n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if(j==n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i]<arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1+m2)/2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "/tmp/tmpjg_2a49w.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpjg_2a49w.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n <= 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmp0updt8bl.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp0updt8bl.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1;\n    long m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123819,
      "stdout": "",
      "stderr": "/tmp/tmpay2pa2tf.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpay2pa2tf.cpp:12:15: error: \u2018median\u2019 was not declared in this scope\n   12 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, arr2, n / 2);\n    float m2 = get_median(arr1 + n / 2, arr2 + n / 2, n - n / 2);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n        }\n        return get_median(arr1 + n / 2, arr2, n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1);\n    }\n    return get_median(arr2 + n / 2, arr1, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123833,
      "stdout": "",
      "stderr": "/tmp/tmpu2g3r_ox.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpu2g3r_ox.cpp:15:32: error: no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019)\n   15 |     float m2 = get_median(arr1 + n / 2, arr2 + n / 2, n - n / 2);\n      |                           ~~~~ ^ ~~~~~\n      |                           |        |\n      |                           |        long int\n      |                           std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpu2g3r_ox.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpu2g3r_ox.cpp:15:38: note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018long int\u2019\n   15 |     float m2 = get_median(arr1 + n / 2, arr2 + n / 2, n - n / 2);\n      |                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylak",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while (count <= n) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123819,
      "stdout": "",
      "stderr": "/tmp/tmp8dx06opw.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp8dx06opw.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmp6js4wx7x.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp6js4wx7x.cpp:13:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmp6js4wx7x.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0.0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123819,
      "stdout": "",
      "stderr": "/tmp/tmpgom05pq5.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpgom05pq5.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpgom05pq5.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n        }\n        return get_median(arr1 + n / 2, arr2, n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1);\n    }\n    return get_median(arr2 + n / 2, arr1, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123829,
      "stdout": "",
      "stderr": "/tmp/tmpov3m_49u.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpov3m_49u.cpp:14:15: error: \u2018median\u2019 was not declared in this scope\n   14 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n/tmp/tmpov3m_49u.cpp:21:36: error: no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019)\n   21 |             return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                               ~~~~ ^ ~~~~~\n      |                               |        |\n      |                               |        long int\n      |                               std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpov3m_49u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpov3m_49u.cpp:21:42: note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018long int\u2019\n   21 |             return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1;\n    long m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for(long count = 0; count <= n; count++) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while (count < n) {\n        if (arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        } else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "tmp_wqo4yyt: /tmp/tmp_wqo4yyt.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float median1 = get_median(arr1, n);\n    float median2 = get_median(arr2, n);\n    if (median1 == median2) {\n        return median1;\n    }\n    if (median1 < median2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123819,
      "stdout": "",
      "stderr": "/tmp/tmpeo2tshqo.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpeo2tshqo.cpp:16:38: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   16 |     float median1 = get_median(arr1, n);\n      |                                      ^\n      |                                      |\n      |                                      long int\n/tmp/tmpeo2tshqo.cpp:17:38: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   17 |     float median2 = get_median(arr2, n);\n      |                                      ^\n      |                                      |\n      |                                      long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float median1 = get_median(arr1, n);\n    float median2 = get_median(arr2, n);\n    if(median1 == median2) {\n        return median1;\n    }\n    if(median1 < median2) {\n        if(n % 2 == 0) {\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n        }\n        return get_median(arr1 + n / 2, arr2, n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1);\n    }\n    return get_median(arr2 + n / 2, arr1, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123829,
      "stdout": "",
      "stderr": "/tmp/tmpdythh7qy.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpdythh7qy.cpp:14:38: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float median1 = get_median(arr1, n);\n      |                                      ^\n      |                                      |\n      |                                      long int\n/tmp/tmpdythh7qy.cpp:15:38: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float median2 = get_median(arr2, n);\n      |                                      ^\n      |                                      |\n      |                                      long int\n/tmp/tmpdythh7qy.cpp:21:36: error: no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019)\n   21 |             return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                               ~~~~ ^ ~~~~~\n      |                               |        |\n      |                               |        long int\n      |                               std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpdythh7qy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterat",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        }\n        else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "tmp7z7o552a: /tmp/tmp7z7o552a.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "/tmp/tmpjg_2a49w.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpjg_2a49w.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n        }\n        return get_median(arr1 + n / 2, arr2, n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1);\n    }\n    return get_median(arr2 + n / 2, arr1, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123829,
      "stdout": "",
      "stderr": "/tmp/tmpjtr3wsak.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpjtr3wsak.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpjtr3wsak.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpjtr3wsak.cpp:21:36: error: no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019)\n   21 |             return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                               ~~~~ ^ ~~~~~\n      |                               |        |\n      |                               |        long int\n      |                               std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpjtr3wsak.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument de",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    for(count = 0; count <= n; count++) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "/tmp/tmp34jargp8.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp34jargp8.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "/tmp/tmp8s2elhlo.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp8s2elhlo.cpp:17:16: error: \u2018median\u2019 was not declared in this scope\n   17 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        } else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpybhrm4jk: /tmp/tmpybhrm4jk.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmpo3txw72b.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpo3txw72b.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        } else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpjkds25nj: /tmp/tmpjkds25nj.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n==0) return -1;\n    if(n==1) return (arr1[0]+arr2[0])/2;\n    if(n==2) return (std::max(arr1[0],arr2[0])+std::min(arr1[1],arr2[1]))/2;\n    int m1 = arr1[n/2];\n    int m2 = arr2[n/2];\n    if(m1==m2) return m1;\n    if(m1<m2) {\n        if(n%2==0) return get_median(arr1.begin()+n/2-1,arr2.begin(),n-n/2+1);\n        else return get_median(arr1.begin()+n/2,arr2.begin(),n-n/2);\n    }\n    else {\n        if(n%2==0) return get_median(arr1.begin(),arr2.begin()+n/2-1,n-n/2+1);\n        else return get_median(arr1.begin(),arr2.begin()+n/2,n-n/2);\n    }\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "/tmp/tmpgjjmdpns.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpgjjmdpns.cpp:12:54: error: could not convert \u2018arr1.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator+((n / 2)).__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator-(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   12 |         if(n%2==0) return get_median(arr1.begin()+n/2-1,arr2.begin(),n-n/2+1);\n      |                                      ~~~~~~~~~~~~~~~~^~\n      |                                                      |\n      |                                                      __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmpgjjmdpns.cpp:13:44: error: could not convert \u2018arr1.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator+((n / 2))\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   13 |         else return get_median(arr1.begin()+n/2,arr2.begin(),n-n/2);\n      |                                ~~~~~~~~~~~~^~~~\n      |                                            |\n      |                                            __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmpgjjmdpns.cpp:16:48: error: could not convert \u2018arr1.std::vector<long int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018std::vector<long int>\u2019\n   16 |         if(n%2==0) return get_median(arr1.begin(),arr2.begin()+n/2-1,n-n/2+1);\n      |                                      ~~~~~~~~~~^~\n      |                                                |\n      |                                                std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >}\n/tmp/tmpgjjmdpns.cpp:17:42: error: could n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "/tmp/tmpx7t1wl2_.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpx7t1wl2_.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "/tmp/tmpt_5rob1g.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpt_5rob1g.cpp:14:15: error: \u2018median\u2019 was not declared in this scope\n   14 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "/tmp/tmpt_5rob1g.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpt_5rob1g.cpp:14:15: error: \u2018median\u2019 was not declared in this scope\n   14 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "/tmp/tmpua_pzi0u.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpua_pzi0u.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpua_pzi0u.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    long m1 = -1;\n    long m2 = -1;\n    while (count <= n) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        } else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpjkds25nj: /tmp/tmpjkds25nj.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    long m1 = -1;\n    long m2 = -1;\n    while (count < n + 1) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) return -1;\n    if (n == 1) return (arr1[0] + arr2[0]) / 2.0;\n    if (n == 2) return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    float median1 = get_median(arr1, n);\n    float median2 = get_median(arr2, n);\n    if (median1 == median2) return median1;\n    if (median1 < median2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "/tmp/tmpqbmgpedw.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpqbmgpedw.cpp:8:38: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n    8 |     float median1 = get_median(arr1, n);\n      |                                      ^\n      |                                      |\n      |                                      long int\n/tmp/tmpqbmgpedw.cpp:9:38: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n    9 |     float median2 = get_median(arr2, n);\n      |                                      ^\n      |                                      |\n      |                                      long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmpu_0vlzto.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpu_0vlzto.cpp:15:16: error: \u2018median\u2019 was not declared in this scope\n   15 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "/tmp/tmpqyn4xdtd.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpqyn4xdtd.cpp:14:15: error: \u2018median\u2019 was not declared in this scope\n   14 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for(long count = 0; count <= n; count++) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(n > 0);\n    assert(n <= arr1.size());\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0)\n        return -1;\n    if(n == 1)\n        return (arr1[0] + arr2[0])/2;\n    if(n == 2)\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2)\n        return m1;\n    if(m1 < m2) {\n        if(n % 2 == 0)\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        else\n            return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    else {\n        if(n % 2 == 0)\n            return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n        else\n            return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2);\n    }\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "/tmp/tmpldzyf3ml.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpldzyf3ml.cpp:11:16: error: \u2018median\u2019 was not declared in this scope\n   11 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, arr2, n / 2);\n    float m2 = get_median(arr1 + n / 2, arr2 + n / 2, n - n / 2);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n        }\n        return get_median(arr1 + n / 2, arr2, n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(arr1, arr2 + n / 2 - 1, n - n / 2 + 1);\n    }\n    return get_median(arr1, arr2 + n / 2, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "/tmp/tmpngj4x9y0.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpngj4x9y0.cpp:14:32: error: no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019)\n   14 |     float m2 = get_median(arr1 + n / 2, arr2 + n / 2, n - n / 2);\n      |                           ~~~~ ^ ~~~~~\n      |                           |        |\n      |                           |        long int\n      |                           std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpngj4x9y0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpngj4x9y0.cpp:14:38: note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018long int\u2019\n   14 |     float m2 = get_median(arr1 + n / 2, arr2 + n / 2, n - n / 2);\n      |                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylak",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "/tmp/tmpplrxwgyz.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpplrxwgyz.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "/tmp/tmpuh8z9f49.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpuh8z9f49.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpuh8z9f49.cpp:16:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   16 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for(long count = 0; count <= n; count++) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "/tmp/tmpzsuterla.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpzsuterla.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpzsuterla.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "/tmp/tmpo6c0jjyq.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpo6c0jjyq.cpp:12:16: error: \u2018median\u2019 was not declared in this scope\n   12 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmpfvsoml7h.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpfvsoml7h.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmp6js4wx7x.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp6js4wx7x.cpp:13:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmp6js4wx7x.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n\tlong i = 0, j = 0;\n\tlong m1 = -1, m2 = -1;\n\tfor(long count = 0; count <= n; count++) {\n\t\tif(i == n) {\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if(j == n) {\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\tif(arr1[i] < arr2[j]) {\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        }\n        else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "tmp7z7o552a: /tmp/tmp7z7o552a.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmprco_t3_6.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmprco_t3_6.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmp6js4wx7x.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp6js4wx7x.cpp:13:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmp6js4wx7x.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmp69w25ujb.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp69w25ujb.cpp:17:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   17 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmp69w25ujb.cpp:18:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   18 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "/tmp/tmpk_o1nkx1.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpk_o1nkx1.cpp:11:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   11 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpk_o1nkx1.cpp:12:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   12 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmp6js4wx7x.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp6js4wx7x.cpp:13:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmp6js4wx7x.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "/tmp/tmpesgidij1.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpesgidij1.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(arr1.begin() + n / 2 - 1, arr2.begin(), n - n / 2 + 1);\n        }\n        return get_median(arr1.begin() + n / 2, arr2.begin(), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(arr1.begin(), arr2.begin() + n / 2 - 1, n - n / 2 + 1);\n    }\n    return get_median(arr1.begin(), arr2.begin() + n / 2, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "/tmp/tmplvb25w44.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmplvb25w44.cpp:12:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   12 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmplvb25w44.cpp:13:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmplvb25w44.cpp:19:52: error: could not convert \u2018arr1.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator+((n / 2)).__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator-(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   19 |             return get_median(arr1.begin() + n / 2 - 1, arr2.begin(), n - n / 2 + 1);\n      |                               ~~~~~~~~~~~~~~~~~~~~~^~~\n      |                                                    |\n      |                                                    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmplvb25w44.cpp:21:40: error: could not convert \u2018arr1.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator+((n / 2))\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   21 |         return get_median(arr1.begin() + n / 2, arr2.begin(), n - n / 2);\n      |                           ~~~~~~~~~~~~~^~~~~~~\n      |                                        |\n      |                                        __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmplvb25w44.cpp:24:37: error: could not convert \u2018arr1.std::vect",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for(long count = 0; count <= n; count++) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n  if (n <= 0) {\n    return -1;\n  }\n  if (n == 1) {\n    return (arr1[0] + arr2[0]) / 2;\n  }\n  if (n == 2) {\n    return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n  }\n  float m1 = median(arr1, n);\n  float m2 = median(arr2, n);\n  if (m1 == m2) {\n    return m1;\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                        std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                        n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                      std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                      n - n / 2);\n  }\n  if (n % 2 == 0) {\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                      n - n / 2 + 1);\n  }\n  return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                    std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                    n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "/tmp/tmptdaewak3.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmptdaewak3.cpp:14:14: error: \u2018median\u2019 was not declared in this scope\n   14 |   float m1 = median(arr1, n);\n      |              ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "tmpy87yzuzd: /tmp/tmpy87yzuzd.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n <= 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "/tmp/tmp6hmua0c0.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp6hmua0c0.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1;\n    long m2 = -1;\n    for(count = 0; count <= n; count++) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1;\n    long m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) return -1;\n    if(n == 1) return (arr1[0] + arr2[0])/2;\n    if(n == 2) return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) return m1;\n    if(m1 < m2) {\n        if(n%2 == 0) return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n%2 == 0) return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "/tmp/tmpua717xbu.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpua717xbu.cpp:8:16: error: \u2018median\u2019 was not declared in this scope\n    8 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1;\n    long m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 1) return (arr1[0] + arr2[0])/2;\n    if(n == 2) return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if(m1 == m2) return m1;\n    if(m1 < m2) {\n        if(n%2 == 0) return get_median(arr1.begin() + n/2 - 1, arr2.begin(), n - n/2 + 1);\n        return get_median(arr1.begin() + n/2, arr2.begin(), n - n/2);\n    }\n    if(n%2 == 0) return get_median(arr1.begin(), arr2.begin() + n/2 - 1, n - n/2 + 1);\n    return get_median(arr1.begin(), arr2.begin() + n/2, n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "/tmp/tmplw94rbs8.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmplw94rbs8.cpp:7:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n    7 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmplw94rbs8.cpp:8:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n    8 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmplw94rbs8.cpp:11:59: error: could not convert \u2018arr1.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator+((n / 2)).__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator-(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   11 |         if(n%2 == 0) return get_median(arr1.begin() + n/2 - 1, arr2.begin(), n - n/2 + 1);\n      |                                        ~~~~~~~~~~~~~~~~~~~^~~\n      |                                                           |\n      |                                                           __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmplw94rbs8.cpp:12:40: error: could not convert \u2018arr1.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator+((n / 2))\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   12 |         return get_median(arr1.begin() + n/2, arr2.begin(), n - n/2);\n      |                           ~~~~~~~~~~~~~^~~~~\n      |                                        |\n      |                                        __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmplw94rbs8.cpp:14:46: error: could not convert",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "/tmp/tmpvpgj6e3j.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpvpgj6e3j.cpp:12:16: error: \u2018median\u2019 was not declared in this scope\n   12 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "/tmp/tmph4z61_f9.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmph4z61_f9.cpp:15:16: error: \u2018median\u2019 was not declared in this scope\n   15 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while (count <= n) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "/tmp/tmpbilb7m32.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpbilb7m32.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n==0) {\n        return -1;\n    }\n    if(n==1) {\n        return (arr1[0]+arr2[0])/2;\n    }\n    if(n==2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n    if(m1==m2) {\n        return m1;\n    }\n    if(m1<m2) {\n        if(n%2==0) {\n            return get_median(std::vector<long>(arr1.begin()+n/2-1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin()+n/2+1), n-n/2+1);\n        }\n        return get_median(std::vector<long>(arr1.begin()+n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin()+n/2+1), n-n/2);\n    }\n    if(n%2==0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin()+n/2+1), std::vector<long>(arr2.begin()+n/2-1, arr2.end()), n-n/2+1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin()+n/2+1), std::vector<long>(arr2.begin()+n/2, arr2.end()), n-n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "/tmp/tmpv0di29z6.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpv0di29z6.cpp:14:15: error: \u2018median\u2019 was not declared in this scope\n   14 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "/tmp/tmp6js4wx7x.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp6js4wx7x.cpp:13:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmp6js4wx7x.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for(long count = 0; count <= n; count++) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    long m1 = arr1[n / 2];\n    long m2 = arr2[n / 2];\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        std::vector<long> new_arr1(arr1.begin() + n / 2, arr1.end());\n        std::vector<long> new_arr2(arr2.begin(), arr2.begin() + n / 2 + 1);\n        return get_median(new_arr1, new_arr2, n - n / 2);\n    }\n    std::vector<long> new_arr1(arr1.begin(), arr1.begin() + n / 2 + 1);\n    std::vector<long> new_arr2(arr2.begin() + n / 2, arr2.end());\n    return get_median(new_arr1, new_arr2, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123825,
      "stdout": "",
      "stderr": "tmpd__8d04h: /tmp/tmpd__8d04h.cpp:5: float get_median(std::vector<long int>, std::vector<long int>, long int): Assertion `arr1.size() == arr2.size()' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n        }\n        return get_median(arr1 + n / 2, arr2, n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1);\n    }\n    return get_median(arr2 + n / 2, arr1, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123827,
      "stdout": "",
      "stderr": "/tmp/tmpvi06c0zv.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpvi06c0zv.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n/tmp/tmpvi06c0zv.cpp:21:36: error: no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019)\n   21 |             return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                               ~~~~ ^ ~~~~~\n      |                               |        |\n      |                               |        long int\n      |                               std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpvi06c0zv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpvi06c0zv.cpp:21:42: note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018long int\u2019\n   21 |             return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "/tmp/tmpn6zsz_2o.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpn6zsz_2o.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1;\n    long m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    long m1 = -1;\n    long m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123825,
      "stdout": "",
      "stderr": "/tmp/tmpf2009bpk.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpf2009bpk.cpp:11:16: error: \u2018median\u2019 was not declared in this scope\n   11 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr2.begin() + n / 2, arr2.end()), std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123825,
      "stdout": "",
      "stderr": "/tmp/tmpqfcpy6wm.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpqfcpy6wm.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n  long i = 0, j = 0;\n  long m1 = -1, m2 = -1;\n  for (long count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n  return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n%2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n%2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123825,
      "stdout": "",
      "stderr": "/tmp/tmps5cmq_pj.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmps5cmq_pj.cpp:13:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmps5cmq_pj.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123825,
      "stdout": "",
      "stderr": "/tmp/tmp7vb32sty.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp7vb32sty.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmp7vb32sty.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n  if (n <= 0) {\n    return -1;\n  }\n  if (n == 1) {\n    return (arr1[0] + arr2[0]) / 2.0;\n  }\n  if (n == 2) {\n    return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n  }\n  float m1 = median(arr1, n);\n  float m2 = median(arr2, n);\n  if (m1 == m2) {\n    return m1;\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                        std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                        n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                      std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                      n - n / 2);\n  }\n  if (n % 2 == 0) {\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                      n - n / 2 + 1);\n  }\n  return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                    std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                    n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123825,
      "stdout": "",
      "stderr": "/tmp/tmp_mwj05l8.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp_mwj05l8.cpp:14:14: error: \u2018median\u2019 was not declared in this scope\n   14 |   float m1 = median(arr1, n);\n      |              ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1;\n    long m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}