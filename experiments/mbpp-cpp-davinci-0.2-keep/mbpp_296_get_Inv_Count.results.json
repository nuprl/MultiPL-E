{
  "name": "mbpp_296_get_Inv_Count",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long n = arr.size();\n    long inv_count = 0;\n    for (long i = 0; i < n - 1; i++)\n        for (long j = i + 1; j < n; j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i+1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n \n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long n = arr.size();\n    long inv_count = 0;\n    for (long i = 0; i < n - 1; i++)\n        for (long j = i + 1; j < n; j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        for (long j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = i+1; j < arr.size(); j++) {\n            if(arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n \n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        for (long j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n \n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = i + 1; j < arr.size(); j++) {\n            if(arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    // Write your code here\n    long count = 0;\n    for(long i=0; i<arr.size(); i++) {\n        for(long j=i+1; j<arr.size(); j++) {\n            if(arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        for(long j = i+1; j < arr.size(); j++) {\n            if(arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n \n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = i+1; j < arr.size(); j++) {\n            if(arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    long n = arr.size();\n    for (long i = 0; i < n - 1; i++)\n        for (long j = i + 1; j < n; j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        for (long j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n \n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        for(long j = i+1; j < arr.size(); j++) {\n            if(arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        for(long j = i+1; j < arr.size(); j++) {\n            if(arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = i+1; j < arr.size(); j++) {\n            if(arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (long i = 0; i < arr.size() - 1; i++) {\n        for (long j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n\tlong inv_count = 0;\n\tfor (int i = 0; i < arr.size() - 1; i++)\n\t\tfor (int j = i + 1; j < arr.size(); j++)\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\n\treturn inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n\tlong inv_count = 0;\n\tfor (int i = 0; i < arr.size() - 1; i++)\n\t\tfor (int j = i + 1; j < arr.size(); j++)\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\n\treturn inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        for (long j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        for(long j = i + 1; j < arr.size(); j++) {\n            if(arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = i + 1; j < arr.size(); j++) {\n            if(arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n \n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        for (long j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for (long i = 0; i < arr.size() - 1; i++) {\n        for (long j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i+1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = i + 1; j < arr.size(); j++) {\n            if(arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (long i = 0; i < arr.size() - 1; i++)\n        for (long j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count inversions in an array.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n    for (int i = 0; i < arr.size() - 1; i++)\n        for (int j = i + 1; j < arr.size(); j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n",
      "timestamp": 1665510603,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}