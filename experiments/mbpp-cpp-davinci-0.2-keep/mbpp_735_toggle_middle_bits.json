{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    return ((n & 0xFFFFFFFFFFFFFFFC) ^ 0xAAAAAAAAAAAAAAA8);",
    "    long mask = 0xFFFFFFFFFFFFFFF8;\n    return (n ^ mask);",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    // Write your code here\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    long mask1 = 0x8000000000000000;\n    long mask2 = 0x0000000000000001;\n    long mask3 = 0x7FFFFFFFFFFFFFFE;\n    long mask4 = 0x0000000000000002;\n    long mask5 = 0xFFFFFFFFFFFFFFFC;\n    long mask6 = 0x0000000000000003;\n    long mask7 = 0xFFFFFFFFFFFFFFFE;\n    long mask8 = 0x0000000000000002;\n    long mask9 = 0xFFFFFFFFFFFFFFFC;\n    long mask10 = 0x0000000000000003;\n    long mask11 = 0xFFFFFFFFFFFFFFFE;\n    long mask12 = 0x0000000000000002;\n    long mask13 = 0xFFFFFFFFFFFFFFFC;\n    long mask14 = 0x0000000000000003;\n    long mask15 = 0xFFFFFFFFFFFFFFFE;\n    long mask16 = 0x0000000000000002;\n    long mask17 = 0xFFFFFFFFFFFFFFFC;\n    long mask18 = 0x0000000000000003;\n    long mask19 = 0xFFFFFFFFFFFFFFFE;\n    long mask20 = 0x0000000000000002;\n    long mask21 = 0xFFFFFFFFFFFFFFFC;\n    long mask22 = 0x0000000000000003;\n    long mask23 = 0xFFFFFFFFFFFFFFFE;\n    long mask24 = 0x0000000000000002;\n    long mask25 = 0xFFFFFFFFFFFFFFFC;\n    long mask26 = 0x0000000000000003;\n    long mask27 = 0xFFFFFFFFFFFFFFFE;\n    long mask28 = 0x0000000000000002;\n    long mask29 = 0xFFFFFFFFFFFFFFFC;\n    long mask30 = 0x0000000000000003;\n    long mask31 = 0xFFFFFFFFFFFFFFFE;\n    long mask32 = 0x0000000000000002;\n    long mask33 = 0xFFFFFFFFFFFFFFFC;\n    long mask34 = 0x0000000000000003;\n    long mask35 = 0xFFFFFFFFFFFFFFFE;\n    long mask36 = 0x0000000000000002;\n    long mask37 = 0xFFFFFFFFFFFFFFFC;\n    long mask38 = 0x000000000000000",
    "    int i;\n    long result = n;\n    for (i = 1; i < sizeof(n) * 8 - 1; i++) {\n        result ^= (1 << i);\n    }\n    return result;",
    "    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long A = 1;\n    long B = 1;\n    long C = 1;\n    long D = 1;\n    long E = 1;\n    long F = 1;\n    long G = 1;\n    long H = 1;\n    long I = 1;\n    long J = 1;\n    long K = 1;\n    long L = 1;\n    long M = 1;\n    long N = 1;\n    long O = 1;\n    long P = 1;\n    long Q = 1;\n    long R = 1;\n    long S = 1;\n    long T = 1;\n    long U = 1;\n    long V = 1;\n    long W = 1;\n    long X = 1;\n    long Y = 1;\n    long Z = 1;\n    long aa = 1;\n    long ab = 1;\n    long ac = 1;\n    long ad = 1;\n    long ae = 1;\n    long af = 1;\n    long ag = 1;\n    long ah = 1;\n    long ai = 1;\n    long aj = 1;\n    long ak = 1;\n    long al = 1;\n    long am = 1;\n    long an = 1;\n    long ao = 1;\n    long ap = 1;\n    long aq = 1;\n    long ar = 1;\n    long as = 1;\n    long at = 1;\n    long au = 1;\n   ",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= 1 << i;\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    long mask2 = 0x8000000000000000;\n    long mask3 = 0x0000000000000001;\n    long mask4 = 0xFFFFFFFFFFFFFFFE;\n    long mask5 = 0x7FFFFFFFFFFFFFFE;\n    long mask6 = 0x8000000000000001;\n    long mask7 = 0x0000000000000002;\n    long mask8 = 0xFFFFFFFFFFFFFFFC;\n    long mask9 = 0x7FFFFFFFFFFFFFFC;\n    long mask10 = 0x8000000000000003;\n    long mask11 = 0x0000000000000004;\n    long mask12 = 0xFFFFFFFFFFFFFFF8;\n    long mask13 = 0x7FFFFFFFFFFFFFF8;\n    long mask14 = 0x8000000000000007;\n    long mask15 = 0x0000000000000008;\n    long mask16 = 0xFFFFFFFFFFFFFFF0;\n    long mask17 = 0x7FFFFFFFFFFFFFF0;\n    long mask18 = 0x800000000000000F;\n    long mask19 = 0x0000000000000010;\n    long mask20 = 0xFFFFFFFFFFFFFFE0;\n    long mask21 = 0x7FFFFFFFFFFFFFE0;\n    long mask22 = 0x800000000000001F;\n    long mask23 = 0x0000000000000020;\n    long mask24 = 0xFFFFFFFFFFFFFFC0;\n    long mask25 = 0x7FFFFFFFFFFFFFC0;\n    long mask26 = 0x800000000000003F;\n    long mask27 = 0x0000000000000040;\n    long mask28 = 0xFFFFFFFFFFFFFF80;\n    long mask29 = 0x7FFFFFFFFFFFFF80;\n    long mask30 = 0x800000000000007F;\n    long mask31 = 0x0000000000000080;\n    long mask32 = 0xFFFFFFFFFFFFFF00;\n    long mask33 = 0x7FFFFFFFFFFFFF00;\n    long mask34 = 0x80000000000000FF;\n    long mask35 = 0x0000000000000100;\n    long mask36 = 0xFFFFFFFFFFFFFE00;\n    long mask37 = 0x7FFFFFFFFFFFFE00;\n    long mask38 =",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return first_bit | (mask ^ n) | last_bit;",
    "    // Write your code here\n    long first_bit = n & 1;\n    long last_bit = n & (1 << 31);\n    long mask = 0;\n    for (int i = 1; i < 31; i++) {\n        mask |= (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    long result = first_bit | middle_bits | last_bit;\n    return result;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 1)) - 1;\n    mask = mask ^ (1 << 0);\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return (first_bit | middle_bits | last_bit);",
    "    // Write your code here\n    long mask = 0xffffffffffffffff;\n    mask = mask ^ (1 << 0);\n    mask = mask ^ (1 << 63);\n    return n ^ mask;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long x = 1;\n    long y = n;\n    while(x < y) {\n        n = n ^ (x | y);\n        x = x << 1;\n        y = y >> 1;\n    }\n    return n;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 1)) - 1;\n    mask = mask ^ (1 << 0);\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return first_bit | middle_bits | last_bit;",
    "    long x = 0x2;\n    long y = 0x4000000000000000;\n    long z = 0x4000000000000001;\n    long result = 0;\n    while (x < y) {\n        if ((n & x) == 0) {\n            result = result | x;\n        }\n        x = x << 1;\n    }\n    return (n & z) | result;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    long mask2 = 0x8000000000000000;\n    long mask3 = 0x0000000000000001;\n    long mask4 = 0x7FFFFFFFFFFFFFFE;\n    long mask5 = 0x7FFFFFFFFFFFFFFD;\n    long mask6 = 0x0000000000000002;\n    long mask7 = 0xFFFFFFFFFFFFFFFC;\n    long mask8 = 0xFFFFFFFFFFFFFFFB;\n    long mask9 = 0x0000000000000004;\n    long mask10 = 0xFFFFFFFFFFFFFFF8;\n    long mask11 = 0xFFFFFFFFFFFFFFF7;\n    long mask12 = 0x0000000000000008;\n    long mask13 = 0xFFFFFFFFFFFFFFF0;\n    long mask14 = 0xFFFFFFFFFFFFFFEF;\n    long mask15 = 0x0000000000000010;\n    long mask16 = 0xFFFFFFFFFFFFFFE0;\n    long mask17 = 0xFFFFFFFFFFFFFFDF;\n    long mask18 = 0x0000000000000020;\n    long mask19 = 0xFFFFFFFFFFFFFFC0;\n    long mask20 = 0xFFFFFFFFFFFFFFBF;\n    long mask21 = 0x0000000000000040;\n    long mask22 = 0xFFFFFFFFFFFFFF80;\n    long mask23 = 0xFFFFFFFFFFFFFF7F;\n    long mask24 = 0x0000000000000080;\n    long mask25 = 0xFFFFFFFFFFFFFF00;\n    long mask26 = 0xFFFFFFFFFFFFFEFF;\n    long mask27 = 0x0000000000000100;\n    long mask28 = 0xFFFFFFFFFFFFFE00;\n    long mask29 = 0xFFFFFFFFFFFFFDFF;\n    long mask30 = 0x0000000000000200;\n    long mask31 = 0xFFFFFFFFFFFFFC00;\n    long mask32 = 0xFFFFFFFFFFFFFBFF;\n    long mask33 = 0x0000000000000400;\n    long mask34 = 0xFFFFFFFFFFFFF800;\n    long mask35 = 0xFFFFFFFFFFFFF7FF;\n    long mask36 = 0x0000000000000800;\n    long mask37 = 0xFFFFFFFFFFFFF000;\n    long mask38 = 0xFFFFFFFFFFFF",
    "    long mask = 0x7;\n    long res = 0;\n    for (int i = 0; i < sizeof(long)*8; i++) {\n        if (i == 0 || i == sizeof(long)*8-1) {\n            res = (res << 1) | ((n >> i) & 1);\n        } else {\n            res = (res << 1) | ((n >> i) & 1) ^ 1;\n        }\n    }\n    return res;",
    "    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 1)) | (last_bit >> (sizeof(long) * 8 - 1));",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = ~((1 << (sizeof(long) * 8 - 1)) | 1);\n    long middle_bits = n & mask;\n    return first_bit | middle_bits << 1 | last_bit >> 1;",
    "    // Write your code here\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (int)(log2(n)));\n    n = n & ~(1 << (int)(log2(n)));\n    n = n & ~1;\n    n = n ^ (n >> 1);\n    n = n | first_bit;\n    n = n | last_bit;\n    return n;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (8 * sizeof(long) - 1));\n    long mask = (1 << (8 * sizeof(long) - 1)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return first_bit | middle_bits | last_bit;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 1)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return first_bit | middle_bits | last_bit;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    int i = 1;\n    int j = 0;\n    long result = 0;\n    while (n > 0) {\n        if (i != 1 && i != 64) {\n            result = result | (n & 1);\n            result = result << 1;\n        }\n        n = n >> 1;\n        i++;\n    }\n    return result;",
    "\tlong mask = 0x7ffffffffffffffe;\n\treturn n ^ mask;",
    "    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= 1 << i;\n    }\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 1)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 1)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    middle_bits = middle_bits & mask;\n    return first_bit | middle_bits | last_bit;",
    "    // assert(n >= 0);\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 1)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return first_bit | middle_bits | last_bit;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return (first_bit | middle_bits | last_bit);",
    "    long mask = 0xffffffffffffffff;\n    mask = mask ^ (1 << 0);\n    mask = mask ^ (1 << 63);\n    return n ^ mask;",
    "    // Write your code here\n    long mask = 0xffffffffffffffff;\n    long mask1 = 0xfffffffffffffffe;\n    long mask2 = 0x7fffffffffffffff;\n    long mask3 = 0x8000000000000000;\n    long mask4 = 0x8000000000000001;\n    long mask5 = 0x7ffffffffffffffe;\n    long mask6 = 0xfffffffffffffffe;\n    long mask7 = 0xfffffffffffffffd;\n    long mask8 = 0xfffffffffffffffc;\n    long mask9 = 0xfffffffffffffffb;\n    long mask10 = 0xfffffffffffffffa;\n    long mask11 = 0xfffffffffffffff9;\n    long mask12 = 0xfffffffffffffff8;\n    long mask13 = 0xfffffffffffffff7;\n    long mask14 = 0xfffffffffffffff6;\n    long mask15 = 0xfffffffffffffff5;\n    long mask16 = 0xfffffffffffffff4;\n    long mask17 = 0xfffffffffffffff3;\n    long mask18 = 0xfffffffffffffff2;\n    long mask19 = 0xfffffffffffffff1;\n    long mask20 = 0xfffffffffffffff0;\n    long mask21 = 0xffffffffffffffef;\n    long mask22 = 0xffffffffffffffee;\n    long mask23 = 0xffffffffffffffed;\n    long mask24 = 0xffffffffffffffec;\n    long mask25 = 0xffffffffffffffeb;\n    long mask26 = 0xffffffffffffffea;\n    long mask27 = 0xffffffffffffffe9;\n    long mask28 = 0xffffffffffffffe8;\n    long mask29 = 0xffffffffffffffe7;\n    long mask30 = 0xffffffffffffffe6;\n    long mask31 = 0xffffffffffffffe5;\n    long mask32 = 0xffffffffffffffe4;\n    long mask33 = 0xffffffffffffffe3;\n    long mask34 = 0xffffffffffffffe2;\n    long mask35 = 0xffffffffffffffe1;\n    long mask36 = 0",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    int first = n & 1;\n    int last = n & (1 << (sizeof(n) * 8 - 1));\n    n = n >> 1;\n    n = n << 1;\n    n = n ^ ~(~0 << (sizeof(n) * 8 - 2));\n    n = n >> 1;\n    n = n << 1;\n    n = n | first;\n    n = n | last;\n    return n;",
    "    // Write your code here\n    long mask = 0xffffffffffffffff;\n    mask = mask & ~(1 << 63);\n    mask = mask & ~(1 << 0);\n    return n ^ mask;",
    "    // Write your code here\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    mask = mask >> 1;\n    mask = mask << 1;\n    mask = mask | 0x0000000000000001;\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;",
    "    long mask = 0xFFFFFFFFFFFFFFFC;\n    return (n ^ mask);",
    "    // Write your code here\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long w = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w1 = 1;\n    long x1 = 1;\n    long y1 = 1;\n    long z1 = 1;\n    long a1 = 1;\n    long b1 = 1;\n    long c1 = 1;\n    long d1 = 1;\n    long e1 = 1;\n    long f1 = 1;\n    long g1 = 1;\n    long h1 = 1;\n    long i1 = 1;\n    long j1 = 1;\n    long k1 = 1;\n    long l1 = 1;\n    long m1 = 1;\n    long o1 = 1;\n    long p1 = 1;\n    long q1 = 1;\n    long r1 = 1;\n    long s1 = 1;\n    long t1 = 1;\n    long u1 = 1;\n    long v1 = 1;\n    long w2 = 1;\n    long x2 = 1;\n    long y2 = 1;\n    long z2 = 1;\n    long a2 = 1;\n    long b2 = 1;\n    long c2 = 1;\n    long d2 = 1;\n    long e2 = 1;\n    long f2 = 1;\n    long g2 = 1;\n    long h2 = 1;\n    long i2 = 1;\n    long j2 = 1;\n    long k2 = 1;\n    long l2 = 1;\n   ",
    "    // Write your code here\n    long long int a=1;\n    long long int b=1;\n    long long int c=1;\n    long long int d=1;\n    long long int e=1;\n    long long int f=1;\n    long long int g=1;\n    long long int h=1;\n    long long int i=1;\n    long long int j=1;\n    long long int k=1;\n    long long int l=1;\n    long long int m=1;\n    long long int o=1;\n    long long int p=1;\n    long long int q=1;\n    long long int r=1;\n    long long int s=1;\n    long long int t=1;\n    long long int u=1;\n    long long int v=1;\n    long long int w=1;\n    long long int x=1;\n    long long int y=1;\n    long long int z=1;\n    long long int A=1;\n    long long int B=1;\n    long long int C=1;\n    long long int D=1;\n    long long int E=1;\n    long long int F=1;\n    long long int G=1;\n    long long int H=1;\n    long long int I=1;\n    long long int J=1;\n    long long int K=1;\n    long long int L=1;\n    long long int M=1;\n    long long int O=1;\n    long long int P=1;\n    long long int Q=1;\n    long long int R=1;\n    long long int S=1;\n    long long int T=1;\n    long long int U=1;\n    long long int V=1;\n    long long int W=1;\n    long long int X=1;\n    long long int Y=1;\n    long long int Z=1;\n    long long int A1=1;\n    long long int B1=1;\n    long long int C1=1;\n    long long int D1=1;\n    long long int E1=1;\n    long long int",
    "    long mask = 0xffffffffffffffff;\n    long first_bit = (n & (1 << 63)) >> 63;\n    long last_bit = n & 1;\n    long middle_bits = n & ~(mask << 1);\n    middle_bits = middle_bits & ~(mask >> 1);\n    middle_bits = ~middle_bits;\n    middle_bits = middle_bits & ~(mask << 1);\n    middle_bits = middle_bits & ~(mask >> 1);\n    return (first_bit << 63) | middle_bits | last_bit;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long rest_bits = n & ~(1 << (sizeof(long) * 8 - 1));\n    rest_bits = rest_bits & ~1;\n    rest_bits = rest_bits ^ (rest_bits >> 1);\n    return first_bit | (rest_bits << 1) | last_bit;",
    "    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return n ^ mask;",
    "    long mask = 0xffffffffffffffff;\n    mask = mask ^ (1 << 63);\n    mask = mask ^ (1 << 0);\n    return n ^ mask;",
    "    long mask = 0xffffffffffffffff;\n    mask = mask ^ (1 << 63);\n    mask = mask ^ (1 << 0);\n    return n ^ mask;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0xffffffffffffffff;\n    long mask1 = 0xfffffffffffffffe;\n    long mask2 = 0x7fffffffffffffff;\n    long mask3 = 0x8000000000000001;\n    long mask4 = 0xfffffffffffffffc;\n    long mask5 = 0xfffffffffffffffd;\n    long mask6 = 0x7ffffffffffffffe;\n    long mask7 = 0x8000000000000000;\n    long mask8 = 0x8000000000000002;\n    long mask9 = 0x7ffffffffffffffd;\n    long mask10 = 0x8000000000000000;\n    long mask11 = 0x8000000000000002;\n    long mask12 = 0x7ffffffffffffffd;\n    long mask13 = 0x8000000000000000;\n    long mask14 = 0x8000000000000002;\n    long mask15 = 0x7ffffffffffffffd;\n    long mask16 = 0x8000000000000000;\n    long mask17 = 0x8000000000000002;\n    long mask18 = 0x7ffffffffffffffd;\n    long mask19 = 0x8000000000000000;\n    long mask20 = 0x8000000000000002;\n    long mask21 = 0x7ffffffffffffffd;\n    long mask22 = 0x8000000000000000;\n    long mask23 = 0x8000000000000002;\n    long mask24 = 0x7ffffffffffffffd;\n    long mask25 = 0x8000000000000000;\n    long mask26 = 0x8000000000000002;\n    long mask27 = 0x7ffffffffffffffd;\n    long mask28 = 0x8000000000000000;\n    long mask29 = 0x8000000000000002;\n    long mask30 = 0x7ffffffffffffffd;\n    long mask31 = 0x8000000000000000;\n    long mask32 = 0x8000000000000002;\n    long mask33 = 0x7ffffffffffffffd;\n    long mask34 = 0x8000000000000000;\n    long mask35 = 0x8000000000000002;\n    long mask36 = 0x7ffffffffffffffd;\n    long mask37 = 0x8000000000000000;\n    long mask38",
    "    // Write your code here\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long first_bit = n & 1;\n    long last_bit = (n >> 1) & 1;\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    middle_bits = middle_bits & mask;\n    return (first_bit | middle_bits | (last_bit << 1));",
    "    long mask = 0xffffffffffffffff;\n    mask = mask ^ (1 << 63);\n    mask = mask ^ (1 << 0);\n    return n ^ mask;",
    "    // Write your code here\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x1 = 1;\n    long y1 = 1;\n    long z1 = 1;\n    long a1 = 1;\n    long b1 = 1;\n    long c1 = 1;\n    long d1 = 1;\n    long e1 = 1;\n    long f1 = 1;\n    long g1 = 1;\n    long h1 = 1;\n    long i1 = 1;\n    long j1 = 1;\n    long k1 = 1;\n    long l1 = 1;\n    long m1 = 1;\n    long o1 = 1;\n    long p1 = 1;\n    long q1 = 1;\n    long r1 = 1;\n    long s1 = 1;\n    long t1 = 1;\n    long u1 = 1;\n    long v1 = 1;\n    long w1 = 1;\n    long x2 = 1;\n    long y2 = 1;\n    long z2 = 1;\n    long a2 = 1;\n    long b2 = 1;\n    long c2 = 1;\n    long d2 = 1;\n    long e2 = 1;\n    long f2 = 1;\n    long g2 = 1;\n    long h2 = 1;\n    long i2 = 1;\n    long j2 = 1;\n    long k2 = 1;\n    long l2 = 1;\n    long m2 = 1;\n   ",
    "    // Write your code here\n    long mask = 0;\n    long temp = n;\n    int count = 0;\n    while(temp) {\n        count++;\n        temp = temp >> 1;\n    }\n    mask = (1 << (count - 2)) - 1;\n    mask = mask << 1;\n    return n ^ mask;",
    "    // Write your code here\n    long mask = 0xFFFFFFFFFFFFFFFF;\n    mask = mask >> 1;\n    mask = mask << 1;\n    mask = ~mask;\n    return n ^ mask;",
    "    // Write your code here\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    long mask2 = 0x8000000000000000;\n    long mask3 = 0x0000000000000001;\n    long ans = n & mask;\n    ans = ans & mask2;\n    ans = ans | mask3;\n    return ans;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= 1 << i;\n    }\n    long middle_bits = n & mask;\n    return first_bit | middle_bits << 1 | last_bit >> 1;",
    "    // Write your code here\n    // return the number with middle bits toggled\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long zz = n;\n    long xx = n;\n    long yy = n;\n    long zzz = n;\n    long xxx = n;\n    long yyy = n;\n    long zzzz = n;\n    long xxxx = n;\n    long yyyy = n;\n    long zzzzz = n;\n    long xxxxx = n;\n    long yyyyy = n;\n    long zzzzzz = n;\n    long xxxxxx = n;\n    long yyyyyy = n;\n    long zzzzzzz = n;\n    long xxxxxxx = n;\n    long yyyyyyy = n;\n    long zzzzzzzz = n;\n    long xxxxxxxx = n;\n    long yyyyyyyy = n;\n    long zzzzzzzzz = n;\n    long xxxxxxxxx = n;\n    long yyyyyyyyy = n;\n    long zzzzzzzzzz = n;\n    long xxxxxxxxxx = n;\n    long yyyyyyyyyy = n;\n    long zzzzzzzzzzz = n;\n    long xxxxxxxxxxx = n;\n    long yyyyyyyyyyy = n;\n    long zzzzzzzzzzzz = n;\n    long xxxxxxxxxxxx = n;\n    long yyyyyyyyyyyy = n",
    "    return ((n & 0xFFFFFFFFFFFFFFFC) ^ 0xAAAAAAAAAAAAAAA8);",
    "  long mask = 0;\n  long temp = n;\n  int count = 0;\n  while(temp) {\n    temp = temp >> 1;\n    count++;\n  }\n  mask = (1 << (count - 2)) - 1;\n  mask = mask << 1;\n  return n ^ mask;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    // Write your code here\n    long mask = 0x7ffffffffffffffe;\n    return n^mask;",
    "    // Write your code here\n    long mask = 0;\n    long temp = n;\n    int count = 0;\n    while(temp > 0) {\n        temp = temp >> 1;\n        count++;\n    }\n    mask = (1 << (count - 2)) - 1;\n    mask = mask << 1;\n    return n ^ mask;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long mask = 0x7fffffffffffffff;\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = ~((1 << (sizeof(n) * 8 - 1)) | 1);\n    return (n & mask) ^ ((~n & mask) >> 1);",
    "    // Write your code here\n    long mask = 0x7ffffffffffffffe;\n    return n ^ mask;",
    "    // Write your code here\n    long m = n;\n    int count = 0;\n    while(m){\n        m = m >> 1;\n        count++;\n    }\n    long mask = (1 << count) - 1;\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 1)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    middle_bits = middle_bits & mask;\n    return first_bit | middle_bits | last_bit;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return n ^ mask;",
    "    long mask = 0xffffffffffffffff;\n    mask = mask ^ (1 << 0);\n    mask = mask ^ (1 << 63);\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= 1 << i;\n    }\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 1)) | last_bit;",
    "    long mask = 0xffffffffffffffff;\n    long first_bit = n & 1;\n    long last_bit = n & (1 << 63);\n    mask = mask ^ (1 << 63);\n    mask = mask ^ 1;\n    return (n ^ mask) | (first_bit << 63) | (last_bit >> 63);",
    "    long mask = 0xffffffffffffffff;\n    long first_bit = (n & (1 << 63)) >> 63;\n    long last_bit = n & 1;\n    mask = mask ^ (1 << 63);\n    mask = mask ^ 1;\n    n = n ^ mask;\n    n = n | (first_bit << 63);\n    n = n | last_bit;\n    return n;",
    "    // Write your code here\n    long first_bit = n & 1;\n    long last_bit = n & (1 << 31);\n    long mask = 0;\n    for(int i = 1; i < 31; i++) {\n        mask = mask | (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    long result = first_bit | middle_bits | last_bit;\n    return result;",
    "    // Write your code here\n    long first_bit = n & 1;\n    long last_bit = n & (1 << 31);\n    long mask = 0;\n    for (int i = 1; i < 31; i++) {\n        mask |= (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    long result = first_bit | middle_bits | last_bit;\n    return result;",
    "    long mask = 0xffffffffffffffff;\n    long first_bit = (n & (1 << 63)) >> 63;\n    long last_bit = n & 1;\n    mask = mask ^ ((1 << 63) | 1);\n    return (n ^ mask) | (first_bit << 63) | last_bit;",
    "    long mask = 0xffffffffffffffff;\n    long first_bit = n & 1;\n    long last_bit = n & (1 << 63);\n    mask = mask ^ (1 << 63);\n    mask = mask ^ 1;\n    return (n ^ mask) | (first_bit << 63) | (last_bit >> 63);",
    "    long mask = 0xffffffffffffffff;\n    long mask_left = mask >> 1;\n    long mask_right = mask << 1;\n    mask_left = mask_left >> 1;\n    mask_right = mask_right << 1;\n    mask_left = mask_left ^ mask_right;\n    return n ^ mask_left;",
    "    long mask = 0xffffffffffffffff;\n    long first_bit = (n & 0x8000000000000000) >> 63;\n    long last_bit = (n & 0x0000000000000001);\n    long middle_bits = (n & 0x7ffffffffffffffe) >> 1;\n    mask = mask >> 1;\n    mask = mask << 1;\n    mask = mask | 0x0000000000000001;\n    middle_bits = middle_bits ^ mask;\n    middle_bits = middle_bits << 1;\n    middle_bits = middle_bits | last_bit;\n    middle_bits = middle_bits << 63;\n    middle_bits = middle_bits | first_bit;\n    return middle_bits;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 1)) | (last_bit >> (sizeof(long) * 8 - 1));",
    "    // Write your code here\n    // return the toggled number\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for(int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    middle_bits &= mask;\n    return first_bit | middle_bits | last_bit;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(n) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;",
    "    assert(n>=0);\n    long mask = 0x7;\n    long result = 0;\n    long i = 0;\n    while(n) {\n        long last_three_bits = n & mask;\n        if(i==0 || n==1) {\n            result = result | last_three_bits;\n        } else {\n            result = result | (~last_three_bits);\n        }\n        n = n>>3;\n        i++;\n    }\n    return result;",
    "    // Write your code here\n    long mask = 0;\n    long i = 1;\n    while(i < n) {\n        mask = mask | i;\n        i = i << 1;\n    }\n    return n ^ mask;",
    "    // Write your code here\n    long mask = 0xFFFFFFFFFFFFFFFF;\n    long first_bit = (n & 0x8000000000000000) >> 63;\n    long last_bit = n & 0x1;\n    mask = mask ^ 0x8000000000000000;\n    mask = mask ^ 0x1;\n    long result = n ^ mask;\n    result = result | (first_bit << 63);\n    result = result | last_bit;\n    return result;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    long middle_bits = n & mask;\n    long result = first_bit | middle_bits << 1 | last_bit >> 1;\n    return result;",
    "    long mask = 0xffffffffffffffff;\n    long first_bit = (n & (1 << 63)) >> 63;\n    long last_bit = n & 1;\n    mask = mask ^ (1 << 63);\n    mask = mask ^ 1;\n    n = n ^ mask;\n    n = n | (first_bit << 63);\n    n = n | last_bit;\n    return n;",
    "    // Write your code here\n    long mask = 0;\n    long i = 0;\n    while(i < sizeof(long) * 8 - 2) {\n        mask |= (1 << i);\n        i++;\n    }\n    return n ^ mask;",
    "    // Write your code here\n    int first_bit = n & 1;\n    int last_bit = n & (1 << 31);\n    int mask = 0;\n    for(int i = 1; i < 31; i++) {\n        mask = mask | (1 << i);\n    }\n    n = n ^ mask;\n    n = n | first_bit;\n    n = n | last_bit;\n    return n;",
    "    long mask = 0xffffffffffffffff;\n    mask = mask ^ (1 << 63);\n    mask = mask ^ (1 << 0);\n    return n ^ mask;",
    "    // Write your code here\n    long mask = 0;\n    long temp = n;\n    int count = 0;\n    while(temp > 0) {\n        temp = temp >> 1;\n        count++;\n    }\n    mask = (1 << (count - 1)) - 1;\n    mask = mask ^ n;\n    return mask;",
    "    // Write your code here\n    long mask = 0x7ffffffffffffffe;\n    return n^mask;",
    "    long mask = 0xffffffffffffffff;\n    long mask1 = 0xfffffffffffffffe;\n    long mask2 = 0x7fffffffffffffff;\n    long mask3 = 0x8000000000000000;\n    long mask4 = 0x0000000000000001;\n    long mask5 = 0xfffffffffffffffd;\n    long mask6 = 0x7ffffffffffffffe;\n    long mask7 = 0x8000000000000001;\n    long mask8 = 0x0000000000000002;\n    long mask9 = 0xfffffffffffffffc;\n    long mask10 = 0x7ffffffffffffffc;\n    long mask11 = 0x8000000000000004;\n    long mask12 = 0x0000000000000004;\n    long mask13 = 0xfffffffffffffffb;\n    long mask14 = 0x7ffffffffffffff8;\n    long mask15 = 0x8000000000000008;\n    long mask16 = 0x0000000000000008;\n    long mask17 = 0xfffffffffffffff7;\n    long mask18 = 0x7ffffffffffffff0;\n    long mask19 = 0x800000000000000f;\n    long mask20 = 0x000000000000000f;\n    long mask21 = 0xffffffffffffffef;\n    long mask22 = 0x7fffffffffffffe0;\n    long mask23 = 0x800000000000001f;\n    long mask24 = 0x000000000000001f;\n    long mask25 = 0xffffffffffffffdf;\n    long mask26 = 0x7fffffffffffffc0;\n    long mask27 = 0x800000000000003f;\n    long mask28 = 0x000000000000003f;\n    long mask29 = 0xffffffffffffffbf;\n    long mask30 = 0x7fffffffffffff80;\n    long mask31 = 0x800000000000007f;\n    long mask32 = 0x000000000000007f;\n    long mask33 = 0xffffffffffffff7f;\n    long mask34 = 0x7fffffffffffff00;\n    long mask35 = 0x80000000000000ff;\n    long mask36 = 0x00000000000000ff;\n    long mask37 = 0xffffffff",
    "    int i;\n    long mask = 0;\n    for (i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask = mask | (1 << i);\n    }\n    return n ^ mask;",
    "    // Write your code here\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    long mask1 = 0x7FFFFFFFFFFFFFFE;\n    long mask2 = 0x7FFFFFFFFFFFFFFD;\n    long mask3 = 0x7FFFFFFFFFFFFFFB;\n    long mask4 = 0x7FFFFFFFFFFFFFF7;\n    long mask5 = 0x7FFFFFFFFFFFFFEF;\n    long mask6 = 0x7FFFFFFFFFFFFFDF;\n    long mask7 = 0x7FFFFFFFFFFFFFBF;\n    long mask8 = 0x7FFFFFFFFFFFFF7F;\n    long mask9 = 0x7FFFFFFFFFFFFEFF;\n    long mask10 = 0x7FFFFFFFFFFFFDFF;\n    long mask11 = 0x7FFFFFFFFFFFFBFF;\n    long mask12 = 0x7FFFFFFFFFFFF7FF;\n    long mask13 = 0x7FFFFFFFFFFFEFFF;\n    long mask14 = 0x7FFFFFFFFFFFDFFF;\n    long mask15 = 0x7FFFFFFFFFFFBFFF;\n    long mask16 = 0x7FFFFFFFFFFF7FFF;\n    long mask17 = 0x7FFFFFFFFFFEFFF;\n    long mask18 = 0x7FFFFFFFFFFDFFF;\n    long mask19 = 0x7FFFFFFFFFFBFFF;\n    long mask20 = 0x7FFFFFFFFFF7FFF;\n    long mask21 = 0x7FFFFFFFFFEFFFF;\n    long mask22 = 0x7FFFFFFFFFDFFFF;\n    long mask23 = 0x7FFFFFFFFFBFFFF;\n    long mask24 = 0x7FFFFFFFFF7FFFF;\n    long mask25 = 0x7FFFFFFFFEFFFFF;\n    long mask26 = 0x7FFFFFFFFDFFFFF;\n    long mask27 = 0x7FFFFFFFFBFFFFF;\n    long mask28 = 0x7FFFFFFFF7FFFFF;\n    long mask29 = 0x7FFFFFFFEFFFFFF;\n    long mask30 = 0x7FFFFFFFDFFFFFF;\n    long mask31 = 0x7FFFFFFFBFFFFFF;\n    long mask32 = 0x7FFFFFFF7FFFFFF;\n    long mask33",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;",
    "    // Write your code here\n    long temp = n;\n    int count = 0;\n    while(temp) {\n        count++;\n        temp = temp >> 1;\n    }\n    long mask = (1 << (count - 2)) - 1;\n    mask = mask << 1;\n    return n ^ mask;",
    "    assert(n > 0);\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 1)) | last_bit;",
    "    return ((n & 0xFFFFFFFFFFFFFFFC) ^ 0xAAAAAAAAAAAAAAA8);",
    "    // Write your code here\n    long a = n;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long U",
    "    long first_bit = (n & 1);\n    long last_bit = (n & (1 << 31));\n    long mask = 0xFFFFFFFF;\n    mask = mask ^ (1 << 31);\n    mask = mask ^ 1;\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return (first_bit | middle_bits | last_bit);",
    "    // Write your code here\n    long x=1;\n    long y=1;\n    long z=1;\n    long a=1;\n    long b=1;\n    long c=1;\n    long d=1;\n    long e=1;\n    long f=1;\n    long g=1;\n    long h=1;\n    long i=1;\n    long j=1;\n    long k=1;\n    long l=1;\n    long m=1;\n    long o=1;\n    long p=1;\n    long q=1;\n    long r=1;\n    long s=1;\n    long t=1;\n    long u=1;\n    long v=1;\n    long w=1;\n    long x1=1;\n    long y1=1;\n    long z1=1;\n    long a1=1;\n    long b1=1;\n    long c1=1;\n    long d1=1;\n    long e1=1;\n    long f1=1;\n    long g1=1;\n    long h1=1;\n    long i1=1;\n    long j1=1;\n    long k1=1;\n    long l1=1;\n    long m1=1;\n    long o1=1;\n    long p1=1;\n    long q1=1;\n    long r1=1;\n    long s1=1;\n    long t1=1;\n    long u1=1;\n    long v1=1;\n    long w1=1;\n    long x2=1;\n    long y2=1;\n    long z2=1;\n    long a2=1;\n    long b2=1;\n    long c2=1;\n    long d2=1;\n    long e2=1;\n    long f2=1;\n    long g2=1;\n    long h2=1;\n    long i2=1;\n    long j2=1;\n    long k2=1;\n    long l2=1;\n    long m2=1;\n   ",
    "    long mask = 0xffffffffffffffff;\n    long first_bit = n & mask;\n    long last_bit = n & 1;\n    long middle_bits = n & ~(first_bit | last_bit);\n    return first_bit | last_bit | (~middle_bits);",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return (first_bit | middle_bits | last_bit);",
    "    // Write your code here\n    long a=1;\n    long b=1;\n    long c=1;\n    long d=1;\n    long e=1;\n    long f=1;\n    long g=1;\n    long h=1;\n    long i=1;\n    long j=1;\n    long k=1;\n    long l=1;\n    long m=1;\n    long o=1;\n    long p=1;\n    long q=1;\n    long r=1;\n    long s=1;\n    long t=1;\n    long u=1;\n    long v=1;\n    long w=1;\n    long x=1;\n    long y=1;\n    long z=1;\n    long aa=1;\n    long ab=1;\n    long ac=1;\n    long ad=1;\n    long ae=1;\n    long af=1;\n    long ag=1;\n    long ah=1;\n    long ai=1;\n    long aj=1;\n    long ak=1;\n    long al=1;\n    long am=1;\n    long an=1;\n    long ao=1;\n    long ap=1;\n    long aq=1;\n    long ar=1;\n    long as=1;\n    long at=1;\n    long au=1;\n    long av=1;\n    long aw=1;\n    long ax=1;\n    long ay=1;\n    long az=1;\n    long ba=1;\n    long bb=1;\n    long bc=1;\n    long bd=1;\n    long be=1;\n    long bf=1;\n    long bg=1;\n    long bh=1;\n    long bi=1;\n    long bj=1;\n    long bk=1;\n    long bl=1;\n    long bm=1;\n    long bn=1;\n    long bo=1;\n    long bp=1;\n    long bq=1;\n    long br=1;\n    long bs",
    "    long mask = 0;\n    long i = 1;\n    while(i < n) {\n        mask = mask | i;\n        i = i << 1;\n    }\n    return n ^ mask;",
    "\tlong mask = 1;\n\tmask = mask << (sizeof(long) * 8 - 2);\n\tmask = mask | 1;\n\treturn n ^ mask;",
    "    // Write your code here\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    long mask2 = 0x7FFFFFFFFFFFFFFE;\n    long mask3 = 0x7FFFFFFFFFFFFFFD;\n    long mask4 = 0x7FFFFFFFFFFFFFFB;\n    long mask5 = 0x7FFFFFFFFFFFFFF7;\n    long mask6 = 0x7FFFFFFFFFFFFFEF;\n    long mask7 = 0x7FFFFFFFFFFFFFDF;\n    long mask8 = 0x7FFFFFFFFFFFFFBF;\n    long mask9 = 0x7FFFFFFFFFFFFF7F;\n    long mask10 = 0x7FFFFFFFFFFFFEFF;\n    long mask11 = 0x7FFFFFFFFFFFFDFF;\n    long mask12 = 0x7FFFFFFFFFFFFBFF;\n    long mask13 = 0x7FFFFFFFFFFFF7FF;\n    long mask14 = 0x7FFFFFFFFFFFEFFF;\n    long mask15 = 0x7FFFFFFFFFFFDFFF;\n    long mask16 = 0x7FFFFFFFFFFFBFFF;\n    long mask17 = 0x7FFFFFFFFFFF7FFF;\n    long mask18 = 0x7FFFFFFFFFFEFFF;\n    long mask19 = 0x7FFFFFFFFFFDFFF;\n    long mask20 = 0x7FFFFFFFFFFBFFF;\n    long mask21 = 0x7FFFFFFFFFF7FFF;\n    long mask22 = 0x7FFFFFFFFFEFFFF;\n    long mask23 = 0x7FFFFFFFFFDFFFF;\n    long mask24 = 0x7FFFFFFFFFBFFFF;\n    long mask25 = 0x7FFFFFFFFF7FFFF;\n    long mask26 = 0x7FFFFFFFFEFFFFF;\n    long mask27 = 0x7FFFFFFFFDFFFFF;\n    long mask28 = 0x7FFFFFFFFBFFFFF;\n    long mask29 = 0x7FFFFFFFF7FFFFF;\n    long mask30 = 0x7FFFFFFFEFFFFFF;\n    long mask31 = 0x7FFFFFFFDFFFFFF;\n    long mask32 = 0x7FFFFFFFBFFFFFF;\n    long mask33 = 0x7FFFFFFF7FFFFFF;\n    long mask34",
    "    // Write your code here\n    long x = n;\n    long y = n;\n    long z = n;\n    x = x >> 1;\n    y = y << 1;\n    x = x & y;\n    x = x & z;\n    return x;",
    "    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (1 << (sizeof(long) * 8 - 1));",
    "    // Write your code here\n    long x = n;\n    long y = n;\n    long count = 0;\n    while(x > 0) {\n        x = x >> 1;\n        count++;\n    }\n    count = count - 2;\n    long mask = 0;\n    while(count > 0) {\n        mask = mask << 1;\n        mask = mask | 1;\n        count--;\n    }\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask =",
    "    long mask = 0xFFFFFFFFFFFFFFFF;\n    mask = mask ^ (1 << 0);\n    mask = mask ^ (1 << 63);\n    return n ^ mask;",
    "    // Write your code here\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long mask = 0;\n    for(int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = ~((1 << (sizeof(n) * 8 - 1)) | 1);\n    return (n & mask) ^ (first_bit << (sizeof(n) * 8 - 1)) ^ (last_bit >> (sizeof(n) * 8 - 1));",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << 31);\n    long mask = 0;\n    for(int i = 1; i < 31; i++) {\n        mask = mask | (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;",
    "    long mask = 0xFFFFFFFFFFFFFFFF;\n    long first_bit = (n >> 63) & 1;\n    long last_bit = n & 1;\n    mask = mask >> 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 62;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 62;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    long result = n ^ mask;\n    result = result | (first_bit << 63);\n    result = result | last_bit;\n    return result;",
    "    // Write your code here\n    // To print results to the standard output you can use printf()\n    // Example: printf(\"%s\", \"Hello world!\");\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    long mask2 = 0x8000000000000000;\n    long mask3 = 0x0000000000000001;\n    long mask4 = 0xFFFFFFFFFFFFFFFE;\n    long mask5 = 0x7FFFFFFFFFFFFFFE;\n    long mask6 = 0x8000000000000001;\n    long mask7 = 0xFFFFFFFFFFFFFFFC;\n    long mask8 = 0x7FFFFFFFFFFFFFFC;\n    long mask9 = 0x8000000000000003;\n    long mask10 = 0xFFFFFFFFFFFFFFF8;\n    long mask11 = 0x7FFFFFFFFFFFFFF8;\n    long mask12 = 0x8000000000000007;\n    long mask13 = 0xFFFFFFFFFFFFFFF0;\n    long mask14 = 0x7FFFFFFFFFFFFFF0;\n    long mask15 = 0x800000000000000F;\n    long mask16 = 0xFFFFFFFFFFFFFFE0;\n    long mask17 = 0x7FFFFFFFFFFFFFE0;\n    long mask18 = 0x800000000000001F;\n    long mask19 = 0xFFFFFFFFFFFFFFC0;\n    long mask20 = 0x7FFFFFFFFFFFFFC0;\n    long mask21 = 0x800000000000003F;\n    long mask22 = 0xFFFFFFFFFFFFFF80;\n    long mask23 = 0x7FFFFFFFFFFFFF80;\n    long mask24 = 0x800000000000007F;\n    long mask25 = 0xFFFFFFFFFFFFFF00;\n    long mask26 = 0x7FFFFFFFFFFFFF00;\n    long mask27 = 0x80000000000000FF;\n    long mask28 = 0xFFFFFFFFFFFFFE00;\n    long mask29 = 0x7FFFFFFFFFFFFE00;\n    long mask30 = 0x80000000000001FF;\n    long mask31 = 0xFFFFFFFFFFFFFC00;\n    long mask32 = 0x7FFFFFFFFFFFFC00;\n    long mask33 = 0x80000000000003FF;\n    long mask34 = 0",
    "    long x = 1;\n    long y = 1;\n    long z = 1;\n    long m = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x1 = 1;\n    long y1 = 1;\n    long z1 = 1;\n    long m1 = 1;\n    long a1 = 1;\n    long b1 = 1;\n    long c1 = 1;\n    long d1 = 1;\n    long e1 = 1;\n    long f1 = 1;\n    long g1 = 1;\n    long h1 = 1;\n    long i1 = 1;\n    long j1 = 1;\n    long k1 = 1;\n    long l1 = 1;\n    long o1 = 1;\n    long p1 = 1;\n    long q1 = 1;\n    long r1 = 1;\n    long s1 = 1;\n    long t1 = 1;\n    long u1 = 1;\n    long v1 = 1;\n    long w1 = 1;\n    long x2 = 1;\n    long y2 = 1;\n    long z2 = 1;\n    long m2 = 1;\n    long a2 = 1;\n    long b2 = 1;\n    long c2 = 1;\n    long d2 = 1;\n    long e2 = 1;\n    long f2 = 1;\n    long g2 = 1;\n    long h2 = 1;\n    long i2 = 1;\n    long j2 = 1;\n    long k2 = 1;\n    long l2 = 1;\n    long o2 = 1;\n",
    "\tlong mask = 0x7;\n\tlong result = n;\n\tlong temp = n;\n\tint i = 0;\n\twhile(temp) {\n\t\tif(i == 0 || i == 1) {\n\t\t\ttemp = temp >> 1;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 2) {\n\t\t\ttemp = temp >> 1;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 3) {\n\t\t\ttemp = temp >> 1;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 4) {\n\t\t\ttemp = temp >> 1;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 5) {\n\t\t\ttemp = temp >> 1;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 6) {\n\t\t\ttemp = temp >> 1;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 7) {\n\t\t\ttemp = temp >> 1;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 8) {\n\t\t\ttemp = temp >> 1;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 9) {\n\t\t\ttemp = temp >> 1;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 10) {\n\t\t\ttemp = temp >> 1;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 11) {\n\t\t\ttemp = temp >> 1;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 12) {\n\t\t\ttemp = temp >> 1;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 13) {\n\t\t\ttemp = temp >> 1;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\t",
    "    // Write your code here\n    long mask = 0;\n    long i = 0;\n    while(i < sizeof(long)*8-2) {\n        mask = mask | (1 << i);\n        i++;\n    }\n    return n ^ mask;",
    "    long mask = 0x7;\n    long result = n;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        long bit = (n & (mask << i)) >> i;\n        if (bit == 1) {\n            result = result & ~(mask << i);\n        } else {\n            result = result | (mask << i);\n        }\n    }\n    return result;",
    "    long mask = 0x7ffffffffffffffe;\n    return n ^ mask;",
    "    long mask = 0;\n    long i = 0;\n    while (i < (sizeof(long) * 8) - 2) {\n        mask = mask | (1 << i);\n        i++;\n    }\n    return (n ^ mask);",
    "    long mask = 0x7ffffffffffffffc;\n    return n ^ mask;",
    "    // Write your code here\n    long mask = 0;\n    long temp = n;\n    int count = 0;\n    while(temp) {\n        temp = temp >> 1;\n        count++;\n    }\n    mask = (1 << (count - 2)) - 1;\n    return (n ^ mask);",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;",
    "    int first_bit = n & 1;\n    int last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = 0;\n    for(int i = 1; i < sizeof(n) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    long result = (n ^ mask) | (first_bit << (sizeof(n) * 8 - 1)) | last_bit;\n    return result;",
    "    // Write your code here\n    long mask = 0;\n    long temp = n;\n    int count = 0;\n    while(temp) {\n        temp = temp >> 1;\n        count++;\n    }\n    mask = (1 << (count - 2)) - 1;\n    mask = mask << 1;\n    return n ^ mask;",
    "    // Write your code here\n    // return the toggled number\n    long x = 1;\n    long y = n;\n    while(y>1){\n        x = x<<1;\n        y = y>>1;\n    }\n    long z = (x<<1)-1;\n    long ans = n^z;\n    return ans;",
    "    long mask = 0x7fffffffffffffff;\n    long result = n ^ mask;\n    return result;",
    "    // Write your code here\n    // return the toggled number\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long aa = 1;\n    long bb = 1;\n    long cc = 1;\n    long dd = 1;\n    long ee = 1;\n    long ff = 1;\n    long gg = 1;\n    long hh = 1;\n    long ii = 1;\n    long jj = 1;\n    long kk = 1;\n    long ll = 1;\n    long mm = 1;\n    long oo = 1;\n    long pp = 1;\n    long qq = 1;\n    long rr = 1;\n    long ss = 1;\n    long tt = 1;\n    long uu = 1;\n    long vv = 1;\n    long ww = 1;\n    long xx = 1;\n    long yy = 1;\n    long zz = 1;\n    long aaa = 1;\n    long bbb = 1;\n    long ccc = 1;\n    long ddd = 1;\n    long eee = 1;\n    long fff = 1;\n    long ggg = 1;\n    long hhh = 1;\n    long iii = 1;\n    long jjj = 1;\n    long kkk = 1;\n    long lll = 1;\n    long mmm = 1;\n    long ooo = 1;\n    long ppp = 1;\n    long qqq = 1;\n    long",
    "    long mask = 0x7fffffffffffffff;\n    long mask1 = 0x8000000000000000;\n    long mask2 = 0x0000000000000001;\n    long mask3 = 0x7ffffffffffffffe;\n    long mask4 = 0x7fffffffffffffff;\n    long mask5 = 0x7fffffffffffffff;\n    long mask6 = 0x7fffffffffffffff;\n    long mask7 = 0x7fffffffffffffff;\n    long mask8 = 0x7fffffffffffffff;\n    long mask9 = 0x7fffffffffffffff;\n    long mask10 = 0x7fffffffffffffff;\n    long mask11 = 0x7fffffffffffffff;\n    long mask12 = 0x7fffffffffffffff;\n    long mask13 = 0x7fffffffffffffff;\n    long mask14 = 0x7fffffffffffffff;\n    long mask15 = 0x7fffffffffffffff;\n    long mask16 = 0x7fffffffffffffff;\n    long mask17 = 0x7fffffffffffffff;\n    long mask18 = 0x7fffffffffffffff;\n    long mask19 = 0x7fffffffffffffff;\n    long mask20 = 0x7fffffffffffffff;\n    long mask21 = 0x7fffffffffffffff;\n    long mask22 = 0x7fffffffffffffff;\n    long mask23 = 0x7fffffffffffffff;\n    long mask24 = 0x7fffffffffffffff;\n    long mask25 = 0x7fffffffffffffff;\n    long mask26 = 0x7fffffffffffffff;\n    long mask27 = 0x7fffffffffffffff;\n    long mask28 = 0x7fffffffffffffff;\n    long mask29 = 0x7fffffffffffffff;\n    long mask30 = 0x7fffffffffffffff;\n    long mask31 = 0x7fffffffffffffff;\n    long mask32 = 0x7fffffffffffffff;\n    long mask33 = 0x7fffffffffffffff;\n    long mask34 = 0x7fffffffffffffff;\n    long mask35 = 0x7fffffffffffffff;\n    long mask36 = 0x7fffffffffffffff",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0xffffffffffffffff;\n    long first_bit = n & 0x8000000000000000;\n    long last_bit = n & 0x0000000000000001;\n    mask = mask ^ 0x7ffffffffffffffe;\n    long result = n ^ mask;\n    result = result | first_bit;\n    result = result | last_bit;\n    return result;",
    "    // Write your code here\n    // return the number with middle bits toggled\n    int i=1;\n    int j=0;\n    long temp=n;\n    while(temp!=0){\n        temp=temp>>1;\n        j++;\n    }\n    j=j-2;\n    while(i<=j){\n        n=n^(1<<i);\n        i++;\n    }\n    return n;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;",
    "    long first_bit = n & 1;\n    long last_bit = (n >> 1) & 1;\n    long mask = (1 << (sizeof(long)*8 - 2)) - 1;\n    long middle_bits = n & mask;\n    long toggled_middle_bits = middle_bits ^ mask;\n    return (first_bit << (sizeof(long)*8 - 1)) | (toggled_middle_bits << 1) | last_bit;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long)*8 - 1));\n    long mask = 0;\n    for(int i = 1; i < sizeof(long)*8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;",
    "    long mask = 0x7ffffffffffffffe;\n    return n ^ mask;",
    "    long mask = 0x7fffffffffffffff;\n    long mask2 = 0x8000000000000000;\n    long mask3 = 0x0000000000000001;\n    long mask4 = 0xfffffffffffffffe;\n    long mask5 = 0xfffffffffffffffd;\n    long mask6 = 0xfffffffffffffffc;\n    long mask7 = 0xfffffffffffffffb;\n    long mask8 = 0xfffffffffffffffa;\n    long mask9 = 0xfffffffffffffff9;\n    long mask10 = 0xfffffffffffffff8;\n    long mask11 = 0xfffffffffffffff7;\n    long mask12 = 0xfffffffffffffff6;\n    long mask13 = 0xfffffffffffffff5;\n    long mask14 = 0xfffffffffffffff4;\n    long mask15 = 0xfffffffffffffff3;\n    long mask16 = 0xfffffffffffffff2;\n    long mask17 = 0xfffffffffffffff1;\n    long mask18 = 0xfffffffffffffff0;\n    long mask19 = 0xffffffffffffffef;\n    long mask20 = 0xffffffffffffffee;\n    long mask21 = 0xffffffffffffffed;\n    long mask22 = 0xffffffffffffffec;\n    long mask23 = 0xffffffffffffffeb;\n    long mask24 = 0xffffffffffffffea;\n    long mask25 = 0xffffffffffffffe9;\n    long mask26 = 0xffffffffffffffe8;\n    long mask27 = 0xffffffffffffffe7;\n    long mask28 = 0xffffffffffffffe6;\n    long mask29 = 0xffffffffffffffe5;\n    long mask30 = 0xffffffffffffffe4;\n    long mask31 = 0xffffffffffffffe3;\n    long mask32 = 0xffffffffffffffe2;\n    long mask33 = 0xffffffffffffffe1;\n    long mask34 = 0xffffffffffffffe0;\n    long mask35 = 0xffffffffffffffdf;\n    long mask36 = 0xffffffffffffffde;\n    long mask37 = 0xffffffffffffffdd;",
    "    long mask = 0x7fffffffffffffff;\n    long mask1 = 0x8000000000000000;\n    long mask2 = 0x0000000000000001;\n    long res = n & mask1;\n    res = res | (n & mask2);\n    res = res | (~mask & n);\n    return res;",
    "    // Write your code here\n    long m = 1;\n    long p = n;\n    while (p > 0) {\n        p = p >> 1;\n        m = m << 1;\n    }\n    m = m - 1;\n    long mask = m ^ (m >> 1);\n    return n ^ mask;",
    "    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= 1 << i;\n    }\n    return n ^ mask;",
    "    // Write your code here\n    long a = n & 1;\n    long b = n & (1 << (int)(log2(n)));\n    long c = n & ~(1 << (int)(log2(n)));\n    long d = c & ~1;\n    long e = d ^ (d >> 1);\n    long f = e | a;\n    long g = f | b;\n    return g;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    n = n ^ mask;\n    n = n | first_bit;\n    n = n | last_bit;\n    return n;",
    "    // Write your code here\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long aa = 1;\n    long ab = 1;\n    long ac = 1;\n    long ad = 1;\n    long ae = 1;\n    long af = 1;\n    long ag = 1;\n    long ah = 1;\n    long ai = 1;\n    long aj = 1;\n    long ak = 1;\n    long al = 1;\n    long am = 1;\n    long an = 1;\n    long ao = 1;\n    long ap = 1;\n    long aq = 1;\n    long ar = 1;\n    long as = 1;\n    long at = 1;\n    long au = 1;\n    long av = 1;\n    long aw = 1;\n    long ax = 1;\n    long ay = 1;\n    long az = 1;\n    long ba = 1;\n    long bb = 1;\n    long bc = 1;\n    long bd = 1;\n    long be = 1;\n    long bf = 1;\n    long bg = 1;\n    long bh = 1;\n    long bi = 1;\n    long bj = 1;\n    long bk = 1;\n    long bl = 1;\n    long bm = 1;\n    long bn = 1;\n    long bo = 1;\n    long bp = 1;\n    long bq = 1;\n    long br = 1;\n    long bs",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 1)) | last_bit;",
    "  long mask = 0xffffffffffffffff;\n  long first_bit = (n & (1 << 63)) >> 63;\n  long last_bit = (n & 1);\n  mask = mask << 1;\n  mask = mask >> 1;\n  mask = mask >> 1;\n  mask = mask << 1;\n  long result = n ^ mask;\n  result = result | (first_bit << 63);\n  result = result | last_bit;\n  return result;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    long mask2 = 0x8000000000000000;\n    long mask3 = 0x0000000000000001;\n    long mask4 = 0xFFFFFFFFFFFFFFFE;\n    long mask5 = 0x7FFFFFFFFFFFFFFE;\n    long mask6 = 0x8000000000000001;\n    long mask7 = 0x0000000000000002;\n    long mask8 = 0xFFFFFFFFFFFFFFFC;\n    long mask9 = 0x7FFFFFFFFFFFFFFC;\n    long mask10 = 0x8000000000000003;\n    long mask11 = 0x0000000000000004;\n    long mask12 = 0xFFFFFFFFFFFFFFF8;\n    long mask13 = 0x7FFFFFFFFFFFFFF8;\n    long mask14 = 0x8000000000000007;\n    long mask15 = 0x0000000000000008;\n    long mask16 = 0xFFFFFFFFFFFFFFF0;\n    long mask17 = 0x7FFFFFFFFFFFFFF0;\n    long mask18 = 0x800000000000000F;\n    long mask19 = 0x0000000000000010;\n    long mask20 = 0xFFFFFFFFFFFFFFE0;\n    long mask21 = 0x7FFFFFFFFFFFFFE0;\n    long mask22 = 0x800000000000001F;\n    long mask23 = 0x0000000000000020;\n    long mask24 = 0xFFFFFFFFFFFFFFC0;\n    long mask25 = 0x7FFFFFFFFFFFFFC0;\n    long mask26 = 0x800000000000003F;\n    long mask27 = 0x0000000000000040;\n    long mask28 = 0xFFFFFFFFFFFFFF80;\n    long mask29 = 0x7FFFFFFFFFFFFF80;\n    long mask30 = 0x800000000000007F;\n    long mask31 = 0x0000000000000080;\n    long mask32 = 0xFFFFFFFFFFFFFF00;\n    long mask33 = 0x7FFFFFFFFFFFFF00;\n    long mask34 = 0x80000000000000FF;\n    long mask35 = 0x0000000000000100;\n    long mask36 = 0xFFFFFFFFFFFFFE00;\n    long mask37 = 0x7FFFFFFFFFFFFE00;\n    long mask38 =",
    "    int i = 1;\n    int j = 0;\n    long num = 1;\n    while (num <= n) {\n        if (num != 1 && num != n) {\n            if (n & num) {\n                n = n & ~num;\n            } else {\n                n = n | num;\n            }\n        }\n        num = num << 1;\n    }\n    return n;",
    "    // Write your code here\n    long mask = 0;\n    long temp = n;\n    int count = 0;\n    while(temp) {\n        temp = temp >> 1;\n        count++;\n    }\n    mask = (1 << (count - 2)) - 1;\n    mask = mask << 1;\n    mask = mask | 1;\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 1)) - 1;\n    mask = mask ^ ((1 << 1) - 1);\n    return (n ^ mask) | (first_bit << 1) | last_bit;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 1)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return first_bit | middle_bits | last_bit;",
    "    int i = 0;\n    long result = 0;\n    while (n > 0) {\n        if (i == 0 || i == 31) {\n            result = result | (n & 1);\n        } else {\n            result = result | ((n & 1) ^ 1);\n        }\n        result = result << 1;\n        n = n >> 1;\n        i++;\n    }\n    return result >> 1;",
    "    long first_bit = n & 1;\n    long last_bit = (n >> 1) & 1;\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << 1) | last_bit;",
    "    // Write your code here\n    long mask = 0xffffffffffffffff;\n    long mask1 = 0xfffffffffffffffe;\n    long mask2 = 0x7fffffffffffffff;\n    long mask3 = 0x8000000000000000;\n    long mask4 = 0x1;\n    long mask5 = 0x2;\n    long mask6 = 0xfffffffffffffffc;\n    long mask7 = 0x3fffffffffffffff;\n    long mask8 = 0x4000000000000000;\n    long mask9 = 0x5;\n    long mask10 = 0x6;\n    long mask11 = 0x7;\n    long mask12 = 0x8000000000000003;\n    long mask13 = 0xfffffffffffffffc;\n    long mask14 = 0x8000000000000000;\n    long mask15 = 0x1;\n    long mask16 = 0x2;\n    long mask17 = 0x3;\n    long mask18 = 0x4000000000000000;\n    long mask19 = 0xfffffffffffffffc;\n    long mask20 = 0x5;\n    long mask21 = 0x6;\n    long mask22 = 0x7;\n    long mask23 = 0x8000000000000003;\n    long mask24 = 0xfffffffffffffffc;\n    long mask25 = 0x8000000000000000;\n    long mask26 = 0x1;\n    long mask27 = 0x2;\n    long mask28 = 0x3;\n    long mask29 = 0x4000000000000000;\n    long mask30 = 0xfffffffffffffffc;\n    long mask31 = 0x5;\n    long mask32 = 0x6;\n    long mask33 = 0x7;\n    long mask34 = 0x8000000000000003;\n    long mask35 = 0xfffffffffffffffc;\n    long mask36 = 0x8000000000000000;\n    long mask37 = 0x1;\n    long mask38 = 0x2;\n    long mask39 = 0x3;\n    long mask40 = 0x4000000000000000;\n    long mask41 = 0xfffffffffffffffc;\n    long mask42 = 0x5;\n    long mask43 = 0x",
    "    return (((n & 0x2) << 1) | ((n & 0x4) >> 1) | ((n & 0x8) << 1) | ((n & 0x10) >> 1) | ((n & 0x20) << 1) | ((n & 0x40) >> 1) | ((n & 0x80) << 1) | ((n & 0x100) >> 1) | ((n & 0x200) << 1) | ((n & 0x400) >> 1) | ((n & 0x800) << 1) | ((n & 0x1000) >> 1) | ((n & 0x2000) << 1) | ((n & 0x4000) >> 1) | ((n & 0x8000) << 1) | ((n & 0x10000) >> 1) | ((n & 0x20000) << 1) | ((n & 0x40000) >> 1) | ((n & 0x80000) << 1) | ((n & 0x100000) >> 1) | ((n & 0x200000) << 1) | ((n & 0x400000) >> 1) | ((n & 0x800000) << 1) | ((n & 0x1000000) >> 1) | ((n & 0x2000000) << 1) | ((n & 0x4000000) >> 1) | ((n & 0x8000000) << 1) | ((n & 0x10000000) >> 1) | ((n & 0x20000000) << 1) | ((n & 0x40000000) >> 1) | ((n & 0x80000000) << 1) | ((n & 0x100000000) >> 1) | ((n & 0x200000000) << 1) | ((n & 0x400000000) >> 1) | ((n & 0x800000000) << 1) | ((n & 0x1000000000) >> 1) | ((n & 0x2000000000) << 1) | ((n & 0x4000000000) >> 1) | ((n & 0x8000000000) << 1) | ((n & 0x10000000000) >> 1) | ((n & 0x20000000000) << 1) | ((n & 0x40000000000) >> 1) | ((n & 0x80000000000) << 1) | ((n &",
    "    // Write your code here\n    long mask = 0x7fffffff;\n    long mask2 = 0x80000000;\n    long mask3 = 0x00000001;\n    long result = n & mask;\n    result = result & mask2;\n    result = result | mask3;\n    return result;",
    "    // Write your code here\n    long mask = 0xffffffffffffffff;\n    long mask1 = 0xfffffffffffffffe;\n    long mask2 = 0xfffffffffffffffd;\n    long mask3 = 0xfffffffffffffffc;\n    long mask4 = 0xfffffffffffffffb;\n    long mask5 = 0xfffffffffffffffa;\n    long mask6 = 0xfffffffffffffff9;\n    long mask7 = 0xfffffffffffffff8;\n    long mask8 = 0xfffffffffffffff7;\n    long mask9 = 0xfffffffffffffff6;\n    long mask10 = 0xfffffffffffffff5;\n    long mask11 = 0xfffffffffffffff4;\n    long mask12 = 0xfffffffffffffff3;\n    long mask13 = 0xfffffffffffffff2;\n    long mask14 = 0xfffffffffffffff1;\n    long mask15 = 0xfffffffffffffff0;\n    long mask16 = 0xffffffffffffffef;\n    long mask17 = 0xffffffffffffffee;\n    long mask18 = 0xffffffffffffffed;\n    long mask19 = 0xffffffffffffffec;\n    long mask20 = 0xffffffffffffffeb;\n    long mask21 = 0xffffffffffffffea;\n    long mask22 = 0xffffffffffffffe9;\n    long mask23 = 0xffffffffffffffe8;\n    long mask24 = 0xffffffffffffffe7;\n    long mask25 = 0xffffffffffffffe6;\n    long mask26 = 0xffffffffffffffe5;\n    long mask27 = 0xffffffffffffffe4;\n    long mask28 = 0xffffffffffffffe3;\n    long mask29 = 0xffffffffffffffe2;\n    long mask30 = 0xffffffffffffffe1;\n    long mask31 = 0xffffffffffffffe0;\n    long mask32 = 0xffffffffffffffdf;\n    long mask33 = 0xffffffffffffffde;\n    long mask34 = 0xffffffffffffffdd;\n    long mask35 = 0xffffffffffffffdc;\n    long mask",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    // Write your code here\n    // return the toggled number\n    long mask = 0;\n    long temp = n;\n    int count = 0;\n    while(temp){\n        temp = temp >> 1;\n        count++;\n    }\n    mask = (1 << (count-1)) - 1;\n    mask = mask ^ (1 << 1);\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(n) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    return (n ^ mask) | (first_bit << 1) | (last_bit >> 1);",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    long middle_bits = n & mask;\n    return first_bit | (middle_bits ^ mask) | last_bit;",
    "    long mask = 0;\n    for(int i = 1; i < sizeof(n)*8-1; i++) {\n        mask |= (1 << i);\n    }\n    return n ^ mask;",
    "    // Write your code here\n    long mask = 0;\n    for(int i = 1; i < sizeof(long)*8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    return n ^ mask;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    // Write your code here\n    long first_bit = n & 1;\n    long last_bit = n & (1 << 31);\n    long mask = 0;\n    for(int i = 1; i < 31; i++) {\n        mask |= (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return (first_bit | middle_bits | last_bit);",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    return n ^ ((1 << (int)log2(n)) - 1);",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    long result = n ^ mask;\n    return result;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(n) * 8 - 1)) | (last_bit >> (sizeof(n) * 8 - 1));",
    "    // Write your code here\n    long x = n;\n    long y = n;\n    long z = n;\n    x = x >> 1;\n    y = y << 1;\n    x = x & y;\n    x = x & (~(1L << 63));\n    x = x & (~(1L << 0));\n    z = z & (~(1L << 63));\n    z = z & (~(1L << 0));\n    z = z & (~x);\n    return z;",
    "    // Write your code here\n    long i=1;\n    long j=1;\n    long k=0;\n    while(i<=n){\n        i=i<<1;\n    }\n    i=i>>1;\n    while(j<=n){\n        j=j<<1;\n    }\n    j=j>>2;\n    while(j>0){\n        if((n&i)==0){\n            n=n|i;\n        }\n        else{\n            n=n&(~i);\n        }\n        i=i>>1;\n        j=j>>1;\n    }\n    return n;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(n) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    return (n ^ mask) | (first_bit << (sizeof(n) * 8 - 1)) | last_bit;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long x = n;\n    long mask = 0;\n    long i = 0;\n    while(x) {\n        if(i != 0 && i != (sizeof(long)*8-1)) {\n            mask = mask | (1 << i);\n        }\n        x = x >> 1;\n        i++;\n    }\n    return n ^ mask;",
    "    long mask = 0x7fffffffffffffff;\n    long mask2 = 0x8000000000000000;\n    long mask3 = 0x0000000000000001;\n    long mask4 = 0xfffffffffffffffe;\n    long mask5 = 0x7ffffffffffffffe;\n    long mask6 = 0x0000000000000002;\n    long mask7 = 0xfffffffffffffffd;\n    long mask8 = 0x7ffffffffffffffd;\n    long mask9 = 0x0000000000000004;\n    long mask10 = 0xfffffffffffffffb;\n    long mask11 = 0x7ffffffffffffffb;\n    long mask12 = 0x0000000000000008;\n    long mask13 = 0xfffffffffffffff7;\n    long mask14 = 0x7ffffffffffffff7;\n    long mask15 = 0x0000000000000010;\n    long mask16 = 0xffffffffffffffef;\n    long mask17 = 0x7fffffffffffffef;\n    long mask18 = 0x0000000000000020;\n    long mask19 = 0xffffffffffffffdf;\n    long mask20 = 0x7fffffffffffffdf;\n    long mask21 = 0x0000000000000040;\n    long mask22 = 0xffffffffffffffbf;\n    long mask23 = 0x7fffffffffffffbf;\n    long mask24 = 0x0000000000000080;\n    long mask25 = 0xffffffffffffff7f;\n    long mask26 = 0x7fffffffffffff7f;\n    long mask27 = 0x0000000000000100;\n    long mask28 = 0xfffffffffffffeff;\n    long mask29 = 0x7ffffffffffffeff;\n    long mask30 = 0x0000000000000200;\n    long mask31 = 0xfffffffffffffdff;\n    long mask32 = 0x7ffffffffffffdff;\n    long mask33 = 0x0000000000000400;\n    long mask34 = 0xfffffffffffffbff;\n    long mask35 = 0x7ffffffffffffbff;\n    long mask36 = 0x0000000000000800;\n    long mask37 = 0xfffffffffffff7ff;\n    long mask38 = 0x7",
    "    // Write your code here\n    // To print results to the standard output you can use printf()\n    // Example: printf(\"%s\", \"Hello world!\");\n    long mask = 0;\n    long i = 0;\n    while(i < sizeof(long)*8 - 2) {\n        mask = mask | (1 << i);\n        i++;\n    }\n    return (n ^ mask);",
    "    long mask = 0;\n    long i = 0;\n    while(i < 32) {\n        if(i != 0 && i != 31) {\n            mask |= (1 << i);\n        }\n        i++;\n    }\n    return n ^ mask;",
    "    long x = 1;\n    long y = 1;\n    while (x < n) {\n        x = x << 1;\n        y = y << 1;\n    }\n    y = y >> 1;\n    x = x >> 1;\n    return n ^ (x | y);",
    "    // Write your code here\n    long mask = 0;\n    long temp = n;\n    int count = 0;\n    while(temp) {\n        temp = temp >> 1;\n        count++;\n    }\n    mask = (1 << (count - 2)) - 1;\n    mask = mask << 1;\n    return n ^ mask;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    // assert(n > 0);\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 1)) | last_bit;",
    "    assert(n>=0);\n    long mask = 0xFFFFFFFFFFFFFFFF;\n    long first_bit = (n & (1<<63));\n    long last_bit = (n & 1);\n    mask = mask ^ (1<<63);\n    mask = mask ^ 1;\n    n = n ^ mask;\n    n = n | first_bit;\n    n = n | last_bit;\n    return n;",
    "    long mask = 0;\n    for(int i=1; i<=sizeof(long)*8-2; i++) {\n        mask = mask | (1<<i);\n    }\n    return n ^ mask;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long temp = n;\n    int count = 0;\n    while(temp) {\n        count++;\n        temp = temp >> 1;\n    }\n    long mask = (1 << (count - 2)) - 1;\n    return n ^ mask;",
    "    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long aa = 1;\n    long bb = 1;\n    long cc = 1;\n    long dd = 1;\n    long ee = 1;\n    long ff = 1;\n    long gg = 1;\n    long hh = 1;\n    long ii = 1;\n    long jj = 1;\n    long kk = 1;\n    long ll = 1;\n    long mm = 1;\n    long oo = 1;\n    long pp = 1;\n    long qq = 1;\n    long rr = 1;\n    long ss = 1;\n    long tt = 1;\n    long uu = 1;\n    long vv = 1;\n    long ww = 1;\n    long xx = 1;\n    long yy = 1;\n    long zz = 1;\n    long aaa = 1;\n    long bbb = 1;\n    long ccc = 1;\n    long ddd = 1;\n    long eee = 1;\n    long fff = 1;\n    long ggg = 1;\n    long hhh = 1;\n    long iii = 1;\n    long jjj = 1;\n    long kkk = 1;\n    long lll = 1;\n    long mmm = 1;\n    long ooo = 1;\n    long ppp = 1;\n    long qqq = 1;\n    long rrr = 1;\n    long sss = 1;\n    long",
    "    // Write your code here\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    long mask2 = 0x7FFFFFFFFFFFFFFE;\n    long mask3 = 0x7FFFFFFFFFFFFFFD;\n    long mask4 = 0x7FFFFFFFFFFFFFFB;\n    long mask5 = 0x7FFFFFFFFFFFFFF7;\n    long mask6 = 0x7FFFFFFFFFFFFFEF;\n    long mask7 = 0x7FFFFFFFFFFFFFDF;\n    long mask8 = 0x7FFFFFFFFFFFFFBF;\n    long mask9 = 0x7FFFFFFFFFFFFF7F;\n    long mask10 = 0x7FFFFFFFFFFFFEFF;\n    long mask11 = 0x7FFFFFFFFFFFFDFF;\n    long mask12 = 0x7FFFFFFFFFFFFBFF;\n    long mask13 = 0x7FFFFFFFFFFFF7FF;\n    long mask14 = 0x7FFFFFFFFFFFEFFF;\n    long mask15 = 0x7FFFFFFFFFFFDFFF;\n    long mask16 = 0x7FFFFFFFFFFFBFFF;\n    long mask17 = 0x7FFFFFFFFFFF7FFF;\n    long mask18 = 0x7FFFFFFFFFFEFFF;\n    long mask19 = 0x7FFFFFFFFFFDFFF;\n    long mask20 = 0x7FFFFFFFFFFBFFF;\n    long mask21 = 0x7FFFFFFFFFF7FFF;\n    long mask22 = 0x7FFFFFFFFFEFFFF;\n    long mask23 = 0x7FFFFFFFFFDFFFF;\n    long mask24 = 0x7FFFFFFFFFBFFFF;\n    long mask25 = 0x7FFFFFFFFF7FFFF;\n    long mask26 = 0x7FFFFFFFFEFFFFF;\n    long mask27 = 0x7FFFFFFFFDFFFFF;\n    long mask28 = 0x7FFFFFFFFBFFFFF;\n    long mask29 = 0x7FFFFFFFF7FFFFF;\n    long mask30 = 0x7FFFFFFFEFFFFFF;\n    long mask31 = 0x7FFFFFFFDFFFFFF;\n    long mask32 = 0x7FFFFFFFBFFFFFF;\n    long mask33 = 0x7FFFFFFF7FFFFFF;\n    long mask34",
    "    // Write your code here\n    long mask = 0;\n    long temp = n;\n    int count = 0;\n    while(temp) {\n        temp = temp >> 1;\n        count++;\n    }\n    mask = (1 << (count - 2)) - 1;\n    return n ^ mask;",
    "    long mask = (1 << (n - 2)) - 1;\n    return n ^ mask;",
    "    int i = 0;\n    long mask = 0;\n    while(i < 64) {\n        if(i == 0 || i == 63) {\n            mask = mask | (1 << i);\n        }\n        else {\n            mask = mask | (1 << i);\n            mask = mask ^ (1 << i);\n        }\n        i++;\n    }\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;",
    "    // Write your code here\n    long mask = 0;\n    long temp = n;\n    int count = 0;\n    while(temp) {\n        count++;\n        temp = temp >> 1;\n    }\n    for(int i = 2; i < count - 1; i++) {\n        mask = mask | (1 << i);\n    }\n    return n ^ mask;",
    "    // Write your code here\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    long mask1 = 0x7FFFFFFFFFFFFFFE;\n    long mask2 = 0x7FFFFFFFFFFFFFFD;\n    long mask3 = 0x7FFFFFFFFFFFFFDF;\n    long mask4 = 0x7FFFFFFFFFFFFFBF;\n    long mask5 = 0x7FFFFFFFFFFFFF7F;\n    long mask6 = 0x7FFFFFFFFFFFFEFF;\n    long mask7 = 0x7FFFFFFFFFFFFDFF;\n    long mask8 = 0x7FFFFFFFFFFFFBFF;\n    long mask9 = 0x7FFFFFFFFFFFF7FF;\n    long mask10 = 0x7FFFFFFFFFFFEFFF;\n    long mask11 = 0x7FFFFFFFFFFFDFFF;\n    long mask12 = 0x7FFFFFFFFFFFBFFF;\n    long mask13 = 0x7FFFFFFFFFFF7FFF;\n    long mask14 = 0x7FFFFFFFFFFEFFFF;\n    long mask15 = 0x7FFFFFFFFFFDFFFF;\n    long mask16 = 0x7FFFFFFFFFFBFFFF;\n    long mask17 = 0x7FFFFFFFFFF7FFFF;\n    long mask18 = 0x7FFFFFFFFFEFFFFF;\n    long mask19 = 0x7FFFFFFFFFDFFFFF;\n    long mask20 = 0x7FFFFFFFFFBFFFFF;\n    long mask21 = 0x7FFFFFFFFF7FFFFF;\n    long mask22 = 0x7FFFFFFFFEFFFFFF;\n    long mask23 = 0x7FFFFFFFFDFFFFFF;\n    long mask24 = 0x7FFFFFFFFBFFFFFF;\n    long mask25 = 0x7FFFFFFFF7FFFFFF;\n    long mask26 = 0x7FFFFFFFEFFFFFFF;\n    long mask27 = 0x7FFFFFFFDFFFFFFF;\n    long mask28 = 0x7FFFFFFFBFFFFFFF;\n    long mask29 = 0x7FFFFFFF7FFFFFFF;\n    long mask30 = 0x7FFFFFFEFFFFFFFF;\n    long mask31 = 0x7FFFFFFDFFFFFFFF;\n    long mask32 = 0x7FFFFFFBFFFFFFFF;"
  ]
}