{
  "name": "mbpp_477_is_lower",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 65 && string[i] <= 90) {\n            lower_string += string[i] + 32;\n        } else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string new_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            new_string += (char)(string[i] + 32);\n        } else {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i] + 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string new_string = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            new_string += (string[i] - 'A' + 'a');\n        } else {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        lower_string += tolower(string[i]);\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i] + 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += string[i] + 32;\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (char)(string[i] + 32);\n        } else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i] + 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += string[i] + 32;\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] - 'A' + 'a');\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (char)(string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result;\n    for(int i = 0; i < string.size(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            result += (string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        lower_string += tolower(string[i]);\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += string[i] + 32;\n        } else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (string[i] + 32);\n        } else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>='A' && string[i]<='Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            result += (string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.size(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for (int i = 0; i < string.size(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 65 && string[i] <= 90) {\n            lower_string += (string[i] + 32);\n        } else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 65 && string[i] <= 90) {\n            result += string[i] + 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n\tstd::string result = \"\";\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'A' && string[i] <= 'Z') {\n\t\t\tresult += (char)(string[i] + 32);\n\t\t}\n\t\telse {\n\t\t\tresult += string[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += string[i] + 32;\n        } else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string temp = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            temp += (char)(string[i] + 32);\n        }\n        else {\n            temp += string[i];\n        }\n    }\n    return temp;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string new_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            new_string += (char)(string[i] + 32);\n        }\n        else {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for(int i = 0; i < string.length(); i++) {\n        lower_string += tolower(string[i]);\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (string[i] + 32);\n        } else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        lower_string += tolower(string[i]);\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>='A' && string[i]<='Z') {\n            lower_string += string[i] + 32;\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        lower_string += tolower(string[i]);\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for(int i = 0; i < string.length(); i++) {\n        lower_string += tolower(string[i]);\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (char)(string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string new_string;\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>=65 && string[i]<=90) {\n            new_string.push_back(string[i]+32);\n        }\n        else {\n            new_string.push_back(string[i]);\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n\tstd::string lower_string = \"\";\n\tfor(int i = 0; i < string.length(); i++) {\n\t\tlower_string += tolower(string[i]);\n\t}\n\treturn lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>='A' && string[i]<='Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'A' && string[i] <= 'Z') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string output = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            output += (char) (string[i] + 32);\n        } else {\n            output += string[i];\n        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 65 && string[i] <= 90) {\n            lower_string += (char)(string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string new_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            new_string += (char)(string[i] + 32);\n        }\n        else {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        string[i] = tolower(string[i]);\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        lower_string += std::tolower(string[i]);\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n\tstd::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\treturn string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i] + 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        lower_string += tolower(string[i]);\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>='A' && string[i]<='Z') {\n            lower_string+=string[i]+32;\n        }\n        else {\n            lower_string+=string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 65 && string[i] <= 90) {\n            lower_string += string[i] + 32;\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 65 && string[i] <= 90) {\n            lower_string += (string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += string[i] + 32;\n        } else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        string[i] = tolower(string[i]);\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += string[i] + 32;\n        } else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += string[i] + 32;\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for(int i = 0; i < string.size(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string new_string;\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>='A' && string[i]<='Z') {\n            new_string += string[i] + 32;\n        }\n        else {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower += string[i] + 32;\n        }\n        else {\n            lower += string[i];\n        }\n    }\n    return lower;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n\tstd::string lower_string;\n\tfor(int i = 0; i < string.length(); i++) {\n\t\tif(string[i] >= 'A' && string[i] <= 'Z') {\n\t\t\tlower_string += (string[i] + 32);\n\t\t}\n\t\telse {\n\t\t\tlower_string += string[i];\n\t\t}\n\t}\n\treturn lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 65 && string[i] <= 90) {\n            lower_string += (string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i] + 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 65 && string[i] <= 90) {\n            lower_string += string[i] + 32;\n        } else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        result += tolower(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string new_string;\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>='A' && string[i]<='Z') {\n            new_string += string[i] + 32;\n        }\n        else {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for (int i = 0; i < string.length(); i++) {\n        lower_string += tolower(string[i]);\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    int i = 0;\n    while (string[i] != '\\0') {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n        i++;\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for (int i = 0; i < string.length(); i++) {\n        lower_string += tolower(string[i]);\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string new_string = \"\";\n    for (int i = 0; i < string.size(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            new_string += string[i] + 32;\n        }\n        else {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        lower_string += tolower(string[i]);\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        lower_string += tolower(string[i]);\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i] + 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i] + 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (char)(string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string new_string = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            new_string += (string[i] + 32);\n        } else {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n\tstd::string result = \"\";\n\tfor (int i = 0; i < string.size(); i++) {\n\t\tif (string[i] >= 'A' && string[i] <= 'Z') {\n\t\t\tresult += (string[i] + 32);\n\t\t}\n\t\telse {\n\t\t\tresult += string[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += string[i] + 32;\n        } else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result;\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>=65 && string[i]<=90) {\n            result += string[i] + 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.size(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += string[i] + 32;\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i] + 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i] + 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        lower_string += tolower(string[i]);\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (char)(string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += string[i] + 32;\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (char)(string[i] + 32);\n        } else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 65 && string[i] <= 90) {\n            lower_string += string[i] + 32;\n        } else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (char)(string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string new_string = \"\";\n    for(int i=0;i<string.size();i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            new_string += (string[i] + 32);\n        }\n        else {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i] + 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string res;\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>=65 && string[i]<=90) {\n            res += string[i]+32;\n        }\n        else {\n            res += string[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string new_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            new_string += (char)(string[i] + 32);\n        }\n        else {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n\tfor(int i = 0; i < string.length(); i++) {\n\t\tif(string[i] >= 65 && string[i] <= 90) {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += string[i] + 32;\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (char)(string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 65 && string[i] <= 90) {\n            result += string[i] + 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for (int i = 0; i < string.length(); i++) {\n        lower_string += tolower(string[i]);\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i] + 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>='A' && string[i]<='Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for (int i = 0; i < string.size(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (auto i = 0; i < string.size(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i] + 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string new_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 65 && string[i] <= 90) {\n            new_string += (char)(string[i] + 32);\n        }\n        else {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 65 && string[i] <= 90) {\n            lower_string += string[i] + 32;\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n\tstd::string result = \"\";\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'A' && string[i] <= 'Z') {\n\t\t\tresult += (string[i] + 32);\n\t\t}\n\t\telse {\n\t\t\tresult += string[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i] + 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += string[i] + 32;\n        } else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n\tstd::string result = \"\";\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'A' && string[i] <= 'Z') {\n\t\t\tresult += (string[i] + 32);\n\t\t}\n\t\telse {\n\t\t\tresult += string[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i] + 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    int i = 0;\n    while (string[i] != '\\0') {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n        i++;\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>='A' && string[i]<='Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>='A' && string[i]<='Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i] + 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        result += tolower(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (char)(string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (string[i] + 32);\n        } else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            lower_string += (char)(string[i] + 32);\n        }\n        else {\n            lower_string += string[i];\n        }\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    int i = 0;\n    while(string[i] != '\\0') {\n        if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n        i++;\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        lower_string += tolower(string[i]);\n    }\n    return lower_string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 65 && string[i] <= 90) {\n            result += (string[i] + 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'A' && string[i] <= 'Z') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}