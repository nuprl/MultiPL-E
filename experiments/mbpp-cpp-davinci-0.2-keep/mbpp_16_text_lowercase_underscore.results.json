{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while(i < len) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if(text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (i == 0) {\n            if (!islower(text[i])) {\n                return false;\n            }\n        } else if (i == len - 1) {\n            if (!islower(text[i])) {\n                return false;\n            }\n        } else {\n            if (!islower(text[i]) && text[i] != '_') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (i == 0) {\n                return false;\n            }\n            if (i == text.size() - 1) {\n                return false;\n            }\n            if (text[i - 1] == '_') {\n                return false;\n            }\n            if (text[i + 1] == '_') {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "tmpkswbvhtj: /tmp/tmpkswbvhtj.cpp:33: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmp5zy2n5yk: /tmp/tmp5zy2n5yk.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.length() - 1) {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "tmpsntskzbu: /tmp/tmpsntskzbu.cpp:24: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if (text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            flag = true;\n        }\n        else if (text[i] == '_') {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.size()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if(text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  for (int i = 0; i < text.size(); i++) {\n    if (text[i] == '_') {\n      if (text[i+1] >= 'a' && text[i+1] <= 'z') {\n        continue;\n      }\n      else {\n        return false;\n      }\n    }\n    else if (text[i] >= 'a' && text[i] <= 'z') {\n      continue;\n    }\n    else {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    std::regex pattern(\"[a-z]+_[a-z]+\");\n    return std::regex_match(text, pattern);\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    int count1 = 0;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            count++;\n        }\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            count1++;\n        }\n    }\n    if(count == 1 && count1 == text.length() - 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            count++;\n        }\n    }\n    if(count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "tmps8uoofn2: /tmp/tmps8uoofn2.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int n = text.length();\n    for(int i = 0; i < n; i++) {\n        if(text[i] != '_' && text[i] != '_' && !(text[i] >= 'a' && text[i] <= 'z')) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    if (len == 0) {\n        return false;\n    }\n    if (text[0] >= 'a' && text[0] <= 'z') {\n        i = 1;\n    }\n    else {\n        return false;\n    }\n    while (i < len) {\n        if (text[i] == '_') {\n            i++;\n            if (text[i] >= 'a' && text[i] <= 'z') {\n                i++;\n            }\n            else {\n                return false;\n            }\n        }\n        else if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            flag = true;\n        } else if (text[i] == '_') {\n            flag = true;\n        } else {\n            return false;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] >= 'a' && text[i - 1] <= 'z') {\n                if (text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                    continue;\n                }\n            }\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "tmpq7q9osla: /tmp/tmpq7q9osla.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    // Write your code here\n    int len = text.length();\n    for(int i=0;i<len;i++){\n        if(text[i]>='a' && text[i]<='z'){\n            if(i+1<len && text[i+1]=='_'){\n                i++;\n                continue;\n            }\n            else{\n                return false;\n            }\n        }\n        else{\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "tmpngtxajvg: /tmp/tmpngtxajvg.cpp:25: int main(): Assertion `candidate((\"aab_cbbbc\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        } else if (text[i] == '_') {\n            continue;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if (text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool underscore = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            underscore = true;\n        } else if (text[i] >= 'a' && text[i] <= 'z') {\n            underscore = false;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            flag = true;\n        }\n        else if (text[i] >= 'a' && text[i] <= 'z') {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if (text.length() == 0) {\n        return false;\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.length() - 1) {\n                return false;\n            }\n            if (text[i - 1] == '_' || text[i + 1] == '_') {\n                return false;\n            }\n            if (!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "tmpdk9d2k88: /tmp/tmpdk9d2k88.cpp:27: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for(int i = 0; i < len; i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == len - 1) {\n                return false;\n            }\n            if(!islower(text[i-1]) || !islower(text[i+1])) {\n                return false;\n            }\n        }\n        else if(!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        } else if (text[i] == '_') {\n            continue;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = true;\n    for(int i = 0; i < text.size(); i++) {\n        if(i == 0) {\n            if(!islower(text[i])) {\n                flag = false;\n                break;\n            }\n        }\n        else if(i == text.size() - 1) {\n            if(!islower(text[i])) {\n                flag = false;\n                break;\n            }\n        }\n        else {\n            if(!islower(text[i]) && text[i] != '_') {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (text[i] != '\\0') {\n        if (text[i] == '_') {\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "tmpbi2rbnpz: /tmp/tmpbi2rbnpz.cpp:23: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n\tint i = 0;\n\twhile (i < text.size()) {\n\t\tif (text[i] >= 'a' && text[i] <= 'z') {\n\t\t\ti++;\n\t\t}\n\t\telse if (text[i] == '_') {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()) {\n        if(!islower(text[i])) {\n            if(text[i] != '_') {\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = true;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                flag = false;\n                break;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "tmpp26s35k2: /tmp/tmpp26s35k2.cpp:24: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n\tint len = text.length();\n\tif (len == 0) {\n\t\treturn false;\n\t}\n\tfor (int i = 0; i < len; i++) {\n\t\tif (text[i] >= 'a' && text[i] <= 'z') {\n\t\t\tcontinue;\n\t\t}\n\t\telse if (text[i] == '_') {\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            flag = true;\n        }\n        else if(text[i] >= 'a' && text[i] <= 'z') {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    while (i < len) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            if(text[i-1] >= 'a' && text[i-1] <= 'z' && text[i+1] >= 'a' && text[i+1] <= 'z') {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "tmpzjy_lr7u: /tmp/tmpzjy_lr7u.cpp:20: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  for (int i = 0; i < text.size(); i++) {\n    if (text[i] == '_') {\n      if (text[i+1] >= 'a' && text[i+1] <= 'z') {\n        continue;\n      }\n      else {\n        return false;\n      }\n    }\n    else if (text[i] >= 'a' && text[i] <= 'z') {\n      continue;\n    }\n    else {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    if(text[0] >= 'a' && text[0] <= 'z') {\n        for(int i = 1; i < len; i++) {\n            if(text[i] >= 'a' && text[i] <= 'z') {\n                continue;\n            }\n            else if(text[i] == '_') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()){\n        if(text[i] >= 'a' && text[i] <= 'z'){\n            i++;\n            continue;\n        }\n        else if(text[i] == '_'){\n            i++;\n            continue;\n        }\n        else{\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            count++;\n        }\n    }\n    if(count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "tmps8uoofn2: /tmp/tmps8uoofn2.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    int len = text.length();\n    while(i < len) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if(text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] >= 'a' && text[i - 1] <= 'z' && text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "tmpqyqyjlvt: /tmp/tmpqyqyjlvt.cpp:20: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = true;\n    for(int i = 0; i < text.size(); i++) {\n        if(!(text[i] >= 'a' && text[i] <= 'z')) {\n            if(text[i] != '_') {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            flag = true;\n        }\n        else if(flag == true) {\n            if(text[i] >= 'a' && text[i] <= 'z') {\n                flag = false;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(text[i] >= 'a' && text[i] <= 'z') {\n            flag = false;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    int len = text.length();\n    while (i < len) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmp5zy2n5yk: /tmp/tmp5zy2n5yk.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while (i < len) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if (text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i;\n    for(i=0;i<text.length();i++) {\n        if(text[i]=='_') {\n            if(text[i-1]>=97 && text[i-1]<=122 && text[i+1]>=97 && text[i+1]<=122) {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "tmpp523qnby: /tmp/tmpp523qnby.cpp:22: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i;\n    for(i=0;i<text.length();i++) {\n        if(text[i]=='_') {\n            if(i==0) {\n                return false;\n            }\n            if(text[i-1]=='_') {\n                return false;\n            }\n            if(i==text.length()-1) {\n                return false;\n            }\n            if(text[i+1]=='_') {\n                return false;\n            }\n            if(text[i-1]<'a' || text[i-1]>'z') {\n                return false;\n            }\n            if(text[i+1]<'a' || text[i+1]>'z') {\n                return false;\n            }\n        }\n        else {\n            if(text[i]<'a' || text[i]>'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for(int i=0;i<len;i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == len-1) {\n                return false;\n            }\n            if(!(text[i-1] >= 'a' && text[i-1] <= 'z')) {\n                return false;\n            }\n            if(!(text[i+1] >= 'a' && text[i+1] <= 'z')) {\n                return false;\n            }\n        }\n        else if(!(text[i] >= 'a' && text[i] <= 'z')) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if(text.size() == 0) {\n        return false;\n    }\n    for(int i = 0; i < text.size(); i++) {\n        if(i == 0) {\n            if(!islower(text[i])) {\n                return false;\n            }\n        } else if(i == text.size() - 1) {\n            if(!islower(text[i])) {\n                return false;\n            }\n        } else {\n            if(!islower(text[i]) && text[i] != '_') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool lowercase = false;\n    bool underscore = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (islower(text[i])) {\n            lowercase = true;\n        } else if (text[i] == '_') {\n            underscore = true;\n        } else {\n            return false;\n        }\n    }\n    return lowercase && underscore;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while(i < len) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if(text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            flag = true;\n        }\n        if (flag == true) {\n            if (text[i] == '_') {\n                return false;\n            }\n            if (text[i] >= 'A' && text[i] <= 'Z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "tmpo9wacwxm: /tmp/tmpo9wacwxm.cpp:23: int main(): Assertion `candidate((\"aab_cbbbc\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (islower(text[i]) || text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.length() - 1) {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "tmpsntskzbu: /tmp/tmpsntskzbu.cpp:24: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    int len = text.length();\n    while (i < len) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] >= 'a' && text[i - 1] <= 'z') {\n                if (text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                    flag = true;\n                } else {\n                    flag = false;\n                    break;\n                }\n            } else {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "tmpxf6yi453: /tmp/tmpxf6yi453.cpp:27: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  bool result = true;\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] != '_' && text[i] != ' ') {\n      if (text[i] < 'a' || text[i] > 'z') {\n        result = false;\n        break;\n      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  int i = 0;\n  while (text[i] != '\\0') {\n    if (text[i] >= 'a' && text[i] <= 'z') {\n      i++;\n    } else if (text[i] == '_') {\n      i++;\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (islower(text[i])) {\n            i++;\n            continue;\n        }\n        if (text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            flag = true;\n        }\n        else if(text[i] == '_') {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if(text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    std::string::iterator it;\n    for (it = text.begin(); it != text.end(); it++) {\n        if (*it == '_') {\n            if (it == text.begin()) {\n                return false;\n            }\n            if (it == text.end() - 1) {\n                return false;\n            }\n            if (!islower(*(it - 1)) || !islower(*(it + 1))) {\n                return false;\n            }\n        } else if (!islower(*it)) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if (text.size() == 0) {\n        return false;\n    }\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.size() - 1) {\n                return false;\n            }\n            if (text[i - 1] == '_' || text[i + 1] == '_') {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        } else {\n            if (text[i] < 'a' || text[i] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if (text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for(int i=0; i<len; i++) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        }\n        else if(text[i] == '_') {\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    if (text[0] >= 'a' && text[0] <= 'z') {\n        for (int i = 1; i < len; i++) {\n            if (text[i] == '_') {\n                if (i == len - 1) {\n                    return false;\n                }\n                if (text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                    continue;\n                }\n                else {\n                    return false;\n                }\n            }\n            else if (text[i] >= 'a' && text[i] <= 'z') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool result = true;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            if(text[i+1] < 'a' || text[i+1] > 'z') {\n                result = false;\n            }\n        }\n        else if(text[i] < 'a' || text[i] > 'z') {\n            result = false;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    if(text[0] >= 'a' && text[0] <= 'z') {\n        for(int i = 1; i < len; i++) {\n            if(text[i] >= 'a' && text[i] <= 'z') {\n                continue;\n            }\n            else if(text[i] == '_') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmp5zy2n5yk: /tmp/tmp5zy2n5yk.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int underscore = 0;\n    for (i = 0; i < text.length(); i++) {\n        if (text[i] == 'a') {\n            a++;\n        }\n        if (text[i] == 'b') {\n            b++;\n        }\n        if (text[i] == 'c') {\n            c++;\n        }\n        if (text[i] == 'd') {\n            d++;\n        }\n        if (text[i] == 'e') {\n            e++;\n        }\n        if (text[i] == 'f') {\n            f++;\n        }\n        if (text[i] == 'g') {\n            g++;\n        }\n        if (text[i] == 'h') {\n            h++;\n        }\n        if (text[i] == 'i') {\n            i++;\n        }\n        if (text[i] == 'j') {\n            j++;\n        }\n        if (text[i] == 'k') {\n            k++;\n        }\n        if (text[i] == 'l') {\n            l++;\n        }\n        if (text[i] == 'm') {\n            m++;\n        }\n        if (text[i] == 'n') {\n            n++;\n        }\n        if (text[i] == 'o') {\n            o++;\n        }\n        if (text[i] == 'p') {\n            p++;\n        }\n        if (text[i] == 'q') {\n            q++;\n        }\n        if (text[i] == 'r') {\n            r++;\n        }\n       \n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "/tmp/tmpdoimzxnu.cpp: In function \u2018bool text_lowercase_underscore(std::string)\u2019:\n/tmp/tmpdoimzxnu.cpp:26:13: error: \u2018a\u2019 was not declared in this scope\n   26 |             a++;\n      |             ^\n/tmp/tmpdoimzxnu.cpp:29:13: error: \u2018b\u2019 was not declared in this scope\n   29 |             b++;\n      |             ^\n/tmp/tmpdoimzxnu.cpp:32:13: error: \u2018c\u2019 was not declared in this scope\n   32 |             c++;\n      |             ^\n/tmp/tmpdoimzxnu.cpp:35:13: error: \u2018d\u2019 was not declared in this scope\n   35 |             d++;\n      |             ^\n/tmp/tmpdoimzxnu.cpp:38:13: error: \u2018e\u2019 was not declared in this scope\n   38 |             e++;\n      |             ^\n/tmp/tmpdoimzxnu.cpp:41:13: error: \u2018f\u2019 was not declared in this scope\n   41 |             f++;\n      |             ^\n/tmp/tmpdoimzxnu.cpp:44:13: error: \u2018g\u2019 was not declared in this scope\n   44 |             g++;\n      |             ^\n/tmp/tmpdoimzxnu.cpp:47:13: error: \u2018h\u2019 was not declared in this scope\n   47 |             h++;\n      |             ^\n/tmp/tmpdoimzxnu.cpp:81:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   81 | int main() {\n      |            ^\n/tmp/tmpdoimzxnu.cpp:86:1: error: expected \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmpdoimzxnu.cpp:4:50: note: to match this \u2018{\u2019\n    4 | bool text_lowercase_underscore(std::string text) {\n      |                                                  ^\n/tmp/tmpdoimzxnu.cpp:86:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   86 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            flag = true;\n        }\n        else if(text[i] >= 'a' && text[i] <= 'z') {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int n = text.length();\n    for(int i = 0; i < n; i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == n - 1) {\n                return false;\n            }\n            if(text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if(text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "tmp93cd1hls: /tmp/tmp93cd1hls.cpp:25: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for(int i=0;i<text.length();i++) {\n        if(text[i]=='_') {\n            if(i==0 || i==text.length()-1) {\n                return false;\n            }\n            if(!islower(text[i-1]) || !islower(text[i+1])) {\n                return false;\n            }\n        }\n        else if(!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    for(int i = 0; i < len; i++) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        }\n        else if(text[i] == '_') {\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    for(int i = 0; i < len; i++) {\n        if(i == 0) {\n            if(!islower(text[i])) {\n                return false;\n            }\n        }\n        else if(i == len - 1) {\n            if(!islower(text[i])) {\n                return false;\n            }\n        }\n        else {\n            if(!islower(text[i]) && text[i] != '_') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  int i = 0;\n  int len = text.length();\n  while (i < len) {\n    if (text[i] >= 'a' && text[i] <= 'z') {\n      i++;\n    } else if (text[i] == '_') {\n      i++;\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while(i < len) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if(text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == '_') {\n            if(text[i-1] >= 'a' && text[i-1] <= 'z' && text[i+1] >= 'a' && text[i+1] <= 'z') {\n                flag = true;\n            }\n            else {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "tmp71tfco5m: /tmp/tmp71tfco5m.cpp:23: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (islower(text[i])) {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if(text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    for(int i = 0; i < len; i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == len - 1) {\n                return false;\n            }\n            if(!(text[i - 1] >= 'a' && text[i - 1] <= 'z')) {\n                return false;\n            }\n            if(!(text[i + 1] >= 'a' && text[i + 1] <= 'z')) {\n                return false;\n            }\n        }\n        else {\n            if(!(text[i] >= 'a' && text[i] <= 'z')) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    int len = text.length();\n    while (i < len) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for (int i = 0; i < len; i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == len - 1) {\n                return false;\n            }\n            if (!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        }\n        else {\n            if (!islower(text[i])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n\tint len = text.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (text[i] >= 'a' && text[i] <= 'z') {\n\t\t\tcontinue;\n\t\t}\n\t\telse if (text[i] == '_') {\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    int len = text.length();\n    while(i < len) {\n        if(!islower(text[i])) {\n            if(text[i] == '_') {\n                if(i == len - 1) {\n                    return false;\n                }\n                if(!islower(text[i+1])) {\n                    return false;\n                }\n            }\n            else {\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    for(int i = 0; i < len; i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == len - 1) {\n                return false;\n            }\n            if(!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        }\n        else if(!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    for(int i = 0; i < len; i++) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        }\n        else if(text[i] == '_') {\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if (text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    for(int i = 0; i < len; i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == len - 1) {\n                return false;\n            }\n            if(!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        }\n        else if(!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int underscore_count = 0;\n    int lowercase_count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            underscore_count++;\n        }\n        if (islower(text[i])) {\n            lowercase_count++;\n        }\n    }\n    if (underscore_count == lowercase_count - 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "tmpuu949hc7: /tmp/tmpuu949hc7.cpp:22: int main(): Assertion `candidate((\"aab_cbbbc\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmpdvezth4n: /tmp/tmpdvezth4n.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for (int i = 0; i < len; i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == len - 1) {\n                return false;\n            }\n            if (!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        }\n        else if (!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for(int i = 0; i < len; i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == len - 1) {\n                return false;\n            }\n            if(!islower(text[i-1]) || !islower(text[i+1])) {\n                return false;\n            }\n        }\n        else if(!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for(int i = 0; i < len; i++) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            if(text[i+1] == '_') {\n                i++;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "tmpq3n2011m: /tmp/tmpq3n2011m.cpp:23: int main(): Assertion `candidate((\"aab_cbbbc\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int underscore_count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            underscore_count++;\n        }\n    }\n    if (underscore_count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "tmplyo6uceg: /tmp/tmplyo6uceg.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] >= 'a' && text[i - 1] <= 'z' && text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "tmpqyqyjlvt: /tmp/tmpqyqyjlvt.cpp:20: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int length = text.length();\n    if (length == 0) {\n        return false;\n    }\n    for (int i = 0; i < length; i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == length - 1) {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        } else {\n            if (text[i] < 'a' || text[i] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int n = text.length();\n    for (int i = 0; i < n; i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == n - 1) {\n                return false;\n            }\n            if (!(text[i - 1] >= 'a' && text[i - 1] <= 'z')) {\n                return false;\n            }\n            if (!(text[i + 1] >= 'a' && text[i + 1] <= 'z')) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "tmplko8xf4q: /tmp/tmplko8xf4q.cpp:25: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if (text.length() == 0) {\n        return false;\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.length() - 1) {\n                return false;\n            }\n            if (text[i-1] < 'a' || text[i-1] > 'z') {\n                return false;\n            }\n            if (text[i+1] < 'a' || text[i+1] > 'z') {\n                return false;\n            }\n        } else {\n            if (text[i] < 'a' || text[i] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while (i < len) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = true;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            if(text[i-1] < 'a' || text[i-1] > 'z') {\n                flag = false;\n                break;\n            }\n            if(text[i+1] < 'a' || text[i+1] > 'z') {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "tmpfqlj0sqw: /tmp/tmpfqlj0sqw.cpp:24: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = true;\n    for(int i = 0; i < text.size(); i++) {\n        if(i == 0 && text[i] != '_') {\n            if(!islower(text[i])) {\n                flag = false;\n                break;\n            }\n        }\n        else if(i == text.size() - 1 && text[i] != '_') {\n            if(!islower(text[i])) {\n                flag = false;\n                break;\n            }\n        }\n        else if(text[i] != '_') {\n            if(!islower(text[i])) {\n                flag = false;\n                break;\n            }\n        }\n        else if(text[i] == '_') {\n            if(!islower(text[i - 1]) || !islower(text[i + 1])) {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for(int i = 0; i < len; i++) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        }\n        else if(text[i] == '_') {\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i;\n    for(i=0;i<text.length();i++) {\n        if(text[i] == '_') {\n            if(text[i-1] >= 'a' && text[i-1] <= 'z' && text[i+1] >= 'a' && text[i+1] <= 'z') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "tmp_zf4_v5i: /tmp/tmp_zf4_v5i.cpp:22: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i-1] < 'a' || text[i-1] > 'z') {\n                return false;\n            }\n            if (text[i+1] < 'a' || text[i+1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "tmpzl0g0taj: /tmp/tmpzl0g0taj.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  int i = 0;\n  while (i < text.length()) {\n    if (text[i] >= 'a' && text[i] <= 'z') {\n      i++;\n    } else if (text[i] == '_') {\n      i++;\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    for(int i = 0; i < len; i++) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        } else if(text[i] == '_') {\n            continue;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            if(text[i-1] >= 'a' && text[i-1] <= 'z' && text[i+1] >= 'a' && text[i+1] <= 'z') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "tmp0tqxicvh: /tmp/tmp0tqxicvh.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmp5zy2n5yk: /tmp/tmp5zy2n5yk.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = true;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                flag = true;\n            } else {\n                flag = false;\n                break;\n            }\n        } else if (text[i] >= 'a' && text[i] <= 'z') {\n            flag = true;\n        } else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(text[i] != '\\0') {\n        if(text[i] == '_') {\n            if(text[i-1] >= 'a' && text[i-1] <= 'z') {\n                if(text[i+1] >= 'a' && text[i+1] <= 'z') {\n                    i++;\n                    continue;\n                }\n                else {\n                    return false;\n                }\n            }\n            else {\n                return false;\n            }\n        }\n        else if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while(i < len) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if(text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int n = text.length();\n    int i = 0;\n    while(i < n) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if(text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int underscore_count = 0;\n    int lowercase_count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            underscore_count++;\n        } else if (islower(text[i])) {\n            lowercase_count++;\n        }\n    }\n    if (underscore_count == lowercase_count - 1) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "tmpmbkzc3i3: /tmp/tmpmbkzc3i3.cpp:22: int main(): Assertion `candidate((\"aab_cbbbc\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    for(int i = 0; i < len; i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == len - 1) {\n                return false;\n            }\n            if(!(text[i - 1] >= 'a' && text[i - 1] <= 'z')) {\n                return false;\n            }\n            if(!(text[i + 1] >= 'a' && text[i + 1] <= 'z')) {\n                return false;\n            }\n        }\n        else {\n            if(!(text[i] >= 'a' && text[i] <= 'z')) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for (int i = 0; i < len; i++) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        } else if (text[i] == '_') {\n            continue;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] >= 'a' && text[i - 1] <= 'z' && text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "tmpyrum94d3: /tmp/tmpyrum94d3.cpp:20: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for(int i = 0; i < len; i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == len - 1) {\n                return false;\n            }\n            if(!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        }\n        else if(!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123383,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    if (text[0] >= 'a' && text[0] <= 'z') {\n        if (len == 1) {\n            return true;\n        }\n        if (text[1] == '_') {\n            return text_lowercase_underscore(text.substr(2, len - 2));\n        }\n        return text_lowercase_underscore(text.substr(1, len - 1));\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if(text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i;\n    int len = text.length();\n    for(i=0;i<len;i++) {\n        if(text[i] == '_') {\n            if(text[i+1] >= 'a' && text[i+1] <= 'z') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.length() - 1) {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "tmpsntskzbu: /tmp/tmpsntskzbu.cpp:24: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = true;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.length() - 1) {\n                flag = false;\n                break;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z' || text[i + 1] < 'a' || text[i + 1] > 'z') {\n                flag = false;\n                break;\n            }\n        } else if (text[i] < 'a' || text[i] > 'z') {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            flag = true;\n        }\n        else if(text[i] == '_') {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if (text.length() == 0) {\n        return false;\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.length() - 1) {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "tmpgv3ebrlw: /tmp/tmpgv3ebrlw.cpp:27: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if(text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == '_') {\n      if (text[i-1] < 'a' || text[i-1] > 'z') {\n        return false;\n      }\n      if (text[i+1] < 'a' || text[i+1] > 'z') {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "tmp0swk69c5: /tmp/tmp0swk69c5.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == '_') {\n      if (text[i-1] < 97 || text[i-1] > 122) {\n        return false;\n      }\n      if (text[i+1] < 97 || text[i+1] > 122) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "tmpmzbcfr8c: /tmp/tmpmzbcfr8c.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i-1] < 'a' || text[i-1] > 'z') {\n                return false;\n            }\n            if (text[i+1] < 'a' || text[i+1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "tmpzl0g0taj: /tmp/tmpzl0g0taj.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            flag = true;\n        }\n        else if (text[i] >= 'a' && text[i] <= 'z') {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123385,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    while (i < len) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if(text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] >= 'a' && text[i - 1] <= 'z' && text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "tmpqyqyjlvt: /tmp/tmpqyqyjlvt.cpp:20: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmp5zy2n5yk: /tmp/tmp5zy2n5yk.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if(text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  if (text.size() == 0) {\n    return false;\n  }\n  for (int i = 0; i < text.size(); i++) {\n    if (text[i] == '_') {\n      if (i == 0 || i == text.size() - 1) {\n        return false;\n      }\n      if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n        return false;\n      }\n      if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n        return false;\n      }\n    }\n    else {\n      if (text[i] < 'a' || text[i] > 'z') {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        } else if (text[i] == '_') {\n            continue;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if (text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            flag = true;\n            break;\n        }\n    }\n    if (flag) {\n        for (int i = 0; i < text.length(); i++) {\n            if (text[i] == '_') {\n                if (text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                    continue;\n                }\n                else {\n                    return false;\n                }\n            }\n            else if (text[i] >= 'a' && text[i] <= 'z') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if (text.empty()) {\n        return false;\n    }\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.size() - 1) {\n                return false;\n            }\n            if (!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        }\n        else if (!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    for(int i = 0; i < len; i++) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        }\n        else if(text[i] == '_') {\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            flag = true;\n            break;\n        }\n    }\n    if (flag == true) {\n        for (int i = 0; i < text.length(); i++) {\n            if (text[i] == '_') {\n                if (text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                    flag = true;\n                } else {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n    } else {\n        flag = false;\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "tmp3fminigk: /tmp/tmp3fminigk.cpp:32: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == '_') {\n            flag = true;\n        }\n        else if(text[i] >= 'a' && text[i] <= 'z') {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    if (text[0] < 'a' || text[0] > 'z') {\n        return false;\n    }\n    for (int i = 1; i < len; i++) {\n        if (text[i] == '_') {\n            if (i == len - 1) {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        } else if (text[i] < 'a' || text[i] > 'z') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if(text.size() == 0) return false;\n    for(int i = 0; i < text.size(); i++) {\n        if(i == 0) {\n            if(!islower(text[i])) return false;\n        } else {\n            if(text[i] == '_') {\n                if(!islower(text[i+1])) return false;\n            } else if(!islower(text[i])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            if(text[i-1] >= 'a' && text[i-1] <= 'z') {\n                if(text[i+1] >= 'a' && text[i+1] <= 'z') {\n                    continue;\n                }\n                else {\n                    return false;\n                }\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123391,
      "stdout": "",
      "stderr": "tmpx8rrs8hj: /tmp/tmpx8rrs8hj.cpp:26: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for (int i = 0; i < len; i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == len - 1) {\n                return false;\n            }\n            if (!(text[i - 1] >= 'a' && text[i - 1] <= 'z')) {\n                return false;\n            }\n            if (!(text[i + 1] >= 'a' && text[i + 1] <= 'z')) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123391,
      "stdout": "",
      "stderr": "tmp75ry0y4f: /tmp/tmp75ry0y4f.cpp:25: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            if(text[i-1] < 97 || text[i-1] > 122) {\n                return false;\n            }\n            if(text[i+1] < 97 || text[i+1] > 122) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123391,
      "stdout": "",
      "stderr": "tmp8yxfqpvl: /tmp/tmp8yxfqpvl.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n\tint i = 0;\n\twhile (text[i] != '\\0') {\n\t\tif (text[i] == '_') {\n\t\t\tif (text[i - 1] >= 'a' && text[i - 1] <= 'z' && text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (text[i] >= 'a' && text[i] <= 'z') {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if(text.length() == 0) return false;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == text.length() - 1) return false;\n            if(!islower(text[i - 1]) || !islower(text[i + 1])) return false;\n        } else if(!islower(text[i])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    bool flag = false;\n    while(text[i] != '\\0') {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            flag = true;\n        }\n        else if(text[i] == '_') {\n            if(flag == false) {\n                return false;\n            }\n            flag = false;\n        }\n        else {\n            return false;\n        }\n        i++;\n    }\n    if(flag == true) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123391,
      "stdout": "",
      "stderr": "tmp7fz89wc8: /tmp/tmp7fz89wc8.cpp:29: int main(): Assertion `candidate((\"aab_cbbbc\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmpdvezth4n: /tmp/tmpdvezth4n.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.size()) {\n        if(!islower(text[i])) {\n            if(text[i] == '_') {\n                i++;\n                if(!islower(text[i])) {\n                    return false;\n                }\n            }\n            else {\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            count++;\n        }\n    }\n    if(count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "tmps8uoofn2: /tmp/tmps8uoofn2.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = true;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == '_') {\n            if(text[i-1] < 'a' || text[i-1] > 'z') {\n                flag = false;\n                break;\n            }\n            if(text[i+1] < 'a' || text[i+1] > 'z') {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "tmpe7zzo79o: /tmp/tmpe7zzo79o.cpp:24: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int underscore = 0;\n    int length = text.length();\n    for (int i = 0; i < length; i++) {\n        if (text[i] == 'a') {\n            a++;\n        }\n        if (text[i] == 'b') {\n            b++;\n        }\n        if (text[i] == 'c') {\n            c++;\n        }\n        if (text[i] == 'd') {\n            d++;\n        }\n        if (text[i] == 'e') {\n            e++;\n        }\n        if (text[i] == 'f') {\n            f++;\n        }\n        if (text[i] == 'g') {\n            g++;\n        }\n        if (text[i] == 'h') {\n            h++;\n        }\n        if (text[i] == 'i') {\n            i++;\n        }\n        if (text[i] == 'j') {\n            j++;\n        }\n        if (text[i] == 'k') {\n            k++;\n        }\n        if (text[i] == 'l') {\n            l++;\n        }\n        if (text[i] == 'm') {\n            m++;\n        }\n        if (text[i] == 'n') {\n            n++;\n        }\n        if (text[i] == 'o') {\n            o++;\n        }\n        if (text[i] == 'p') {\n            p++;\n        }\n        if (text[i] == 'q') {\n            q++;\n        }\n        if (text[i] == 'r') {\n\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "/tmp/tmpozepp1ke.cpp: In function \u2018bool text_lowercase_underscore(std::string)\u2019:\n/tmp/tmpozepp1ke.cpp:27:13: error: \u2018a\u2019 was not declared in this scope\n   27 |             a++;\n      |             ^\n/tmp/tmpozepp1ke.cpp:30:13: error: \u2018b\u2019 was not declared in this scope\n   30 |             b++;\n      |             ^\n/tmp/tmpozepp1ke.cpp:33:13: error: \u2018c\u2019 was not declared in this scope\n   33 |             c++;\n      |             ^\n/tmp/tmpozepp1ke.cpp:36:13: error: \u2018d\u2019 was not declared in this scope\n   36 |             d++;\n      |             ^\n/tmp/tmpozepp1ke.cpp:39:13: error: \u2018e\u2019 was not declared in this scope\n   39 |             e++;\n      |             ^\n/tmp/tmpozepp1ke.cpp:42:13: error: \u2018f\u2019 was not declared in this scope\n   42 |             f++;\n      |             ^\n/tmp/tmpozepp1ke.cpp:45:13: error: \u2018g\u2019 was not declared in this scope\n   45 |             g++;\n      |             ^\n/tmp/tmpozepp1ke.cpp:48:13: error: \u2018h\u2019 was not declared in this scope\n   48 |             h++;\n      |             ^\n/tmp/tmpozepp1ke.cpp:80:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   80 | int main() {\n      |            ^\n/tmp/tmpozepp1ke.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpozepp1ke.cpp:25:38: note: to match this \u2018{\u2019\n   25 |     for (int i = 0; i < length; i++) {\n      |                                      ^\n/tmp/tmpozepp1ke.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpozepp1ke.cpp:4:50: note: to match this \u2018{\u2019\n    4 | bool text_lowercase_underscore(std::string text) {\n      |                                                  ^\n/tmp/tmpozepp1ke.cpp:85:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   85 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    // Your code goes here\n    int i=0;\n    while(text[i]!='\\0'){\n        if(text[i]>='a' && text[i]<='z'){\n            i++;\n        }\n        else if(text[i]=='_'){\n            i++;\n        }\n        else{\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if (text.length() == 0) {\n        return false;\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.length() - 1) {\n                return false;\n            }\n            if (text[i - 1] == '_' || text[i + 1] == '_') {\n                return false;\n            }\n            if (!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        } else if (!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  for (int i = 0; i < text.size(); i++) {\n    if (text[i] == '_') {\n      if (text[i-1] < 97 || text[i-1] > 122) {\n        return false;\n      }\n      if (text[i+1] < 97 || text[i+1] > 122) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123391,
      "stdout": "",
      "stderr": "tmpf6i2tgm1: /tmp/tmpf6i2tgm1.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(text[i] != '\\0') {\n        if(text[i] == '_') {\n            if(text[i+1] == '_') {\n                return false;\n            }\n            if(!islower(text[i+1])) {\n                return false;\n            }\n        }\n        else if(!islower(text[i])) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = true;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                flag = false;\n                break;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmp95h8udna: /tmp/tmp95h8udna.cpp:24: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    // Write your code here\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            count++;\n        }\n    }\n    if (count > 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123391,
      "stdout": "",
      "stderr": "tmpgb75qs0x: /tmp/tmpgb75qs0x.cpp:22: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if (text.size() == 0) {\n        return false;\n    }\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.size() - 1) {\n                return false;\n            }\n            if (text[i - 1] == '_' || text[i + 1] == '_') {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "tmp3t1pfdgw: /tmp/tmp3t1pfdgw.cpp:30: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if (text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    for(int i = 0; i < len; i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == len-1) {\n                return false;\n            }\n            if(!(text[i-1] >= 'a' && text[i-1] <= 'z')) {\n                return false;\n            }\n            if(!(text[i+1] >= 'a' && text[i+1] <= 'z')) {\n                return false;\n            }\n        }\n        else if(!(text[i] >= 'a' && text[i] <= 'z')) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}