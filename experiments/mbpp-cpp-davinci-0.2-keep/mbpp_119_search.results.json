{
  "name": "mbpp_119_search",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "tmptziez61i: /tmp/tmptziez61i.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "tmpf_k0fl5u: /tmp/tmpf_k0fl5u.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    long n = arr.size();\n    long l = 0;\n    long r = n-1;\n    while(l<=r){\n        long mid = l + (r-l)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                r = mid-2;\n            }\n            else{\n                l = mid+1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                l = mid+2;\n            }\n            else{\n                r = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int l = 0, r = n - 1;\n    while (l <= r) {\n        int mid = l + (r - l) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                r = mid - 2;\n            } else {\n                l = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                l = mid + 2;\n            } else {\n                r = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n - 1;\n    while(low <= high) {\n        int mid = low + (high - low) / 2;\n        if(mid == 0 || mid == n - 1)\n            return arr[mid];\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n            return arr[mid];\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0)\n                high = mid - 2;\n            else\n                low = mid + 1;\n        }\n        else {\n            if(mid % 2 == 0)\n                low = mid + 2;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]) {\n                if((mid-1)%2 == 0) {\n                    low = mid+1;\n                }\n                else {\n                    high = mid-1;\n                }\n            }\n            else {\n                if((mid-1)%2 == 0) {\n                    high = mid-1;\n                }\n                else {\n                    low = mid+1;\n                }\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if((mid)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                high = mid-2;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        if(arr[mid] == arr[mid+1]){\n            if(mid%2 == 0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "tmp8z3l5xc_: /tmp/tmp8z3l5xc_.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid - 2;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                low = mid + 2;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "tmpln1lb6n4: /tmp/tmpln1lb6n4.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Do not write main() function.\n    // Do not read input, instead use the arguments to the function.\n    // Do not print the output, instead return values as specified\n    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid = (low+high)/2;\n    while(low<=high) {\n        mid = (low+high)/2;\n        if(mid==0) {\n            if(arr[mid]!=arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else if(mid==n-1) {\n            if(arr[mid]!=arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]) {\n                return arr[mid];\n            }\n            else if(arr[mid]==arr[mid-1]) {\n                if((mid-1)%2==0) {\n                    low = mid+1;\n                }\n                else {\n                    high = mid-1;\n                }\n            }\n            else if(arr[mid]==arr[mid+1]) {\n                if((mid+1)%2==0) {\n                    low = mid+2;\n                }\n                else {\n                    high = mid-1;\n                }\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "tmppkatozz6: /tmp/tmppkatozz6.cpp:57: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "tmpcy0ohzo8: /tmp/tmpcy0ohzo8.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high)\n    {\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1)\n            return arr[mid];\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n            return arr[mid];\n        else if(arr[mid]==arr[mid-1] && mid%2==0)\n            low = mid+1;\n        else if(arr[mid]==arr[mid+1] && mid%2==1)\n            low = mid+1;\n        else\n            high = mid-1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "tmpmyscky1r: /tmp/tmpmyscky1r.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return 0;\n    int n = arr.size();\n    int start = 0, end = n - 1;\n    while (start <= end) {\n        int mid = start + (end - start) / 2;\n        if (mid == 0 || mid == n - 1)\n            return arr[mid];\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n            return arr[mid];\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0)\n                end = mid - 2;\n            else\n                start = mid + 1;\n        } else {\n            if (mid % 2 == 0)\n                start = mid + 2;\n            else\n                end = mid - 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while (low <= high) {\n        int mid = low + (high - low)/2;\n        if (mid == 0 || mid == n-1)\n            return arr[mid];\n        if (arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        if (arr[mid] == arr[mid-1]) {\n            if (mid%2 == 0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else {\n            if (mid%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high)\n    {\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1)\n            return arr[mid];\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n            return arr[mid];\n        else if(arr[mid]==arr[mid-1])\n        {\n            if(mid%2==0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else if(arr[mid]==arr[mid+1])\n        {\n            if(mid%2==0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1] && mid%2 == 0) {\n            low = mid+1;\n        }\n        else if(arr[mid] == arr[mid+1] && mid%2 == 1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "tmp28q85b7z: /tmp/tmp28q85b7z.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Return the element that appears only once in the array.\n    //  If no such element is found, return -1.\n    long n = arr.size();\n    if(n == 1)\n        return arr[0];\n    if(n == 2)\n        return -1;\n    long l = 0, r = n-1;\n    while(l <= r) {\n        long mid = l + (r-l)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                l = mid+1;\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                r = mid-1;\n        }\n        else if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1])\n            l = mid+1;\n        else if(arr[mid] == arr[mid+1])\n            r = mid-1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "tmp2ps5pbo0: /tmp/tmp2ps5pbo0.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    if(n == 1)\n        return arr[0];\n    long low = 0;\n    long high = n-1;\n    while(low <= high){\n        long mid = low + (high-low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid)%2 == 0)\n                high = mid-1;\n            else\n                low = mid+2;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "tmpn4309mo0: /tmp/tmpn4309mo0.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++){\n        if(arr[i]!=arr[i+1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "tmpymf06dt9: /tmp/tmpymf06dt9.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "tmpvgmgln2_: /tmp/tmpvgmgln2_.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-2;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if((mid+1)%2==0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "tmpcyfq24li: /tmp/tmpcyfq24li.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]) {\n                if((mid-1) % 2 == 0) {\n                    low = mid + 1;\n                }\n                else {\n                    high = mid - 1;\n                }\n            }\n            else {\n                if((mid-1) % 2 == 0) {\n                    high = mid - 1;\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int i = 0;\n    while(i < n) {\n        if(arr[i] == arr[i+1]) {\n            i += 2;\n        }\n        else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "tmp_ku6gf0c: /tmp/tmp_ku6gf0c.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Do not write main() function.\n    //  Do not read input, instead use the arguments to the function.\n    //  Do not print the output, instead return values as specified\n    //  Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "tmp97gk__j5: /tmp/tmp97gk__j5.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "tmpr4oxpriv: /tmp/tmpr4oxpriv.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if((mid+1)%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "tmp41wj7tao: /tmp/tmp41wj7tao.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "tmp06_wrukr: /tmp/tmp06_wrukr.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid = low + (high-low)/2;\n    while(low < high) {\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            return arr[mid];\n        }\n        mid = low + (high-low)/2;\n    }\n    return arr[low];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  if(arr.size()==0)\n    //     return -1;\n    // if(arr.size()==1)\n    //     return arr[0];\n    // if(arr.size()==2)\n    //     return -1;\n    // int i=0;\n    // while(i<arr.size()-1)\n    // {\n    //     if(arr[i]!=arr[i+1])\n    //         return arr[i];\n    //     i+=2;\n    // }\n    // return -1;\n    int n=arr.size();\n    if(n==0)\n        return -1;\n    if(n==1)\n        return arr[0];\n    if(n==2)\n        return -1;\n    int low=0;\n    int high=n-1;\n    while(low<=high)\n    {\n        int mid=low+(high-low)/2;\n        if(mid%2==0)\n        {\n            if(arr[mid]==arr[mid+1])\n                low=mid+2;\n            else\n                high=mid-1;\n        }\n        else\n        {\n            if(arr[mid]==arr[mid-1])\n                low=mid+1;\n            else\n                high=mid-1;\n        }\n    }\n    return arr[low];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if((mid-1)%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1)\n            return arr[mid];\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0)\n                low = mid+1;\n            else\n                high = mid-2;\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if((mid+1)%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "tmpmy_pdycs: /tmp/tmpmy_pdycs.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Please add your code here\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++)\n    {\n        if(arr[i] != arr[i+1])\n        {\n            return arr[i];\n        }\n    }\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "tmphnk2lvyk: /tmp/tmphnk2lvyk.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123331,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int l = 0, r = n-1;\n    while(l<=r) {\n        int mid = (l+r)/2;\n        if(mid == 0 || mid == n-1)\n            return arr[mid];\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0)\n                l = mid+1;\n            else\n                r = mid-1;\n        }\n        else {\n            if(mid%2 == 0)\n                r = mid-1;\n            else\n                l = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "tmp7176paf6: /tmp/tmp7176paf6.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = (low+high)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1]){\n                return arr[mid];\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1]){\n                return arr[mid];\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]){\n                if((mid-1)%2 == 0){\n                    low = mid+1;\n                }\n                else{\n                    high = mid-1;\n                }\n            }\n            else if(arr[mid] == arr[mid+1]){\n                if((mid+1)%2 == 0){\n                    low = mid+1;\n                }\n                else{\n                    high = mid-1;\n                }\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "tmp_g3jhg0x: /tmp/tmp_g3jhg0x.cpp:54: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int i = 0;\n    while(i<n) {\n        if(arr[i] == arr[i+1]) {\n            i = i+2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Please add your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid%2==0){\n            if(arr[mid]==arr[mid+1]){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(arr[mid]==arr[mid-1]){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return arr[low];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n\t// Write your code here\n\tint n = arr.size();\n\tif (n == 1)\n\t\treturn arr[0];\n\tif (arr[0] != arr[1])\n\t\treturn arr[0];\n\tif (arr[n - 1] != arr[n - 2])\n\t\treturn arr[n - 1];\n\tfor (int i = 1; i < n - 1; i++) {\n\t\tif (arr[i] != arr[i - 1] && arr[i] != arr[i + 1])\n\t\t\treturn arr[i];\n\t}\n\treturn -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(mid%2 == 0) {\n            if(arr[mid] == arr[mid+1]) {\n                low = mid+2;\n            }\n            else {\n                high = mid-2;\n            }\n        }\n        else {\n            if(arr[mid] == arr[mid-1]) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "tmpvzbs7uyh: /tmp/tmpvzbs7uyh.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "tmp5uq8tb9n: /tmp/tmp5uq8tb9n.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1)\n            return arr[mid];\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else {\n            if(mid%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-2;\n            }\n        }\n        else{\n            if(mid%2==0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if((mid)%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(mid%2==0){\n            if(arr[mid]==arr[mid+1]){\n                low = mid+2;\n            }\n            else{\n                high = mid-2;\n            }\n        }\n        else{\n            if(arr[mid]==arr[mid-1]){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (mid == 0) {\n            if (arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            } else {\n                low = mid + 1;\n            }\n        } else if (mid == arr.size() - 1) {\n            if (arr[mid] != arr[mid - 1]) {\n                return arr[mid];\n            } else {\n                high = mid - 1;\n            }\n        } else if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        } else if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if ((mid + 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "tmpucrtovcf: /tmp/tmpucrtovcf.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high){\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0){\n                low = mid + 1;\n            }\n            else{\n                high = mid - 2;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid)%2 == 0){\n                low = mid + 2;\n            }\n            else{\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n\t// Write your code here\n\tint n = arr.size();\n\tint low = 0;\n\tint high = n - 1;\n\tint mid;\n\twhile (low <= high) {\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0) {\n\t\t\tif (arr[mid] != arr[mid + 1]) {\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\t\telse if (mid == n - 1) {\n\t\t\tif (arr[mid] != arr[mid - 1]) {\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t\telse {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t\telse if (arr[mid] == arr[mid - 1]) {\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "tmpi56ylmr7: /tmp/tmpi56ylmr7.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int i = 0;\n    while(i < n)\n    {\n        if(arr[i] == arr[i+1])\n        {\n            i = i + 2;\n        }\n        else\n        {\n            return arr[i];\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0){\n                low = mid+1;\n            }else{\n                high = mid-1;\n            }\n        }else{\n            if((mid-1)%2 == 0){\n                high = mid-1;\n            }else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "tmplv_6zo5o: /tmp/tmplv_6zo5o.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return 0;\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid + 1;\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid - 1;\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n                return arr[mid];\n            else if(arr[mid] == arr[mid-1])\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "tmp2j2swqdo: /tmp/tmp2j2swqdo.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    long n = arr.size();\n    if(n == 1)\n        return arr[0];\n    long low = 0, high = n-1;\n    while(low <= high){\n        long mid = low + (high-low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else{\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n                return arr[mid];\n            else if(arr[mid] == arr[mid-1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "tmpq1o3qvoz: /tmp/tmpq1o3qvoz.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = low + (high - low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid + 1;\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid - 1;\n        }\n        else if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid+1)%2 == 0)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "tmp6jxaaoiq: /tmp/tmp6jxaaoiq.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "tmpjzh56qb7: /tmp/tmpjzh56qb7.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "tmpf_k0fl5u: /tmp/tmpf_k0fl5u.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high)\n    {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1)\n            return arr[mid];\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1])\n        {\n            if((mid-1)%2 == 0)\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n        else if(arr[mid] == arr[mid+1])\n        {\n            if((mid+1)%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "tmpynesyao9: /tmp/tmpynesyao9.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = (low+high)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "tmp0cmao8_3: /tmp/tmp0cmao8_3.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i+=2){\n        if(arr[i]!=arr[i+1]){\n            return arr[i];\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "tmppgnbqqtj: /tmp/tmppgnbqqtj.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  assert(arr.size()>0);\n    int n = arr.size();\n    if (n == 1)\n        return arr[0];\n    if (arr[0] != arr[1])\n        return arr[0];\n    if (arr[n - 1] != arr[n - 2])\n        return arr[n - 1];\n    int low = 1;\n    int high = n - 2;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n            return arr[mid];\n        else if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0)\n                high = mid - 2;\n            else\n                low = mid + 1;\n        } else {\n            if (mid % 2 == 0)\n                low = mid + 2;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int i = 0;\n    while(i < n) {\n        if(i == n-1) {\n            return arr[i];\n        }\n        if(arr[i] != arr[i+1]) {\n            return arr[i];\n        }\n        i += 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int i;\n    for(i=0;i<arr.size();i++)\n    {\n        if(arr[i]!=arr[i+1])\n        {\n            return arr[i];\n        }\n        i++;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = low + (high - low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid + 1;\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid - 1;\n        }\n        else{\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n                return arr[mid];\n            else if(arr[mid] == arr[mid-1])\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "tmpwwvm3v6c: /tmp/tmpwwvm3v6c.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-2;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if((mid)%2==0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return 0;\n    int n=arr.size();\n    int low=0,high=n-1;\n    while(low<=high){\n        int mid=(low+high)/2;\n        if(mid==0){\n            if(arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else\n                low=mid+1;\n        }\n        else if(mid==n-1){\n            if(arr[mid]!=arr[mid-1])\n                return arr[mid];\n            else\n                high=mid-1;\n        }\n        else if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n            return arr[mid];\n        else if(arr[mid]==arr[mid-1]){\n            if(mid%2==0)\n                high=mid-2;\n            else\n                low=mid+1;\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0)\n                low=mid+2;\n            else\n                high=mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high){\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "tmp7_xxtckj: /tmp/tmp7_xxtckj.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510194,
      "stdout": "",
      "stderr": "tmpcy0ohzo8: /tmp/tmpcy0ohzo8.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "tmpzq07itja: /tmp/tmpzq07itja.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "tmput4gbwby: /tmp/tmput4gbwby.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Please add your code here\n    int i;\n    for(i=0;i<arr.size();i++)\n    {\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1])\n        {\n            return arr[i];\n        }\n    }\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "tmpvzbs7uyh: /tmp/tmpvzbs7uyh.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                high = mid-2;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = (low+high)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1]){\n                return arr[mid];\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1]){\n                return arr[mid];\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]){\n                if((mid-1)%2 == 0){\n                    low = mid+1;\n                }\n                else{\n                    high = mid-1;\n                }\n            }\n            else{\n                if((mid-1)%2 == 0){\n                    high = mid-1;\n                }\n                else{\n                    low = mid+1;\n                }\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid+1)%2 == 0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "tmpk8seh8zm: /tmp/tmpk8seh8zm.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 2;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1)\n            return arr[mid];\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n            return arr[mid];\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0)\n                high = mid - 2;\n            else\n                low = mid + 1;\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0)\n                low = mid + 2;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high){\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "tmp8k7jy_j6: /tmp/tmp8k7jy_j6.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    if(n==1)\n        return arr[0];\n    int i=0;\n    for(i=0;i<n-1;i++)\n    {\n        if(arr[i]!=arr[i+1])\n            return arr[i];\n        i++;\n    }\n    return arr[i];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                high = mid-2;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = (low + high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1] && mid%2 == 0) {\n            low = mid+1;\n        }\n        else if(arr[mid] == arr[mid-1] && mid%2 != 0) {\n            high = mid-1;\n        }\n        else if(arr[mid] == arr[mid+1] && mid%2 == 0) {\n            high = mid-1;\n        }\n        else if(arr[mid] == arr[mid+1] && mid%2 != 0) {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "tmp8r6m66s5: /tmp/tmp8r6m66s5.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    if(n == 1)\n        return arr[0];\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n                return arr[mid];\n            else if(arr[mid] == arr[mid-1])\n                low = mid+1;\n            else if(arr[mid] == arr[mid+1])\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "tmpku20nwl5: /tmp/tmpku20nwl5.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = (low+high)/2;\n        if(mid%2==0){\n            if(arr[mid]==arr[mid+1]){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(arr[mid]==arr[mid-1]){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return arr[low];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return 0;\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    int mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if ((mid + 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "tmp9i5sdy4h: /tmp/tmp9i5sdy4h.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high){\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                high = mid - 2;\n            }\n            else{\n                low = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if(mid%2 == 0){\n                low = mid + 2;\n            }\n            else{\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if(mid%2 == 0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "tmpnyqmejhq: /tmp/tmpnyqmejhq.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high){\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-2;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid+1)%2 == 0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "tmpares42fl: /tmp/tmpares42fl.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if ((mid - 1) % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n\t// Write your code here\n\tint n = arr.size();\n\tif (n == 0)\n\t\treturn -1;\n\tif (n == 1)\n\t\treturn arr[0];\n\tint low = 0;\n\tint high = n - 1;\n\twhile (low <= high) {\n\t\tint mid = low + (high - low) / 2;\n\t\tif (mid == 0) {\n\t\t\tif (arr[mid] != arr[mid + 1])\n\t\t\t\treturn arr[mid];\n\t\t\telse\n\t\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if (mid == n - 1) {\n\t\t\tif (arr[mid] != arr[mid - 1])\n\t\t\t\treturn arr[mid];\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t\treturn arr[mid];\n\t\telse if (arr[mid] == arr[mid - 1]) {\n\t\t\tif (mid % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) {\n\t\t\tif (mid % 2 == 0)\n\t\t\t\thigh = mid - 1;\n\t\t\telse\n\t\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "tmpux8zi9th: /tmp/tmpux8zi9th.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    if(n==1)\n        return arr[0];\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid==0){\n            if(arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid==n-1){\n            if(arr[mid]!=arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else{\n            if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else if(arr[mid]==arr[mid-1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "tmp4elvho2_: /tmp/tmp4elvho2_.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "tmp_3eu71h1: /tmp/tmp_3eu71h1.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    int mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1)\n            return arr[mid];\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0)\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n        else {\n            if(mid%2 == 0)\n                high = mid-1;\n            else\n                low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "tmpks2ktfem: /tmp/tmpks2ktfem.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    if(n == 1)\n        return arr[0];\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid + 1;\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid - 1;\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n                return arr[mid];\n            else if(arr[mid] == arr[mid-1])\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "tmplwjg_lv7: /tmp/tmplwjg_lv7.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high){\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid % 2 == 0){\n                high = mid - 2;\n            }\n            else{\n                low = mid + 1;\n            }\n        }\n        else{\n            if(mid % 2 == 0){\n                low = mid + 2;\n            }\n            else{\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high)\n    {\n        mid = low + (high-low)/2;\n        if(mid==0)\n        {\n            if(arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid==n-1)\n        {\n            if(arr[mid]!=arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else\n        {\n            if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else if(arr[mid]==arr[mid-1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "tmpdt6_90i7: /tmp/tmpdt6_90i7.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "tmplv_6zo5o: /tmp/tmplv_6zo5o.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    if(n==1)\n        return arr[0];\n    long low = 0, high = n-1;\n    while(low<=high) {\n        long mid = (low+high)/2;\n        if(mid==0) {\n            if(arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid==n-1) {\n            if(arr[mid]!=arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else {\n            if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else if(arr[mid]==arr[mid-1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "tmpc8a_dddt: /tmp/tmpc8a_dddt.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Please add your code here\n    int n = arr.size();\n    int i = 0;\n    while(i < n){\n        if(i == n-1){\n            return arr[i];\n        }\n        if(arr[i] != arr[i+1]){\n            return arr[i];\n        }\n        i += 2;\n    }\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Please add your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high)\n    {\n        mid = (low+high)/2;\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n            return arr[mid];\n        else if(arr[mid]==arr[mid-1] && mid%2==0)\n            low = mid+1;\n        else if(arr[mid]==arr[mid-1] && mid%2!=0)\n            high = mid-1;\n        else if(arr[mid]==arr[mid+1] && mid%2==0)\n            high = mid-1;\n        else if(arr[mid]==arr[mid+1] && mid%2!=0)\n            low = mid+1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "tmpb3nm3a5o: /tmp/tmpb3nm3a5o.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    int mid = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        if(arr[mid] == arr[mid + 1]) {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "tmpwt10vq4t: /tmp/tmpwt10vq4t.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    if(n == 1)\n        return arr[0];\n    if(arr[0] != arr[1])\n        return arr[0];\n    if(arr[n-1] != arr[n-2])\n        return arr[n-1];\n    int low = 1, high = n-2;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Your code here\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++)\n    {\n        if(arr[i]!=arr[i+1])\n        {\n            return arr[i];\n        }\n        i++;\n    }\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return arr[mid];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n - 1;\n    while(low <= high) {\n        int mid = (low + high) / 2;\n        if(mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "tmpd6rbkdh0: /tmp/tmpd6rbkdh0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int i;\n    for(i=0;i<arr.size();i++)\n    {\n        if(arr[i]!=arr[i+1])\n        {\n            return arr[i];\n        }\n        else\n        {\n            i++;\n        }\n    }\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high)\n    {\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1)\n            return arr[mid];\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n            return arr[mid];\n        if(arr[mid]==arr[mid-1])\n        {\n            if((mid-1)%2==0)\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n        else\n        {\n            if((mid-1)%2==0)\n                high = mid-1;\n            else\n                low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int i = 0;\n    while(i < n){\n        if(i == n-1){\n            return arr[i];\n        }\n        if(arr[i] == arr[i+1]){\n            i = i+2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    if(n==1)\n        return arr[0];\n    int i=0;\n    while(i<n-1){\n        if(arr[i]!=arr[i+1])\n            return arr[i];\n        i+=2;\n    }\n    return arr[n-1];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low<=high){\n        long mid = low + (high-low)/2;\n        if(mid%2==0){\n            if(arr[mid]==arr[mid+1]){\n                low = mid+2;\n            }\n            else{\n                high = mid;\n            }\n        }\n        else{\n            if(arr[mid]==arr[mid-1]){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return arr[low];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high){\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-2;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid)%2 == 0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    int mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++){\n        if(arr[i]!=arr[i+1]){\n            return arr[i];\n        }\n        i++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return -1;\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1)\n            return arr[mid];\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n            return arr[mid];\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0)\n                high = mid - 2;\n            else\n                low = mid + 1;\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0)\n                low = mid + 2;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid==0){\n            if(arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid==n-1){\n            if(arr[mid]!=arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else{\n            if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else if(arr[mid]==arr[mid-1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "tmpmtya73yb: /tmp/tmpmtya73yb.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Your code here\n    int n = arr.size();\n    int i = 0;\n    while(i < n){\n        if(arr[i] != arr[i+1]){\n            return arr[i];\n        }\n        i += 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Write your code here\n    int n = arr.size();\n    int low = 0, high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid + 1;\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid - 1;\n        }\n        else if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if((mid+1)%2 == 0)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "tmpwdu7310e: /tmp/tmpwdu7310e.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return 0;\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "tmp8_oczgn3: /tmp/tmp8_oczgn3.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "tmp6pncyyc0: /tmp/tmp6pncyyc0.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = low + (high-low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0)\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid+1)%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "tmprmhedzce: /tmp/tmprmhedzce.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmp5lj7l3wb: /tmp/tmp5lj7l3wb.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++)\n    {\n        if(arr[i]!=arr[i+1])\n            return arr[i];\n        i++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Write your code here\n    int n = arr.size();\n    int i = 0;\n    while(i < n){\n        if(arr[i] == arr[i+1]){\n            i += 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                high = mid-2;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if(mid%2 == 0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++)\n    {\n        if(arr[i]!=arr[i+1])\n        {\n            return arr[i];\n        }\n        i++;\n    }\n    return arr[i];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = (low+high)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]) {\n                if((mid-1)%2 == 0) {\n                    low = mid+1;\n                }\n                else {\n                    high = mid-1;\n                }\n            }\n            else {\n                if((mid-1)%2 == 0) {\n                    high = mid-1;\n                }\n                else {\n                    low = mid+1;\n                }\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return 0;\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high){\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                high = mid-2;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if(mid%2 == 0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int i=0;\n    while(i<n){\n        if(arr[i]==arr[i+1]){\n            i=i+2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid==0){\n            if(arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid==n-1){\n            if(arr[mid]!=arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else{\n            if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else if(arr[mid]==arr[mid-1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmpd7l45bs4: /tmp/tmpd7l45bs4.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    if(n == 1)\n        return arr[0];\n    int left = 0;\n    int right = n - 1;\n    while(left <= right) {\n        int mid = left + (right - left) / 2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid + 1])\n                return arr[mid];\n            else\n                left = mid + 1;\n        }\n        else if(mid == n - 1) {\n            if(arr[mid] != arr[mid - 1])\n                return arr[mid];\n            else\n                right = mid - 1;\n        }\n        else {\n            if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n                return arr[mid];\n            else if(arr[mid] == arr[mid - 1])\n                right = mid - 1;\n            else\n                left = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmp_em5j0wu: /tmp/tmp_em5j0wu.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1) return arr[0];\n    int low = 0, high = n-1;\n    while(low <= high){\n        int mid = low + (high-low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1]) return arr[mid];\n            else low = mid+1;\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1]) return arr[mid];\n            else high = mid-1;\n        }\n        else if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) return arr[mid];\n        else if(arr[mid] == arr[mid-1]) low = mid+1;\n        else high = mid-1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmpcdtxq01v: /tmp/tmpcdtxq01v.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    if (n == 1)\n        return arr[0];\n    long start = 0;\n    long end = n - 1;\n    while (start <= end) {\n        long mid = start + (end - start) / 2;\n        if (mid == 0) {\n            if (arr[mid] != arr[mid + 1])\n                return arr[mid];\n            else\n                start = mid + 1;\n        }\n        else if (mid == n - 1) {\n            if (arr[mid] != arr[mid - 1])\n                return arr[mid];\n            else\n                end = mid - 1;\n        }\n        else {\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n                return arr[mid];\n            else if (arr[mid] == arr[mid - 1])\n                end = mid - 2;\n            else\n                start = mid + 2;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmphj0aymiw: /tmp/tmphj0aymiw.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int i;\n    for(i=0;i<arr.size();i++){\n        if(arr[i]!=arr[i+1]){\n            return arr[i];\n        }\n        i++;\n    }\n    return arr[i];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    long n = arr.size();\n    long ans = arr[0];\n    for(long i = 1; i < n; i++) {\n        ans = ans ^ arr[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  assert(arr.size()>0);\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    int mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 2;\n            }\n        } else {\n            if ((mid) % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Your code here\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++)\n    {\n        if(arr[i]!=arr[i+1])\n        {\n            return arr[i];\n        }\n        else\n        {\n            i++;\n        }\n    }\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1]){\n                return arr[mid];\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1]){\n                return arr[mid];\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]){\n                if((mid-1)%2 == 0){\n                    low = mid+1;\n                }\n                else{\n                    high = mid-1;\n                }\n            }\n            else if(arr[mid] == arr[mid+1]){\n                if((mid+1)%2 == 0){\n                    low = mid+1;\n                }\n                else{\n                    high = mid-1;\n                }\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmppayxzthm: /tmp/tmppayxzthm.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // write your code here\n    long n=arr.size();\n    long i=0;\n    while(i<n)\n    {\n        if(arr[i]==arr[i+1])\n        {\n            i=i+2;\n        }\n        else\n        {\n            return arr[i];\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = low + (high-low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else{\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n                return arr[mid];\n            else if(arr[mid] == arr[mid-1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "tmpbzn8t12x: /tmp/tmpbzn8t12x.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return 0;\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    if(n == 1) {\n        return arr[0];\n    }\n    int mid = n/2;\n    if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n        return arr[mid];\n    }\n    if(arr[mid] == arr[mid-1]) {\n        if(mid % 2 == 0) {\n            return search(std::vector<long>(arr.begin()+mid+1, arr.end()));\n        }\n        else {\n            return search(std::vector<long>(arr.begin(), arr.begin()+mid-1));\n        }\n    }\n    if(arr[mid] == arr[mid+1]) {\n        if(mid % 2 == 0) {\n            return search(std::vector<long>(arr.begin(), arr.begin()+mid-1));\n        }\n        else {\n            return search(std::vector<long>(arr.begin()+mid+2, arr.end()));\n        }\n    }\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "tmpajhz07hb: /tmp/tmpajhz07hb.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = (low + high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Please add your code here\n    int n=arr.size();\n    int start=0;\n    int end=n-1;\n    int mid;\n    while(start<=end)\n    {\n        mid=(start+end)/2;\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n        {\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1])\n        {\n            if(mid%2==0)\n            {\n                end=mid-2;\n            }\n            else\n            {\n                start=mid+1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1])\n        {\n            if(mid%2==0)\n            {\n                start=mid+2;\n            }\n            else\n            {\n                end=mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    for(long i = 0; i < n; i++) {\n        if(i == 0) {\n            if(arr[i] != arr[i+1]) {\n                return arr[i];\n            }\n        }\n        else if(i == n-1) {\n            if(arr[i] != arr[i-1]) {\n                return arr[i];\n            }\n        }\n        else {\n            if(arr[i] != arr[i-1] && arr[i] != arr[i+1]) {\n                return arr[i];\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int i = 0;\n    while(i < n)\n    {\n        if(arr[i] == arr[i+1])\n        {\n            i += 2;\n        }\n        else\n        {\n            return arr[i];\n        }\n    }\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Please add your code here\n    long n = arr.size();\n    long i = 0;\n    while(i < n)\n    {\n        if(arr[i] != arr[i+1])\n            return arr[i];\n        i = i + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "tmpd43gzbli: /tmp/tmpd43gzbli.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Do not write main() function.\n    // Do not read input, instead use the arguments to the function.\n    // Do not print the output, instead return values as specified\n    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]) {\n                if((mid-1)%2 == 0) {\n                    low = mid + 1;\n                }\n                else {\n                    high = mid - 1;\n                }\n            }\n            else if(arr[mid] == arr[mid+1]) {\n                if((mid+1)%2 == 0) {\n                    low = mid + 1;\n                }\n                else {\n                    high = mid - 1;\n                }\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "tmpkbcxmb2d: /tmp/tmpkbcxmb2d.cpp:57: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return 0;\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-2;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if((mid)%2==0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = (low + high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "tmpc0qx84v_: /tmp/tmpc0qx84v_.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    if(n == 1)\n        return arr[0];\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n                return arr[mid];\n            else if(arr[mid] == arr[mid-1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "tmpvq4hahv1: /tmp/tmpvq4hahv1.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Please add your code here\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++){\n        if(arr[i]!=arr[i+1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Do not write main() function.\n    // Do not read input, instead use the arguments to the function.\n    // Do not print the output, instead return values as specified\n    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid==0){\n            if(arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid==n-1){\n            if(arr[mid]!=arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else{\n            if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else if(arr[mid]==arr[mid-1])\n                low = mid+1;\n            else if(arr[mid]==arr[mid+1])\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "tmpk3ieixrw: /tmp/tmpk3ieixrw.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    int mid;\n    while(low<=high) {\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1)\n            return arr[mid];\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n            return arr[mid];\n        if(arr[mid]==arr[mid-1]) {\n            if(mid%2==0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else {\n            if(mid%2==0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low<=high){\n        long mid = low + (high-low)/2;\n        if(mid%2==0){\n            if(arr[mid]==arr[mid+1]){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(arr[mid]==arr[mid-1]){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return arr[low];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    if(n==1)\n        return arr[0];\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            if(mid==0 && arr[mid]!=arr[mid+1])\n                return arr[mid];\n            if(mid==n-1 && arr[mid]!=arr[mid-1])\n                return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n            return arr[mid];\n        if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0)\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n        if(arr[mid]==arr[mid+1]){\n            if((mid+1)%2==0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "tmpa7dhdz8v: /tmp/tmpa7dhdz8v.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "tmpwagrea4u: /tmp/tmpwagrea4u.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "tmphqs4jhb7: /tmp/tmphqs4jhb7.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if((mid)%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid = (low+high)/2;\n    while(low<=high)\n    {\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1)\n            return arr[mid];\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n            return arr[mid];\n        if(arr[mid]==arr[mid-1])\n        {\n            if(mid%2==0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else\n        {\n            if(mid%2==0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return 0;\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "tmpivd94vk7: /tmp/tmpivd94vk7.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "tmp5wvdu70m: /tmp/tmp5wvdu70m.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return 0;\n    int n = arr.size();\n    int low = 0, high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1)\n            return arr[mid];\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n            return arr[mid];\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0)\n                high = mid - 2;\n            else\n                low = mid + 1;\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0)\n                low = mid + 2;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "tmpjzh56qb7: /tmp/tmpjzh56qb7.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    if(n == 1)\n        return arr[0];\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low+high)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once in the array\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                high = mid-2;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "tmprdoe_l0g: /tmp/tmprdoe_l0g.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return 0;\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if((mid+1)%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "tmpvt_ark9n: /tmp/tmpvt_ark9n.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1)\n            return arr[mid];\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else {\n            if(mid%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n - 1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        else {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high - low) / 2;\n        if(mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]) {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "tmp2__x5yog: /tmp/tmp2__x5yog.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high){\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }else{\n                high = mid-1;\n            }\n        }else{\n            if(mid%2 == 0){\n                high = mid-1;\n            }else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "tmpiw3cfx_6: /tmp/tmpiw3cfx_6.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "tmppgnbqqtj: /tmp/tmppgnbqqtj.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    if(n == 1)\n        return arr[0];\n    int low = 0, high = n-1;\n    while(low <= high){\n        int mid = low + (high - low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid+1)%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "tmp54o__0j_: /tmp/tmp54o__0j_.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++)\n    {\n        if(arr[i]!=arr[i+1])\n        {\n            return arr[i];\n        }\n        i++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int i=0;\n    int n=arr.size();\n    while(i<n)\n    {\n        if(arr[i]==arr[i+1])\n        {\n            i=i+2;\n        }\n        else\n        {\n            return arr[i];\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n    //  Return the element that appears only once in the array.\n    //  DO NOT USE ARRAY.\n    //  DO NOT USE SORT.\n    //  DO NOT USE MAP.\n    //  DO NOT USE SET.\n    //  DO NOT USE HASH.\n    //  DO NOT USE DICT.\n    //  DO NOT USE LIST.\n    //  DO NOT USE VECTOR.\n    //  DO NOT USE STACK.\n    //  DO NOT USE QUEUE.\n    //  DO NOT USE DEQUE.\n    //  DO NOT USE PRIORITY QUEUE.\n    //  DO NOT USE HEAP.\n    //  DO NOT USE BINARY SEARCH.\n    //  DO NOT USE BINARY TREE.\n    //  DO NOT USE BINARY SEARCH TREE.\n    //  DO NOT USE RED BLACK TREE.\n    //  DO NOT USE AVL TREE.\n    //  DO NOT USE SEGMENT TREE.\n    //  DO NOT USE TRIE.\n    //  DO NOT USE TRIE NODE.\n    //  DO NOT USE TRIE TREE.\n    //  DO NOT USE TRIE NODE TREE.\n    //  DO NOT USE B TREE.\n    //  DO NOT USE B+ TREE.\n    //  DO NOT USE B* TREE.\n    //  DO NOT USE B# TREE.\n    //  DO NOT USE B- TREE.\n    //  DO NOT USE B^ TREE.\n    //  DO NOT USE B| TREE.\n    //  DO NOT USE B& TREE.\n    //  DO NOT USE B~ TREE.\n    //  DO NOT USE B! TREE.\n    //  DO NOT USE B@ TREE.\n    //  DO NOT USE B$ TREE.\n    //  DO NOT USE B% TREE.\n    //  DO NOT USE B^ TREE.\n    //  DO NOT USE B* TREE.\n    //  DO NOT USE B( TREE.\n    //  DO NOT USE B) TREE.\n    //  DO NOT USE B- TREE.\n    //  DO NOT USE B+ TREE.\n    //  DO NOT USE B= T\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "tmpnnwizeyo: /tmp/tmpnnwizeyo.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}