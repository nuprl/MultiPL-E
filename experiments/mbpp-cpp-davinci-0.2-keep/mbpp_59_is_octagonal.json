{
  "name": "mbpp_59_is_octagonal",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth octagonal number.\nlong is_octagonal(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = is_octagonal;\n    assert(candidate((5)) == (65));\n    assert(candidate((10)) == (280));\n    assert(candidate((15)) == (645));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long a = (sqrt(1 + 24 * n) + 1) / 6;\n    return a * (3 * a - 2) == n;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long a = (1 + sqrt(1 + 24 * n)) / 6;\n    if (a * (3 * a - 2) == n)\n        return 1;\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return 1;\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long nth_octagonal_number = (n * (3 * n - 2));\n    return nth_octagonal_number;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long a = (long)sqrt(n);\n    if (a*a == n) {\n        return a;\n    }\n    return 0;",
    "    double x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x == (long) x;",
    "    double a = (sqrt(1 + 24 * n) + 1.0) / 6.0;\n    return a == (int)a;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return x;\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return x;\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n) {\n        return x;\n    }\n    return 0;",
    "    long i = 1;\n    while(i*(3*i-2) < n) {\n        i++;\n    }\n    if(i*(3*i-2) == n) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "\tlong nth_octagonal = 0;\n\tlong i = 1;\n\twhile (nth_octagonal < n) {\n\t\tnth_octagonal = i * (3 * i - 2);\n\t\ti++;\n\t}\n\treturn nth_octagonal;",
    "    long a = (sqrt(1 + 24 * n) + 1) / 6;\n    if (a * (3 * a - 2) == n)\n        return 1;\n    return 0;",
    "    long a = (sqrt(1 + 24 * n) + 1) / 6;\n    return a * (3 * a - 2);",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long root = (long)sqrt(n);\n    if(root*root == n) {\n        return root;\n    }\n    return 0;"
  ]
}