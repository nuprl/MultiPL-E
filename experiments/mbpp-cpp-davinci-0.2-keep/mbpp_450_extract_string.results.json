{
  "name": "mbpp_450_extract_string",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(auto i = str.begin(); i != str.end(); i++) {\n        if(i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n\tstd::vector<std::string> res;\n\tfor (int i = 0; i < str.size(); i++) {\n\t\tif (str[i].size() == l) {\n\t\t\tres.push_back(str[i]);\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (auto i : str) {\n        if (i.size() == l) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> v;\n    for(int i=0;i<str.size();i++) {\n        if(str[i].length() == l) {\n            v.push_back(str[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(auto i=str.begin();i!=str.end();i++) {\n        if((*i).size() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i=0;i<str.size();i++) {\n        if(str[i].size()==l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i=0;i<str.size();i++) {\n        if(str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i=0; i<str.size(); i++) {\n        if(str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].length() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> v;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            v.push_back(str[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto it = str.begin(); it != str.end(); it++) {\n        if (it->length() == l) {\n            result.push_back(*it);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for(auto i : str) {\n        if(i.size() == l) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (std::string s : str) {\n        if (s.length() == l) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i : str) {\n        if (i.length() == l) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for(int i=0;i<str.size();i++) {\n        if(str[i].size()==l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> str1;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            str1.push_back(str[i]);\n        }\n    }\n    return str1;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(auto i = str.begin(); i != str.end(); i++) {\n        if(i->size() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i : str) {\n        if (i.size() == l) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i=0;i<str.size();i++) {\n        if(str[i].size()==l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i : str) {\n        if (i.size() == l) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(auto i = str.begin(); i != str.end(); i++) {\n        if(i->size() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for(int i=0; i<str.size(); i++) {\n        if(str[i].size() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> v;\n    for(int i=0; i<str.size(); i++) {\n        if(str[i].size() == l) {\n            v.push_back(str[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> v;\n    for(std::vector<std::string>::iterator it = str.begin(); it != str.end(); it++) {\n        if(it->length() == l) {\n            v.push_back(*it);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i=0; i<str.size(); i++) {\n        if(str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for(auto i : str) {\n        if(i.length() == l) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i : str) {\n        if (i.length() == l) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i=0; i<str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(auto i : str) {\n        if(i.size() == l) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> str1;\n    for(int i=0;i<str.size();i++) {\n        if(str[i].length()==l) {\n            str1.push_back(str[i]);\n        }\n    }\n    return str1;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); ++i) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for(int i=0;i<str.size();i++) {\n        if(str[i].size() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].length() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(auto i : str) {\n        if(i.length() == l) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i=0;i<str.size();i++) {\n        if(str[i].length()==l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->size() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i=0; i<str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (auto i : str) {\n        if (i.size() == l) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i=0; i<str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i=0; i<str.size(); i++) {\n        if(str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i=0; i<str.size(); i++) {\n        if(str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (auto i : str) {\n        if (i.size() == l) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].length() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i : str) {\n        if (i.size() == l) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n\tstd::vector<std::string> result;\n\tfor (auto i = str.begin(); i != str.end(); i++) {\n\t\tif (i->length() == l) {\n\t\t\tresult.push_back(*i);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (auto i : str) {\n        if (i.size() == l) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto s : str) {\n        if (s.length() == l) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto s : str) {\n        if (s.length() == l) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (auto i : str) {\n        if (i.length() == l) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n\tstd::vector<std::string> res;\n\tfor (int i = 0; i < str.size(); i++) {\n\t\tif (str[i].size() == l) {\n\t\t\tres.push_back(str[i]);\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(auto i : str) {\n        if(i.length() == l) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> str1;\n    for(int i=0; i<str.size(); i++) {\n        if(str[i].size() == l) {\n            str1.push_back(str[i]);\n        }\n    }\n    return str1;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n\tstd::vector<std::string> result;\n\tfor (int i = 0; i < str.size(); i++) {\n\t\tif (str[i].size() == l) {\n\t\t\tresult.push_back(str[i]);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (auto i : str) {\n        if (i.size() == l) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(auto i : str) {\n        if(i.size() == l) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->size() == l) {\n            res.push_back(*i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> v;\n    for(int i=0;i<str.size();i++) {\n        if(str[i].size() == l) {\n            v.push_back(str[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> v;\n    for(int i=0;i<str.size();i++) {\n        if(str[i].size() == l) {\n            v.push_back(str[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(auto s : str) {\n        if(s.length() == l) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(auto i: str) {\n        if(i.length() == l) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i : str) {\n        if (i.size() == l) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i : str) {\n        if (i.size() == l) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i=0;i<str.size();i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i=0;i<str.size();i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(auto i : str) {\n        if(i.size() == l) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> v;\n    for(int i=0;i<str.size();i++) {\n        if(str[i].length() == l) {\n            v.push_back(str[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for(auto s : str) {\n        if(s.size() == l) {\n            res.push_back(s);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i=0; i<str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (auto i : str) {\n        if (i.size() == l) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (auto i : str) {\n        if (i.length() == l) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> v;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].size() == l) {\n            v.push_back(str[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (auto i = str.begin(); i != str.end(); i++) {\n        if (i->length() == l) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (long i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].length() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> v;\n    for(int i=0; i<str.size(); i++) {\n        if(str[i].size() == l) {\n            v.push_back(str[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (auto i : str) {\n        if (i.length() == l) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> result;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> v;\n    for(int i = 0; i < str.size(); i++) {\n        if(str[i].length() == l) {\n            v.push_back(str[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            res.push_back(str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given list of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> res;\n    for(auto i: str) {\n        if(i.size() == l) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}