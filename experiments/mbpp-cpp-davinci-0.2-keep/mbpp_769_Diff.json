{
  "name": "mbpp_769_Diff",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to get the difference between two lists.\nstd::vector<long> Diff(std::vector<long> li1, std::vector<long> li2) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = Diff;\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25, (long)30, (long)35, (long)40})), (std::vector<long>({(long)25, (long)40, (long)35}))) == (std::vector<long>({(long)10, (long)20, (long)30, (long)15})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<long>({(long)6, (long)7, (long)1}))) == (std::vector<long>({(long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)6, (long)7, (long)1}))) == (std::vector<long>({(long)2, (long)3, (long)6, (long)7})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "\tstd::vector<long> li3;\n\tfor(int i=0;i<li1.size();i++)\n\t{\n\t\tif(std::find(li2.begin(), li2.end(), li1[i]) == li2.end())\n\t\t{\n\t\t\tli3.push_back(li1[i]);\n\t\t}\n\t}\n\treturn li3;",
    "    std::vector<long> li3;\n    std::sort(li1.begin(), li1.end());\n    std::sort(li2.begin(), li2.end());\n    std::set_difference(li1.begin(), li1.end(), li2.begin(), li2.end(), std::back_inserter(li3));\n    return li3;",
    "\tstd::vector<long> li3;\n\tfor (auto i = li1.begin(); i != li1.end(); i++) {\n\t\tauto j = std::find(li2.begin(), li2.end(), *i);\n\t\tif (j == li2.end()) {\n\t\t\tli3.push_back(*i);\n\t\t}\n\t}\n\treturn li3;",
    "    std::vector<long> li3;\n    for(int i=0;i<li1.size();i++){\n        bool flag=false;\n        for(int j=0;j<li2.size();j++){\n            if(li1[i]==li2[j]){\n                flag=true;\n                break;\n            }\n        }\n        if(flag==false){\n            li3.push_back(li1[i]);\n        }\n    }\n    return li3;",
    "    std::vector<long> li3;\n    int i = 0, j = 0;\n    while (i < li1.size() && j < li2.size()) {\n        if (li1[i] < li2[j]) {\n            li3.push_back(li1[i]);\n            i++;\n        } else if (li1[i] > li2[j]) {\n            li3.push_back(li2[j]);\n            j++;\n        } else {\n            i++;\n            j++;\n        }\n    }\n    while (i < li1.size()) {\n        li3.push_back(li1[i]);\n        i++;\n    }\n    while (j < li2.size()) {\n        li3.push_back(li2[j]);\n        j++;\n    }\n    return li3;",
    "    std::vector<long> li3;\n    std::sort(li1.begin(), li1.end());\n    std::sort(li2.begin(), li2.end());\n    std::set_difference(li1.begin(), li1.end(), li2.begin(), li2.end(), std::back_inserter(li3));\n    return li3;",
    "    std::vector<long> li3;\n    std::sort(li1.begin(), li1.end());\n    std::sort(li2.begin(), li2.end());\n    std::set_difference(li1.begin(), li1.end(), li2.begin(), li2.end(), std::back_inserter(li3));\n    return li3;",
    "    std::vector<long> li3;\n    std::vector<long>::iterator it;\n    for (int i = 0; i < li1.size(); i++) {\n        it = std::find(li2.begin(), li2.end(), li1[i]);\n        if (it == li2.end()) {\n            li3.push_back(li1[i]);\n        }\n    }\n    return li3;",
    "    std::vector<long> li3;\n    for(int i=0;i<li1.size();i++)\n    {\n        int flag=0;\n        for(int j=0;j<li2.size();j++)\n        {\n            if(li1[i]==li2[j])\n            {\n                flag=1;\n                break;\n            }\n        }\n        if(flag==0)\n        {\n            li3.push_back(li1[i]);\n        }\n    }\n    return li3;",
    "    std::vector<long> li3;\n    std::vector<long>::iterator it;\n    for(long i=0;i<li1.size();i++)\n    {\n        it=std::find(li2.begin(),li2.end(),li1[i]);\n        if(it==li2.end())\n        {\n            li3.push_back(li1[i]);\n        }\n    }\n    return li3;",
    "\tstd::vector<long> li3;\n\tstd::sort(li1.begin(), li1.end());\n\tstd::sort(li2.begin(), li2.end());\n\tstd::set_difference(li1.begin(), li1.end(), li2.begin(), li2.end(), std::back_inserter(li3));\n\treturn li3;",
    "    std::vector<long> li3;\n    std::sort(li1.begin(), li1.end());\n    std::sort(li2.begin(), li2.end());\n    std::set_difference(li1.begin(), li1.end(), li2.begin(), li2.end(), std::back_inserter(li3));\n    return li3;",
    "    std::vector<long> li3;\n    int i = 0, j = 0;\n    while (i < li1.size() && j < li2.size()) {\n        if (li1[i] < li2[j]) {\n            li3.push_back(li1[i]);\n            i++;\n        }\n        else if (li2[j] < li1[i]) {\n            j++;\n        }\n        else {\n            i++;\n            j++;\n        }\n    }\n    while (i < li1.size()) {\n        li3.push_back(li1[i]);\n        i++;\n    }\n    return li3;",
    "    std::vector<long> li3;\n    for(auto i=li1.begin();i!=li1.end();i++)\n    {\n        if(std::find(li2.begin(),li2.end(),*i)==li2.end())\n        {\n            li3.push_back(*i);\n        }\n    }\n    for(auto i=li2.begin();i!=li2.end();i++)\n    {\n        if(std::find(li1.begin(),li1.end(),*i)==li1.end())\n        {\n            li3.push_back(*i);\n        }\n    }\n    return li3;",
    "    std::vector<long> li3;\n    int i=0,j=0;\n    while(i<li1.size() && j<li2.size()) {\n        if(li1[i]<li2[j]) {\n            li3.push_back(li1[i]);\n            i++;\n        }\n        else if(li1[i]>li2[j]) {\n            j++;\n        }\n        else {\n            i++;\n            j++;\n        }\n    }\n    while(i<li1.size()) {\n        li3.push_back(li1[i]);\n        i++;\n    }\n    return li3;",
    "    std::vector<long> li3;\n    std::vector<long>::iterator it;\n    for(it = li1.begin(); it != li1.end(); it++) {\n        if(std::find(li2.begin(), li2.end(), *it) == li2.end()) {\n            li3.push_back(*it);\n        }\n    }\n    return li3;",
    "    std::vector<long> li3;\n    std::sort(li1.begin(), li1.end());\n    std::sort(li2.begin(), li2.end());\n    std::set_difference(li1.begin(), li1.end(), li2.begin(), li2.end(), std::inserter(li3, li3.begin()));\n    return li3;",
    "    std::vector<long> li3;\n    for (auto i = li1.begin(); i != li1.end(); i++) {\n        if (std::find(li2.begin(), li2.end(), *i) == li2.end()) {\n            li3.push_back(*i);\n        }\n    }\n    return li3;",
    "\tstd::vector<long> li3;\n\tstd::sort(li1.begin(), li1.end());\n\tstd::sort(li2.begin(), li2.end());\n\tstd::set_difference(li1.begin(), li1.end(), li2.begin(), li2.end(), std::back_inserter(li3));\n\treturn li3;",
    "    std::vector<long> li3;\n    std::sort(li1.begin(), li1.end());\n    std::sort(li2.begin(), li2.end());\n    std::set_difference(li1.begin(), li1.end(), li2.begin(), li2.end(), std::inserter(li3, li3.begin()));\n    return li3;"
  ]
}