{
  "name": "mbpp_622_get_median",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted lists of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if(n <= 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);",
    "    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;",
    "    assert(arr1.size() == arr2.size());\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);",
    "    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);",
    "    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;",
    "    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    float median = 0.0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;",
    "    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);",
    "    if(n == 0) return -1;\n    if(n == 1) return (arr1[0] + arr2[0]) / 2.0;\n    if(n == 2) return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if(m1 == m2) return m1;\n    if(m1 < m2) {\n        if(n % 2 == 0) return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);",
    "    assert(arr1.size() == arr2.size());\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);",
    "    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);",
    "    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;",
    "    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);",
    "    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;",
    "    float median = 0.0;\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for(long count = 0; count <= n; count++) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;",
    "    float median = 0;\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        } else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;",
    "    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;",
    "    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);",
    "    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        } else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;",
    "    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;",
    "    float median = 0;\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n%2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n%2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);"
  ]
}