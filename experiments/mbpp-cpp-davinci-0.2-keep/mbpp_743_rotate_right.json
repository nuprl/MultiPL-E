{
  "name": "mbpp_743_rotate_right",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;",
    "  std::vector<long> result;\n  for (long i = 0; i < list.size(); i++) {\n    long index = (i + m) % list.size();\n    result.push_back(list[index]);\n  }\n  return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i+m)%list.size()]);\n    }\n    return result;",
    "    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; i++) {\n        list[list.size() - m + i] = result[i];\n    }\n    return list;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        result.push_back(list[i]);\n    }\n    return result;",
    "    std::vector<long> ret;\n    for (long i = 0; i < list.size(); i++) {\n        ret.push_back(list[(i + m) % list.size()]);\n    }\n    return ret;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "\tstd::vector<long> result;\n\tfor (long i = m; i < list.size(); i++) {\n\t\tresult.push_back(list[i]);\n\t}\n\tfor (long i = 0; i < m; i++) {\n\t\tresult.push_back(list[i]);\n\t}\n\treturn result;",
    "    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    long len = list.size();\n    for(long i = 0; i < len; i++) {\n        result.push_back(list[(i + m) % len]);\n    }\n    return result;",
    "    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;",
    "    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> rotated_list;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        rotated_list.push_back(list[(i + m) % n]);\n    }\n    return rotated_list;",
    "    std::vector<long> rotated_list;\n    for (int i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> rotated_list;\n    for(long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;",
    "    long n = list.size();\n    std::vector<long> result(n);\n    for (long i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;",
    "    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    // write your code here\n    std::vector<long> result;\n    for(int i=0;i<list.size();i++){\n        result.push_back(list[(i+m)%list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;",
    "    std::vector<long> result;\n    for(long i=0; i<list.size(); i++) {\n        result.push_back(list[(i+m)%list.size()]);\n    }\n    return result;",
    "\tstd::vector<long> result;\n\tfor (long i = 0; i < list.size(); i++) {\n\t\tresult.push_back(list[(i + m) % list.size()]);\n\t}\n\treturn result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> res;\n    for (long i = 0; i < m; i++) {\n        res.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; i++) {\n        list[list.size() - m + i] = res[i];\n    }\n    return list;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; i++) {\n        list[list.size() - m + i] = result[i];\n    }\n    return list;",
    "    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        result.push_back(list[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> new_list;\n    for (long i = 0; i < list.size(); i++) {\n        long new_index = (i + m) % list.size();\n        new_list.push_back(list[new_index]);\n    }\n    return new_list;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = m; i < list.size(); i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> new_list;\n    for (long i = 0; i < list.size(); i++) {\n        new_list.push_back(list[(i + m) % list.size()]);\n    }\n    return new_list;",
    "    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; i++) {\n        list[list.size() - m + i] = result[i];\n    }\n    return list;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    long i = 0;\n    while (i < list.size()) {\n        result.push_back(list[(i + m) % list.size()]);\n        i++;\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    long n = list.size();\n    std::vector<long> result(n);\n    for (long i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> rotated_list;\n    for(long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> new_list;\n    for (long i = 0; i < list.size(); i++) {\n        new_list.push_back(list[(i + m) % list.size()]);\n    }\n    return new_list;",
    "    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    long n = list.size();\n    std::vector<long> result(n);\n    for (long i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;",
    "    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;",
    "    std::vector<long> res;\n    for (long i = 0; i < list.size(); i++) {\n        res.push_back(list[(i + m) % list.size()]);\n    }\n    return res;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = m; i < list.size(); i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    long n = list.size();\n    std::vector<long> result(n);\n    for (long i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    long n = list.size();\n    m = m % n;\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;",
    "    std::vector<long> res;\n    for (long i = 0; i < list.size(); i++) {\n        res.push_back(list[(i + m) % list.size()]);\n    }\n    return res;",
    "    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> rotated_list;\n    for(long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i+m) % list.size()]);\n    }\n    return rotated_list;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> new_list;\n    for (long i = 0; i < m; i++) {\n        new_list.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; i++) {\n        list[list.size() - m + i] = new_list[i];\n    }\n    return list;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        result.insert(result.begin(), list[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> res;\n    long n = list.size();\n    for(long i = 0; i < n; i++) {\n        res.push_back(list[(i + m) % n]);\n    }\n    return res;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        result.push_back(list[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i+m)%list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; i++) {\n        list[list.size() - m + i] = result[i];\n    }\n    return list;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i=0; i<list.size(); i++) {\n        result.push_back(list[(i+m)%list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = m; i < list.size(); i++) {\n        result.push_back(list[i]);\n    }\n    for(long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; i++) {\n        list[list.size() - m + i] = result[i];\n    }\n    return list;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;",
    "    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        result.push_back(list[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < m; ++i) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); ++i) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; ++i) {\n        list[list.size() - m + i] = result[i];\n    }\n    return list;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "\tstd::vector<long> result;\n\tfor (long i = 0; i < list.size(); i++) {\n\t\tresult.push_back(list[(i + m) % list.size()]);\n\t}\n\treturn result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; i++) {\n        list[list.size() - m + i] = result[i];\n    }\n    return list;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for(long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for(long i = 0; i < m; i++) {\n        list[list.size() - m + i] = result[i];\n    }\n    return list;"
  ]
}