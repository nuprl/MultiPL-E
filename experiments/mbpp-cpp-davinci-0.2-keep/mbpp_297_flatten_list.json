{
  "name": "mbpp_297_flatten_list",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to flatten a given nested list structure.\nstd::vector<long> flatten_list(std::any list1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = flatten_list;\n    assert(candidate((std::any({0, 10, std::vector<long>({(long)20, (long)30}), 40, 50, std::vector<long>({(long)60, (long)70, (long)80}), std::vector<long>({(long)90, (long)100, (long)110, (long)120})}))) == (std::vector<long>({(long)0, (long)10, (long)20, (long)30, (long)40, (long)50, (long)60, (long)70, (long)80, (long)90, (long)100, (long)110, (long)120})));\n    assert(candidate((std::any({(std::vector<long>)std::vector<long>({(long)10, (long)20}), (std::vector<long>)std::vector<long>({(long)40}), (std::vector<long>)std::vector<long>({(long)30, (long)56, (long)25}), (std::vector<long>)std::vector<long>({(long)10, (long)20}), (std::vector<long>)std::vector<long>({(long)33}), (std::vector<long>)std::vector<long>({(long)40})}))) == (std::vector<long>({(long)10, (long)20, (long)40, (long)30, (long)56, (long)25, (long)10, (long)20, (long)33, (long)40})));\n    assert(candidate((std::any({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)10, (long)11, (long)12, (long)7, (long)8, (long)9})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto element : list) {\n            std::vector<long> temp = flatten_list(element);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto it = list.begin(); it != list.end(); it++) {\n            std::vector<long> temp = flatten_list(*it);\n            for(auto it1 = temp.begin(); it1 != temp.end(); it1++) {\n                result.push_back(*it1);\n            }\n        }\n    }\n    else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "  std::vector<long> result;\n  if (list1.type() == typeid(std::vector<std::any>)) {\n    for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n      auto temp = flatten_list(i);\n      result.insert(result.end(), temp.begin(), temp.end());\n    }\n  } else {\n    result.push_back(std::any_cast<long>(list1));\n  }\n  return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n        return result;\n    }\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto item : list) {\n        std::vector<long> temp = flatten_list(item);\n        result.insert(result.end(), temp.begin(), temp.end());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto element : list) {\n        if (element.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(element));\n        } else {\n            std::vector<long> temp = flatten_list(element);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list) {\n            result.push_back(i);\n        }\n    } else if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            for (auto j : temp) {\n                result.push_back(j);\n            }\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto element : list) {\n            std::vector<long> temp = flatten_list(element);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            list2.insert(list2.end(), temp.begin(), temp.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "  std::vector<long> flat_list;\n  if(list1.type() == typeid(long)) {\n    flat_list.push_back(std::any_cast<long>(list1));\n  } else {\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for(auto it = list.begin(); it != list.end(); it++) {\n      std::vector<long> temp = flatten_list(*it);\n      flat_list.insert(flat_list.end(), temp.begin(), temp.end());\n    }\n  }\n  return flat_list;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i = list.begin(); i != list.end(); i++) {\n            std::vector<long> temp = flatten_list(*i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<std::any> list;\n    list.push_back(list1);\n    while (!list.empty()) {\n        std::any item = list.back();\n        list.pop_back();\n        if (std::holds_alternative<long>(item)) {\n            result.push_back(std::any_cast<long>(item));\n        } else {\n            std::vector<std::any> sublist = std::any_cast<std::vector<std::any>>(item);\n            for (auto it = sublist.rbegin(); it != sublist.rend(); ++it) {\n                list.push_back(*it);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (int i = 0; i < list.size(); i++) {\n            std::vector<long> list3 = flatten_list(list[i]);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n        return result;\n    }\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto item : list) {\n        std::vector<long> temp = flatten_list(item);\n        result.insert(result.end(), temp.begin(), temp.end());\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto& i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            list2.insert(list2.end(), temp.begin(), temp.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto &item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;"
  ]
}