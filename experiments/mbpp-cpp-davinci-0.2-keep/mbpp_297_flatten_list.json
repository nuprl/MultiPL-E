{
  "name": "mbpp_297_flatten_list",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to flatten a given nested list structure.\nstd::vector<long> flatten_list(std::any list1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = flatten_list;\n    assert(candidate((std::any({0, 10, std::vector<long>({(long)20, (long)30}), 40, 50, std::vector<long>({(long)60, (long)70, (long)80}), std::vector<long>({(long)90, (long)100, (long)110, (long)120})}))) == (std::vector<long>({(long)0, (long)10, (long)20, (long)30, (long)40, (long)50, (long)60, (long)70, (long)80, (long)90, (long)100, (long)110, (long)120})));\n    assert(candidate((std::any({(std::vector<long>)std::vector<long>({(long)10, (long)20}), (std::vector<long>)std::vector<long>({(long)40}), (std::vector<long>)std::vector<long>({(long)30, (long)56, (long)25}), (std::vector<long>)std::vector<long>({(long)10, (long)20}), (std::vector<long>)std::vector<long>({(long)33}), (std::vector<long>)std::vector<long>({(long)40})}))) == (std::vector<long>({(long)10, (long)20, (long)40, (long)30, (long)56, (long)25, (long)10, (long)20, (long)33, (long)40})));\n    assert(candidate((std::any({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)10, (long)11, (long)12, (long)7, (long)8, (long)9})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto element : list) {\n            std::vector<long> temp = flatten_list(element);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto it = list.begin(); it != list.end(); it++) {\n            std::vector<long> temp = flatten_list(*it);\n            for(auto it1 = temp.begin(); it1 != temp.end(); it1++) {\n                result.push_back(*it1);\n            }\n        }\n    }\n    else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "  std::vector<long> result;\n  if (list1.type() == typeid(std::vector<std::any>)) {\n    for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n      auto temp = flatten_list(i);\n      result.insert(result.end(), temp.begin(), temp.end());\n    }\n  } else {\n    result.push_back(std::any_cast<long>(list1));\n  }\n  return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n        return result;\n    }\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto item : list) {\n        std::vector<long> temp = flatten_list(item);\n        result.insert(result.end(), temp.begin(), temp.end());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto element : list) {\n        if (element.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(element));\n        } else {\n            std::vector<long> temp = flatten_list(element);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list) {\n            result.push_back(i);\n        }\n    } else if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            for (auto j : temp) {\n                result.push_back(j);\n            }\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto element : list) {\n            std::vector<long> temp = flatten_list(element);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            list2.insert(list2.end(), temp.begin(), temp.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "  std::vector<long> flat_list;\n  if(list1.type() == typeid(long)) {\n    flat_list.push_back(std::any_cast<long>(list1));\n  } else {\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for(auto it = list.begin(); it != list.end(); it++) {\n      std::vector<long> temp = flatten_list(*it);\n      flat_list.insert(flat_list.end(), temp.begin(), temp.end());\n    }\n  }\n  return flat_list;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i = list.begin(); i != list.end(); i++) {\n            std::vector<long> temp = flatten_list(*i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<std::any> list;\n    list.push_back(list1);\n    while (!list.empty()) {\n        std::any item = list.back();\n        list.pop_back();\n        if (std::holds_alternative<long>(item)) {\n            result.push_back(std::any_cast<long>(item));\n        } else {\n            std::vector<std::any> sublist = std::any_cast<std::vector<std::any>>(item);\n            for (auto it = sublist.rbegin(); it != sublist.rend(); ++it) {\n                list.push_back(*it);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (int i = 0; i < list.size(); i++) {\n            std::vector<long> list3 = flatten_list(list[i]);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n        return result;\n    }\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto item : list) {\n        std::vector<long> temp = flatten_list(item);\n        result.insert(result.end(), temp.begin(), temp.end());\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto& i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            list2.insert(list2.end(), temp.begin(), temp.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto &item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    else {\n        long num = std::any_cast<long>(list1);\n        result.push_back(num);\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto i : std::any_cast<std::vector<long>>(list1)) {\n            list2.push_back(i);\n        }\n    }\n    else if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            for (auto j : flatten_list(i)) {\n                list2.push_back(j);\n            }\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto &item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(long)) {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    else {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto element : list) {\n            std::vector<long> temp = flatten_list(element);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> temp = flatten_list(i);\n                result.insert(result.end(), temp.begin(), temp.end());\n            } else {\n                result.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (int i = 0; i < list.size(); i++) {\n            std::vector<long> list3 = flatten_list(list[i]);\n            for (int j = 0; j < list3.size(); j++) {\n                list2.push_back(list3[j]);\n            }\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "  std::vector<long> result;\n  std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n  for (auto& item : list) {\n    if (item.type() == typeid(std::vector<std::any>)) {\n      std::vector<long> temp = flatten_list(item);\n      result.insert(result.end(), temp.begin(), temp.end());\n    } else {\n      result.push_back(std::any_cast<long>(item));\n    }\n  }\n  return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> temp = flatten_list(i);\n                result.insert(result.end(), temp.begin(), temp.end());\n            } else {\n                result.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> temp = flatten_list(i);\n                result.insert(result.end(), temp.begin(), temp.end());\n            } else {\n                result.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        auto list = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list) {\n            if (i.type() == typeid(std::vector<long>)) {\n                auto temp = flatten_list(i);\n                for (auto j : temp) {\n                    result.push_back(j);\n                }\n            } else {\n                result.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list;\n    if(list1.type() == typeid(long)) {\n        list.push_back(std::any_cast<long>(list1));\n    }\n    else {\n        std::vector<std::any> list2 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i: list2) {\n            std::vector<long> temp = flatten_list(i);\n            list.insert(list.end(), temp.begin(), temp.end());\n        }\n    }\n    return list;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for(auto i : list) {\n            if(i.type() == typeid(std::vector<long>)) {\n                std::vector<long> temp = flatten_list(i);\n                result.insert(result.end(), temp.begin(), temp.end());\n            } else {\n                result.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list;\n    if (list1.type() == typeid(long)) {\n        list.push_back(std::any_cast<long>(list1));\n        return list;\n    }\n    else {\n        std::vector<std::any> list2 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list2) {\n            std::vector<long> list3 = flatten_list(i);\n            list.insert(list.end(), list3.begin(), list3.end());\n        }\n        return list;\n    }",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        list2 = std::any_cast<std::vector<long>>(list1);\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "  std::vector<long> result;\n  if (list1.type() == typeid(std::vector<std::any>)) {\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto &i : list) {\n      std::vector<long> temp = flatten_list(i);\n      result.insert(result.end(), temp.begin(), temp.end());\n    }\n  } else {\n    result.push_back(std::any_cast<long>(list1));\n  }\n  return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto item : list) {\n            auto temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list;\n    if (list1.type() == typeid(int)) {\n        list.push_back(std::any_cast<int>(list1));\n        return list;\n    }\n    else if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list2 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto &i : list2) {\n            std::vector<long> list3 = flatten_list(i);\n            list.insert(list.end(), list3.begin(), list3.end());\n        }\n        return list;\n    }\n    else {\n        return list;\n    }",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto &i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n        return result;\n    }\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto i : list) {\n        if (i.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(i));\n        } else {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "  std::vector<long> result;\n  if (list1.type() == typeid(std::vector<std::any>)) {\n    for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n      auto temp = flatten_list(i);\n      result.insert(result.end(), temp.begin(), temp.end());\n    }\n  } else {\n    result.push_back(std::any_cast<long>(list1));\n  }\n  return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i = list.begin(); i != list.end(); i++) {\n            std::vector<long> temp = flatten_list(*i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "  std::vector<long> list2;\n  for (auto it = list1.begin(); it != list1.end(); ++it) {\n    if (it->type() == typeid(std::any)) {\n      std::vector<long> list3 = flatten_list(it);\n      list2.insert(list2.end(), list3.begin(), list3.end());\n    } else {\n      list2.push_back(std::any_cast<long>(it));\n    }\n  }\n  return list2;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto it = list.begin(); it != list.end(); it++) {\n            std::vector<long> temp = flatten_list(*it);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto &i : std::any_cast<std::vector<long>>(list1)) {\n            result.push_back(i);\n        }\n    } else if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(long)) {\n        list2.push_back(std::any_cast<long>(list1));\n    } else if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto item : list) {\n            std::vector<long> sub_list = flatten_list(item);\n            result.insert(result.end(), sub_list.begin(), sub_list.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<std::any> list = list1;\n    for (auto &item : list) {\n        if (item.type() == typeid(std::vector<std::any>)) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        } else {\n            result.push_back(std::any_cast<long>(item));\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n        return result;\n    }\n    else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto elem : list) {\n            std::vector<long> temp = flatten_list(elem);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n        return result;\n    }",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (int i = 0; i < list.size(); i++) {\n            std::vector<long> temp = flatten_list(list[i]);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "  std::vector<long> list;\n  if (list1.type() == typeid(std::vector<long>)) {\n    list = std::any_cast<std::vector<long>>(list1);\n  } else if (list1.type() == typeid(std::vector<std::any>)) {\n    std::vector<std::any> list2 = std::any_cast<std::vector<std::any>>(list1);\n    for (auto i : list2) {\n      std::vector<long> list3 = flatten_list(i);\n      list.insert(list.end(), list3.begin(), list3.end());\n    }\n  } else {\n    list.push_back(std::any_cast<long>(list1));\n  }\n  return list;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto &i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto i : std::any_cast<std::vector<long>>(list1)) {\n            result.push_back(i);\n        }\n    } else if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        assert(false);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &item : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(int)){\n        result.push_back(std::any_cast<int>(list1));\n    }\n    else if(list1.type() == typeid(std::vector<std::any>)){\n        std::vector<std::any> list2 = std::any_cast<std::vector<std::any>>(list1);\n        for(int i = 0; i < list2.size(); i++){\n            std::vector<long> temp = flatten_list(list2[i]);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list2 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto it : list2) {\n            std::vector<long> temp = flatten_list(it);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            list2.insert(list2.end(), temp.begin(), temp.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "  std::vector<long> list2;\n  if (list1.type() == typeid(long)) {\n    list2.push_back(std::any_cast<long>(list1));\n  } else {\n    std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n    for (auto i : list3) {\n      std::vector<long> list4 = flatten_list(i);\n      list2.insert(list2.end(), list4.begin(), list4.end());\n    }\n  }\n  return list2;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list;\n    if (list1.type() == typeid(long)) {\n        list.push_back(std::any_cast<long>(list1));\n        return list;\n    }\n    else {\n        std::vector<std::any> list2 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list2) {\n            std::vector<long> list3 = flatten_list(i);\n            for (auto j : list3) {\n                list.push_back(j);\n            }\n        }\n        return list;\n    }",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto it = list.begin(); it != list.end(); it++) {\n            std::vector<long> temp = flatten_list(*it);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "  std::vector<long> flat_list;\n  if (list1.type() == typeid(std::vector<long>)) {\n    for (auto &i : std::any_cast<std::vector<long>>(list1)) {\n      flat_list.push_back(i);\n    }\n  } else if (list1.type() == typeid(std::vector<std::any>)) {\n    for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n      std::vector<long> temp = flatten_list(i);\n      flat_list.insert(flat_list.end(), temp.begin(), temp.end());\n    }\n  } else {\n    flat_list.push_back(std::any_cast<long>(list1));\n  }\n  return flat_list;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto i : std::any_cast<std::vector<long>>(list1)) {\n            list2.push_back(i);\n        }\n    } else if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            for (auto j : list3) {\n                list2.push_back(j);\n            }\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> res;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            res.insert(res.end(), temp.begin(), temp.end());\n        }\n    } else {\n        res.push_back(std::any_cast<long>(list1));\n    }\n    return res;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> temp = flatten_list(i);\n                result.insert(result.end(), temp.begin(), temp.end());\n            } else {\n                result.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "  std::vector<long> result;\n  if (list1.type() == typeid(std::vector<std::any>)) {\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto &item : list) {\n      std::vector<long> temp = flatten_list(item);\n      result.insert(result.end(), temp.begin(), temp.end());\n    }\n  } else {\n    result.push_back(std::any_cast<long>(list1));\n  }\n  return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "  std::vector<long> result;\n  if (list1.type() == typeid(std::vector<std::any>)) {\n    for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n      auto temp = flatten_list(i);\n      result.insert(result.end(), temp.begin(), temp.end());\n    }\n  } else {\n    result.push_back(std::any_cast<long>(list1));\n  }\n  return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto& item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        assert(false);\n    }\n    return result;",
    "    std::vector<long> list2;\n    for (auto &i : list1) {\n        if (i.type() == typeid(std::vector<long>)) {\n            std::vector<long> temp = std::any_cast<std::vector<long>>(i);\n            for (auto &j : temp) {\n                list2.push_back(j);\n            }\n        } else {\n            list2.push_back(std::any_cast<long>(i));\n        }\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> flat_list;\n    if (list1.type() == typeid(long)) {\n        flat_list.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto item : list) {\n            std::vector<long> temp = flatten_list(item);\n            flat_list.insert(flat_list.end(), temp.begin(), temp.end());\n        }\n    }\n    return flat_list;",
    "    std::vector<long> result;\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto i : list) {\n        if (i.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(i));\n        } else {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> temp = flatten_list(i);\n                result.insert(result.end(), temp.begin(), temp.end());\n            } else {\n                result.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto &i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> temp = flatten_list(i);\n                result.insert(result.end(), temp.begin(), temp.end());\n            } else {\n                result.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "  std::vector<long> list;\n  if (list1.type() == typeid(std::vector<long>)) {\n    for (auto i : std::any_cast<std::vector<long>>(list1)) {\n      list.push_back(i);\n    }\n  } else if (list1.type() == typeid(std::vector<std::any>)) {\n    for (auto i : std::any_cast<std::vector<std::any>>(list1)) {\n      std::vector<long> temp = flatten_list(i);\n      for (auto j : temp) {\n        list.push_back(j);\n      }\n    }\n  } else {\n    list.push_back(std::any_cast<long>(list1));\n  }\n  return list;",
    "  std::vector<long> result;\n  if (list1.type() == typeid(std::vector<std::any>)) {\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto i : list) {\n      std::vector<long> temp = flatten_list(i);\n      result.insert(result.end(), temp.begin(), temp.end());\n    }\n  } else {\n    result.push_back(std::any_cast<long>(list1));\n  }\n  return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto& item : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    else {\n        std::vector<std::any> list2 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list2) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            list2.insert(list2.end(), temp.begin(), temp.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for(auto i : list) {\n            if(i.type() == typeid(std::vector<long>)) {\n                std::vector<long> temp = flatten_list(i);\n                result.insert(result.end(), temp.begin(), temp.end());\n            } else {\n                result.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto it = list.begin(); it != list.end(); ++it) {\n            std::vector<long> temp = flatten_list(*it);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<std::any> list;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        list = std::any_cast<std::vector<std::any>>(list1);\n    } else {\n        list.push_back(list1);\n    }\n    for (auto i : list) {\n        if (i.type() == typeid(std::vector<std::any>)) {\n            std::vector<std::any> temp = std::any_cast<std::vector<std::any>>(i);\n            std::vector<long> temp_result = flatten_list(temp);\n            result.insert(result.end(), temp_result.begin(), temp_result.end());\n        } else {\n            result.push_back(std::any_cast<long>(i));\n        }\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(long)) {\n        list2.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    return list2;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n        return result;\n    }\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto item : list) {\n        std::vector<long> sub_result = flatten_list(item);\n        result.insert(result.end(), sub_result.begin(), sub_result.end());\n    }\n    return result;",
    "    std::vector<long> list;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            list.insert(list.end(), temp.begin(), temp.end());\n        }\n    } else {\n        list.push_back(std::any_cast<long>(list1));\n    }\n    return list;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto& item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "  std::vector<long> res;\n  if (list1.type() == typeid(std::vector<long>)) {\n    for (auto i : std::any_cast<std::vector<long>>(list1)) {\n      res.push_back(i);\n    }\n  } else if (list1.type() == typeid(std::vector<std::any>)) {\n    for (auto i : std::any_cast<std::vector<std::any>>(list1)) {\n      std::vector<long> temp = flatten_list(i);\n      res.insert(res.end(), temp.begin(), temp.end());\n    }\n  } else {\n    res.push_back(std::any_cast<long>(list1));\n  }\n  return res;",
    "    std::vector<long> result;\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for(auto i : list) {\n        if(i.type() == typeid(std::vector<std::any>)) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n        else {\n            result.push_back(std::any_cast<long>(i));\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> temp = flatten_list(i);\n                result.insert(result.end(), temp.begin(), temp.end());\n            } else {\n                result.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n        return result;\n    }\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto i : list) {\n        std::vector<long> temp = flatten_list(i);\n        result.insert(result.end(), temp.begin(), temp.end());\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto l : list) {\n            std::vector<long> temp = flatten_list(l);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &elem : std::any_cast<std::vector<std::any>>(list1)) {\n            auto tmp = flatten_list(elem);\n            result.insert(result.end(), tmp.begin(), tmp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &item : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "  std::vector<long> result;\n  std::vector<std::any> list;\n  list.push_back(list1);\n  while (!list.empty()) {\n    std::any element = list.back();\n    list.pop_back();\n    if (element.type() == typeid(std::vector<std::any>)) {\n      std::vector<std::any> temp = std::any_cast<std::vector<std::any>>(element);\n      for (auto it = temp.rbegin(); it != temp.rend(); ++it) {\n        list.push_back(*it);\n      }\n    } else {\n      result.push_back(std::any_cast<long>(element));\n    }\n  }\n  return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "  std::vector<long> flat_list;\n  if (list1.type() == typeid(long)) {\n    flat_list.push_back(std::any_cast<long>(list1));\n  } else {\n    for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n      std::vector<long> temp = flatten_list(i);\n      flat_list.insert(flat_list.end(), temp.begin(), temp.end());\n    }\n  }\n  return flat_list;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for (auto &i : list) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> temp = flatten_list(i);\n                result.insert(result.end(), temp.begin(), temp.end());\n            } else {\n                result.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for (auto item : list) {\n            if (item.type() == typeid(std::vector<long>)) {\n                std::vector<long> list2 = std::any_cast<std::vector<long>>(item);\n                for (auto item2 : list2) {\n                    result.push_back(item2);\n                }\n            }\n            else {\n                result.push_back(item);\n            }\n        }\n    }\n    else {\n        result.push_back(list1);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto &i : std::any_cast<std::vector<long>>(list1)) {\n            result.push_back(i);\n        }\n    } else if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto& i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto& item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> v;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> v1 = flatten_list(i);\n            v.insert(v.end(), v1.begin(), v1.end());\n        }\n    } else {\n        v.push_back(std::any_cast<long>(list1));\n    }\n    return v;",
    "    std::vector<long> result;\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for(auto i : list) {\n        if(i.type() == typeid(std::vector<std::any>)) {\n            std::vector<long> temp = flatten_list(i);\n            for(auto j : temp) {\n                result.push_back(j);\n            }\n        } else {\n            result.push_back(std::any_cast<long>(i));\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(long)){\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    else{\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto it = list3.begin(); it != list3.end(); it++){\n            std::vector<long> list4 = flatten_list(*it);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    return list2;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i: list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(long)) {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    else {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    return list2;",
    "    std::vector<long> result;\n    for (auto it = list1.begin(); it != list1.end(); it++) {\n        if (it->type() == typeid(std::any)) {\n            std::vector<long> temp = flatten_list(it);\n            result.insert(result.end(), temp.begin(), temp.end());\n        } else {\n            result.push_back(it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto i : list) {\n        if (i.type() == typeid(std::vector<std::any>)) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n        else {\n            result.push_back(std::any_cast<long>(i));\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else if(list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "  std::vector<long> list2;\n  if (list1.type() == typeid(std::vector<long>)) {\n    for (auto i : std::any_cast<std::vector<long>>(list1)) {\n      if (i.type() == typeid(std::vector<long>)) {\n        for (auto j : flatten_list(i)) {\n          list2.push_back(j);\n        }\n      } else {\n        list2.push_back(std::any_cast<long>(i));\n      }\n    }\n  } else {\n    list2.push_back(std::any_cast<long>(list1));\n  }\n  return list2;",
    "  std::vector<long> result;\n  if (list1.type() == typeid(long)) {\n    result.push_back(std::any_cast<long>(list1));\n  } else {\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto &item : list) {\n      std::vector<long> temp = flatten_list(item);\n      result.insert(result.end(), temp.begin(), temp.end());\n    }\n  }\n  return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n        return result;\n    }\n    else if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(int i = 0; i < list.size(); i++) {\n            std::vector<long> temp = flatten_list(list[i]);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n        return result;\n    }\n    else {\n        return result;\n    }",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for(auto x : list) {\n            result.push_back(x);\n        }\n    } else if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto x : list) {\n            std::vector<long> temp = flatten_list(x);\n            for(auto y : temp) {\n                result.push_back(y);\n            }\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    std::queue<std::any> q;\n    q.push(list1);\n    while(!q.empty()) {\n        auto x = q.front();\n        q.pop();\n        if(x.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(x));\n        } else {\n            auto l = std::any_cast<std::vector<std::any>>(x);\n            for(auto i : l) {\n                q.push(i);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &elem : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(elem);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto &item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n        return result;\n    }\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto i : list) {\n        std::vector<long> temp = flatten_list(i);\n        result.insert(result.end(), temp.begin(), temp.end());\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &item : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    std::vector<std::any> list3;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            if (i.type() == typeid(std::vector<std::any>)) {\n                std::vector<std::any> list4 = std::any_cast<std::vector<std::any>>(i);\n                for (auto j : list4) {\n                    if (j.type() == typeid(long)) {\n                        list2.push_back(std::any_cast<long>(j));\n                    }\n                }\n            }\n            else if (i.type() == typeid(long)) {\n                list2.push_back(std::any_cast<long>(i));\n            }\n        }\n    }\n    else if (list1.type() == typeid(long)) {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (std::any item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list_flat;\n    if (list1.type() == typeid(long)) {\n        list_flat.push_back(std::any_cast<long>(list1));\n        return list_flat;\n    }\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto i : list) {\n        std::vector<long> temp = flatten_list(i);\n        list_flat.insert(list_flat.end(), temp.begin(), temp.end());\n    }\n    return list_flat;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto it = list.begin(); it != list.end(); it++) {\n            std::vector<long> temp = flatten_list(*it);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto &item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &x : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(x);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list;\n    if(list1.type() == typeid(long)) {\n        list.push_back(std::any_cast<long>(list1));\n        return list;\n    }\n    else {\n        std::vector<std::any> list2 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list2) {\n            std::vector<long> temp = flatten_list(i);\n            list.insert(list.end(), temp.begin(), temp.end());\n        }\n        return list;\n    }",
    "    std::vector<long> result;\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto i : list) {\n        if (i.type() == typeid(std::vector<std::any>)) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        } else {\n            result.push_back(std::any_cast<long>(i));\n        }\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i: list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n        return result;\n    }\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for(auto &i : list) {\n        std::vector<long> temp = flatten_list(i);\n        result.insert(result.end(), temp.begin(), temp.end());\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        auto list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            auto temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto &i : list1) {\n        if (i.type() == typeid(std::any)) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        } else {\n            result.push_back(std::any_cast<long>(i));\n        }\n    }\n    return result;",
    "    std::vector<long> list;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            list.insert(list.end(), temp.begin(), temp.end());\n        }\n    } else {\n        list.push_back(std::any_cast<long>(list1));\n    }\n    return list;",
    "    std::vector<long> result;\n    std::vector<std::any> list;\n    list.push_back(list1);\n    while (!list.empty()) {\n        std::any temp = list.back();\n        list.pop_back();\n        if (temp.type() == typeid(std::vector<std::any>)) {\n            std::vector<std::any> temp_list = std::any_cast<std::vector<std::any>>(temp);\n            for (auto i = temp_list.rbegin(); i != temp_list.rend(); i++) {\n                list.push_back(*i);\n            }\n        } else {\n            result.push_back(std::any_cast<long>(temp));\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "  std::vector<long> result;\n  if (list1.type() == typeid(long)) {\n    result.push_back(std::any_cast<long>(list1));\n    return result;\n  }\n  std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n  for (auto &i : list) {\n    std::vector<long> temp = flatten_list(i);\n    result.insert(result.end(), temp.begin(), temp.end());\n  }\n  return result;",
    "    std::vector<long> result;\n    std::vector<std::any> list;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        list = std::any_cast<std::vector<std::any>>(list1);\n    } else {\n        list.push_back(list1);\n    }\n    for (auto i : list) {\n        if (i.type() == typeid(std::vector<std::any>)) {\n            std::vector<std::any> temp = std::any_cast<std::vector<std::any>>(i);\n            std::vector<long> temp_result = flatten_list(temp);\n            result.insert(result.end(), temp_result.begin(), temp_result.end());\n        } else {\n            result.push_back(std::any_cast<long>(i));\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto& i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> temp = flatten_list(i);\n                result.insert(result.end(), temp.begin(), temp.end());\n            } else {\n                result.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list;\n    if (list1.type() == typeid(long)) {\n        list.push_back(std::any_cast<long>(list1));\n        return list;\n    }\n    std::vector<std::any> list2 = std::any_cast<std::vector<std::any>>(list1);\n    for (auto i : list2) {\n        std::vector<long> list3 = flatten_list(i);\n        list.insert(list.end(), list3.begin(), list3.end());\n    }\n    return list;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto element : list) {\n            std::vector<long> temp = flatten_list(element);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto element : list) {\n            std::vector<long> flattened_element = flatten_list(element);\n            result.insert(result.end(), flattened_element.begin(), flattened_element.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::any list = list1;\n    while(!list.empty()) {\n        if(list.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(list));\n            break;\n        }\n        else {\n            std::vector<std::any> inner_list = std::any_cast<std::vector<std::any>>(list);\n            for(auto x : inner_list) {\n                if(x.type() == typeid(long)) {\n                    result.push_back(std::any_cast<long>(x));\n                }\n                else {\n                    std::vector<std::any> inner_inner_list = std::any_cast<std::vector<std::any>>(x);\n                    for(auto y : inner_inner_list) {\n                        if(y.type() == typeid(long)) {\n                            result.push_back(std::any_cast<long>(y));\n                        }\n                        else {\n                            std::vector<std::any> inner_inner_inner_list = std::any_cast<std::vector<std::any>>(y);\n                            for(auto z : inner_inner_inner_list) {\n                                if(z.type() == typeid(long)) {\n                                    result.push_back(std::any_cast<long>(z));\n                                }\n                                else {\n                                    std::vector<std::any> inner_inner_inner_inner_list = std::any_cast<std::vector<std::any>>(z);\n                                    for(auto w : inner_inner_inner_inner_list) {\n                                        if(w.type() == typeid(long)) {\n                                            result.push_back(std::any_cast<long>(w));\n                                        }\n                                        else {\n                                            std::vector<std::any> inner_inner_inner_inner_inner_list = std::any_cast<std::vector<std::any>>(w);\n                                            for(auto v : inner_inner_inner_inner_inner_list) {\n                                                if",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "  std::vector<long> result;\n  std::vector<std::any> list;\n  if (list1.type() == typeid(std::vector<std::any>)) {\n    list = std::any_cast<std::vector<std::any>>(list1);\n  } else {\n    list.push_back(list1);\n  }\n  for (auto it = list.begin(); it != list.end(); it++) {\n    if (it->type() == typeid(std::vector<std::any>)) {\n      std::vector<long> temp = flatten_list(*it);\n      result.insert(result.end(), temp.begin(), temp.end());\n    } else {\n      result.push_back(std::any_cast<long>(*it));\n    }\n  }\n  return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(long)) {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    else {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(long)) {\n        list2.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto &i : std::any_cast<std::vector<long>>(list1)) {\n            if (i.type() == typeid(std::vector<long>)) {\n                auto temp = flatten_list(i);\n                result.insert(result.end(), temp.begin(), temp.end());\n            } else {\n                result.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;"
  ]
}