{
  "name": "mbpp_446_count_Occurrence",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the occurence of all elements of list in a tuple.\nlong count_Occurrence(std::any tup, std::any lst) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = count_Occurrence;\n    assert(candidate(std::make_tuple(\"a\", \"a\", \"c\", \"b\", \"d\"), (std::any({(std::string)\"a\", (std::string)\"b\"}))) == (3));\n    assert(candidate(std::make_tuple(1, 2, 3, 1, 4, 6, 7, 1, 4), (std::any({(long)1, (long)4, (long)7}))) == (6));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6), (std::any({(long)1, (long)2}))) == (2));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    long count = 0;\n    for (auto i : lst) {\n        for (auto j : tup) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(auto i : tup){\n        for(auto j : lst){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(auto i : tup){\n        for(auto j : lst){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(auto i:tup){\n        if(i == lst){\n            count++;\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    int count = 0;\n    for(auto i: lst){\n        for(auto j: tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for (auto i : lst) {\n        for (auto j : tup) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    std::any_cast<std::vector<std::any>>(tup);\n    std::any_cast<std::vector<std::any>>(lst);\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    std::vector<std::any> v1 = tup;\n    std::vector<std::any> v2 = lst;\n    std::map<std::any, int> m;\n    for(auto i:v1){\n        m[i]++;\n    }\n    long count = 0;\n    for(auto i:v2){\n        if(m.find(i) != m.end()){\n            count += m[i];\n        }\n    }\n    return count;",
    "    // write your code here\n    long count = 0;\n    std::any tup_list = std::any_cast<std::list<std::any>>(tup);\n    std::any lst_list = std::any_cast<std::list<std::any>>(lst);\n    for (auto i = lst_list.begin(); i != lst_list.end(); i++) {\n        for (auto j = tup_list.begin(); j != tup_list.end(); j++) {\n            if (*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "\t// Write your code here\n\t// To print results to the standard output you can use print\n\t// Example: print \"Hello world!\"\n\tlong count = 0;\n\tfor(auto i : lst)\n\t{\n\t\tfor(auto j : tup)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
    "    long count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<long>>(lst).size(); i++) {\n        for (auto j = 0; j < std::any_cast<std::vector<long>>(tup).size(); j++) {\n            if (std::any_cast<std::vector<long>>(lst)[i] == std::any_cast<std::vector<long>>(tup)[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i : tup) {\n        if (i == lst) {\n            count++;\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for (auto it = std::any_cast<std::vector<long>>(tup).begin(); it != std::any_cast<std::vector<long>>(tup).end(); it++) {\n        for (auto it1 = std::any_cast<std::vector<long>>(lst).begin(); it1 != std::any_cast<std::vector<long>>(lst).end(); it1++) {\n            if (*it == *it1) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    for(auto i:lst){\n        for(auto j:tup){\n            if(i==j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<std::any>>(tup).size(); i++) {\n        for (auto j = 0; j < std::any_cast<std::vector<std::any>>(lst).size(); j++) {\n            if (std::any_cast<std::vector<std::any>>(tup)[i] == std::any_cast<std::vector<std::any>>(lst)[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<int>>(tup).size(); i++) {\n        for (auto j = 0; j < std::any_cast<std::vector<int>>(lst).size(); j++) {\n            if (std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    int count = 0;\n    for(int i = 0; i < std::any_cast<std::vector<int>>(lst).size(); i++)\n    {\n        for(int j = 0; j < std::any_cast<std::vector<int>>(tup).size(); j++)\n        {\n            if(std::any_cast<std::vector<int>>(lst)[i] == std::any_cast<std::vector<int>>(tup)[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your program\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for (auto i : lst) {\n        for (auto j : tup) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;"
  ]
}