{
  "name": "mbpp_446_count_Occurrence",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the occurence of all elements of list in a tuple.\nlong count_Occurrence(std::any tup, std::any lst) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = count_Occurrence;\n    assert(candidate(std::make_tuple(\"a\", \"a\", \"c\", \"b\", \"d\"), (std::any({(std::string)\"a\", (std::string)\"b\"}))) == (3));\n    assert(candidate(std::make_tuple(1, 2, 3, 1, 4, 6, 7, 1, 4), (std::any({(long)1, (long)4, (long)7}))) == (6));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6), (std::any({(long)1, (long)2}))) == (2));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    long count = 0;\n    for (auto i : lst) {\n        for (auto j : tup) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(auto i : tup){\n        for(auto j : lst){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(auto i : tup){\n        for(auto j : lst){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(auto i:tup){\n        if(i == lst){\n            count++;\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    int count = 0;\n    for(auto i: lst){\n        for(auto j: tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for (auto i : lst) {\n        for (auto j : tup) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    std::any_cast<std::vector<std::any>>(tup);\n    std::any_cast<std::vector<std::any>>(lst);\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    std::vector<std::any> v1 = tup;\n    std::vector<std::any> v2 = lst;\n    std::map<std::any, int> m;\n    for(auto i:v1){\n        m[i]++;\n    }\n    long count = 0;\n    for(auto i:v2){\n        if(m.find(i) != m.end()){\n            count += m[i];\n        }\n    }\n    return count;",
    "    // write your code here\n    long count = 0;\n    std::any tup_list = std::any_cast<std::list<std::any>>(tup);\n    std::any lst_list = std::any_cast<std::list<std::any>>(lst);\n    for (auto i = lst_list.begin(); i != lst_list.end(); i++) {\n        for (auto j = tup_list.begin(); j != tup_list.end(); j++) {\n            if (*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "\t// Write your code here\n\t// To print results to the standard output you can use print\n\t// Example: print \"Hello world!\"\n\tlong count = 0;\n\tfor(auto i : lst)\n\t{\n\t\tfor(auto j : tup)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
    "    long count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<long>>(lst).size(); i++) {\n        for (auto j = 0; j < std::any_cast<std::vector<long>>(tup).size(); j++) {\n            if (std::any_cast<std::vector<long>>(lst)[i] == std::any_cast<std::vector<long>>(tup)[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i : tup) {\n        if (i == lst) {\n            count++;\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for (auto it = std::any_cast<std::vector<long>>(tup).begin(); it != std::any_cast<std::vector<long>>(tup).end(); it++) {\n        for (auto it1 = std::any_cast<std::vector<long>>(lst).begin(); it1 != std::any_cast<std::vector<long>>(lst).end(); it1++) {\n            if (*it == *it1) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    for(auto i:lst){\n        for(auto j:tup){\n            if(i==j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<std::any>>(tup).size(); i++) {\n        for (auto j = 0; j < std::any_cast<std::vector<std::any>>(lst).size(); j++) {\n            if (std::any_cast<std::vector<std::any>>(tup)[i] == std::any_cast<std::vector<std::any>>(lst)[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<int>>(tup).size(); i++) {\n        for (auto j = 0; j < std::any_cast<std::vector<int>>(lst).size(); j++) {\n            if (std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    int count = 0;\n    for(int i = 0; i < std::any_cast<std::vector<int>>(lst).size(); i++)\n    {\n        for(int j = 0; j < std::any_cast<std::vector<int>>(tup).size(); j++)\n        {\n            if(std::any_cast<std::vector<int>>(lst)[i] == std::any_cast<std::vector<int>>(tup)[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your program\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for (auto i : lst) {\n        for (auto j : tup) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    int count = 0;\n    for(auto i : tup){\n        for(auto j : lst){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    int count = 0;\n    for(int i = 0; i < lst.size(); i++){\n        for(int j = 0; j < tup.size(); j++){\n            if(lst[i] == tup[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < std::any_cast<std::vector<int>>(tup).size(); i++) {\n        if (std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[0]) {\n            count++;\n        }\n    }\n    return count;",
    "\t// Write your code here\n\t// To print results to the standard output you can use print\n\t// Example: print \"Hello world!\"\n\tint count = 0;\n\tstd::vector<std::any> lst_vector = lst;\n\tstd::vector<std::any> tup_vector = tup;\n\tfor (int i = 0; i < lst_vector.size(); i++) {\n\t\tfor (int j = 0; j < tup_vector.size(); j++) {\n\t\t\tif (lst_vector[i] == tup_vector[j]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
    "    // Write your code here\n    long count = 0;\n    for(auto i : tup){\n        for(auto j : lst){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<long>>(tup).size(); i++) {\n        if (std::any_cast<std::vector<long>>(tup)[i] == std::any_cast<std::vector<long>>(lst)[0]) {\n            count++;\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for (auto i : lst) {\n        for (auto j : tup) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // write your code here\n    int count = 0;\n    for(int i = 0; i < std::any_cast<std::vector<int>>(lst).size(); i++)\n    {\n        for(int j = 0; j < std::any_cast<std::vector<int>>(tup).size(); j++)\n        {\n            if(std::any_cast<std::vector<int>>(lst)[i] == std::any_cast<std::vector<int>>(tup)[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::vector<std::any> tup_list;\n    std::vector<std::any> lst_list;\n    for (auto i : tup) {\n        tup_list.push_back(i);\n    }\n    for (auto i : lst) {\n        lst_list.push_back(i);\n    }\n    for (auto i : lst_list) {\n        for (auto j : tup_list) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // write your code here\n    long count = 0;\n    for(auto i : tup){\n        for(auto j : lst){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    int count = 0;\n    for (int i = 0; i < std::any_cast<std::vector<int>>(tup).size(); i++) {\n        if (std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[0]) {\n            count++;\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    int count = 0;\n    std::vector<std::any> tup_vec = std::any_cast<std::vector<std::any>>(tup);\n    std::vector<std::any> lst_vec = std::any_cast<std::vector<std::any>>(lst);\n    for(int i=0;i<lst_vec.size();i++)\n    {\n        for(int j=0;j<tup_vec.size();j++)\n        {\n            if(lst_vec[i] == tup_vec[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::any_cast<std::vector<std::any>>(tup);\n    std::any_cast<std::vector<std::any>>(lst);\n    for(auto i : tup)\n    {\n        for(auto j : lst)\n        {\n            if(i == j)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // write your code here\n    long count = 0;\n    std::vector<std::any> v;\n    for (auto i : tup) {\n        v.push_back(i);\n    }\n    for (auto i : lst) {\n        for (auto j : v) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can access the tuple elements using get()\n    // For example:\n    // std::any tup = std::make_any<std::tuple<int, int, int>>(1, 2, 3);\n    // std::any ele = std::get<0>(tup);\n    // You can access the list elements using []\n    // For example:\n    // std::any lst = std::make_any<std::vector<int>>(1, 2, 3);\n    // std::any ele = lst[0];\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    for(int i=0;i<tup.size();i++){\n        for(int j=0;j<lst.size();j++){\n            if(tup[i]==lst[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    int count = 0;\n    for (auto i = std::any_cast<std::vector<int>>(lst).begin(); i != std::any_cast<std::vector<int>>(lst).end(); i++) {\n        for (auto j = std::any_cast<std::vector<int>>(tup).begin(); j != std::any_cast<std::vector<int>>(tup).end(); j++) {\n            if (*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::any tup_list = std::any_cast<std::any>(tup);\n    std::any lst_list = std::any_cast<std::any>(lst);\n    for(auto i = lst_list.begin(); i != lst_list.end(); i++) {\n        for(auto j = tup_list.begin(); j != tup_list.end(); j++) {\n            if(*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::any_cast<std::vector<std::any>>(tup);\n    std::any_cast<std::vector<std::any>>(lst);\n    for(auto i: tup){\n        for(auto j: lst){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::any_cast<std::vector<std::any>>(tup).size();\n    std::any_cast<std::vector<std::any>>(lst).size();\n    for(auto i : std::any_cast<std::vector<std::any>>(tup)) {\n        for(auto j : std::any_cast<std::vector<std::any>>(lst)) {\n            if(i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // write your code here\n    int count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    std::vector<std::any> v = tup;\n    std::vector<std::any> v1 = lst;\n    for(auto i = v.begin(); i != v.end(); i++) {\n        for(auto j = v1.begin(); j != v1.end(); j++) {\n            if(*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    int count = 0;\n    for(int i=0;i<std::any_cast<std::vector<int>>(lst).size();i++){\n        for(int j=0;j<std::any_cast<std::vector<int>>(tup).size();j++){\n            if(std::any_cast<std::vector<int>>(lst)[i] == std::any_cast<std::vector<int>>(tup)[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "\t// Write your code here\n\t// To print results to the standard output you can use print\n\t// Example: print \"Hello world!\"\n\t//return 0;\n\tint count = 0;\n\tstd::any_cast<std::vector<int>>(tup).size();\n\tstd::any_cast<std::vector<int>>(lst).size();\n\tfor (int i = 0; i < std::any_cast<std::vector<int>>(tup).size(); i++) {\n\t\tfor (int j = 0; j < std::any_cast<std::vector<int>>(lst).size(); j++) {\n\t\t\tif (std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[j]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
    "    // Write your code here\n    long count = 0;\n    for(auto i:tup){\n        for(auto j:lst){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    for(auto i: lst){\n        for(auto j: tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<int>>(lst).size(); i++) {\n        for (auto j = 0; j < std::any_cast<std::vector<int>>(tup).size(); j++) {\n            if (std::any_cast<std::vector<int>>(lst)[i] == std::any_cast<std::vector<int>>(tup)[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "  // Your code here\n  long count = 0;\n  for(auto i : lst){\n    for(auto j : tup){\n      if(i == j){\n        count++;\n      }\n    }\n  }\n  return count;",
    "    // Write your code here\n    long count = 0;\n    for(auto i: tup){\n        for(auto j: lst){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    std::any_cast<std::vector<int>>(tup).size();\n    std::any_cast<std::vector<int>>(lst).size();\n    for(int i = 0; i < std::any_cast<std::vector<int>>(tup).size(); i++){\n        for(int j = 0; j < std::any_cast<std::vector<int>>(lst).size(); j++){\n            if(std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // write your code here\n    // return the count\n    long count = 0;\n    std::any tup_list = std::any_cast<std::any>(tup);\n    std::any lst_list = std::any_cast<std::any>(lst);\n    for(auto i : tup_list) {\n        for(auto j : lst_list) {\n            if(i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    int count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < tup.size(); j++) {\n            if (lst[i] == tup[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can access the tuple elements using get<index>(tup)\n    // You can access the list elements using lst[index]\n    long count = 0;\n    for(int i=0;i<std::any_cast<std::vector<int>>(lst).size();i++){\n        for(int j=0;j<std::any_cast<std::vector<int>>(tup).size();j++){\n            if(std::any_cast<std::vector<int>>(lst)[i] == std::any_cast<std::vector<int>>(tup)[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your program\n    // Note: The solution to this question will use concepts\n    // you learnt in the previous question\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // write your code here\n    long count = 0;\n    for(auto i:tup){\n        for(auto j:lst){\n            if(i==j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can access the tuple as tup.\n    // You can access the list as lst.\n    // Return the count of all elements of list in a tuple.\n    long count = 0;\n    for(auto i : lst)\n    {\n        for(auto j : tup)\n        {\n            if(i == j)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(auto i : tup){\n        for(auto j : lst){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // write your code here\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for (auto i = std::any_cast<std::vector<std::any>>(tup).begin(); i != std::any_cast<std::vector<std::any>>(tup).end(); i++) {\n        for (auto j = std::any_cast<std::vector<std::any>>(lst).begin(); j != std::any_cast<std::vector<std::any>>(lst).end(); j++) {\n            if (*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can access the tuple elements using get() function\n    // For example:\n    // std::any tup = std::make_any<std::tuple<int, float, std::string, int>>(10, 15.5, \"GeeksforGeeks\", 5);\n    // To access 10 we use get<0>(tup)\n    // Similarly to access 15.5 we use get<1>(tup)\n    // Similarly to access \"GeeksforGeeks\" we use get<2>(tup)\n    // Similarly to access 5 we use get<3>(tup)\n    // You can access the list elements using [] operator\n    // For example:\n    // std::any lst = std::make_any<std::vector<int>>(10, 15, 20, 25, 30);\n    // To access 10 we use lst[0]\n    // Similarly to access 15 we use lst[1]\n    // Similarly to access 20 we use lst[2]\n    // Similarly to access 25 we use lst[3]\n    // Similarly to access 30 we use lst[4]\n    // You can also use at() function to access the list elements\n    // For example:\n    // lst.at(0) returns 10\n    // lst.at(1) returns 15\n    // lst.at(2) returns 20\n    // lst.at(3) returns 25\n    // lst.at(4) returns 30\n    // You can also use size() function to find the size of list\n    // For example:\n    // lst.size() returns 5\n    // You can also use size() function to find the size of tuple\n    // For example:\n    // std::tuple_size<decltype(tup)>::value returns 4\n    // You can also use std::get<index>(tup) to access the tuple elements\n    // For example:\n    // std::get<0>(tup) returns 10\n    // std::get<1>(tup) returns 15.5\n    // std::get<2>(tup) returns \"GeeksforGeeks\"\n    // std::get<3>(tup) returns 5\n    // You",
    "    // Your code here\n    // Hint: You can use __getitem__() to access tuple elements\n    // Hint: You can use __len__() to get length of tuple\n    // Hint: You can use __getitem__() to access list elements\n    // Hint: You can use __len__() to get length of list\n    long count = 0;\n    for(int i=0;i<std::any_cast<int>(tup.__len__());i++){\n        for(int j=0;j<std::any_cast<int>(lst.__len__());j++){\n            if(std::any_cast<int>(tup.__getitem__(i)) == std::any_cast<int>(lst.__getitem__(j))){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(auto i : tup)\n    {\n        for(auto j : lst)\n        {\n            if(i == j)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // write your code here\n    return 0;",
    "    // write your code here\n    long count=0;\n    for(auto i:lst){\n        for(auto j:tup){\n            if(i==j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    int lst_size = std::any_cast<std::vector<int>>(lst).size();\n    int tup_size = std::any_cast<std::vector<int>>(tup).size();\n    for(int i=0;i<lst_size;i++){\n        for(int j=0;j<tup_size;j++){\n            if(std::any_cast<std::vector<int>>(lst)[i] == std::any_cast<std::vector<int>>(tup)[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    if(tup.type() == typeid(std::vector<int>)){\n        std::vector<int> tup_vector = std::any_cast<std::vector<int>>(tup);\n        std::vector<int> lst_vector = std::any_cast<std::vector<int>>(lst);\n        std::map<int, int> count_map;\n        for(int i = 0; i < tup_vector.size(); i++){\n            count_map[tup_vector[i]]++;\n        }\n        long count = 0;\n        for(int i = 0; i < lst_vector.size(); i++){\n            count += count_map[lst_vector[i]];\n        }\n        return count;\n    }\n    else if(tup.type() == typeid(std::vector<char>)){\n        std::vector<char> tup_vector = std::any_cast<std::vector<char>>(tup);\n        std::vector<char> lst_vector = std::any_cast<std::vector<char>>(lst);\n        std::map<char, int> count_map;\n        for(int i = 0; i < tup_vector.size(); i++){\n            count_map[tup_vector[i]]++;\n        }\n        long count = 0;\n        for(int i = 0; i < lst_vector.size(); i++){\n            count += count_map[lst_vector[i]];\n        }\n        return count;\n    }\n    else if(tup.type() == typeid(std::vector<float>)){\n        std::vector<float> tup_vector = std::any_cast<std::vector<float>>(tup);\n        std::vector<float> lst_vector = std::any_cast<std::vector<float>>(lst);\n        std::map<float, int> count_map;\n        for(int i = 0; i < tup_vector.size(); i++){\n            count_map[tup_vector[i]]++;\n        }",
    "    // Your code here\n    // return 0;\n    std::any tup1 = tup;\n    std::any lst1 = lst;\n    long count = 0;\n    for(auto i = std::any_cast<std::vector<long>>(tup1).begin(); i != std::any_cast<std::vector<long>>(tup1).end(); i++){\n        for(auto j = std::any_cast<std::vector<long>>(lst1).begin(); j != std::any_cast<std::vector<long>>(lst1).end(); j++){\n            if(*i == *j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    std::any_cast<std::vector<std::any>>(tup);\n    std::any_cast<std::vector<std::any>>(lst);\n    for(auto i : tup){\n        for(auto j : lst){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can access the tuple as tup.\n    // You can access the list as lst.\n    // Return the count of all elements of list in tuple.\n    long count = 0;\n    for(auto i: lst)\n    {\n        for(auto j: tup)\n        {\n            if(i == j)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(auto i : tup) {\n        for(auto j : lst) {\n            if(i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    int count = 0;\n    for(auto i : tup){\n        for(auto j : lst){\n            if(i == j)\n                count++;\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    int count = 0;\n    std::vector<std::any> v = std::any_cast<std::vector<std::any>>(tup);\n    std::vector<std::any> v1 = std::any_cast<std::vector<std::any>>(lst);\n    for(int i=0;i<v.size();i++){\n        for(int j=0;j<v1.size();j++){\n            if(v[i] == v1[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::any tup_list = std::any_cast<std::list<std::any>>(tup);\n    std::any lst_list = std::any_cast<std::list<std::any>>(lst);\n    for (auto i : tup_list) {\n        for (auto j : lst_list) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your program\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<long>>(tup).size(); i++) {\n        for (auto j = 0; j < std::any_cast<std::vector<long>>(lst).size(); j++) {\n            if (std::any_cast<std::vector<long>>(tup)[i] == std::any_cast<std::vector<long>>(lst)[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    for(auto i:lst){\n        for(auto j:tup){\n            if(i==j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    std::vector<std::any> v1 = std::any_cast<std::vector<std::any>>(tup);\n    std::vector<std::any> v2 = std::any_cast<std::vector<std::any>>(lst);\n    std::map<std::any, int> m;\n    for(auto i:v1)\n        m[i]++;\n    int count = 0;\n    for(auto i:v2)\n        count += m[i];\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    for(int i=0; i<std::any_cast<std::vector<int>>(tup).size(); i++)\n    {\n        for(int j=0; j<std::any_cast<std::vector<int>>(lst).size(); j++)\n        {\n            if(std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<int>>(tup).size(); i++) {\n        for (auto j = 0; j < std::any_cast<std::vector<int>>(lst).size(); j++) {\n            if (std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    std::vector<std::any> tup_list = std::any_cast<std::vector<std::any>>(tup);\n    std::vector<std::any> lst_list = std::any_cast<std::vector<std::any>>(lst);\n    for(auto i : lst_list) {\n        for(auto j : tup_list) {\n            if(i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    int count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<int>>(tup).size(); i++) {\n        if (std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[0]) {\n            count++;\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count=0;\n    std::vector<std::any> tup_list = tup;\n    std::vector<std::any> lst_list = lst;\n    for(auto i:lst_list){\n        for(auto j:tup_list){\n            if(i==j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for(auto i : tup){\n        for(auto j : lst){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    for(auto i: lst)\n    {\n        for(auto j: tup)\n        {\n            if(i == j)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for (auto i : lst) {\n        for (auto j : tup) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "  // Your code here\n  // You can also use sample_tuple and sample_list to \n  // verify your code\n  long count = 0;\n  for(auto i : lst){\n    for(auto j : tup){\n      if(i == j){\n        count++;\n      }\n    }\n  }\n  return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // write your code here\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<int>>(lst).size(); i++) {\n        for (auto j = 0; j < std::any_cast<std::vector<int>>(tup).size(); j++) {\n            if (std::any_cast<std::vector<int>>(lst)[i] == std::any_cast<std::vector<int>>(tup)[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    // return the count of all elements of list in tuple\n    long count = 0;\n    for(auto i : lst)\n    {\n        for(auto j : tup)\n        {\n            if(i == j)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(auto i : tup) {\n        for(auto j : lst) {\n            if(i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // write your code here\n    int count = 0;\n    for(int i=0; i<std::any_cast<std::vector<int>>(tup).size(); i++)\n    {\n        for(int j=0; j<std::any_cast<std::vector<int>>(lst).size(); j++)\n        {\n            if(std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can access the tuple elements using get() function\n    // For example, to get the first element of tuple, use get<0>(tup)\n    // Similarly, to get the first element of list, use lst[0]\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < tup.size(); j++) {\n            if (lst[i] == tup[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    int count = 0;\n    for(auto i : tup){\n        for(auto j : lst){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can access the tuple as tup.\n    // You can access the list as lst.\n    // Return the count of all elements of list in tuple.\n    long count = 0;\n    for(auto i : lst)\n    {\n        if(tup.find(i) != tup.end())\n        {\n            count++;\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    int count = 0;\n    for (auto i = std::any_cast<std::vector<int>>(tup).begin(); i != std::any_cast<std::vector<int>>(tup).end(); i++) {\n        for (auto j = std::any_cast<std::vector<int>>(lst).begin(); j != std::any_cast<std::vector<int>>(lst).end(); j++) {\n            if (*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your program\n    // Note: The solution shared through Github should contain the \".cpp\" file \n    // in order to run in the site\n    int count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your program\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(auto i : tup)\n        for(auto j : lst)\n            if(i == j)\n                count++;\n    return count;",
    "    long count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<int>>(lst).size(); i++) {\n        for (auto j = 0; j < std::any_cast<std::vector<int>>(tup).size(); j++) {\n            if (std::any_cast<std::vector<int>>(lst)[i] == std::any_cast<std::vector<int>>(tup)[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<int>>(lst).size(); i++) {\n        for (auto j = 0; j < std::any_cast<std::vector<int>>(tup).size(); j++) {\n            if (std::any_cast<std::vector<int>>(lst)[i] == std::any_cast<std::vector<int>>(tup)[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<int>>(tup).size(); i++) {\n        for (auto j = 0; j < std::any_cast<std::vector<int>>(lst).size(); j++) {\n            if (std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::any tup_list = std::any_cast<std::vector<std::any>>(tup);\n    std::any lst_list = std::any_cast<std::vector<std::any>>(lst);\n    for (auto i = tup_list.begin(); i != tup_list.end(); i++) {\n        for (auto j = lst_list.begin(); j != lst_list.end(); j++) {\n            if (*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    //\n    // Write your code here\n    //\n    std::any_cast<std::vector<int>>(tup);\n    std::any_cast<std::vector<int>>(lst);\n    int count = 0;\n    for(int i=0;i<tup.size();i++){\n        for(int j=0;j<lst.size();j++){\n            if(tup[i]==lst[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for(auto i: lst){\n        for(auto j: tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<long>>(tup).size(); i++) {\n        if (std::any_cast<std::vector<long>>(tup)[i] == std::any_cast<std::vector<long>>(lst)[0]) {\n            count++;\n        }\n    }\n    return count;",
    "    // write your code here\n    long count = 0;\n    for(auto i : tup)\n        for(auto j : lst)\n            if(i == j)\n                count++;\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    std::any_cast<std::vector<int>>(tup).push_back(std::any_cast<std::vector<int>>(lst)[0]);\n    for(int i = 0; i < std::any_cast<std::vector<int>>(tup).size(); i++)\n    {\n        if(std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[0])\n        {\n            count++;\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can access the tuple as tup.\n    // You can access the list as lst.\n    // Return the count of elements in list that are present in tuple.\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your program\n    // Note: The solution to this question will be graded manually\n    // hence do not edit the tuple and list values\n    // tuple values\n    std::any sample_tuple = std::make_any<std::vector<int>>(std::vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    // list values\n    std::any sample_list = std::make_any<std::vector<int>>(std::vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    // write your logic here\n    int count = 0;\n    for (auto i = std::any_cast<std::vector<int>>(lst).begin(); i != std::any_cast<std::vector<int>>(lst).end(); i++) {\n        for (auto j = std::any_cast<std::vector<int>>(tup).begin(); j != std::any_cast<std::vector<int>>(tup).end(); j++) {\n            if (*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    int count = 0;\n    std::any tup_list = std::any_cast<std::list<std::any>>(tup);\n    std::any lst_list = std::any_cast<std::list<std::any>>(lst);\n    for (auto i : lst_list) {\n        for (auto j : tup_list) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // write your code here\n    long count = 0;\n    for(auto i: lst){\n        for(auto j: tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    for(auto i : lst)\n    {\n        for(auto j : tup)\n        {\n            if(i == j)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    for (auto i : lst) {\n        for (auto j : tup) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    int count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can access the tuple elements using get() function\n    // For example get<0>(tup) will return the first element of tuple\n    // Similarly get<1>(tup) will return the second element of tuple\n    // You can access the list elements using lst[i]\n    // For example lst[0] will return the first element of list\n    // Similarly lst[1] will return the second element of list\n    // You can also use the count() function to count the occurence of an element in a list\n    // For example count(lst, 1) will return the number of occurence of 1 in the list\n    // You can also use the len() function to find the length of a list\n    // For example len(lst) will return the number of elements in the list\n    long count = 0;\n    for (int i = 0; i < len(lst); i++) {\n        if (get<0>(tup) == lst[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < std::any_cast<std::vector<int>>(tup).size(); i++) {\n        if (std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[0]) {\n            count++;\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for (auto i = std::any_cast<std::vector<long>>(tup).begin(); i != std::any_cast<std::vector<long>>(tup).end(); i++) {\n        if (std::any_cast<std::vector<long>>(lst).end() != std::find(std::any_cast<std::vector<long>>(lst).begin(), std::any_cast<std::vector<long>>(lst).end(), *i)) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<std::any>>(tup).size(); i++) {\n        if (std::any_cast<std::vector<std::any>>(tup)[i] == lst) {\n            count++;\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for (auto i : lst) {\n        for (auto j : tup) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // write your code here\n    long count = 0;\n    std::vector<std::any> vec = std::any_cast<std::vector<std::any>>(tup);\n    std::vector<std::any> vec1 = std::any_cast<std::vector<std::any>>(lst);\n    for(int i = 0; i < vec.size(); i++) {\n        for(int j = 0; j < vec1.size(); j++) {\n            if(vec[i] == vec1[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count=0;\n    std::any tup_list=std::any_cast<std::list<std::any>>(tup);\n    std::any lst_list=std::any_cast<std::list<std::any>>(lst);\n    for(auto i=lst_list.begin();i!=lst_list.end();i++){\n        for(auto j=tup_list.begin();j!=tup_list.end();j++){\n            if(*i==*j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // write your code here\n    long count = 0;\n    try {\n        std::any_cast<std::vector<std::any>>(tup);\n    }\n    catch(std::bad_any_cast& e) {\n        return 0;\n    }\n    try {\n        std::any_cast<std::vector<std::any>>(lst);\n    }\n    catch(std::bad_any_cast& e) {\n        return 0;\n    }\n    std::vector<std::any> tup_vec = std::any_cast<std::vector<std::any>>(tup);\n    std::vector<std::any> lst_vec = std::any_cast<std::vector<std::any>>(lst);\n    for(auto i : lst_vec) {\n        for(auto j : tup_vec) {\n            if(i == j) {\n                count += 1;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(auto i = std::any_cast<std::vector<int>>(lst).begin(); i != std::any_cast<std::vector<int>>(lst).end(); i++) {\n        for(auto j = std::any_cast<std::vector<int>>(tup).begin(); j != std::any_cast<std::vector<int>>(tup).end(); j++) {\n            if(*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    // return 0;\n    long count = 0;\n    std::any tup_list = std::any_cast<std::list<std::any>>(tup);\n    std::any lst_list = std::any_cast<std::list<std::any>>(lst);\n    for(auto itr = tup_list.begin(); itr != tup_list.end(); itr++) {\n        for(auto itr2 = lst_list.begin(); itr2 != lst_list.end(); itr2++) {\n            if(*itr == *itr2) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    std::vector<std::any> v1 = tup;\n    std::vector<std::any> v2 = lst;\n    for(auto i = v1.begin(); i != v1.end(); i++) {\n        for(auto j = v2.begin(); j != v2.end(); j++) {\n            if(*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < std::any_cast<std::vector<int>>(tup).size(); i++) {\n        if (std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[0]) {\n            count++;\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your program\n    long count = 0;\n    for(auto i = std::any_cast<std::vector<long>>(lst).begin(); i != std::any_cast<std::vector<long>>(lst).end(); i++) {\n        for(auto j = std::any_cast<std::vector<long>>(tup).begin(); j != std::any_cast<std::vector<long>>(tup).end(); j++) {\n            if(*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    // return the count of elements in list\n    long count = 0;\n    for(auto it = std::any_cast<std::vector<int>>(tup).begin(); it != std::any_cast<std::vector<int>>(tup).end(); it++){\n        for(auto it1 = std::any_cast<std::vector<int>>(lst).begin(); it1 != std::any_cast<std::vector<int>>(lst).end(); it1++){\n            if(*it == *it1){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for(auto i : lst)\n    {\n        for(auto j : tup)\n        {\n            if(i == j)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    int count = 0;\n    for(auto i:tup){\n        for(auto j:lst){\n            if(i==j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for(auto i : lst)\n    {\n        for(auto j : tup)\n        {\n            if(i == j)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    std::vector<std::any> tup_vec = tup;\n    std::vector<std::any> lst_vec = lst;\n    std::map<std::any, int> m;\n    for(auto i : tup_vec)\n        m[i]++;\n    int count = 0;\n    for(auto i : lst_vec)\n        count += m[i];\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(auto i = std::any_cast<std::vector<int>>(tup).begin(); i != std::any_cast<std::vector<int>>(tup).end(); i++)\n    {\n        for(auto j = std::any_cast<std::vector<int>>(lst).begin(); j != std::any_cast<std::vector<int>>(lst).end(); j++)\n        {\n            if(*i == *j)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    for (auto i : lst) {\n        for (auto j : tup) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can access the tuple as tup.\n    // You can access the list as lst.\n    // Return the count of all elements of list in the tuple.\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    std::any_cast<std::vector<int>>(lst);\n    std::any_cast<std::vector<int>>(tup);\n    for(auto i: lst)\n    {\n        for(auto j: tup)\n        {\n            if(i == j)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::any tup_list = std::any_cast<std::any>(tup);\n    std::any lst_list = std::any_cast<std::any>(lst);\n    for (auto i = tup_list.begin(); i != tup_list.end(); i++) {\n        for (auto j = lst_list.begin(); j != lst_list.end(); j++) {\n            if (*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // Hint: You can use any() to check if an element is present in a tuple or not\n    long count = 0;\n    for(auto i : lst){\n        if(std::any_cast<int>(i) == std::any_cast<int>(tup)){\n            count++;\n        }\n    }\n    return count;",
    "    // write your code here\n    long count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    int count = 0;\n    for(int i=0; i<std::any_cast<std::vector<int>>(tup).size(); i++){\n        for(int j=0; j<std::any_cast<std::vector<int>>(lst).size(); j++){\n            if(std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can access the tuple elements using get() function\n    // For example:\n    // tup.get<0>() will return the first element of tuple. Similarly,\n    // tup.get<1>() will return the second element of tuple.\n    // You can access the list elements using [] operator\n    // For example:\n    // lst[0] will return the first element of list. Similarly,\n    // lst[1] will return the second element of list.\n    long count = 0;\n    for(int i=0;i<lst.size();i++)\n    {\n        if(tup.get<0>()==lst[i])\n        {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::any_cast<std::vector<std::any>>(tup).size();\n    std::any_cast<std::vector<std::any>>(lst).size();\n    for(int i=0;i<std::any_cast<std::vector<std::any>>(tup).size();i++)\n    {\n        for(int j=0;j<std::any_cast<std::vector<std::any>>(lst).size();j++)\n        {\n            if(std::any_cast<std::vector<std::any>>(tup)[i] == std::any_cast<std::vector<std::any>>(lst)[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for(auto i : lst) {\n        for(auto j : tup) {\n            if(i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::any tup_list = std::any_cast<std::list<std::any>>(tup);\n    std::any lst_list = std::any_cast<std::list<std::any>>(lst);\n    for(auto i = lst_list.begin(); i != lst_list.end(); i++) {\n        for(auto j = tup_list.begin(); j != tup_list.end(); j++) {\n            if(*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can access the tuple elements using get<index>(tup)\n    // You can access the list elements using lst[index]\n    // Return the count of all elements of list in tuple\n    long count = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] == get<0>(tup) || lst[i] == get<1>(tup) || lst[i] == get<2>(tup)){\n            count++;\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    for(auto i : lst){\n        if(i in tup){\n            count++;\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for (auto i = std::any_cast<std::vector<int>>(tup).begin(); i != std::any_cast<std::vector<int>>(tup).end(); i++) {\n        for (auto j = std::any_cast<std::vector<int>>(lst).begin(); j != std::any_cast<std::vector<int>>(lst).end(); j++) {\n            if (*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto &i : tup) {\n        for (auto &j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "  // Your code here\n  long count = 0;\n  for(auto i : tup){\n    for(auto j : lst){\n      if(i == j){\n        count++;\n      }\n    }\n  }\n  return count;",
    "    long count = 0;\n    for(auto i : tup) {\n        if(i == lst) {\n            count++;\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::any_cast<std::vector<std::any>>(tup);\n    std::any_cast<std::vector<std::any>>(lst);\n    for(auto i : tup)\n    {\n        for(auto j : lst)\n        {\n            if(i == j)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    for(auto i : lst)\n        for(auto j : tup)\n            if(i == j)\n                count++;\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    std::vector<std::any> tup_vec = std::any_cast<std::vector<std::any>>(tup);\n    std::vector<std::any> lst_vec = std::any_cast<std::vector<std::any>>(lst);\n    for (auto i : lst_vec) {\n        for (auto j : tup_vec) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can access the tuple as tup.\n    // You can access the list as lst.\n    // You can return the result as a long.\n    long count = 0;\n    for (auto i : lst) {\n        for (auto j : tup) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    for (auto i : lst) {\n        for (auto j : tup) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for (auto i : lst) {\n        for (auto j : tup) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    std::any_cast<std::vector<int>>(tup);\n    std::any_cast<std::vector<int>>(lst);\n    for(int i=0;i<tup.size();i++){\n        for(int j=0;j<lst.size();j++){\n            if(tup[i]==lst[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    int count = 0;\n    for (int i = 0; i < std::any_cast<std::vector<int>>(tup).size(); i++) {\n        for (int j = 0; j < std::any_cast<std::vector<int>>(lst).size(); j++) {\n            if (std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    std::vector<std::any> v1 = std::any_cast<std::vector<std::any>>(tup);\n    std::vector<std::any> v2 = std::any_cast<std::vector<std::any>>(lst);\n    for(int i=0;i<v2.size();i++){\n        for(int j=0;j<v1.size();j++){\n            if(v2[i] == v1[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::any_cast<std::vector<std::any>>(tup).size();\n    std::any_cast<std::vector<std::any>>(lst).size();\n    for(auto i : std::any_cast<std::vector<std::any>>(tup)){\n        for(auto j : std::any_cast<std::vector<std::any>>(lst)){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    //\n    // write your code here\n    //\n    int count = 0;\n    for(auto it = std::any_cast<std::vector<int>>(lst).begin(); it != std::any_cast<std::vector<int>>(lst).end(); it++) {\n        for(auto it1 = std::any_cast<std::vector<int>>(tup).begin(); it1 != std::any_cast<std::vector<int>>(tup).end(); it1++) {\n            if(*it == *it1)\n                count++;\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i=0; i<std::any_cast<std::vector<int>>(tup).size(); i++) {\n        if(std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[0]) {\n            count++;\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(auto i : tup){\n        if(i == lst){\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i = 0; i < std::any_cast<std::vector<long>>(tup).size(); i++) {\n        for (auto j = 0; j < std::any_cast<std::vector<long>>(lst).size(); j++) {\n            if (std::any_cast<std::vector<long>>(tup)[i] == std::any_cast<std::vector<long>>(lst)[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // write your code here\n    long count=0;\n    for(auto i:lst){\n        for(auto j:tup){\n            if(i==j)\n                count++;\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    long count = 0;\n    std::any_cast<std::vector<int>>(lst);\n    std::any_cast<std::vector<int>>(tup);\n    for(int i = 0; i < lst.size(); i++){\n        for(int j = 0; j < tup.size(); j++){\n            if(lst[i] == tup[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    //\n    // write your code here\n    //\n    long count = 0;\n    std::any_cast<std::vector<int>>(lst);\n    std::any_cast<std::vector<int>>(tup);\n    for(auto i : lst) {\n        for(auto j : tup) {\n            if(i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < std::any_cast<std::vector<int>>(lst).size(); i++) {\n        for (int j = 0; j < std::any_cast<std::vector<int>>(tup).size(); j++) {\n            if (std::any_cast<std::vector<int>>(lst)[i] == std::any_cast<std::vector<int>>(tup)[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your code\n    long count = 0;\n    for (auto i = std::any_cast<std::vector<int>>(lst).begin(); i != std::any_cast<std::vector<int>>(lst).end(); i++) {\n        for (auto j = std::any_cast<std::vector<int>>(tup).begin(); j != std::any_cast<std::vector<int>>(tup).end(); j++) {\n            if (*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    int count = 0;\n    for(int i=0; i<std::any_cast<std::vector<int>>(tup).size(); i++){\n        for(int j=0; j<std::any_cast<std::vector<int>>(lst).size(); j++){\n            if(std::any_cast<std::vector<int>>(tup)[i] == std::any_cast<std::vector<int>>(lst)[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i : tup) {\n        for (auto j : lst) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your program\n    // Note: The solution shared through Github should contain the \".cpp\" file \n    // in order to run in the site\n    long count = 0;\n    for(int i=0;i<lst.size();i++){\n        if(tup.find(lst[i])!=tup.end()){\n            count++;\n        }\n    }\n    return count;",
    "    if (tup.type() != typeid(std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<long, long, long, long, long, long, long, std::tuple<",
    "    // Write your code here\n    long count = 0;\n    for(auto i : lst)\n    {\n        for(auto j : tup)\n        {\n            if(i == j)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    int count = 0;\n    for (auto i : lst) {\n        for (auto j : tup) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "  int count = 0;\n  for(auto i : tup) {\n    for(auto j : lst) {\n      if(i == j) {\n        count++;\n      }\n    }\n  }\n  return count;",
    "    // Your code here\n    // You can also use sample_tuple and sample_list to \n    // verify your program\n    long count = 0;\n    for(auto i : lst){\n        for(auto j : tup){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    // return 0;\n    std::any tup_list = std::any_cast<std::list<std::any>>(tup);\n    std::any lst_list = std::any_cast<std::list<std::any>>(lst);\n    long count = 0;\n    for (auto i : tup_list) {\n        for (auto j : lst_list) {\n            if (i == j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // write your code here\n    return 0;",
    "    // write your code here\n    long count = 0;\n    std::vector<std::any> v;\n    for (auto i = std::any_cast<std::vector<std::any>>(tup).begin(); i != std::any_cast<std::vector<std::any>>(tup).end(); i++) {\n        v.push_back(*i);\n    }\n    for (auto i = std::any_cast<std::vector<std::any>>(lst).begin(); i != std::any_cast<std::vector<std::any>>(lst).end(); i++) {\n        count += std::count(v.begin(), v.end(), *i);\n    }\n    return count;"
  ]
}