{
  "name": "mbpp_618_div_list",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0;i<nums1.size();i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp1rab6w7_: /tmp/tmp1rab6w7_.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp2hid0yic: /tmp/tmp2hid0yic.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n  std::vector<float> result;\n  for (int i = 0; i < nums1.size(); i++) {\n    result.push_back(nums1[i] / nums2[i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpb6l2m_h1: /tmp/tmpb6l2m_h1.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0;i<nums1.size();i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp1rab6w7_: /tmp/tmp1rab6w7_.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    assert(nums1.size() == nums2.size());\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmp9jio7sc9: /tmp/tmp9jio7sc9.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> ans;\n    for(int i=0;i<nums1.size();i++) {\n        ans.push_back((float)nums1[i]/(float)nums2[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res;\n    for(int i=0; i<nums1.size(); i++) {\n        res.push_back(nums1[i]/nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmpqtjpvsap: /tmp/tmpqtjpvsap.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    assert(nums1.size() == nums2.size());\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmp86j6e653: /tmp/tmp86j6e653.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / (float)nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp2hid0yic: /tmp/tmp2hid0yic.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    if(nums1.size() != nums2.size()) {\n        return result;\n    }\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmpv_39rs81: /tmp/tmpv_39rs81.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res;\n    for (int i = 0; i < nums1.size(); i++) {\n        res.push_back((float)nums1[i] / nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res;\n    for(int i=0; i<nums1.size(); i++) {\n        res.push_back(nums1[i]/nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmpqtjpvsap: /tmp/tmpqtjpvsap.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    assert(nums1.size() == nums2.size());\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmp9jio7sc9: /tmp/tmp9jio7sc9.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n  std::vector<float> result;\n  for(int i = 0; i < nums1.size(); i++) {\n    result.push_back(nums1[i] / nums2[i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmpmbn_elj8: /tmp/tmpmbn_elj8.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / (float)nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res;\n    for(int i = 0; i < nums1.size(); i++) {\n        res.push_back(nums1[i] / nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmp3p23uqjr: /tmp/tmp3p23uqjr.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res;\n    for(int i=0; i<nums1.size(); i++) {\n        res.push_back((float)nums1[i]/(float)nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res;\n    for(int i=0;i<nums1.size();i++) {\n        res.push_back(nums1[i]/nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmpuklv80pg: /tmp/tmpuklv80pg.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmpwmd3r4ge: /tmp/tmpwmd3r4ge.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp2hid0yic: /tmp/tmp2hid0yic.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n  std::vector<float> result;\n  for(int i = 0; i < nums1.size(); i++) {\n    result.push_back(nums1[i]/nums2[i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmpix9czkmz: /tmp/tmpix9czkmz.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res;\n    for(int i = 0; i < nums1.size(); i++) {\n        res.push_back(nums1[i] / nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmp3p23uqjr: /tmp/tmp3p23uqjr.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp2hid0yic: /tmp/tmp2hid0yic.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmpwmd3r4ge: /tmp/tmpwmd3r4ge.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp2hid0yic: /tmp/tmp2hid0yic.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / (float)nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res;\n    for(int i=0;i<nums1.size();i++) {\n        res.push_back((float)nums1[i]/nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmpwmd3r4ge: /tmp/tmpwmd3r4ge.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp2hid0yic: /tmp/tmp2hid0yic.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    assert(nums1.size() == nums2.size());\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmpx8bz_2h7: /tmp/tmpx8bz_2h7.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / (float)nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back((float)nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0;i<nums1.size();i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp1rab6w7_: /tmp/tmp1rab6w7_.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0;i<nums1.size();i++) {\n        result.push_back((float)nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmpwmd3r4ge: /tmp/tmpwmd3r4ge.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmpwmd3r4ge: /tmp/tmpwmd3r4ge.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    assert(nums1.size() == nums2.size());\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmpx8bz_2h7: /tmp/tmpx8bz_2h7.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n\tstd::vector<float> result;\n\tfor (int i = 0; i < nums1.size(); i++) {\n\t\tresult.push_back(nums1[i] / nums2[i]);\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmps8kkfmpt: /tmp/tmps8kkfmpt.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / (float)nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    assert(nums1.size() == nums2.size());\n    std::vector<float> res;\n    for(int i = 0; i < nums1.size(); i++) {\n        res.push_back(nums1[i] / nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmpn3k652k0: /tmp/tmpn3k652k0.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp2hid0yic: /tmp/tmp2hid0yic.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp2hid0yic: /tmp/tmp2hid0yic.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n\tstd::vector<float> result;\n\tfor (int i = 0; i < nums1.size(); i++) {\n\t\tresult.push_back(nums1[i] / nums2[i]);\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmps8kkfmpt: /tmp/tmps8kkfmpt.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res;\n    for(int i = 0; i < nums1.size(); i++) {\n        res.push_back(nums1[i] / nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmp3p23uqjr: /tmp/tmp3p23uqjr.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n  std::vector<float> result;\n  for (int i = 0; i < nums1.size(); i++) {\n    result.push_back(nums1[i] / nums2[i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpb6l2m_h1: /tmp/tmpb6l2m_h1.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / (float)nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n\tstd::vector<float> result;\n\tfor (int i = 0; i < nums1.size(); i++) {\n\t\tresult.push_back(nums1[i] / nums2[i]);\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmps8kkfmpt: /tmp/tmps8kkfmpt.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res;\n    for (int i = 0; i < nums1.size(); i++) {\n        res.push_back(nums1[i] / nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmpa3bcj5mx: /tmp/tmpa3bcj5mx.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0;i<nums1.size();i++) {\n        result.push_back((float)nums1[i]/(float)nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res;\n    for (int i = 0; i < nums1.size(); i++) {\n        res.push_back(nums1[i] / nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmpa3bcj5mx: /tmp/tmpa3bcj5mx.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    assert(nums1.size() == nums2.size());\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n\tstd::vector<float> result;\n\tfor (int i = 0; i < nums1.size(); i++) {\n\t\tresult.push_back((float)nums1[i] / nums2[i]);\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    int i = 0;\n    for (auto num1 : nums1) {\n        result.push_back(num1 / nums2[i]);\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "tmpbjka_btw: /tmp/tmpbjka_btw.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp2hid0yic: /tmp/tmp2hid0yic.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    assert(nums1.size() == nums2.size());\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmpx8bz_2h7: /tmp/tmpx8bz_2h7.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res;\n    for(int i = 0; i < nums1.size(); i++) {\n        res.push_back(nums1[i] / nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "tmp3p23uqjr: /tmp/tmp3p23uqjr.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6hhcsa_k: /tmp/tmp6hhcsa_k.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n  std::vector<float> result;\n  for (int i = 0; i < nums1.size(); i++) {\n    result.push_back(nums1[i] / nums2[i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpb6l2m_h1: /tmp/tmpb6l2m_h1.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two lists element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsonlr7l0: /tmp/tmpsonlr7l0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}