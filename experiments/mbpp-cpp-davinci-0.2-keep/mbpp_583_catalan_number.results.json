{
  "name": "mbpp_583_catalan_number",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(int j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 0; i < num; i++) {\n        res = res * (num + i);\n        res = res / (i + 1);\n    }\n    return res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "tmphb6gg7tx: /tmp/tmphb6gg7tx.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n\tlong *arr = new long[num+1];\n\tarr[0] = 1;\n\tarr[1] = 1;\n\tfor(long i = 2; i <= num; i++) {\n\t\tarr[i] = 0;\n\t\tfor(long j = 0; j < i; j++) {\n\t\t\tarr[i] += arr[j] * arr[i-j-1];\n\t\t}\n\t}\n\tlong ans = arr[num];\n\tdelete [] arr;\n\treturn ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(long j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long sum = 0;\n    for(long i = 0; i < num; i++) {\n        sum += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for (long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for (long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(int j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n  if(num == 0) {\n    return 1;\n  }\n  long sum = 0;\n  for(int i = 0; i < num; i++) {\n    sum += catalan_number(i) * catalan_number(num - i - 1);\n  }\n  return sum;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for (long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for (long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n\tlong *catalan = new long[num+1];\n\tcatalan[0] = 1;\n\tcatalan[1] = 1;\n\tfor(long i=2; i<=num; i++) {\n\t\tcatalan[i] = 0;\n\t\tfor(long j=0; j<i; j++) {\n\t\t\tcatalan[i] += catalan[j]*catalan[i-j-1];\n\t\t}\n\t}\n\treturn catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for (int i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long *catalan = new long[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(int j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(int j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num <= 1) {\n        return 1;\n    }\n    long res = 0;\n    for (long i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(int j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan_num[num+1];\n    catalan_num[0] = catalan_num[1] = 1;\n    for(int i=2;i<=num;i++) {\n        catalan_num[i] = 0;\n        for(int j=0;j<i;j++) {\n            catalan_num[i] += catalan_num[j]*catalan_num[i-j-1];\n        }\n    }\n    return catalan_num[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 0; i < num; i++) {\n        res = res * (num + i);\n        res = res / (i + 1);\n    }\n    return res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "tmphb6gg7tx: /tmp/tmphb6gg7tx.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num <= 1) {\n        return 1;\n    }\n    long res = 0;\n    for (int i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long result = 1;\n    for(long i = 0; i < num; i++) {\n        result *= (num + i);\n        result /= (i + 1);\n    }\n    return result/(num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "tmp61bb_tjh: /tmp/tmp61bb_tjh.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for (long i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long result = 1;\n    for(long i = 0; i < num; i++) {\n        result = result * (num + i);\n        result = result / (i + 1);\n    }\n    return result / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "tmpth4brb1k: /tmp/tmpth4brb1k.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for(long i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for(int i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan_number = 1;\n    for(long i = 0; i < num; i++) {\n        catalan_number *= (num + i);\n        catalan_number /= (i + 1);\n    }\n    return catalan_number/(num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "tmpgt1xwi7j: /tmp/tmpgt1xwi7j.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num + 1];\n    catalan[0] = catalan[1] = 1;\n    for (long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for (long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for(int i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0 || num == 1) {\n        return 1;\n    }\n    long sum = 0;\n    for (int i = 0; i < num; i++) {\n        sum += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for(long i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 2; i <= num; i++) {\n        res = res * (num + i) / i;\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "tmpf4bqyip3: /tmp/tmpf4bqyip3.cpp:14: int main(): Assertion `candidate((9)) == (4862)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for(int i = 0; i < num; i++) {\n        res = res * (num + i);\n        res = res / (i + 1);\n    }\n    return res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "tmp0nc6n6x8: /tmp/tmp0nc6n6x8.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n\tif(num == 0) return 1;\n\tlong ans = 0;\n\tfor(long i = 0; i < num; i++) {\n\t\tans += catalan_number(i) * catalan_number(num - i - 1);\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan_num[num+1];\n    catalan_num[0] = catalan_num[1] = 1;\n    for(int i = 2; i <= num; i++) {\n        catalan_num[i] = 0;\n        for(int j = 0; j < i; j++) {\n            catalan_num[i] += catalan_num[j] * catalan_num[i-j-1];\n        }\n    }\n    return catalan_num[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(long j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0)\n        return 1;\n    long res = 0;\n    for(int i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n\tlong catalan[num+1];\n\tcatalan[0] = catalan[1] = 1;\n\tfor(long i = 2; i <= num; i++) {\n\t\tcatalan[i] = 0;\n\t\tfor(long j = 0; j < i; j++) {\n\t\t\tcatalan[i] += catalan[j] * catalan[i-j-1];\n\t\t}\n\t}\n\treturn catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num <= 1)\n        return 1;\n    long res = 0;\n    for(int i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n\tlong *catalan = new long[num + 1];\n\tcatalan[0] = catalan[1] = 1;\n\tfor (long i = 2; i <= num; i++) {\n\t\tcatalan[i] = 0;\n\t\tfor (long j = 0; j < i; j++) {\n\t\t\tcatalan[i] += catalan[j] * catalan[i - j - 1];\n\t\t}\n\t}\n\tlong result = catalan[num];\n\tdelete[] catalan;\n\treturn result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long result = 1;\n    for (int i = 0; i < num; i++) {\n        result *= (num + i);\n        result /= (i + 1);\n    }\n    return result / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "tmpyanzmf0v: /tmp/tmpyanzmf0v.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n\tif (num == 0) {\n\t\treturn 1;\n\t}\n\tlong ans = 0;\n\tfor (long i = 0; i < num; i++) {\n\t\tans += catalan_number(i) * catalan_number(num - i - 1);\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan_number[num+1];\n    catalan_number[0] = catalan_number[1] = 1;\n    for(long i=2; i<=num; i++) {\n        catalan_number[i] = 0;\n        for(long j=0; j<i; j++) {\n            catalan_number[i] += catalan_number[j] * catalan_number[i-j-1];\n        }\n    }\n    return catalan_number[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n  long catalan[num+1];\n  catalan[0] = catalan[1] = 1;\n  for(long i = 2; i <= num; i++) {\n    catalan[i] = 0;\n    for(long j = 0; j < i; j++) {\n      catalan[i] += catalan[j] * catalan[i-j-1];\n    }\n  }\n  return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0)\n        return 1;\n    long ans = 0;\n    for(long i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long result = 1;\n    for (long i = 0; i < num; i++) {\n        result *= (num + i);\n        result /= (i + 1);\n    }\n    return result / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "tmpdjgo7uaz: /tmp/tmpdjgo7uaz.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan_number[num+1];\n    catalan_number[0] = catalan_number[1] = 1;\n    for(int i=2; i<=num; i++) {\n        catalan_number[i] = 0;\n        for(int j=0; j<i; j++) {\n            catalan_number[i] += catalan_number[j] * catalan_number[i-j-1];\n        }\n    }\n    return catalan_number[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for(long i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i=2;i<=num;i++) {\n        catalan[i] = 0;\n        for(long j=0;j<i;j++) {\n            catalan[i] += catalan[j]*catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long *catalan = new long[num+1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(int i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(int j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 0; i < num; i++) {\n        res *= (num + i);\n        res /= (i + 1);\n    }\n    return res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "tmp29oudc30: /tmp/tmp29oudc30.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long res = 0;\n    for(int i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 2; i <= num; i++) {\n        res *= (num + i);\n        res /= i;\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "tmpty0mfx5n: /tmp/tmpty0mfx5n.cpp:15: int main(): Assertion `candidate((9)) == (4862)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) return 1;\n    long result = 0;\n    for (long i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long result = 1;\n    for (long i = 1; i <= num; i++) {\n        result *= (num + i);\n        result /= i;\n    }\n    return result / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 2; i <= num; i++) {\n        res *= (num + i);\n        res /= i;\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "tmpty0mfx5n: /tmp/tmpty0mfx5n.cpp:15: int main(): Assertion `candidate((9)) == (4862)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0 || num == 1) {\n        return 1;\n    }\n    long ans = 0;\n    for(int i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 0; i < num; i++) {\n        res *= (num + i);\n        res /= (i + 1);\n    }\n    return res/(num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "tmpjds8lzq_: /tmp/tmpjds8lzq_.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) return 1;\n    long res = 0;\n    for(int i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num + 1];\n    catalan[0] = catalan[1] = 1;\n    for (int i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for (int j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for(long i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for(int i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0 || num == 1) {\n        return 1;\n    }\n    long result = 0;\n    for (int i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 0; i < num; i++) {\n        res = res * (num + i);\n        res = res / (i + 1);\n    }\n    return res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "tmphb6gg7tx: /tmp/tmphb6gg7tx.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n\tlong catalan[num+1];\n\tcatalan[0] = 1;\n\tcatalan[1] = 1;\n\tfor(long i = 2; i <= num; i++) {\n\t\tcatalan[i] = 0;\n\t\tfor(long j = 0; j < i; j++) {\n\t\t\tcatalan[i] += catalan[j] * catalan[i-j-1];\n\t\t}\n\t}\n\treturn catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for(long i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num <= 1) {\n        return 1;\n    }\n    long res = 0;\n    for (int i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for(int i = 0; i < num; i++) {\n        res *= (num + i);\n        res /= (i + 1);\n    }\n    return res/(num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "tmpgr7gy73l: /tmp/tmpgr7gy73l.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0 || num == 1) {\n        return 1;\n    }\n    long catalan_num = 0;\n    for(int i = 0; i < num; i++) {\n        catalan_num += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return catalan_num;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for (long i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0 || num == 1) {\n        return 1;\n    }\n    long result = 0;\n    for(long i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(int j=0; j<i; j++) {\n            catalan[i] += catalan[j]*catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long result = 1;\n    for (long i = 1; i <= num; i++) {\n        result *= (num + i);\n        result /= i;\n    }\n    return result / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 0; i < num; i++) {\n        res *= (num + i);\n        res /= (i + 1);\n    }\n    return res/(num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "tmpjds8lzq_: /tmp/tmpjds8lzq_.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num <= 1) {\n        return 1;\n    }\n    long res = 0;\n    for (int i = 0; i < num; ++i) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(long j=0; j<i; j++) {\n            catalan[i] += catalan[j]*catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) {\n        return 1;\n    }\n    long sum = 0;\n    for (long i = 0; i < num; i++) {\n        sum += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(int j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan_number = 1;\n    for (long i = 0; i < num; i++) {\n        catalan_number *= (num + i);\n        catalan_number /= (i + 1);\n    }\n    return catalan_number/(num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "tmpu94zzk2n: /tmp/tmpu94zzk2n.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n  long catalan_number = 0;\n  if (num == 0 || num == 1) {\n    return 1;\n  }\n  for (int i = 0; i < num; i++) {\n    catalan_number += catalan_number(i) * catalan_number(num - i - 1);\n  }\n  return catalan_number;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "/tmp/tmpj2f0crxv.cpp: In function \u2018long int catalan_number(long int)\u2019:\n/tmp/tmpj2f0crxv.cpp:10:39: error: \u2018catalan_number\u2019 cannot be used as a function\n   10 |     catalan_number += catalan_number(i) * catalan_number(num - i - 1);\n      |                                       ^\n/tmp/tmpj2f0crxv.cpp:10:69: error: \u2018catalan_number\u2019 cannot be used as a function\n   10 |     catalan_number += catalan_number(i) * catalan_number(num - i - 1);\n      |                                                                     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num <= 1) {\n        return 1;\n    }\n    long res = 0;\n    for (int i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 0; i < num; i++) {\n        res = res * (num + i);\n        res = res / (i + 1);\n    }\n    return res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "tmphb6gg7tx: /tmp/tmphb6gg7tx.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(int j=0; j<i; j++) {\n            catalan[i] += catalan[j]*catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(int j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n\tlong res = 1;\n\tfor (long i = 2; i <= num; i++) {\n\t\tres *= (num + i);\n\t\tres /= i;\n\t}\n\treturn res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "tmptsaneubh: /tmp/tmptsaneubh.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(long j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long *catalan = new long[num+1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(int i=2;i<=num;i++) {\n        catalan[i] = 0;\n        for(int j=0;j<i;j++) {\n            catalan[i] += catalan[j]*catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(long j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for(long i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for(int i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 0; i < num; i++) {\n        res *= (num + i);\n        res /= (i + 1);\n    }\n    return res/(num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "tmpjds8lzq_: /tmp/tmpjds8lzq_.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long* catalan = new long[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    long result = catalan[num];\n    delete[] catalan;\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for(int i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 0; i < num; i++) {\n        res *= (num + i);\n        res /= (i + 1);\n    }\n    return res/(num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "tmpjds8lzq_: /tmp/tmpjds8lzq_.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0)\n        return 1;\n    long ans = 0;\n    for(long i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0)\n        return 1;\n    long res = 0;\n    for(int i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for(int i = 0; i < num; i++) {\n        res = res * (num + i);\n        res = res / (i + 1);\n    }\n    return res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "tmp0nc6n6x8: /tmp/tmp0nc6n6x8.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for (int i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan_number[num+1];\n    catalan_number[0] = 1;\n    catalan_number[1] = 1;\n    for(int i=2;i<=num;i++) {\n        catalan_number[i] = 0;\n        for(int j=0;j<i;j++) {\n            catalan_number[i] += catalan_number[j]*catalan_number[i-j-1];\n        }\n    }\n    return catalan_number[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for(long i = 0; i < num; i++) {\n        res *= (num + i);\n        res /= (i + 1);\n    }\n    return res/(num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "tmpg9i1amky: /tmp/tmpg9i1amky.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 2; i <= num; i++) {\n        res = res * (num + i) / i;\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "tmpf4bqyip3: /tmp/tmpf4bqyip3.cpp:14: int main(): Assertion `candidate((9)) == (4862)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for (long i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 0; i < num; i++) {\n        res = res * (num + i);\n        res = res / (i + 1);\n    }\n    return res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "tmphb6gg7tx: /tmp/tmphb6gg7tx.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num <= 1) {\n        return 1;\n    }\n    long res = 0;\n    for (int i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num <= 1) {\n        return 1;\n    }\n    long res = 0;\n    for (int i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for (int i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(int j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long *catalan = new long[num + 1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    long result = catalan[num];\n    delete [] catalan;\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for (long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for (long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(int j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0 || num == 1)\n        return 1;\n    long ans = 0;\n    for(int i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for (int i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for (int j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num <= 1) {\n        return 1;\n    }\n    long res = 0;\n    for (int i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) {\n        return 1;\n    }\n    long sum = 0;\n    for (int i = 0; i < num; i++) {\n        sum += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(int j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 2; i <= num; i++) {\n        res = res * (num + i) / i;\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "tmpf4bqyip3: /tmp/tmpf4bqyip3.cpp:14: int main(): Assertion `candidate((9)) == (4862)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num <= 1) {\n        return 1;\n    }\n    long res = 0;\n    for(int i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n\tlong res = 1;\n\tfor (int i = 0; i < num; i++) {\n\t\tres *= (num + i);\n\t\tres /= (i + 1);\n\t}\n\treturn res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "tmps0iwcv0x: /tmp/tmps0iwcv0x.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long sum = 0;\n    for(int i = 0; i < num; i++) {\n        sum += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 0; i < num; i++) {\n        res = res * (num + i);\n        res = res / (i + 1);\n    }\n    return res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "tmphb6gg7tx: /tmp/tmphb6gg7tx.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for(long i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long *catalan = new long[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(long j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(int j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long *catalan = new long[num+1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for(int i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for (int i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long sum = 0;\n    for(long i = 0; i < num; i++) {\n        sum += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for(int i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(int i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(int j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for(long i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0 || num == 1) {\n        return 1;\n    }\n    long res = 0;\n    for(long i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for(long i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 0; i < num; i++) {\n        res = res * (num + i);\n        res = res / (i + 1);\n    }\n    return res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "tmphb6gg7tx: /tmp/tmphb6gg7tx.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(int j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long *cat = new long[num+1];\n    cat[0] = 1;\n    cat[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        cat[i] = 0;\n        for(long j = 0; j < i; j++) {\n            cat[i] += cat[j] * cat[i-j-1];\n        }\n    }\n    return cat[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long sum = 0;\n    for(int i = 0; i < num; i++) {\n        sum += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n\tlong catalan[num+1];\n\tcatalan[0] = 1;\n\tcatalan[1] = 1;\n\tfor(int i = 2; i <= num; i++) {\n\t\tcatalan[i] = 0;\n\t\tfor(int j = 0; j < i; j++) {\n\t\t\tcatalan[i] += catalan[j] * catalan[i-j-1];\n\t\t}\n\t}\n\treturn catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 2; i <= num; i++) {\n        res *= (num + i);\n        res /= i;\n    }\n    return res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "tmpmevla4c1: /tmp/tmpmevla4c1.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0 || num == 1) {\n        return 1;\n    }\n    long res = 0;\n    for(long i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num <= 1) {\n        return 1;\n    }\n    long res = 0;\n    for (int i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (long i = 2; i <= num; i++) {\n        res *= (num + i);\n        res /= i;\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "tmp_pqv7kvg: /tmp/tmp_pqv7kvg.cpp:15: int main(): Assertion `candidate((9)) == (4862)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(int j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num <= 1)\n        return 1;\n    long res = 0;\n    for(int i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) {\n        return 1;\n    }\n    long sum = 0;\n    for (long i = 0; i < num; i++) {\n        sum += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) {\n        return 1;\n    }\n    long catalan = 0;\n    for (long i = 0; i < num; i++) {\n        catalan += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return catalan;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long catalan_number = 0;\n    for(int i = 0; i < num; i++) {\n        catalan_number += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return catalan_number;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "/tmp/tmplq3beity.cpp: In function \u2018long int catalan_number(long int)\u2019:\n/tmp/tmplq3beity.cpp:10:43: error: \u2018catalan_number\u2019 cannot be used as a function\n   10 |         catalan_number += catalan_number(i) * catalan_number(num - i - 1);\n      |                                           ^\n/tmp/tmplq3beity.cpp:10:73: error: \u2018catalan_number\u2019 cannot be used as a function\n   10 |         catalan_number += catalan_number(i) * catalan_number(num - i - 1);\n      |                                                                         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 0; i < num; i++) {\n        res = res * (num + i);\n        res = res / (i + 1);\n    }\n    return res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "tmphb6gg7tx: /tmp/tmphb6gg7tx.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for (long i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long result = 0;\n    if(num == 0 || num == 1) {\n        return 1;\n    }\n    for(int i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for (int i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(long j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(long j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n\tlong *catalan = new long[num+1];\n\tcatalan[0] = catalan[1] = 1;\n\tfor(long i=2; i<=num; i++) {\n\t\tcatalan[i] = 0;\n\t\tfor(long j=0; j<i; j++) {\n\t\t\tcatalan[i] += catalan[j] * catalan[i-j-1];\n\t\t}\n\t}\n\treturn catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long sum = 0;\n    for(int i = 0; i < num; i++) {\n        sum += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num <= 1) {\n        return 1;\n    }\n    long catalan_num = 0;\n    for (long i = 0; i < num; i++) {\n        catalan_num += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return catalan_num;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for(long i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(int j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for(long i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num <= 1)\n        return 1;\n    long res = 0;\n    for(int i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num <= 1) {\n        return 1;\n    }\n    long res = 0;\n    for (long i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long *catalan = new long[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    long result = catalan[num];\n    delete[] catalan;\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for(int i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(long j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (long i = 2; i <= num; i++) {\n        res *= (num + i);\n        res /= i;\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "tmp_pqv7kvg: /tmp/tmp_pqv7kvg.cpp:15: int main(): Assertion `candidate((9)) == (4862)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for (int i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (long i = 0; i < num; i++) {\n        res *= (num + i);\n        res /= (i + 1);\n    }\n    return res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "tmpf35uti58: /tmp/tmpf35uti58.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(int i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(int j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(int j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0)\n        return 1;\n    long catalan_num = 0;\n    for(int i = 0; i < num; i++) {\n        catalan_num += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return catalan_num;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (long i = 0; i < num; i++) {\n        res = res * (num + i);\n        res = res / (i + 1);\n    }\n    return res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122674,
      "stdout": "",
      "stderr": "tmp031mela4: /tmp/tmp031mela4.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(int j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for (int i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for(long i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num <= 1) {\n        return 1;\n    }\n    long res = 0;\n    for(long i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 0; i < num; i++) {\n        res = res * (num + i);\n        res = res / (i + 1);\n    }\n    return res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "tmphb6gg7tx: /tmp/tmphb6gg7tx.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for(long i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0 || num == 1) {\n        return 1;\n    }\n    long res = 0;\n    for (long i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) {\n        return 1;\n    }\n    long res = 0;\n    for (int i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n\tlong *catalan = new long[num+1];\n\tcatalan[0] = catalan[1] = 1;\n\tfor(int i=2; i<=num; i++) {\n\t\tcatalan[i] = 0;\n\t\tfor(int j=0; j<i; j++) {\n\t\t\tcatalan[i] += catalan[j] * catalan[i-j-1];\n\t\t}\n\t}\n\tlong result = catalan[num];\n\tdelete[] catalan;\n\treturn result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n\tlong res = 1;\n\tfor (int i = 0; i < num; i++) {\n\t\tres = res * (num + i);\n\t\tres = res / (i + 1);\n\t}\n\treturn res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122674,
      "stdout": "",
      "stderr": "tmpd9cc_qfm: /tmp/tmpd9cc_qfm.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(int j=0; j<i; j++) {\n            catalan[i] += catalan[j]*catalan[i-j-1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0)\n        return 1;\n    long res = 0;\n    for(long i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num == 0) {\n        return 1;\n    }\n    long sum = 0;\n    for (long i = 0; i < num; i++) {\n        sum += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for(long i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for (int i = 2; i <= num; i++) {\n        res *= (num + i);\n        res /= i;\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "tmpty0mfx5n: /tmp/tmpty0mfx5n.cpp:15: int main(): Assertion `candidate((9)) == (4862)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long *dp = new long[num+1];\n    dp[0] = dp[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        dp[i] = 0;\n        for(long j = 0; j < i; j++) {\n            dp[i] += dp[j] * dp[i-j-1];\n        }\n    }\n    long ans = dp[num];\n    delete [] dp;\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for(int i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if(num == 0) {\n        return 1;\n    }\n    long result = 0;\n    for(long i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long catalan[num + 1];\n    catalan[0] = catalan[1] = 1;\n    for (long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for (long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[num];\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    long res = 1;\n    for(long i = 0; i < num; i++) {\n        res = res * (num + i);\n        res = res / (i + 1);\n    }\n    return res / (num + 1);\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "tmpvt30fqoi: /tmp/tmpvt30fqoi.cpp:14: int main(): Assertion `candidate((10)) == (16796)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    if (num <= 1) {\n        return 1;\n    }\n    long res = 0;\n    for (int i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}