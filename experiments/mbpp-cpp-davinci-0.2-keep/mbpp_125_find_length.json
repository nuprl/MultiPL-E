{
  "name": "mbpp_125_find_length",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;",
    "  long count = 0;\n  for (int i = 0; i < string.length(); i++) {\n    if (string[i] == '1') {\n      count++;\n    }\n  }\n  return count;",
    "    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;",
    "    long length = string.length();\n    return length;",
    "    long length = string.length();\n    return length;",
    "    long length = string.length();\n    return length;",
    "    long length = string.length();\n    return length;",
    "    long length = string.length();\n    return length;",
    "\tlong length = string.length();\n\treturn length;",
    "    long length = 0;\n    long max_length = 0;\n    long count_zero = 0;\n    long count_one = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count_zero++;\n        } else {\n            count_one++;\n        }\n        if(count_zero == count_one) {\n            length = count_zero + count_one;\n            max_length = std::max(length, max_length);\n        }\n    }\n    return max_length;",
    "    long count = 0;\n    for(int index = 0; string[index] != '\\0'; ++index) {\n        if(string[index] == '1') {\n            ++count;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            count++;\n        }\n    }\n    return count;",
    "\tlong length = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '1') {\n\t\t\tlength++;\n\t\t}\n\t}\n\treturn length;",
    "    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;",
    "\tlong count = 0;\n\tfor(long i = 0; i < string.length(); i++) {\n\t\tif(string[i] == '1') {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
    "    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;",
    "    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;",
    "\tlong length = string.length();\n\treturn length;"
  ]
}