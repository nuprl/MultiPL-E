{
  "name": "mbpp_391_convert_list_dictionary",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert more than one list to nested dictionary.\nstd::vector<std::map<std::string,std::map<std::string,long>>> convert_list_dictionary(std::vector<std::string> l1, std::vector<std::string> l2, std::vector<long> l3) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = convert_list_dictionary;\n    assert(candidate((std::vector<std::string>({(std::string)\"S001\", (std::string)\"S002\", (std::string)\"S003\", (std::string)\"S004\"})), (std::vector<std::string>({(std::string)\"Adina Park\", (std::string)\"Leyton Marsh\", (std::string)\"Duncan Boyle\", (std::string)\"Saim Richards\"})), (std::vector<long>({(long)85, (long)98, (long)89, (long)92}))) == (std::vector<std::map<std::string,std::map<std::string,long>>>({(std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"S001\", std::map<std::string,long>({{\"Adina Park\", 85}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"S002\", std::map<std::string,long>({{\"Leyton Marsh\", 98}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"S003\", std::map<std::string,long>({{\"Duncan Boyle\", 89}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"S004\", std::map<std::string,long>({{\"Saim Richards\", 92}})}})})));\n    assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"def\", (std::string)\"ghi\", (std::string)\"jkl\"})), (std::vector<std::string>({(std::string)\"python\", (std::string)\"program\", (std::string)\"language\", (std::string)\"programs\"})), (std::vector<long>({(long)100, (long)200, (long)300, (long)400}))) == (std::vector<std::map<std::string,std::map<std::string,long>>>({(std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"abc\", std::map<std::string,long>({{\"python\", 100}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"def\", std::map<std::string,long>({{\"program\", 200}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"ghi\", std::map<std::string,long>({{\"language\", 300}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"jkl\", std::map<std::string,long>({{\"programs\", 400}})}})})));\n    assert(candidate((std::vector<std::string>({(std::string)\"A1\", (std::string)\"A2\", (std::string)\"A3\", (std::string)\"A4\"})), (std::vector<std::string>({(std::string)\"java\", (std::string)\"C\", (std::string)\"C++\", (std::string)\"DBMS\"})), (std::vector<long>({(long)10, (long)20, (long)30, (long)40}))) == (std::vector<std::map<std::string,std::map<std::string,long>>>({(std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"A1\", std::map<std::string,long>({{\"java\", 10}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"A2\", std::map<std::string,long>({{\"C\", 20}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"A3\", std::map<std::string,long>({{\"C++\", 30}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"A4\", std::map<std::string,long>({{\"DBMS\", 40}})}})})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> temp;\n    std::map<std::string,long> temp1;\n    for(int i=0;i<l1.size();i++) {\n        temp1[l2[i]] = l3[i];\n        temp[l1[i]] = temp1;\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> map;\n    std::map<std::string,long> map2;\n    for(int i = 0; i < l1.size(); i++) {\n        map2[l2[i]] = l3[i];\n        map[l1[i]] = map2;\n        result.push_back(map);\n    }\n    return result;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> temp;\n    std::map<std::string,long> temp2;\n    for(int i=0; i<l1.size(); i++) {\n        temp2[l2[i]] = l3[i];\n        temp[l1[i]] = temp2;\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> temp;\n    std::map<std::string,long> temp2;\n    for(int i=0;i<l1.size();i++) {\n        temp2[l2[i]] = l3[i];\n        temp[l1[i]] = temp2;\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> temp;\n    std::map<std::string,long> temp2;\n    for(int i=0;i<l1.size();i++) {\n        temp2[l2[i]] = l3[i];\n        temp[l1[i]] = temp2;\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> temp;\n    std::map<std::string,long> temp1;\n    for(int i=0;i<l1.size();i++) {\n        temp1[l2[i]] = l3[i];\n        temp[l1[i]] = temp1;\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> temp;\n    std::map<std::string,long> temp1;\n    for(int i=0;i<l1.size();i++) {\n        temp1[l2[i]] = l3[i];\n        temp[l1[i]] = temp1;\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> res;\n    std::map<std::string,std::map<std::string,long>> temp;\n    std::map<std::string,long> temp1;\n    for(int i=0;i<l1.size();i++) {\n        temp1[l2[i]] = l3[i];\n        temp[l1[i]] = temp1;\n        res.push_back(temp);\n    }\n    return res;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> dict;\n    std::map<std::string,long> inner_dict;\n    for(int i=0;i<l1.size();i++) {\n        inner_dict[l2[i]] = l3[i];\n        dict[l1[i]] = inner_dict;\n    }\n    result.push_back(dict);\n    return result;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> temp;\n    std::map<std::string,long> temp2;\n    for(int i=0;i<l1.size();i++){\n        temp2[l2[i]]=l3[i];\n        temp[l1[i]]=temp2;\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> temp;\n    std::map<std::string,long> temp2;\n    for(int i=0;i<l1.size();i++) {\n        temp2[l2[i]] = l3[i];\n        temp[l1[i]] = temp2;\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> temp;\n    std::map<std::string,long> temp2;\n    for(int i=0;i<l1.size();i++){\n        temp2[l2[i]] = l3[i];\n        temp[l1[i]] = temp2;\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> temp;\n    std::map<std::string,long> temp1;\n    for(int i=0;i<l1.size();i++) {\n        temp1[l2[i]] = l3[i];\n        temp[l1[i]] = temp1;\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> temp;\n    std::map<std::string,long> temp2;\n    for(int i=0;i<l1.size();i++){\n        temp2[l2[i]]=l3[i];\n        temp[l1[i]]=temp2;\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> m;\n    for(int i=0;i<l1.size();i++) {\n        std::map<std::string,long> m1;\n        m1[l2[i]] = l3[i];\n        m[l1[i]] = m1;\n    }\n    result.push_back(m);\n    return result;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> m;\n    std::map<std::string,long> m1;\n    for(int i=0;i<l1.size();i++) {\n        m1[l2[i]] = l3[i];\n        m[l1[i]] = m1;\n    }\n    result.push_back(m);\n    return result;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> res;\n    std::map<std::string,std::map<std::string,long>> temp;\n    std::map<std::string,long> temp2;\n    for(int i=0;i<l1.size();i++){\n        temp2[l2[i]] = l3[i];\n        temp[l1[i]] = temp2;\n        res.push_back(temp);\n    }\n    return res;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> temp;\n    std::map<std::string,long> temp1;\n    for(int i=0;i<l1.size();i++){\n        temp1[l2[i]]=l3[i];\n        temp[l1[i]]=temp1;\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> temp;\n    std::map<std::string,long> temp1;\n    for(int i=0;i<l1.size();i++) {\n        temp1[l2[i]] = l3[i];\n        temp[l1[i]] = temp1;\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::map<std::string,std::map<std::string,long>>> result;\n    std::map<std::string,std::map<std::string,long>> temp;\n    std::map<std::string,long> temp1;\n    for(int i=0;i<l1.size();i++){\n        temp1[l2[i]] = l3[i];\n        temp[l1[i]] = temp1;\n        result.push_back(temp);\n    }\n    return result;"
  ]
}