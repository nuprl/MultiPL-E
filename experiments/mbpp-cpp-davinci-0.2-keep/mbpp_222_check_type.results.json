{
  "name": "mbpp_222_check_type",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple1;\n    std::tuple<float, float, float> test_tuple2;\n    std::tuple<char, char, char> test_tuple3;\n    std::tuple<std::string, std::string, std::string> test_tuple4;\n    std::tuple<int, float, char> test_tuple5;\n    std::tuple<int, float, std::string> test_tuple6;\n    std::tuple<int, char, std::string> test_tuple7;\n    std::tuple<float, char, std::string> test_tuple8;\n    if (test_tuple == test_tuple1 || test_tuple == test_tuple2 || test_tuple == test_tuple3 || test_tuple == test_tuple4 || test_tuple == test_tuple5 || test_tuple == test_tuple6 || test_tuple == test_tuple7 || test_tuple == test_tuple8) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "/tmp/tmp2fh3ztrn.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp2fh3ztrn.cpp:13:20: error: no match for \u2018operator==\u2019 (operand types are \u2018std::any\u2019 and \u2018std::tuple<int, int, int>\u2019)\n   13 |     if (test_tuple == test_tuple1 || test_tuple == test_tuple2 || test_tuple == test_tuple3 || test_tuple == test_tuple4 || test_tuple == test_tuple5 || test_tuple == test_tuple6 || test_tuple == test_tuple7 || test_tuple == test_tuple8) {\n      |         ~~~~~~~~~~ ^~ ~~~~~~~~~~~\n      |         |             |\n      |         std::any      std::tuple<int, int, int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmp2fh3ztrn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note:   template argument deduction/substitution failed:\n/tmp/tmp2fh3ztrn.cpp:13:23: note:   \u2018std::any\u2019 is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   13 |     if (test_tuple == test_tuple1 || test_tuple == test_tuple2 || test_tuple == test_tuple3 || test_tuple == test_tuple4 || test_tuple == test_tuple5 || test_tuple == test_tuple6 || test_tuple == test_tuple7 || test_tuple == test_tuple8) {\n      |                       ^~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmp2fh3ztrn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note: candidate: \u2018template<c",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double, char> test_tuple_1 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    int a = std::any_cast<int>(test_tuple_1);\n    float b = std::any_cast<float>(test_tuple_1);\n    double c = std::any_cast<double>(test_tuple_1);\n    char d = std::any_cast<char>(test_tuple_1);\n    if(typeid(a) == typeid(b) && typeid(b) == typeid(c) && typeid(c) == typeid(d)) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510561,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510561,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int,int,int> test_tuple_1;\n    std::tuple<float,float,float> test_tuple_2;\n    std::tuple<std::string,std::string,std::string> test_tuple_3;\n    std::tuple<char,char,char> test_tuple_4;\n    std::tuple<bool,bool,bool> test_tuple_5;\n    if(test_tuple == test_tuple_1) {\n        return true;\n    }\n    else if(test_tuple == test_tuple_2) {\n        return true;\n    }\n    else if(test_tuple == test_tuple_3) {\n        return true;\n    }\n    else if(test_tuple == test_tuple_4) {\n        return true;\n    }\n    else if(test_tuple == test_tuple_5) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "/tmp/tmpp4g2nz85.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpp4g2nz85.cpp:10:19: error: no match for \u2018operator==\u2019 (operand types are \u2018std::any\u2019 and \u2018std::tuple<int, int, int>\u2019)\n   10 |     if(test_tuple == test_tuple_1) {\n      |        ~~~~~~~~~~ ^~ ~~~~~~~~~~~~\n      |        |             |\n      |        std::any      std::tuple<int, int, int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpp4g2nz85.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note:   template argument deduction/substitution failed:\n/tmp/tmpp4g2nz85.cpp:10:22: note:   \u2018std::any\u2019 is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   10 |     if(test_tuple == test_tuple_1) {\n      |                      ^~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpp4g2nz85.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note:   template argument deducti",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double, char> test_tuple(1, 2.2, 3.3, 'a');\n    std::any_cast<int>(test_tuple);\n    std::any_cast<float>(test_tuple);\n    std::any_cast<double>(test_tuple);\n    std::any_cast<char>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510561,
      "stdout": "",
      "stderr": "/tmp/tmpalkd_yne.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpalkd_yne.cpp:5:52: error: declaration of \u2018std::tuple<int, float, double, char> test_tuple\u2019 shadows a parameter\n    5 |     std::tuple<int, float, double, char> test_tuple(1, 2.2, 3.3, 'a');\n      |                                                    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for (auto i : test_tuple) {\n        if (i.type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmpko0ys1up.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpko0ys1up.cpp:6:19: error: no matching function for call to \u2018begin(std::any&)\u2019\n    6 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpko0ys1up.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpko0ys1up.cpp:6:19: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    6 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple17(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple18(\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510561,
      "stdout": "",
      "stderr": "/tmp/tmp5lczt5nd.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp5lczt5nd.cpp:23:1: error: expected primary-expression before \u2018}\u2019 token\n   23 | }\n      | ^\n/tmp/tmp5lczt5nd.cpp:23:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp5lczt5nd.cpp:23:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type = test_tuple.type().name();\n    std::string type_name = type.substr(6, type.size() - 1);\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n        if (std::any_cast<std::string>(test_tuple).compare(type_name)) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510561,
      "stdout": "",
      "stderr": "/tmp/tmpjhty1si2.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpjhty1si2.cpp:7:64: error: incomplete type \u2018std::tuple_size<std::any>\u2019 used in nested name specifier\n    7 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n      |                                                                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double, char> test_tuple1;\n    std::tuple<int, float, double, char> test_tuple2;\n    std::tuple<int, float, double, char> test_tuple3;\n    std::tuple<int, float, double, char> test_tuple4;\n    std::tuple<int, float, double, char> test_tuple5;\n    std::tuple<int, float, double, char> test_tuple6;\n    std::tuple<int, float, double, char> test_tuple7;\n    std::tuple<int, float, double, char> test_tuple8;\n    std::tuple<int, float, double, char> test_tuple9;\n    std::tuple<int, float, double, char> test_tuple10;\n    std::tuple<int, float, double, char> test_tuple11;\n    std::tuple<int, float, double, char> test_tuple12;\n    std::tuple<int, float, double, char> test_tuple13;\n    std::tuple<int, float, double, char> test_tuple14;\n    std::tuple<int, float, double, char> test_tuple15;\n    std::tuple<int, float, double, char> test_tuple16;\n    std::tuple<int, float, double, char> test_tuple17;\n    std::tuple<int, float, double, char> test_tuple18;\n    std::tuple<int, float, double, char> test_tuple19;\n    std::tuple<int, float, double, char> test_tuple20;\n    std::tuple<int, float, double, char> test_tuple21;\n    std::tuple<int, float, double, char> test_tuple22;\n    std::tuple<int, float, double, char> test_tuple23;\n    std::tuple<int, float, double, char> test_tuple24;\n    std::tuple<int\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510561,
      "stdout": "",
      "stderr": "/tmp/tmpj4vk5yzb.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpj4vk5yzb.cpp:29:16: error: template argument 1 is invalid\n   29 |     std::tuple<int\n      |                ^~~\n/tmp/tmpj4vk5yzb.cpp:30:1: error: expected unqualified-id before \u2018}\u2019 token\n   30 | }\n      | ^\n/tmp/tmpj4vk5yzb.cpp:30:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n        if (std::any_cast<std::tuple_element<i, decltype(test_tuple)>::type>(&test_tuple) == nullptr) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "/tmp/tmp6ff6i9q8.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp6ff6i9q8.cpp:6:64: error: incomplete type \u2018std::tuple_size<std::any>\u2019 used in nested name specifier\n    6 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n      |                                                                ^~~~~\n/tmp/tmp6ff6i9q8.cpp:7:69: error: the value of \u2018i\u2019 is not usable in a constant expression\n    7 |         if (std::any_cast<std::tuple_element<i, decltype(test_tuple)>::type>(&test_tuple) == nullptr) {\n      |                                                                     ^\n/tmp/tmp6ff6i9q8.cpp:6:14: note: \u2018int i\u2019 is not const\n    6 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n      |              ^\n/tmp/tmp6ff6i9q8.cpp:7:69: note: in template argument for type \u2018long unsigned int\u2019\n    7 |         if (std::any_cast<std::tuple_element<i, decltype(test_tuple)>::type>(&test_tuple) == nullptr) {\n      |                                                                     ^\n/tmp/tmp6ff6i9q8.cpp:7:89: error: no matching function for call to \u2018any_cast<<expression error> >(std::any*)\u2019\n    7 |         if (std::any_cast<std::tuple_element<i, decltype(test_tuple)>::type>(&test_tuple) == nullptr) {\n      |                                                                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:126,\n                 from /tmp/tmp6ff6i9q8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/any:452:23: note: candidate: \u2018template<class _ValueType> _ValueType std::any_cast(const std::any&)\u2019\n  452 |     inline _ValueType any_cast(const any& __any)\n      |                       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/any:452:23: note:   template argument deduction/substitution failed:\n/tmp/tmp6ff6i9q8.cpp:7:89: error: template argument 1 is invalid\n    7 |         if (std::any_cast<std::tuple_element<i, dec",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n        if (test_tuple.type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "/tmp/tmp460u9f2r.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp460u9f2r.cpp:6:64: error: incomplete type \u2018std::tuple_size<std::any>\u2019 used in nested name specifier\n    6 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n      |                                                                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double, char> test_tuple_1;\n    std::tuple<int, float, double, char> test_tuple_2;\n    std::tuple<int, float, double, char> test_tuple_3;\n    std::tuple<int, float, double, char> test_tuple_4;\n    std::tuple<int, float, double, char> test_tuple_5;\n    std::tuple<int, float, double, char> test_tuple_6;\n    std::tuple<int, float, double, char> test_tuple_7;\n    std::tuple<int, float, double, char> test_tuple_8;\n    std::tuple<int, float, double, char> test_tuple_9;\n    std::tuple<int, float, double, char> test_tuple_10;\n    std::tuple<int, float, double, char> test_tuple_11;\n    std::tuple<int, float, double, char> test_tuple_12;\n    std::tuple<int, float, double, char> test_tuple_13;\n    std::tuple<int, float, double, char> test_tuple_14;\n    std::tuple<int, float, double, char> test_tuple_15;\n    std::tuple<int, float, double, char> test_tuple_16;\n    std::tuple<int, float, double, char> test_tuple_17;\n    std::tuple<int, float, double, char> test_tuple_18;\n    std::tuple<int, float, double, char> test_tuple_19;\n    std::tuple<int, float, double, char> test_tuple_20;\n    std::tuple<int, float, double, char> test_tuple_21;\n    std::tuple<int, float, double, char> test_tuple_22;\n    std::tuple<int, float, double, char> test_tuple_23;\n    std::tuple\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "/tmp/tmproe54m88.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmproe54m88.cpp:29:1: error: expected unqualified-id before \u2018}\u2019 token\n   29 | }\n      | ^\n/tmp/tmproe54m88.cpp:29:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n\treturn (typeid(test_tuple) == typeid(std::tuple<int,int,int>));\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "tmp26duwgyi: /tmp/tmp26duwgyi.cpp:9: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple_1 = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    std::tuple<int, float, int> test_tuple_2 = std::any_cast<std::tuple<int, float, int>>(test_tuple);\n    std::tuple<int, float, float> test_tuple_3 = std::any_cast<std::tuple<int, float, float>>(test_tuple);\n    std::tuple<float, float, float> test_tuple_4 = std::any_cast<std::tuple<float, float, float>>(test_tuple);\n    std::tuple<float, float, int> test_tuple_5 = std::any_cast<std::tuple<float, float, int>>(test_tuple);\n    std::tuple<float, int, int> test_tuple_6 = std::any_cast<std::tuple<float, int, int>>(test_tuple);\n    std::tuple<float, int, float> test_tuple_7 = std::any_cast<std::tuple<float, int, float>>(test_tuple);\n    std::tuple<int, int, float> test_tuple_8 = std::any_cast<std::tuple<int, int, float>>(test_tuple);\n    if(test_tuple_1 || test_tuple_2 || test_tuple_3 || test_tuple_4 || test_tuple_5 || test_tuple_6 || test_tuple_7 || test_tuple_8) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "/tmp/tmppmio8bof.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmppmio8bof.cpp:13:21: error: no match for \u2018operator||\u2019 (operand types are \u2018std::tuple<int, int, int>\u2019 and \u2018std::tuple<int, float, int>\u2019)\n   13 |     if(test_tuple_1 || test_tuple_2 || test_tuple_3 || test_tuple_4 || test_tuple_5 || test_tuple_6 || test_tuple_7 || test_tuple_8) {\n      |        ~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~\n      |        |               |\n      |        |               tuple<int, float, int>\n      |        tuple<int, int, int>\n/tmp/tmppmio8bof.cpp:13:21: note: candidate: \u2018operator||(bool, bool)\u2019 <built-in>\n   13 |     if(test_tuple_1 || test_tuple_2 || test_tuple_3 || test_tuple_4 || test_tuple_5 || test_tuple_6 || test_tuple_7 || test_tuple_8) {\n      |        ~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n/tmp/tmppmio8bof.cpp:13:21: note:   no known conversion for argument 2 from \u2018std::tuple<int, float, int>\u2019 to \u2018bool\u2019\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n                 from /tmp/tmppmio8bof.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:416:5: note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__logical_or, std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__logical_or, typename _Dom1::value_type>::result_type> std::operator||(const std::_Expr<_Dom1, typename _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\n  416 |     _DEFINE_EXPR_BINARY_OPERATOR(||, __logical_or)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:416:5: note:   template argument deduction/substitution failed:\n/tmp/tmppmio8bof.cpp:13:24: note:   \u2018std::tuple<int, int, int>\u2019 is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\n   13 |     if(test_tuple_1 || test_tuple_2 || test_t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    if (typeid(test_tuple_1) == typeid(test_tuple_2) && typeid(test_tuple_2) == typeid(test_tuple_3)) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double, char> test_tuple_1(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_2(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_3(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_4(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_5(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_6(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_7(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_8(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_9(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_10(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_11(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_12(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_13(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_14(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_15(\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpevd1j6ri.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpevd1j6ri.cpp:20:1: error: expected primary-expression before \u2018}\u2019 token\n   20 | }\n      | ^\n/tmp/tmpevd1j6ri.cpp:20:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpevd1j6ri.cpp:20:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n        if (test_tuple.type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "/tmp/tmp460u9f2r.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp460u9f2r.cpp:6:64: error: incomplete type \u2018std::tuple_size<std::any>\u2019 used in nested name specifier\n    6 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n      |                                                                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::vector<std::type_index> type_list;\n    std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    for(auto i : test_tuple) {\n        type_list.push_back(i.type());\n    }\n    return std::all_of(type_list.begin(), type_list.end(), [&](auto i){return i == type_list[0];});\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "/tmp/tmp4e6200lq.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp4e6200lq.cpp:7:18: error: no matching function for call to \u2018begin(std::any&)\u2019\n    7 |     for(auto i : test_tuple) {\n      |                  ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmp4e6200lq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmp4e6200lq.cpp:7:18: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    7 |     for(auto i : test_tuple) {\n      |                  ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string test_type = test_tuple.type().name();\n    for (auto &i : test_tuple) {\n        if (i.type().name() != test_type) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "/tmp/tmpjhkfhipj.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpjhkfhipj.cpp:6:20: error: no matching function for call to \u2018begin(std::any&)\u2019\n    6 |     for (auto &i : test_tuple) {\n      |                    ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpjhkfhipj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpjhkfhipj.cpp:6:20: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    6 |     for (auto &i : test_tuple) {\n      |                    ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    return std::any_cast<int>(test_tuple) == std::any_cast<int>(test_tuple);\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for(auto i : test_tuple) {\n        if(i.type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp9p9ah909.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp9p9ah909.cpp:6:18: error: no matching function for call to \u2018begin(std::any&)\u2019\n    6 |     for(auto i : test_tuple) {\n      |                  ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmp9p9ah909.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmp9p9ah909.cpp:6:18: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    6 |     for(auto i : test_tuple) {\n      |                  ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple_1 = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    std::tuple<float, float, float> test_tuple_2 = std::any_cast<std::tuple<float, float, float>>(test_tuple);\n    std::tuple<double, double, double> test_tuple_3 = std::any_cast<std::tuple<double, double, double>>(test_tuple);\n    std::tuple<char, char, char> test_tuple_4 = std::any_cast<std::tuple<char, char, char>>(test_tuple);\n    std::tuple<std::string, std::string, std::string> test_tuple_5 = std::any_cast<std::tuple<std::string, std::string, std::string>>(test_tuple);\n    if(test_tuple_1.size() == 3) {\n        return true;\n    }\n    else if(test_tuple_2.size() == 3) {\n        return true;\n    }\n    else if(test_tuple_3.size() == 3) {\n        return true;\n    }\n    else if(test_tuple_4.size() == 3) {\n        return true;\n    }\n    else if(test_tuple_5.size() == 3) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpqdyy9522.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpqdyy9522.cpp:10:21: error: \u2018class std::tuple<int, int, int>\u2019 has no member named \u2018size\u2019\n   10 |     if(test_tuple_1.size() == 3) {\n      |                     ^~~~\n/tmp/tmpqdyy9522.cpp:13:26: error: \u2018class std::tuple<float, float, float>\u2019 has no member named \u2018size\u2019\n   13 |     else if(test_tuple_2.size() == 3) {\n      |                          ^~~~\n/tmp/tmpqdyy9522.cpp:16:26: error: \u2018class std::tuple<double, double, double>\u2019 has no member named \u2018size\u2019\n   16 |     else if(test_tuple_3.size() == 3) {\n      |                          ^~~~\n/tmp/tmpqdyy9522.cpp:19:26: error: \u2018class std::tuple<char, char, char>\u2019 has no member named \u2018size\u2019\n   19 |     else if(test_tuple_4.size() == 3) {\n      |                          ^~~~\n/tmp/tmpqdyy9522.cpp:22:26: error: \u2018class std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >\u2019 has no member named \u2018size\u2019\n   22 |     else if(test_tuple_5.size() == 3) {\n      |                          ^~~~\n/tmp/tmpqdyy9522.cpp:28:1: warning: control reaches end of non-void function [-Wreturn-type]\n   28 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    return std::any_cast<int>(test_tuple).type() == typeid(int);\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpvovz4s1e.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpvovz4s1e.cpp:5:43: error: request for member \u2018type\u2019 in \u2018std::any_cast<int>(test_tuple)\u2019, which is of non-class type \u2018int\u2019\n    5 |     return std::any_cast<int>(test_tuple).type() == typeid(int);\n      |                                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    // Write your code here\n    return std::any_cast<int>(test_tuple) == std::any_cast<int>(test_tuple);\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    std::string type_name_2 = typeid(test_tuple).name();\n    std::cout << type_name << \" \" << type_name_2 << std::endl;\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "St5tupleIJiiiiiiEE St3any\nSt5tupleIJiiPKcEE St3any\n",
      "stderr": "tmpff95wtuw: /tmp/tmpff95wtuw.cpp:13: int main(): Assertion `candidate(std::make_tuple(1, 2, \"4\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1;\n    std::tuple<int, float, double> test_tuple_2;\n    std::tuple<int, float, double> test_tuple_3;\n    std::tuple<int, float, double> test_tuple_4;\n    std::tuple<int, float, double> test_tuple_5;\n    std::tuple<int, float, double> test_tuple_6;\n    std::tuple<int, float, double> test_tuple_7;\n    std::tuple<int, float, double> test_tuple_8;\n    std::tuple<int, float, double> test_tuple_9;\n    std::tuple<int, float, double> test_tuple_10;\n    std::tuple<int, float, double> test_tuple_11;\n    std::tuple<int, float, double> test_tuple_12;\n    std::tuple<int, float, double> test_tuple_13;\n    std::tuple<int, float, double> test_tuple_14;\n    std::tuple<int, float, double> test_tuple_15;\n    std::tuple<int, float, double> test_tuple_16;\n    std::tuple<int, float, double> test_tuple_17;\n    std::tuple<int, float, double> test_tuple_18;\n    std::tuple<int, float, double> test_tuple_19;\n    std::tuple<int, float, double> test_tuple_20;\n    std::tuple<int, float, double> test_tuple_21;\n    std::tuple<int, float, double> test_tuple_22;\n    std::tuple<int, float, double> test_tuple_23;\n    std::tuple<int, float, double> test_tuple_24;\n    std::tuple<int, float, double> test_tuple_25;\n    std::tuple<int, float, double\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpo_1p3c_v.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpo_1p3c_v.cpp:30:28: error: template argument 3 is invalid\n   30 |     std::tuple<int, float, double\n      |                            ^~~~~~\n/tmp/tmpo_1p3c_v.cpp:31:1: error: expected unqualified-id before \u2018}\u2019 token\n   31 | }\n      | ^\n/tmp/tmpo_1p3c_v.cpp:31:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    return std::any_cast<std::tuple<int, int, int>>(test_tuple);\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "/tmp/tmprus2wuva.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmprus2wuva.cpp:5:52: error: cannot convert \u2018std::tuple<int, int, int>\u2019 to \u2018bool\u2019 in return\n    5 |     return std::any_cast<std::tuple<int, int, int>>(test_tuple);\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n      |                                                    |\n      |                                                    std::tuple<int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double, char> test_tuple_1 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    std::tuple<int, float, double, char> test_tuple_2 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    std::tuple<int, float, double, char> test_tuple_3 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    std::tuple<int, float, double, char> test_tuple_4 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    return std::is_same<decltype(test_tuple_1), decltype(test_tuple_2)>::value &&\n           std::is_same<decltype(test_tuple_2), decltype(test_tuple_3)>::value &&\n           std::is_same<decltype(test_tuple_3), decltype(test_tuple_4)>::value;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type = test_tuple.type().name();\n    if (type == \"i\") {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "tmp295psdop: /tmp/tmp295psdop.cpp:13: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    try {\n        std::any_cast<float>(test_tuple);\n    }\n    catch (const std::bad_any_cast& e) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple17(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple18(\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510561,
      "stdout": "",
      "stderr": "/tmp/tmp5lczt5nd.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp5lczt5nd.cpp:23:1: error: expected primary-expression before \u2018}\u2019 token\n   23 | }\n      | ^\n/tmp/tmp5lczt5nd.cpp:23:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp5lczt5nd.cpp:23:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, std::string> test_tuple_1(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_2(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_3(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_4(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_5(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_6(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_7(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_8(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_9(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_10(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_11(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_12(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_13(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_14(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_15(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_16(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpn94ri_fq.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpn94ri_fq.cpp:22:1: error: expected initializer before \u2018}\u2019 token\n   22 | }\n      | ^\n/tmp/tmpn94ri_fq.cpp:22:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<std::any, std::any, std::any> test_tuple_1 = std::any_cast<std::tuple<std::any, std::any, std::any>>(test_tuple);\n    if (std::any_cast<std::string>(std::get<0>(test_tuple_1)).length() == std::any_cast<std::string>(std::get<1>(test_tuple_1)).length() && std::any_cast<std::string>(std::get<1>(test_tuple_1)).length() == std::any_cast<std::string>(std::get<2>(test_tuple_1)).length()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    if (typeid(test_tuple1) == typeid(test_tuple2) && typeid(test_tuple2) == typeid(test_tuple3)) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    std::cout << type_name << std::endl;\n    return type_name == \"i\";\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "St5tupleIJiiiiiiEE\n",
      "stderr": "tmp7m4joo2c: /tmp/tmp7m4joo2c.cpp:11: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple1;\n    std::tuple<int, float, double> test_tuple2;\n    std::tuple<int, float, double> test_tuple3;\n    std::tuple<int, float, double> test_tuple4;\n    std::tuple<int, float, double> test_tuple5;\n    std::tuple<int, float, double> test_tuple6;\n    std::tuple<int, float, double> test_tuple7;\n    std::tuple<int, float, double> test_tuple8;\n    std::tuple<int, float, double> test_tuple9;\n    std::tuple<int, float, double> test_tuple10;\n    std::tuple<int, float, double> test_tuple11;\n    std::tuple<int, float, double> test_tuple12;\n    std::tuple<int, float, double> test_tuple13;\n    std::tuple<int, float, double> test_tuple14;\n    std::tuple<int, float, double> test_tuple15;\n    std::tuple<int, float, double> test_tuple16;\n    std::tuple<int, float, double> test_tuple17;\n    std::tuple<int, float, double> test_tuple18;\n    std::tuple<int, float, double> test_tuple19;\n    std::tuple<int, float, double> test_tuple20;\n    std::tuple<int, float, double> test_tuple21;\n    std::tuple<int, float, double> test_tuple22;\n    std::tuple<int, float, double> test_tuple23;\n    std::tuple<int, float, double> test_tuple24;\n    std::tuple<int, float, double> test_tuple25;\n    std::tuple<int, float, double> test_tuple26;\n    std::tuple<int, float, double> test_tuple27\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmpmfnoyic8.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpmfnoyic8.cpp:32:1: error: expected initializer before \u2018}\u2019 token\n   32 | }\n      | ^\n/tmp/tmpmfnoyic8.cpp:32:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type = test_tuple.type().name();\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n        if (test_tuple.type().name() != type) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "/tmp/tmp6_rt_crc.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp6_rt_crc.cpp:6:64: error: incomplete type \u2018std::tuple_size<std::any>\u2019 used in nested name specifier\n    6 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n      |                                                                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n        if (test_tuple.type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "/tmp/tmp460u9f2r.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp460u9f2r.cpp:6:64: error: incomplete type \u2018std::tuple_size<std::any>\u2019 used in nested name specifier\n    6 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n      |                                                                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::vector<std::any> tuple_vector;\n    std::any_cast<std::vector<std::any>>(test_tuple);\n    std::any first_element = tuple_vector[0];\n    for (auto element : tuple_vector) {\n        if (element.type() != first_element.type()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    try {\n        std::any_cast<float>(test_tuple);\n    }\n    catch(const std::bad_any_cast& e) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double, char> test_tuple_1(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_2(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_3(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_4(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_5(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_6(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_7(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_8(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_9(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_10(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_11(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_12(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_13(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_14(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_15(\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpnpvis4o0.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpnpvis4o0.cpp:20:1: error: expected primary-expression before \u2018}\u2019 token\n   20 | }\n      | ^\n/tmp/tmpnpvis4o0.cpp:20:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpnpvis4o0.cpp:20:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple_1;\n    std::tuple<float, float, float> test_tuple_2;\n    std::tuple<std::string, std::string, std::string> test_tuple_3;\n    std::tuple<int, float, std::string> test_tuple_4;\n    std::tuple<float, std::string, int> test_tuple_5;\n    std::tuple<std::string, int, float> test_tuple_6;\n    if(test_tuple == test_tuple_1 || test_tuple == test_tuple_2 || test_tuple == test_tuple_3 || test_tuple == test_tuple_4 || test_tuple == test_tuple_5 || test_tuple == test_tuple_6) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123448,
      "stdout": "",
      "stderr": "/tmp/tmpdva9u_p6.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpdva9u_p6.cpp:11:19: error: no match for \u2018operator==\u2019 (operand types are \u2018std::any\u2019 and \u2018std::tuple<int, int, int>\u2019)\n   11 |     if(test_tuple == test_tuple_1 || test_tuple == test_tuple_2 || test_tuple == test_tuple_3 || test_tuple == test_tuple_4 || test_tuple == test_tuple_5 || test_tuple == test_tuple_6) {\n      |        ~~~~~~~~~~ ^~ ~~~~~~~~~~~~\n      |        |             |\n      |        std::any      std::tuple<int, int, int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpdva9u_p6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note:   template argument deduction/substitution failed:\n/tmp/tmpdva9u_p6.cpp:11:22: note:   \u2018std::any\u2019 is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   11 |     if(test_tuple == test_tuple_1 || test_tuple == test_tuple_2 || test_tuple == test_tuple_3 || test_tuple == test_tuple_4 || test_tuple == test_tuple_5 || test_tuple == test_tuple_6) {\n      |                      ^~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpdva9u_p6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator==(std::__cxx11::__sub_match_st",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::vector<std::any> test_vector;\n    test_vector.push_back(test_tuple);\n    std::any_cast<std::tuple<int, int, int>>(test_vector[0]);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1;\n    std::tuple<int, float, double> test_tuple_2;\n    std::tuple<int, float, double> test_tuple_3;\n    std::tuple<int, float, double> test_tuple_4;\n    std::tuple<int, float, double> test_tuple_5;\n    std::tuple<int, float, double> test_tuple_6;\n    std::tuple<int, float, double> test_tuple_7;\n    std::tuple<int, float, double> test_tuple_8;\n    std::tuple<int, float, double> test_tuple_9;\n    std::tuple<int, float, double> test_tuple_10;\n    std::tuple<int, float, double> test_tuple_11;\n    std::tuple<int, float, double> test_tuple_12;\n    std::tuple<int, float, double> test_tuple_13;\n    std::tuple<int, float, double> test_tuple_14;\n    std::tuple<int, float, double> test_tuple_15;\n    std::tuple<int, float, double> test_tuple_16;\n    std::tuple<int, float, double> test_tuple_17;\n    std::tuple<int, float, double> test_tuple_18;\n    std::tuple<int, float, double> test_tuple_19;\n    std::tuple<int, float, double> test_tuple_20;\n    std::tuple<int, float, double> test_tuple_21;\n    std::tuple<int, float, double> test_tuple_22;\n    std::tuple<int, float, double> test_tuple_23;\n    std::tuple<int, float, double> test_tuple_24;\n    std::tuple<int, float, double> test_tuple_25;\n    std::tuple<int, float, double\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpo_1p3c_v.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpo_1p3c_v.cpp:30:28: error: template argument 3 is invalid\n   30 |     std::tuple<int, float, double\n      |                            ^~~~~~\n/tmp/tmpo_1p3c_v.cpp:31:1: error: expected unqualified-id before \u2018}\u2019 token\n   31 | }\n      | ^\n/tmp/tmpo_1p3c_v.cpp:31:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    return (typeid(test_tuple1) == typeid(test_tuple2) && typeid(test_tuple2) == typeid(test_tuple3));\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    try {\n        std::any_cast<float>(test_tuple);\n        return false;\n    }\n    catch(const std::bad_any_cast& e) {\n        return true;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, std::string> test_tuple;\n    std::any_of(test_tuple.begin(), test_tuple.end(), [](auto &elem) {\n        return typeid(elem) == typeid(test_tuple[0]);\n    });\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "/tmp/tmpk0sc5_4u.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpk0sc5_4u.cpp:5:41: error: declaration of \u2018std::tuple<int, float, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > test_tuple\u2019 shadows a parameter\n    5 |     std::tuple<int, float, std::string> test_tuple;\n      |                                         ^~~~~~~~~~\n/tmp/tmpk0sc5_4u.cpp:6:28: error: \u2018class std::tuple<int, float, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >\u2019 has no member named \u2018begin\u2019\n    6 |     std::any_of(test_tuple.begin(), test_tuple.end(), [](auto &elem) {\n      |                            ^~~~~\n/tmp/tmpk0sc5_4u.cpp:6:48: error: \u2018class std::tuple<int, float, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >\u2019 has no member named \u2018end\u2019\n    6 |     std::any_of(test_tuple.begin(), test_tuple.end(), [](auto &elem) {\n      |                                                ^~~\n/tmp/tmpk0sc5_4u.cpp: In lambda function:\n/tmp/tmpk0sc5_4u.cpp:7:39: error: \u2018test_tuple\u2019 is not captured\n    7 |         return typeid(elem) == typeid(test_tuple[0]);\n      |                                       ^~~~~~~~~~\n/tmp/tmpk0sc5_4u.cpp:6:56: note: the lambda has no capture-default\n    6 |     std::any_of(test_tuple.begin(), test_tuple.end(), [](auto &elem) {\n      |                                                        ^\n/tmp/tmpk0sc5_4u.cpp:5:41: note: \u2018std::tuple<int, float, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > test_tuple\u2019 declared here\n    5 |     std::tuple<int, float, std::string> test_tuple;\n      |                                         ^~~~~~~~~~\n/tmp/tmpk0sc5_4u.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpk0sc5_4u.cpp:9:1: warning: no return statement in function returning non-void [-Wreturn-type]\n    9 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> t1(10, 15.5, 1e5);\n    std::tuple<char, std::string, std::string> t2('a', \"abc\", \"xyz\");\n    std::tuple<std::string, std::string, int> t3(\"abc\", \"xyz\", 10);\n    std::tuple<std::string, std::string, std::string> t4(\"abc\", \"xyz\", \"pqr\");\n    std::tuple<int, int, int> t5(10, 20, 30);\n    std::tuple<int, int, int> t6(10, 20, 30);\n    std::tuple<int, int, int> t7(10, 20, 30);\n    std::tuple<int, int, int> t8(10, 20, 30);\n    std::tuple<int, int, int> t9(10, 20, 30);\n    std::tuple<int, int, int> t10(10, 20, 30);\n    std::tuple<int, int, int> t11(10, 20, 30);\n    std::tuple<int, int, int> t12(10, 20, 30);\n    std::tuple<int, int, int> t13(10, 20, 30);\n    std::tuple<int, int, int> t14(10, 20, 30);\n    std::tuple<int, int, int> t15(10, 20, 30);\n    std::tuple<int, int, int> t16(10, 20, 30);\n    std::tuple<int, int, int> t17(10, 20, 30);\n    std::tuple<int, int, int> t18(10, 20, 30);\n    std::tuple<int, int, int> t19(10, 20, 30);\n    std::tuple<int, int, int> t20(10, 20, 30);\n    std::tuple<int, int, int> t21(10, 20, 30);\n    std::tuple<int, int, int> t22(10, 20, 30);\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "tmpdr_atb8x: /tmp/tmpdr_atb8x.cpp:30: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for (auto i : test_tuple) {\n        if (i.type().name() != type_name)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123436,
      "stdout": "",
      "stderr": "/tmp/tmp_kt7vl0c.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp_kt7vl0c.cpp:6:19: error: no matching function for call to \u2018begin(std::any&)\u2019\n    6 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmp_kt7vl0c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmp_kt7vl0c.cpp:6:19: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    6 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, std::string> t1(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t2(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t3(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t4(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t5(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t6(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t7(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t8(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t9(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t10(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t11(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t12(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t13(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t14(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t15(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t16(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t17(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t18(10\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmps_me_o95.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmps_me_o95.cpp:22:47: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   22 |     std::tuple<int, float, std::string> t18(10\n      |                                            ~  ^\n      |                                               )\n   23 | }\n      | ~                                              \n/tmp/tmps_me_o95.cpp:23:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   23 | }\n      | ^\n/tmp/tmps_me_o95.cpp:23:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    return (std::type_index(typeid(test_tuple1)) == std::type_index(typeid(test_tuple2)) && std::type_index(typeid(test_tuple2)) == std::type_index(typeid(test_tuple3)));\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::vector<std::any> test_vector;\n    std::any_cast<std::vector<std::any>>(test_tuple).swap(test_vector);\n    std::type_index type = typeid(test_vector[0]);\n    for(auto i = test_vector.begin(); i != test_vector.end(); i++) {\n        if(type != typeid(*i)) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_string = test_tuple.type().name();\n    for (auto i : test_tuple) {\n        if (i.type().name() != type_string) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "/tmp/tmpu36ov0vr.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpu36ov0vr.cpp:6:19: error: no matching function for call to \u2018begin(std::any&)\u2019\n    6 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpu36ov0vr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpu36ov0vr.cpp:6:19: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    6 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::vector<std::type_index> type_list;\n    std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    for (auto& elem : test_tuple) {\n        type_list.push_back(elem.type());\n    }\n    return (std::adjacent_find(type_list.begin(), type_list.end(), std::not_equal_to<>()) == type_list.end());\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "/tmp/tmpnopxnq6b.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpnopxnq6b.cpp:7:23: error: no matching function for call to \u2018begin(std::any&)\u2019\n    7 |     for (auto& elem : test_tuple) {\n      |                       ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpnopxnq6b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpnopxnq6b.cpp:7:23: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    7 |     for (auto& elem : test_tuple) {\n      |                       ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type = test_tuple.type().name();\n    std::cout << type << std::endl;\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "St5tupleIJiiiiiiEE\nSt5tupleIJiiPKcEE\n",
      "stderr": "tmp1ld6yk48: /tmp/tmp1ld6yk48.cpp:12: int main(): Assertion `candidate(std::make_tuple(1, 2, \"4\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.5, 3.5);\n    std::tuple<int, float, double> test_tuple_2(1, 2.5, 3.5);\n    std::tuple<int, float, double> test_tuple_3(1, 2.5, 3.5);\n    std::tuple<int, float, double> test_tuple_4(1, 2.5, 3.5);\n    std::tuple<int, float, double> test_tuple_5(1, 2.5, 3.5);\n    std::tuple<int, float, double> test_tuple_6(1, 2.5, 3.5);\n    std::tuple<int, float, double> test_tuple_7(1, 2.5, 3.5);\n    std::tuple<int, float, double> test_tuple_8(1, 2.5, 3.5);\n    std::tuple<int, float, double> test_tuple_9(1, 2.5, 3.5);\n    std::tuple<int, float, double> test_tuple_10(1, 2.5, 3.5);\n    std::tuple<int, float, double> test_tuple_11(1, 2.5, 3.5);\n    std::tuple<int, float, double> test_tuple_12(1, 2.5, 3.5);\n    std::tuple<int, float, double> test_tuple_13(1, 2.5, 3.5);\n    std::tuple<int, float, double> test_tuple_14(1, 2.5, 3.5);\n    std::tuple<int, float, double> test_tuple_15(1, 2.5, 3.5);\n    std::tuple<int, float, double> test_tuple_16(1, 2.5, 3.5);\n    std::tuple<int, float, double> test_tuple_17(1, 2.5, 3.5);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "tmprytnxqqu: /tmp/tmprytnxqqu.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple1(1, 2, 3);\n    std::tuple<double, double, double> test_tuple2(1.0, 2.0, 3.0);\n    std::tuple<std::string, std::string, std::string> test_tuple3(\"1\", \"2\", \"3\");\n    std::tuple<int, double, std::string> test_tuple4(1, 2.0, \"3\");\n    std::tuple<int, int, int> test_tuple5(1, 2, 3);\n    std::tuple<int, int, int> test_tuple6(1, 2, 3);\n    std::tuple<int, int, int> test_tuple7(1, 2, 3);\n    std::tuple<int, int, int> test_tuple8(1, 2, 3);\n    std::tuple<int, int, int> test_tuple9(1, 2, 3);\n    std::tuple<int, int, int> test_tuple10(1, 2, 3);\n    std::tuple<int, int, int> test_tuple11(1, 2, 3);\n    std::tuple<int, int, int> test_tuple12(1, 2, 3);\n    std::tuple<int, int, int> test_tuple13(1, 2, 3);\n    std::tuple<int, int, int> test_tuple14(1, 2, 3);\n    std::tuple<int, int, int> test_tuple15(1, 2, 3);\n    std::tuple<int, int, int> test_tuple16(1, 2, 3);\n    std::tuple<int, int, int> test_tuple17(1, 2, 3);\n    std::tuple<int, int, int> test_tuple18(1, 2, 3);\n    std::tuple<int, int, int> test_tuple19(1, 2, 3);\n    std::tuple<int, int, int> test_tuple20\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "/tmp/tmpmlcj67sq.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpmlcj67sq.cpp:25:1: error: expected initializer before \u2018}\u2019 token\n   25 | }\n      | ^\n/tmp/tmpmlcj67sq.cpp:25:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    int i;\n    std::any_cast<int>(test_tuple);\n    try {\n        for (i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n            std::any_cast<int>(test_tuple);\n        }\n    }\n    catch (const std::bad_any_cast& e) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "/tmp/tmp2mngew2v.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp2mngew2v.cpp:8:64: error: incomplete type \u2018std::tuple_size<std::any>\u2019 used in nested name specifier\n    8 |         for (i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n      |                                                                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple_1 = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    std::tuple<int, float, int> test_tuple_2 = std::any_cast<std::tuple<int, float, int>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, char> test_tuple_4 = std::any_cast<std::tuple<int, float, char>>(test_tuple);\n    std::tuple<int, float, std::string> test_tuple_5 = std::any_cast<std::tuple<int, float, std::string>>(test_tuple);\n    std::tuple<int, float, bool> test_tuple_6 = std::any_cast<std::tuple<int, float, bool>>(test_tuple);\n    std::tuple<int, float, std::tuple<int, int, int>> test_tuple_7 = std::any_cast<std::tuple<int, float, std::tuple<int, int, int>>>(test_tuple);\n    std::tuple<int, float, std::tuple<int, float, int>> test_tuple_8 = std::any_cast<std::tuple<int, float, std::tuple<int, float, int>>>(test_tuple);\n    std::tuple<int, float, std::tuple<int, float, double>> test_tuple_9 = std::any_cast<std::tuple<int, float, std::tuple<int, float, double>>>(test_tuple);\n    std::tuple<int, float, std::tuple<int, float, char>> test_tuple_10 = std::any_cast<std::tuple<int, float, std::tuple<int, float, char>>>(test_tuple);\n    std::tuple\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "/tmp/tmp0c1lbhy4.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp0c1lbhy4.cpp:16:1: error: expected unqualified-id before \u2018}\u2019 token\n   16 | }\n      | ^\n/tmp/tmp0c1lbhy4.cpp:16:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<std::tuple<int,int,int>>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n        if (std::any_cast<std::tuple_element<i, decltype(test_tuple)>::type>(&test_tuple) == nullptr) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "/tmp/tmp6ff6i9q8.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp6ff6i9q8.cpp:6:64: error: incomplete type \u2018std::tuple_size<std::any>\u2019 used in nested name specifier\n    6 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n      |                                                                ^~~~~\n/tmp/tmp6ff6i9q8.cpp:7:69: error: the value of \u2018i\u2019 is not usable in a constant expression\n    7 |         if (std::any_cast<std::tuple_element<i, decltype(test_tuple)>::type>(&test_tuple) == nullptr) {\n      |                                                                     ^\n/tmp/tmp6ff6i9q8.cpp:6:14: note: \u2018int i\u2019 is not const\n    6 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n      |              ^\n/tmp/tmp6ff6i9q8.cpp:7:69: note: in template argument for type \u2018long unsigned int\u2019\n    7 |         if (std::any_cast<std::tuple_element<i, decltype(test_tuple)>::type>(&test_tuple) == nullptr) {\n      |                                                                     ^\n/tmp/tmp6ff6i9q8.cpp:7:89: error: no matching function for call to \u2018any_cast<<expression error> >(std::any*)\u2019\n    7 |         if (std::any_cast<std::tuple_element<i, decltype(test_tuple)>::type>(&test_tuple) == nullptr) {\n      |                                                                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:126,\n                 from /tmp/tmp6ff6i9q8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/any:452:23: note: candidate: \u2018template<class _ValueType> _ValueType std::any_cast(const std::any&)\u2019\n  452 |     inline _ValueType any_cast(const any& __any)\n      |                       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/any:452:23: note:   template argument deduction/substitution failed:\n/tmp/tmp6ff6i9q8.cpp:7:89: error: template argument 1 is invalid\n    7 |         if (std::any_cast<std::tuple_element<i, dec",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> t1(10, 15.5, 1e5);\n    std::tuple<char, int, float, double> t2('G', 10, 15.5, 1e5);\n    std::tuple<std::string, std::string, std::string> t3(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, int> t4(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, int> t5(\"Geeks\", \"for\", 10);\n    std::tuple<std::string, std::string, int> t6(\"Geeks\", \"for\", 10);\n    std::tuple<std::string, std::string, int> t7(\"Geeks\", \"for\", 10);\n    std::tuple<std::string, std::string, int> t8(\"Geeks\", \"for\", 10);\n    std::tuple<std::string, std::string, int> t9(\"Geeks\", \"for\", 10);\n    std::tuple<std::string, std::string, int> t10(\"Geeks\", \"for\", 10);\n    std::tuple<std::string, std::string, int> t11(\"Geeks\", \"for\", 10);\n    std::tuple<std::string, std::string, int> t12(\"Geeks\", \"for\", 10);\n    std::tuple<std::string, std::string, int> t13(\"Geeks\", \"for\", 10);\n    std::tuple<std::string, std::string, int> t14(\"Geeks\", \"for\", 10);\n    std::tuple<std::string, std::string, int> t15(\"Geeks\", \"for\", 10);\n    std::tuple<std::string, std::string, int> t16(\"Geeks\", \"for\", 10);\n    std::tuple<std::string, std::string, int> t17(\"Geeks\", \"for\", 10);\n    std::tuple<std::string, std::string, int> t18(\"Geeks\", \"for\", 10);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "/tmp/tmpdz656acl.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpdz656acl.cpp:8:73: error: no matching function for call to \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>::tuple(const char [6], const char [4], const char [6])\u2019\n    8 |     std::tuple<std::string, std::string, int> t4(\"Geeks\", \"for\", \"Geeks\");\n      |                                                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpdz656acl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note: candidate: \u2018template<class _Alloc, class _Dummy, class ... _UElements, typename std::enable_if<((std::_TC<((3 == sizeof... (_UElements)) && (! std::is_same<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::tuple<_Tail ...> >::value)), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>::_MoveConstructibleTuple<_UElements ...>() && (! std::_TC<((3 == sizeof... (_UElements)) && (! std::is_same<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::tuple<_Tail ...> >::value)), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    return test_tuple.type() == typeid(int);\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "tmpd_rs5v61: /tmp/tmpd_rs5v61.cpp:9: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1;\n    std::tuple<int, float, char> test_tuple_2;\n    std::tuple<int, float, std::string> test_tuple_3;\n    std::tuple<int, float, std::vector<int>> test_tuple_4;\n    std::tuple<int, float, std::list<int>> test_tuple_5;\n    std::tuple<int, float, std::map<int, int>> test_tuple_6;\n    std::tuple<int, float, std::unordered_map<int, int>> test_tuple_7;\n    std::tuple<int, float, std::set<int>> test_tuple_8;\n    std::tuple<int, float, std::unordered_set<int>> test_tuple_9;\n    std::tuple<int, float, std::stack<int>> test_tuple_10;\n    std::tuple<int, float, std::queue<int>> test_tuple_11;\n    std::tuple<int, float, std::priority_queue<int>> test_tuple_12;\n    std::tuple<int, float, std::deque<int>> test_tuple_13;\n    std::tuple<int, float, std::forward_list<int>> test_tuple_14;\n    std::tuple<int, float, std::array<int, 5>> test_tuple_15;\n    std::tuple<int, float, std::vector<std::vector<int>>> test_tuple_16;\n    std::tuple<int, float, std::list<std::list<int>>> test_tuple_17;\n    std::tuple<int, float, std::map<int, std::map<int, int>>> test_tuple_18;\n    std::tuple<int, float, std::unordered_map<int, std::unordered_map<int, int>>> test_tuple_19;\n    std::tuple<int, float, std::set<std::set<\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "/tmp/tmppp_j61bn.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmppp_j61bn.cpp:24:45: error: template argument 1 is invalid\n   24 |     std::tuple<int, float, std::set<std::set<\n      |                                             ^\n/tmp/tmppp_j61bn.cpp:24:45: error: template argument 2 is invalid\n/tmp/tmppp_j61bn.cpp:24:45: error: template argument 3 is invalid\n/tmp/tmppp_j61bn.cpp:24:42: error: template argument 1 is invalid\n   24 |     std::tuple<int, float, std::set<std::set<\n      |                                          ^~~~\n/tmp/tmppp_j61bn.cpp:24:42: error: template argument 2 is invalid\n/tmp/tmppp_j61bn.cpp:24:42: error: template argument 3 is invalid\n/tmp/tmppp_j61bn.cpp:24:33: error: template argument 3 is invalid\n   24 |     std::tuple<int, float, std::set<std::set<\n      |                                 ^~~~~~~~~~~~~\n/tmp/tmppp_j61bn.cpp:25:1: error: expected unqualified-id before \u2018}\u2019 token\n   25 | }\n      | ^\n/tmp/tmppp_j61bn.cpp:25:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_2(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_3(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_4(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_5(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_6(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_7(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_8(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_9(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_10(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_11(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_12(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_13(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_14(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_15(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_16(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_17(1, 2.3, 4.5);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "tmpxigl3nz0: /tmp/tmpxigl3nz0.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n        if (test_tuple[i].type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "/tmp/tmpanbvv4uq.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpanbvv4uq.cpp:6:64: error: incomplete type \u2018std::tuple_size<std::any>\u2019 used in nested name specifier\n    6 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n      |                                                                ^~~~~\n/tmp/tmpanbvv4uq.cpp:7:23: error: no match for \u2018operator[]\u2019 (operand types are \u2018std::any\u2019 and \u2018int\u2019)\n    7 |         if (test_tuple[i].type().name() != type_name) {\n      |                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double, char> test_tuple;\n    std::any_of(test_tuple.begin(), test_tuple.end(), [](auto i) {\n        return typeid(i) == typeid(test_tuple[0]);\n    });\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "/tmp/tmph9lct9y1.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmph9lct9y1.cpp:5:42: error: declaration of \u2018std::tuple<int, float, double, char> test_tuple\u2019 shadows a parameter\n    5 |     std::tuple<int, float, double, char> test_tuple;\n      |                                          ^~~~~~~~~~\n/tmp/tmph9lct9y1.cpp:6:28: error: \u2018class std::tuple<int, float, double, char>\u2019 has no member named \u2018begin\u2019\n    6 |     std::any_of(test_tuple.begin(), test_tuple.end(), [](auto i) {\n      |                            ^~~~~\n/tmp/tmph9lct9y1.cpp:6:48: error: \u2018class std::tuple<int, float, double, char>\u2019 has no member named \u2018end\u2019\n    6 |     std::any_of(test_tuple.begin(), test_tuple.end(), [](auto i) {\n      |                                                ^~~\n/tmp/tmph9lct9y1.cpp: In lambda function:\n/tmp/tmph9lct9y1.cpp:7:36: error: \u2018test_tuple\u2019 is not captured\n    7 |         return typeid(i) == typeid(test_tuple[0]);\n      |                                    ^~~~~~~~~~\n/tmp/tmph9lct9y1.cpp:6:56: note: the lambda has no capture-default\n    6 |     std::any_of(test_tuple.begin(), test_tuple.end(), [](auto i) {\n      |                                                        ^\n/tmp/tmph9lct9y1.cpp:5:42: note: \u2018std::tuple<int, float, double, char> test_tuple\u2019 declared here\n    5 |     std::tuple<int, float, double, char> test_tuple;\n      |                                          ^~~~~~~~~~\n/tmp/tmph9lct9y1.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmph9lct9y1.cpp:9:1: warning: no return statement in function returning non-void [-Wreturn-type]\n    9 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    try {\n        std::any_cast<std::string>(test_tuple);\n    }\n    catch(const std::bad_any_cast& e) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    std::string type_name_1 = test_tuple.type().name();\n    if(type_name == type_name_1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "tmpv5nw0gug: /tmp/tmpv5nw0gug.cpp:15: int main(): Assertion `candidate(std::make_tuple(1, 2, \"4\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    return std::any_cast<std::string>(test_tuple).length() > 0;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple_int = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    std::tuple<float, float, float> test_tuple_float = std::any_cast<std::tuple<float, float, float>>(test_tuple);\n    std::tuple<double, double, double> test_tuple_double = std::any_cast<std::tuple<double, double, double>>(test_tuple);\n    std::tuple<char, char, char> test_tuple_char = std::any_cast<std::tuple<char, char, char>>(test_tuple);\n    std::tuple<std::string, std::string, std::string> test_tuple_string = std::any_cast<std::tuple<std::string, std::string, std::string>>(test_tuple);\n    if(test_tuple.type() == typeid(test_tuple_int)) {\n        return true;\n    }\n    else if(test_tuple.type() == typeid(test_tuple_float)) {\n        return true;\n    }\n    else if(test_tuple.type() == typeid(test_tuple_double)) {\n        return true;\n    }\n    else if(test_tuple.type() == typeid(test_tuple_char)) {\n        return true;\n    }\n    else if(test_tuple.type() == typeid(test_tuple_string)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, std::string> test_tuple = std::make_tuple(1, 2.0, \"hello\");\n    std::any_cast<int>(test_tuple);\n    std::any_cast<float>(test_tuple);\n    std::any_cast<std::string>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "/tmp/tmpauiv3zq1.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpauiv3zq1.cpp:5:41: error: declaration of \u2018std::tuple<int, float, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > test_tuple\u2019 shadows a parameter\n    5 |     std::tuple<int, float, std::string> test_tuple = std::make_tuple(1, 2.0, \"hello\");\n      |                                         ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::vector<std::any> test_vector;\n    for(auto i:test_tuple) {\n        test_vector.push_back(i);\n    }\n    for(int i=0;i<test_vector.size()-1;i++) {\n        if(test_vector[i].type() != test_vector[i+1].type()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "/tmp/tmpsn23rne3.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpsn23rne3.cpp:6:16: error: no matching function for call to \u2018begin(std::any&)\u2019\n    6 |     for(auto i:test_tuple) {\n      |                ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpsn23rne3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpsn23rne3.cpp:6:16: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    6 |     for(auto i:test_tuple) {\n      |                ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type = test_tuple.type().name();\n    std::cout << type << std::endl;\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "St5tupleIJiiiiiiEE\nSt5tupleIJiiPKcEE\n",
      "stderr": "tmp1ld6yk48: /tmp/tmp1ld6yk48.cpp:12: int main(): Assertion `candidate(std::make_tuple(1, 2, \"4\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::vector<std::type_index> types;\n    std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::apply([&types](auto&&... args) { ((types.push_back(typeid(args))), ...); }, test_tuple);\n    return std::adjacent_find(types.begin(), types.end(), std::not_equal_to<>()) == types.end();\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp3k1ku039.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple: In instantiation of \u2018constexpr const size_t std::tuple_size_v<std::any>\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1693:24:   required from \u2018constexpr decltype(auto) std::apply(_Fn&&, _Tuple&&) [with _Fn = check_type(std::any)::<lambda(auto:22&& ...)>; _Tuple = std::any&]\u2019\n/tmp/tmp3k1ku039.cpp:7:96:   required from here\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1277:29: error: incomplete type \u2018std::tuple_size<std::any>\u2019 used in nested name specifier\n 1277 |     inline constexpr size_t tuple_size_v = tuple_size<_Tp>::value;\n      |                             ^~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for (auto i : test_tuple) {\n        if (i.type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmpko0ys1up.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpko0ys1up.cpp:6:19: error: no matching function for call to \u2018begin(std::any&)\u2019\n    6 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpko0ys1up.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpko0ys1up.cpp:6:19: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    6 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple17(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple18(\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510561,
      "stdout": "",
      "stderr": "/tmp/tmp5lczt5nd.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp5lczt5nd.cpp:23:1: error: expected primary-expression before \u2018}\u2019 token\n   23 | }\n      | ^\n/tmp/tmp5lczt5nd.cpp:23:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp5lczt5nd.cpp:23:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double, char> test_tuple_1 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    std::tuple<int, float, double, char> test_tuple_2 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    std::tuple<int, float, double, char> test_tuple_3 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    std::tuple<int, float, double, char> test_tuple_4 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    if (typeid(std::get<0>(test_tuple_1)) == typeid(std::get<1>(test_tuple_2)) && typeid(std::get<0>(test_tuple_1)) == typeid(std::get<2>(test_tuple_3)) && typeid(std::get<0>(test_tuple_1)) == typeid(std::get<3>(test_tuple_4))) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type = test_tuple.type().name();\n    for (auto &i : test_tuple) {\n        if (i.type().name() != type) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123438,
      "stdout": "",
      "stderr": "/tmp/tmpgqc3lm1t.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpgqc3lm1t.cpp:6:20: error: no matching function for call to \u2018begin(std::any&)\u2019\n    6 |     for (auto &i : test_tuple) {\n      |                    ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpgqc3lm1t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpgqc3lm1t.cpp:6:20: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    6 |     for (auto &i : test_tuple) {\n      |                    ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "tmpme0zx6mw: /tmp/tmpme0zx6mw.cpp:10: int main(): Assertion `candidate(std::make_tuple(1, 2, \"4\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    return std::any_cast<int>(test_tuple);\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_2(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_3(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_4(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_5(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_6(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_7(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_8(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_9(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_10(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_11(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_12(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_13(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_14(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_15(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_16(1, 2.3, 4.5);\n    std::tuple<int, float, double> test_tuple_17(1, 2.3, 4.5);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123437,
      "stdout": "",
      "stderr": "tmpxigl3nz0: /tmp/tmpxigl3nz0.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, std::string> test_tuple_1 = std::any_cast<std::tuple<int, float, std::string>>(test_tuple);\n    std::tuple<int, float, std::string> test_tuple_2 = std::any_cast<std::tuple<int, float, std::string>>(test_tuple);\n    std::tuple<int, float, std::string> test_tuple_3 = std::any_cast<std::tuple<int, float, std::string>>(test_tuple);\n    if(typeid(std::get<0>(test_tuple_1)) == typeid(std::get<1>(test_tuple_2)) && typeid(std::get<1>(test_tuple_2)) == typeid(std::get<2>(test_tuple_3)))\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple;\n    if(std::any_cast<int>(test_tuple) == std::any_cast<float>(test_tuple) == std::any_cast<double>(test_tuple)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "/tmp/tmpjvk4ngr5.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpjvk4ngr5.cpp:5:36: error: declaration of \u2018std::tuple<int, float, double> test_tuple\u2019 shadows a parameter\n    5 |     std::tuple<int, float, double> test_tuple;\n      |                                    ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple2(1, 2.0, 3.0f);\n    std::tuple<int, float, double> test_tuple3(1, 2.0f, 3.0f);\n    std::tuple<int, float, double> test_tuple4(1, 2.0f, 3.0);\n    std::tuple<int, float, double> test_tuple5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple6(1, 2.0f, 3.0);\n    std::tuple<int, float, double> test_tuple7(1, 2.0, 3.0f);\n    std::tuple<int, float, double> test_tuple8(1, 2.0f, 3.0f);\n    std::tuple<int, float, double> test_tuple9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple10(1, 2.0f, 3.0);\n    std::tuple<int, float, double> test_tuple11(1, 2.0, 3.0f);\n    std::tuple<int, float, double> test_tuple12(1, 2.0f, 3.0f);\n    std::tuple<int, float, double> test_tuple13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple14(1, 2.0f, 3.0);\n    std::tuple<int, float, double> test_tuple15(1, 2.0, 3.0f);\n    std::tuple<int, float, double> test_tuple16(1, 2.0f, 3.0f);\n    std::tuple<int, float, double> test_tuple17(1, 2.0, 3.0);\n    std\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "/tmp/tmpf_wk0cgi.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpf_wk0cgi.cpp:23:1: error: expected primary-expression before \u2018}\u2019 token\n   23 | }\n      | ^\n/tmp/tmpf_wk0cgi.cpp:23:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple1 = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    int first_type = std::any_cast<int>(test_tuple1.get<0>());\n    int second_type = std::any_cast<int>(test_tuple1.get<1>());\n    int third_type = std::any_cast<int>(test_tuple1.get<2>());\n    if (typeid(first_type) == typeid(second_type) && typeid(second_type) == typeid(third_type)) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "/tmp/tmpp6xt2ra0.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpp6xt2ra0.cpp:6:53: error: \u2018class std::tuple<int, int, int>\u2019 has no member named \u2018get\u2019\n    6 |     int first_type = std::any_cast<int>(test_tuple1.get<0>());\n      |                                                     ^~~\n/tmp/tmpp6xt2ra0.cpp:6:60: error: expected primary-expression before \u2018)\u2019 token\n    6 |     int first_type = std::any_cast<int>(test_tuple1.get<0>());\n      |                                                            ^\n/tmp/tmpp6xt2ra0.cpp:7:54: error: \u2018class std::tuple<int, int, int>\u2019 has no member named \u2018get\u2019\n    7 |     int second_type = std::any_cast<int>(test_tuple1.get<1>());\n      |                                                      ^~~\n/tmp/tmpp6xt2ra0.cpp:7:61: error: expected primary-expression before \u2018)\u2019 token\n    7 |     int second_type = std::any_cast<int>(test_tuple1.get<1>());\n      |                                                             ^\n/tmp/tmpp6xt2ra0.cpp:8:53: error: \u2018class std::tuple<int, int, int>\u2019 has no member named \u2018get\u2019\n    8 |     int third_type = std::any_cast<int>(test_tuple1.get<2>());\n      |                                                     ^~~\n/tmp/tmpp6xt2ra0.cpp:8:60: error: expected primary-expression before \u2018)\u2019 token\n    8 |     int third_type = std::any_cast<int>(test_tuple1.get<2>());\n      |                                                            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, std::string> t1 = std::any_cast<std::tuple<int, float, std::string>>(test_tuple);\n    std::tuple<int, int, int> t2 = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    std::tuple<float, float, float> t3 = std::any_cast<std::tuple<float, float, float>>(test_tuple);\n    std::tuple<std::string, std::string, std::string> t4 = std::any_cast<std::tuple<std::string, std::string, std::string>>(test_tuple);\n    return (std::is_same<decltype(t1), decltype(t2)>::value || std::is_same<decltype(t1), decltype(t3)>::value || std::is_same<decltype(t1), decltype(t4)>::value);\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::vector<std::any> test_vector;\n    std::any_cast<std::vector<std::any>>(test_tuple);\n    for (auto i : test_vector) {\n        if (i.type() != test_vector[0].type()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n  std::any_cast<int>(test_tuple);\n  return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int,int,int> test_tuple1 = std::any_cast<std::tuple<int,int,int>>(test_tuple);\n    std::tuple<int,float,int> test_tuple2 = std::any_cast<std::tuple<int,float,int>>(test_tuple);\n    std::tuple<int,float,float> test_tuple3 = std::any_cast<std::tuple<int,float,float>>(test_tuple);\n    std::tuple<float,float,float> test_tuple4 = std::any_cast<std::tuple<float,float,float>>(test_tuple);\n    std::tuple<float,float,int> test_tuple5 = std::any_cast<std::tuple<float,float,int>>(test_tuple);\n    std::tuple<float,int,int> test_tuple6 = std::any_cast<std::tuple<float,int,int>>(test_tuple);\n    std::tuple<float,int,float> test_tuple7 = std::any_cast<std::tuple<float,int,float>>(test_tuple);\n    std::tuple<int,int,float> test_tuple8 = std::any_cast<std::tuple<int,int,float>>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    try {\n        std::any_cast<float>(test_tuple);\n    }\n    catch(std::bad_any_cast& e) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for (auto i : test_tuple) {\n        if (i.type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmpko0ys1up.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpko0ys1up.cpp:6:19: error: no matching function for call to \u2018begin(std::any&)\u2019\n    6 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpko0ys1up.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpko0ys1up.cpp:6:19: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    6 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    return std::any_cast<int>(test_tuple) == std::any_cast<int>(test_tuple);\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::vector<std::any> test_vector;\n    std::any_cast<std::vector<std::any>>(test_tuple).swap(test_vector);\n    for(int i=0;i<test_vector.size();i++) {\n        if(test_vector[i].type() != test_vector[0].type()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for (auto &i : test_tuple) {\n        if (i.type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmpzuafra_f.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpzuafra_f.cpp:6:20: error: no matching function for call to \u2018begin(std::any&)\u2019\n    6 |     for (auto &i : test_tuple) {\n      |                    ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpzuafra_f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpzuafra_f.cpp:6:20: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    6 |     for (auto &i : test_tuple) {\n      |                    ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double, char> test_tuple_1 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    std::tuple<int, float, double, char> test_tuple_2 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    std::tuple<int, float, double, char> test_tuple_3 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    std::tuple<int, float, double, char> test_tuple_4 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    if (std::type_index(typeid(test_tuple_1)) == std::type_index(typeid(test_tuple_2)) &&\n        std::type_index(typeid(test_tuple_2)) == std::type_index(typeid(test_tuple_3)) &&\n        std::type_index(typeid(test_tuple_3)) == std::type_index(typeid(test_tuple_4))) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, std::string> test_tuple;\n    std::any_cast<int>(test_tuple);\n    std::any_cast<float>(test_tuple);\n    std::any_cast<std::string>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpz54zs30q.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpz54zs30q.cpp:5:41: error: declaration of \u2018std::tuple<int, float, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > test_tuple\u2019 shadows a parameter\n    5 |     std::tuple<int, float, std::string> test_tuple;\n      |                                         ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510561,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    return std::any_cast<int>(test_tuple) == std::any_cast<int>(test_tuple);\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    return (typeid(test_tuple) == typeid(std::tuple<int, int, int>));\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "tmpfxwjc3ew: /tmp/tmpfxwjc3ew.cpp:9: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int,int,int> test_tuple_1;\n    std::tuple<float,float,float> test_tuple_2;\n    std::tuple<int,float,int> test_tuple_3;\n    std::tuple<int,int,float> test_tuple_4;\n    std::tuple<float,int,int> test_tuple_5;\n    std::tuple<float,float,int> test_tuple_6;\n    std::tuple<int,float,float> test_tuple_7;\n    std::tuple<float,int,float> test_tuple_8;\n    if(test_tuple == test_tuple_1 || test_tuple == test_tuple_2 || test_tuple == test_tuple_3 || test_tuple == test_tuple_4 || test_tuple == test_tuple_5 || test_tuple == test_tuple_6 || test_tuple == test_tuple_7 || test_tuple == test_tuple_8) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123452,
      "stdout": "",
      "stderr": "/tmp/tmph4ncg6xb.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmph4ncg6xb.cpp:13:19: error: no match for \u2018operator==\u2019 (operand types are \u2018std::any\u2019 and \u2018std::tuple<int, int, int>\u2019)\n   13 |     if(test_tuple == test_tuple_1 || test_tuple == test_tuple_2 || test_tuple == test_tuple_3 || test_tuple == test_tuple_4 || test_tuple == test_tuple_5 || test_tuple == test_tuple_6 || test_tuple == test_tuple_7 || test_tuple == test_tuple_8) {\n      |        ~~~~~~~~~~ ^~ ~~~~~~~~~~~~\n      |        |             |\n      |        std::any      std::tuple<int, int, int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmph4ncg6xb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note:   template argument deduction/substitution failed:\n/tmp/tmph4ncg6xb.cpp:13:22: note:   \u2018std::any\u2019 is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   13 |     if(test_tuple == test_tuple_1 || test_tuple == test_tuple_2 || test_tuple == test_tuple_3 || test_tuple == test_tuple_4 || test_tuple == test_tuple_5 || test_tuple == test_tuple_6 || test_tuple == test_tuple_7 || test_tuple == test_tuple_8) {\n      |                      ^~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmph4ncg6xb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note: candidate: ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, std::string> test_tuple;\n    std::any_cast<int>(test_tuple);\n    std::any_cast<float>(test_tuple);\n    std::any_cast<std::string>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpz54zs30q.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpz54zs30q.cpp:5:41: error: declaration of \u2018std::tuple<int, float, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > test_tuple\u2019 shadows a parameter\n    5 |     std::tuple<int, float, std::string> test_tuple;\n      |                                         ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::vector<std::any> v;\n    std::any_cast<std::vector<std::any>>(test_tuple);\n    std::string type = typeid(v[0]).name();\n    for (int i = 1; i < v.size(); i++) {\n        if (type != typeid(v[i]).name()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple_int = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    std::tuple<float, float, float> test_tuple_float = std::any_cast<std::tuple<float, float, float>>(test_tuple);\n    std::tuple<double, double, double> test_tuple_double = std::any_cast<std::tuple<double, double, double>>(test_tuple);\n    std::tuple<char, char, char> test_tuple_char = std::any_cast<std::tuple<char, char, char>>(test_tuple);\n    std::tuple<std::string, std::string, std::string> test_tuple_string = std::any_cast<std::tuple<std::string, std::string, std::string>>(test_tuple);\n    if (test_tuple_int.size() == 3) {\n        return true;\n    } else if (test_tuple_float.size() == 3) {\n        return true;\n    } else if (test_tuple_double.size() == 3) {\n        return true;\n    } else if (test_tuple_char.size() == 3) {\n        return true;\n    } else if (test_tuple_string.size() == 3) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmp5mcknfyb.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp5mcknfyb.cpp:10:24: error: \u2018class std::tuple<int, int, int>\u2019 has no member named \u2018size\u2019\n   10 |     if (test_tuple_int.size() == 3) {\n      |                        ^~~~\n/tmp/tmp5mcknfyb.cpp:12:33: error: \u2018class std::tuple<float, float, float>\u2019 has no member named \u2018size\u2019\n   12 |     } else if (test_tuple_float.size() == 3) {\n      |                                 ^~~~\n/tmp/tmp5mcknfyb.cpp:14:34: error: \u2018class std::tuple<double, double, double>\u2019 has no member named \u2018size\u2019\n   14 |     } else if (test_tuple_double.size() == 3) {\n      |                                  ^~~~\n/tmp/tmp5mcknfyb.cpp:16:32: error: \u2018class std::tuple<char, char, char>\u2019 has no member named \u2018size\u2019\n   16 |     } else if (test_tuple_char.size() == 3) {\n      |                                ^~~~\n/tmp/tmp5mcknfyb.cpp:18:34: error: \u2018class std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >\u2019 has no member named \u2018size\u2019\n   18 |     } else if (test_tuple_string.size() == 3) {\n      |                                  ^~~~\n/tmp/tmp5mcknfyb.cpp:23:1: warning: control reaches end of non-void function [-Wreturn-type]\n   23 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple17(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple18(\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510561,
      "stdout": "",
      "stderr": "/tmp/tmp5lczt5nd.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp5lczt5nd.cpp:23:1: error: expected primary-expression before \u2018}\u2019 token\n   23 | }\n      | ^\n/tmp/tmp5lczt5nd.cpp:23:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp5lczt5nd.cpp:23:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> t1(10, 15.5, 1e5);\n    std::tuple<char, int, float, double> t2('G', 10, 1.5, 1e5);\n    std::tuple<std::string, std::string, std::string> t3(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, int> t4(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<int, int, int, int, int, int, int, std::tuple<int, int, int>> t5(1, 2, 3, 4, 5, 6, 7, std::make_tuple(8, 9, 10));\n    std::tuple<double, double, double, double, double, double, double, std::tuple<double, double, double>> t6(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, std::make_tuple(8.0, 9.0, 10.0));\n    std::tuple<std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::tuple<std::string, std::string, std::string>> t7(\"Geeks\", \"for\", \"Geeks\", \"Geeks\", \"for\", \"Geeks\", \"Geeks\", std::make_tuple(\"Geeks\", \"for\", \"Geeks\"));\n    std::tuple<char, char, char, char, char, char, char, std::tuple<char, char, char>> t8('G', 'e', 'e', 'k', 's', 'f', 'o', std::make_tuple('r', 'G', 'e'));\n    std::tuple<int, int, int, int, int, int, int, std::tuple<double, double, double>> t9(1, 2, 3, 4, 5, 6, 7, std::make_tuple(8.0, 9.0, 10.0));\n    std::tuple<int, int, int,\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "/tmp/tmp8nw1nmbh.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp8nw1nmbh.cpp:8:73: error: no matching function for call to \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>::tuple(const char [6], const char [4], const char [6])\u2019\n    8 |     std::tuple<std::string, std::string, int> t4(\"Geeks\", \"for\", \"Geeks\");\n      |                                                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp8nw1nmbh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note: candidate: \u2018template<class _Alloc, class _Dummy, class ... _UElements, typename std::enable_if<((std::_TC<((3 == sizeof... (_UElements)) && (! std::is_same<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::tuple<_Tail ...> >::value)), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>::_MoveConstructibleTuple<_UElements ...>() && (! std::_TC<((3 == sizeof... (_UElements)) && (! std::is_same<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::tuple<_Tail ...> >::value)), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> t1(10, 20, 30);\n    std::tuple<std::string, std::string, std::string> t2(\"abc\", \"def\", \"ghi\");\n    std::tuple<double, double, double> t3(2.2, 4.4, 6.6);\n    std::tuple<int, std::string, double> t4(10, \"abc\", 2.2);\n    if(std::any_cast<std::tuple<int, int, int>>(test_tuple) == t1) {\n        return true;\n    }\n    else if(std::any_cast<std::tuple<std::string, std::string, std::string>>(test_tuple) == t2) {\n        return true;\n    }\n    else if(std::any_cast<std::tuple<double, double, double>>(test_tuple) == t3) {\n        return true;\n    }\n    else if(std::any_cast<std::tuple<int, std::string, double>>(test_tuple) == t4) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, std::string> t1 = std::any_cast<std::tuple<int, float, std::string>>(test_tuple);\n    if (std::any_cast<int>(t1) == std::any_cast<int>(t1) && std::any_cast<float>(t1) == std::any_cast<float>(t1) && std::any_cast<std::string>(t1) == std::any_cast<std::string>(t1))\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}