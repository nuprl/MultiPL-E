{
  "name": "mbpp_396_check_char",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given string starts and ends with the same character or not.\nstd::string check_char(std::string string) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = check_char;\n    assert(candidate((\"abba\")) == (\"Valid\"));\n    assert(candidate((\"a\")) == (\"Valid\"));\n    assert(candidate((\"abcd\")) == (\"Invalid\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if(string[0] == string[string.length()-1]) {\n        return \"true\";\n    }\n    else {\n        return \"false\";\n    }",
    "  if (string[0] == string[string.length() - 1]) {\n    return \"true\";\n  }\n  return \"false\";",
    "  if (string[0] == string[string.length() - 1]) {\n    return \"True\";\n  }\n  else {\n    return \"False\";\n  }",
    "  if (string[0] == string[string.length() - 1]) {\n    return \"true\";\n  }\n  else {\n    return \"false\";\n  }",
    "  if (string[0] == string[string.length() - 1]) {\n    return \"true\";\n  }\n  return \"false\";",
    "  if(string[0] == string[string.length()-1]) {\n    return \"true\";\n  }\n  else {\n    return \"false\";\n  }",
    "    if (string[0] == string[string.length()-1]) {\n        return \"True\";\n    }\n    else {\n        return \"False\";\n    }",
    "    if(string[0] == string[string.length()-1]) {\n        return \"true\";\n    }\n    else {\n        return \"false\";\n    }",
    "  if(string[0] == string[string.length()-1]) {\n    return \"true\";\n  }\n  return \"false\";",
    "  if(string[0] == string[string.size()-1]) {\n    return \"True\";\n  }\n  else {\n    return \"False\";\n  }",
    "  if (string[0] == string[string.length() - 1]) {\n    return \"true\";\n  }\n  else {\n    return \"false\";\n  }",
    "  if (string[0] == string[string.length() - 1]) {\n    return \"true\";\n  } else {\n    return \"false\";\n  }",
    "    if (string[0] == string[string.length() - 1]) {\n        return \"true\";\n    }\n    else {\n        return \"false\";\n    }",
    "  if (string[0] == string[string.length() - 1]) {\n    return \"True\";\n  }\n  else {\n    return \"False\";\n  }",
    "  if (string[0] == string[string.length() - 1]) {\n    return \"true\";\n  }\n  else {\n    return \"false\";\n  }",
    "  if(string[0] == string[string.length()-1]) {\n    return \"true\";\n  }\n  return \"false\";",
    "    if(string[0] == string[string.length()-1]) {\n        return \"true\";\n    }\n    else {\n        return \"false\";\n    }",
    "  if(string[0] == string[string.length()-1]) {\n    return \"true\";\n  }\n  else {\n    return \"false\";\n  }",
    "  if (string[0] == string[string.length() - 1]) {\n    return \"true\";\n  }\n  else {\n    return \"false\";\n  }",
    "    if(string[0] == string[string.length()-1]) {\n        return \"true\";\n    }\n    return \"false\";"
  ]
}