{
  "name": "mbpp_619_move_num",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;",
    "    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        while (i < j && !isdigit(test_str[i])) {\n            i++;\n        }\n        while (i < j && isdigit(test_str[j])) {\n            j--;\n        }\n        if (i < j) {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;",
    "    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;",
    "    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;",
    "    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (std::isdigit(test_str[i])) {\n            if (std::isalpha(test_str[j])) {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;",
    "    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (!isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    return result;",
    "    std::string res;\n    std::string num;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            res += test_str[i];\n        }\n    }\n    return res + num;",
    "    int i = 0, j = test_str.length() - 1;\n    while(i < j) {\n        if(!std::isdigit(test_str[i])) {\n            i++;\n            continue;\n        }\n        if(std::isdigit(test_str[j])) {\n            j--;\n            continue;\n        }\n        std::swap(test_str[i], test_str[j]);\n        i++;\n        j--;\n    }\n    return test_str;",
    "    std::string result;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string num;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isdigit(test_str[i])) {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;",
    "    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;",
    "    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(!std::isdigit(test_str[i])) {\n            i++;\n        }\n        else if(std::isdigit(test_str[j])) {\n            j--;\n        }\n        else {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;",
    "    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        if(!isdigit(test_str[i])) {\n            i++;\n        } else if(!isdigit(test_str[j])) {\n            j--;\n        } else {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;",
    "    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (isdigit(test_str[i])) {\n            if (isalpha(test_str[j])) {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;",
    "    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;",
    "    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            }\n            else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return test_str;",
    "    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] < '0' || test_str[j] > '9') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;",
    "    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        while(i < j && !isdigit(test_str[i])) {\n            i++;\n        }\n        while(i < j && isdigit(test_str[j])) {\n            j--;\n        }\n        if(i < j) {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;",
    "    std::string result;\n    std::string num;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;",
    "    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;"
  ]
}