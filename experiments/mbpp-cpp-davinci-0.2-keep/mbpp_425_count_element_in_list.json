{
  "name": "mbpp_425_count_element_in_list",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of sublists containing a particular element.\nlong count_element_in_list(std::any list1, std::any x) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = count_element_in_list;\n    assert(candidate((std::any({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)1, (long)11}), (std::vector<long>)std::vector<long>({(long)1, (long)15, (long)7})})), (std::any(1))) == (3));\n    assert(candidate((std::any({(std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"B\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"C\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"D\", (std::string)\"E\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"B\", (std::string)\"C\", (std::string)\"D\"})})), (std::any(\"A\"))) == (3));\n    assert(candidate((std::any({(std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"B\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"C\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"D\", (std::string)\"E\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"B\", (std::string)\"C\", (std::string)\"D\"})})), (std::any(\"E\"))) == (1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if (list1.empty()) {\n        return 0;\n    }\n    if (list1.front() == x) {\n        return 1 + count_element_in_list(list1.pop_front(), x);\n    }\n    return count_element_in_list(list1.pop_front(), x);",
    "    if(list1.empty())\n        return 0;\n    if(list1.front() == x)\n        return 1 + count_element_in_list(list1.pop_front(), x);\n    return count_element_in_list(list1.pop_front(), x);",
    "    if (list1.empty()) {\n        return 0;\n    }\n    else {\n        if (list1.front() == x) {\n            return 1 + count_element_in_list(list1.pop_front(), x);\n        }\n        else {\n            return count_element_in_list(list1.pop_front(), x);\n        }\n    }",
    "    if(list1.empty()) {\n        return 0;\n    }\n    if(list1.front() == x) {\n        return 1 + count_element_in_list(list1.pop_front(), x);\n    }\n    else {\n        return count_element_in_list(list1.pop_front(), x);\n    }",
    "    long count = 0;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            if (i.type() == typeid(std::vector<std::any>)) {\n                count += count_element_in_list(i, x);\n            } else {\n                if (i == x) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;",
    "    if (list1.empty()) {\n        return 0;\n    }\n    if (list1.front() == x) {\n        return 1 + count_element_in_list(list1.pop_front(), x);\n    }\n    else {\n        return count_element_in_list(list1.pop_front(), x);\n    }",
    "    // Your code here\n    long count=0;\n    if(list1.type()==typeid(std::list<std::any>)){\n        std::list<std::any> l1=std::any_cast<std::list<std::any>>(list1);\n        for(auto i=l1.begin();i!=l1.end();i++){\n            if(*i==x){\n                count++;\n            }\n            if(i->type()==typeid(std::list<std::any>)){\n                count+=count_element_in_list(*i,x);\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (std::any i : list) {\n            if (i.type() == typeid(std::vector<std::any>)) {\n                count += count_element_in_list(i, x);\n            } else {\n                if (i == x) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    if (list1.type() == typeid(std::list<std::any>)) {\n        std::list<std::any> l = std::any_cast<std::list<std::any>>(list1);\n        for (auto i = l.begin(); i != l.end(); i++) {\n            count += count_element_in_list(*i, x);\n        }\n    } else if (list1.type() == typeid(std::any)) {\n        if (list1 == x) {\n            count++;\n        }\n    }\n    return count;",
    "    if (list1.empty()) {\n        return 0;\n    }\n    if (list1.front() == x) {\n        return 1 + count_element_in_list(list1.pop_front(), x);\n    }\n    return count_element_in_list(list1.pop_front(), x);",
    "    // Write your code here\n    // To print results to the standard output you can use print\n    // Example: print \"Hello world!\"\n    long count = 0;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list){\n            if(i.type() == typeid(std::vector<std::any>)){\n                count += count_element_in_list(i, x);\n            }\n            else if(i.type() == typeid(int)){\n                if(std::any_cast<int>(i) == std::any_cast<int>(x)){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto sublist : list1) {\n        if (sublist.contains(x)) {\n            count++;\n        }\n    }\n    return count;",
    "    if (list1.empty()) {\n        return 0;\n    }\n    if (list1.front() == x) {\n        return 1 + count_element_in_list(list1.pop_front(), x);\n    }\n    return count_element_in_list(list1.pop_front(), x);",
    "    if (list1.empty()) {\n        return 0;\n    }\n    long count = 0;\n    if (list1.front() == x) {\n        count = 1;\n    }\n    return count + count_element_in_list(list1.pop_front(), x);",
    "    // Write your code here\n    // To print results to the standard output you can use PrintList function\n    long count=0;\n    while(list1.has_value()){\n        if(list1.type()==typeid(std::list<std::any>)){\n            count+=count_element_in_list(list1,x);\n        }\n        else if(list1.type()==typeid(int)){\n            if(list1==x){\n                count+=1;\n            }\n        }\n        list1=list1.next();\n    }\n    return count;",
    "    // Your code here\n    long count = 0;\n    if(list1.type() == typeid(std::list<std::any>)){\n        std::list<std::any> l = std::any_cast<std::list<std::any>>(list1);\n        for(auto i = l.begin(); i != l.end(); i++){\n            if(*i == x){\n                count++;\n            }\n            if(i->type() == typeid(std::list<std::any>)){\n                count += count_element_in_list(*i, x);\n            }\n        }\n    }\n    return count;",
    "    if (list1.empty()) {\n        return 0;\n    }\n    if (list1.front() == x) {\n        return 1 + count_element_in_list(list1.pop_front(), x);\n    }\n    return count_element_in_list(list1.pop_front(), x);",
    "    if (list1.empty()) {\n        return 0;\n    }\n    if (list1.front() == x) {\n        return 1 + count_element_in_list(list1.pop_front(), x);\n    }\n    return count_element_in_list(list1.pop_front(), x);",
    "    if (list1.empty()) {\n        return 0;\n    }\n    if (list1.front() == x) {\n        return 1 + count_element_in_list(list1.pop_front(), x);\n    }\n    return count_element_in_list(list1.pop_front(), x);",
    "    if (list1.empty()) {\n        return 0;\n    }\n    if (list1.front() == x) {\n        return 1 + count_element_in_list(list1.pop_front(), x);\n    }\n    return count_element_in_list(list1.pop_front(), x);"
  ]
}