{
  "name": "mbpp_412_remove_odd",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> res;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0)\n            res.push_back(l[i]);\n    }\n    return res;",
    "    std::vector<long>::iterator it;\n    for(it=l.begin();it!=l.end();it++)\n    {\n        if(*it%2!=0)\n        {\n            l.erase(it);\n            it--;\n        }\n    }\n    return l;",
    "    std::vector<long> l1;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;",
    "    std::vector<long> l1;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;",
    "    std::vector<long> v;\n    for(long i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            v.push_back(l[i]);\n        }\n    }\n    return v;",
    "    std::vector<long> res;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            res.push_back(l[i]);\n        }\n    }\n    return res;",
    "    std::vector<long> result;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            result.push_back(l[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> l1;\n    for(long i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;",
    "    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            v.push_back(l[i]);\n        }\n    }\n    return v;",
    "    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;",
    "    std::vector<long> res;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;",
    "    std::vector<long> l2;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l2.push_back(l[i]);\n        }\n    }\n    return l2;",
    "    std::vector<long> l2;\n    for(long i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            l2.push_back(l[i]);\n        }\n    }\n    return l2;",
    "    std::vector<long> result;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> res;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;",
    "    std::vector<long> v;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            v.push_back(l[i]);\n        }\n    }\n    return v;",
    "    std::vector<long> result;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            result.push_back(l[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> v;\n    for(auto i:l){\n        if(i%2==0){\n            v.push_back(i);\n        }\n    }\n    return v;",
    "    std::vector<long> v;\n    for(auto i:l){\n        if(i%2==0){\n            v.push_back(i);\n        }\n    }\n    return v;",
    "    std::vector<long> v;\n    for(auto i : l) {\n        if(i % 2 == 0) {\n            v.push_back(i);\n        }\n    }\n    return v;"
  ]
}