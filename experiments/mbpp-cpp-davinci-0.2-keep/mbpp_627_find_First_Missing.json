{
  "name": "mbpp_627_find_First_Missing",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(array[mid] != mid && array[mid-1] == mid-1) {\n            return mid;\n        }\n        else if(array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return mid;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    // Write your code here\n    long n=array.size();\n    for(long i=0;i<n;i++)\n    {\n        if(array[i]!=i)\n        {\n            return i;\n        }\n    }\n    return n;",
    "    // Write your code here\n    long n = array.size();\n    long i = 0;\n    while(i < n) {\n        if(array[i] != i) {\n            return i;\n        }\n        i++;\n    }\n    return i;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid && array[mid - 1] == mid - 1) {\n            return mid;\n        }\n        else if (array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return n;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return low+1;\n    }",
    "    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid)\n            return mid+1;\n        else if(array[mid] != mid+1)\n            high = mid-1;\n        else\n            low = mid+1;\n    }\n    if(low == n)\n        return n+1;\n    return -1;",
    "    // Write your code here\n    int n = array.size();\n    int low = 0, high = n-1;\n    while(low <= high){\n        int mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid){\n            return mid+1;\n        }\n        else if(array[mid] != mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low<=high){\n        long mid = (low+high)/2;\n        if(array[mid]!=mid+1){\n            if(mid==0 || array[mid-1]==mid){\n                return mid+1;\n            }\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return n+1;",
    "    // Write your code here\n    long n=array.size();\n    long low=0;\n    long high=n-1;\n    while(low<=high){\n        long mid=low+(high-low)/2;\n        if(array[mid]!=mid+1 && array[mid-1]==mid){\n            return mid+1;\n        }\n        else if(array[mid]!=mid+1){\n            high=mid-1;\n        }\n        else{\n            low=mid+1;\n        }\n    }\n    return n+1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high){\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid){\n            return mid+1;\n        }\n        else if(array[mid] != mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    // Write your code here\n    int n = array.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid)\n                return mid+1;\n            high = mid-1;\n        }\n        else\n            low = mid+1;\n    }\n    return n+1;",
    "    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] == mid + 1) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low + 1;",
    "    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1)\n                return mid;\n            high = mid - 1;\n        }\n        else\n            low = mid + 1;\n    }\n    return n;",
    "    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    if (l == n) {\n        return n + 1;\n    }\n    return 1;",
    "    // Write your code here\n    int n = array.size();\n    int i = 0;\n    while(i < n) {\n        if(array[i] == i+1) {\n            i++;\n        }\n        else if(array[i] <= i || array[i] > n || array[i] == array[array[i]-1]) {\n            array[i] = array[n-1];\n            n--;\n        }\n        else {\n            std::swap(array[i], array[array[i]-1]);\n        }\n    }\n    return i+1;"
  ]
}