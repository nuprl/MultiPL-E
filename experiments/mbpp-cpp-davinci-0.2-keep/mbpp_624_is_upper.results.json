{
  "name": "mbpp_624_is_upper",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n\tstd::string result = \"\";\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\t\tresult += (string[i] - 32);\n\t\t}\n\t\telse {\n\t\t\tresult += string[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        result += toupper(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i];\n        }\n        else {\n            result += (char)(string[i] - 32);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string upper_string;\n    for (int i = 0; i < string.length(); i++) {\n        upper_string += toupper(string[i]);\n    }\n    return upper_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result;\n    for (int i = 0; i < string.length(); i++) {\n        result += toupper(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i=0;i<string.length();i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += (string[i] - 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    int i = 0;\n    while(string[i] != '\\0') {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n        i++;\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        string[i] = toupper(string[i]);\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            result += (char)(string[i] - 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += (string[i] - 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result;\n    for(int i = 0; i < string.length(); i++) {\n        result += toupper(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        result += toupper(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += (char)(string[i] - 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>='a' && string[i]<='z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string upper_string = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        upper_string += toupper(string[i]);\n    }\n    return upper_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i=0; i<string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    int i = 0;\n    while (string[i] != '\\0') {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n        i++;\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>='a' && string[i]<='z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string new_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            new_string += (char)(string[i] - 'a' + 'A');\n        } else {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "tmp6pj868pm: /tmp/tmp6pj868pm.cpp:15: int main(): Assertion `candidate((\"person\")) == (\"PERSON\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += (char)(string[i] - 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result;\n    for (int i = 0; i < string.length(); i++) {\n        result += toupper(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result;\n    for (int i = 0; i < string.length(); i++) {\n        result += std::toupper(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            result += (string[i] - 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        result += toupper(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string upper = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            upper += string[i] - 32;\n        } else {\n            upper += string[i];\n        }\n    }\n    return upper;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string new_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            new_string += string[i] - 32;\n        } else {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.size(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        result += toupper(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result;\n    for(int i = 0; i < string.size(); i++) {\n        result += toupper(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            result += (char)(string[i] - 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        string[i] = toupper(string[i]);\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    int i = 0;\n    while(string[i] != '\\0') {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n        i++;\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.size(); i++) {\n        string[i] = toupper(string[i]);\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n\tstd::string result;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\t\tresult += string[i] - 32;\n\t\t}\n\t\telse {\n\t\t\tresult += string[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        string[i] = toupper(string[i]);\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i=0;i<string.length();i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        string[i] = toupper(string[i]);\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string upper_string;\n    for(int i = 0; i < string.length(); i++) {\n        upper_string += toupper(string[i]);\n    }\n    return upper_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += (char)(string[i] - 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        result += toupper(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += (string[i] - 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string upper_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        upper_string += std::toupper(string[i]);\n    }\n    return upper_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string upper_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            upper_string += (char)(string[i] - 32);\n        } else {\n            upper_string += string[i];\n        }\n    }\n    return upper_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string upper_string;\n    for (int i = 0; i < string.length(); i++) {\n        upper_string += toupper(string[i]);\n    }\n    return upper_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>='a' && string[i]<='z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>='a' && string[i]<='z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        string[i] = toupper(string[i]);\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    int i = 0;\n    while (string[i] != '\\0') {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n        i++;\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string upper_string;\n    for (int i = 0; i < string.length(); i++) {\n        upper_string += toupper(string[i]);\n    }\n    return upper_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        string[i] = toupper(string[i]);\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        result += toupper(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string upper_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        upper_string += toupper(string[i]);\n    }\n    return upper_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        string[i] = toupper(string[i]);\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string res = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            res += string[i] - 32;\n        } else {\n            res += string[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string upper_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        upper_string += toupper(string[i]);\n    }\n    return upper_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>='a' && string[i]<='z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string res = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            res += (string[i] - 32);\n        }\n        else {\n            res += string[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string upper_string = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        upper_string += toupper(string[i]);\n    }\n    return upper_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += (string[i] - 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += (string[i] - 'a') + 'A';\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 97 && string[i] <= 122) {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string upper_string = \"\";\n    for (int i = 0; i < string.size(); i++) {\n        upper_string += toupper(string[i]);\n    }\n    return upper_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        result += toupper(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.size(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        result += toupper(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            result += (string[i] - 'a' + 'A');\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n\tstd::string result = \"\";\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\t\tresult += string[i] - 32;\n\t\t}\n\t\telse {\n\t\t\tresult += string[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += (char)(string[i] - 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += (char)(string[i] - 32);\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string new_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            new_string += (string[i] - 32);\n        }\n        else {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n\tfor(int i = 0; i < string.length(); i++) {\n\t\tif(string[i] >= 'a' && string[i] <= 'z') {\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.size(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i=0;i<string.length();i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string new_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        new_string += toupper(string[i]);\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.size(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string upper_string;\n    for (int i = 0; i < string.size(); i++) {\n        upper_string += toupper(string[i]);\n    }\n    return upper_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n\tstd::string upper_string = \"\";\n\tfor(int i = 0; i < string.length(); i++) {\n\t\tupper_string += toupper(string[i]);\n\t}\n\treturn upper_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i=0; i<string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.size(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += (string[i] - 32);\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string upper_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        upper_string += toupper(string[i]);\n    }\n    return upper_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i=0;i<string.length();i++) {\n        if(string[i]>='a' && string[i]<='z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string upper_string;\n    for (int i = 0; i < string.length(); i++) {\n        upper_string += toupper(string[i]);\n    }\n    return upper_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string upper;\n    for(int i=0;i<string.length();i++) {\n        upper += toupper(string[i]);\n    }\n    return upper;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n\tstd::string upper_string;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\t\tupper_string += (string[i] - 32);\n\t\t}\n\t\telse {\n\t\t\tupper_string += string[i];\n\t\t}\n\t}\n\treturn upper_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        }\n        else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string new_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            new_string += string[i] - 32;\n        } else {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for(int i=0;i<string.length();i++) {\n        result += toupper(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n\tfor(int i = 0; i < string.length(); i++) {\n\t\tif(string[i] >= 'a' && string[i] <= 'z') {\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        result += toupper(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string str;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            str += string[i] - 32;\n        } else {\n            str += string[i];\n        }\n    }\n    return str;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for(int i = 0; i < string.length(); i++) {\n        string[i] = toupper(string[i]);\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.size(); i++) {\n        result += toupper(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string str = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            str += string[i] - 32;\n        }\n        else {\n            str += string[i];\n        }\n    }\n    return str;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string new_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            new_string += string[i] - 32;\n        } else {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n\tfor(int i = 0; i < string.length(); i++) {\n\t\tif(string[i] >= 'a' && string[i] <= 'z') {\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else {\n            result += string[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string upper_string;\n    for (int i = 0; i < string.length(); i++) {\n        upper_string += toupper(string[i]);\n    }\n    return upper_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string str;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            str += string[i] - 32;\n        }\n        else {\n            str += string[i];\n        }\n    }\n    return str;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string new_string = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        new_string += toupper(string[i]);\n    }\n    return new_string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1666123312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        result += toupper(string[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}