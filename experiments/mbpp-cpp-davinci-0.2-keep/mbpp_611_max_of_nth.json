{
  "name": "mbpp_611_max_of_nth",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlong max_of_nth(std::vector<std::vector<long>> test_list, long N) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = max_of_nth;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)1, (long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)8, (long)9, (long)19})})), (2)) == (19));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)20})})), (1)) == (10));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)3, (long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)21})})), (1)) == (11));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  long max = 0;\n  for (int i = 0; i < test_list.size(); i++) {\n    if (test_list[i][N] > max) {\n      max = test_list[i][N];\n    }\n  }\n  return max;",
    "    long max = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;",
    "  long max = 0;\n  for (long i = 0; i < test_list.size(); i++) {\n    if (test_list[i][N] > max) {\n      max = test_list[i][N];\n    }\n  }\n  return max;",
    "    long max = test_list[0][N];\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (auto i : test_list) {\n        if (i[N] > max) {\n            max = i[N];\n        }\n    }\n    return max;",
    "    long max = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;",
    "  long max = 0;\n  for (int i = 0; i < test_list.size(); i++) {\n    if (test_list[i][N] > max) {\n      max = test_list[i][N];\n    }\n  }\n  return max;",
    "    long max_value = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i][N] > max_value) {\n            max_value = test_list[i][N];\n        }\n    }\n    return max_value;",
    "  long max = test_list[0][N];\n  for (long i = 0; i < test_list.size(); i++) {\n    if (test_list[i][N] > max) {\n      max = test_list[i][N];\n    }\n  }\n  return max;",
    "    long max = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;",
    "    long max = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;",
    "    long max = test_list[0][N];\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;",
    "  long max_val = 0;\n  for (auto &i : test_list) {\n    if (i[N] > max_val) {\n      max_val = i[N];\n    }\n  }\n  return max_val;",
    "    long max = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;",
    "    long max = test_list[0][N];\n    for (long i = 1; i < test_list.size(); i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;",
    "    long max = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;",
    "  long max = test_list[0][N];\n  for (int i = 0; i < test_list.size(); i++) {\n    if (test_list[i][N] > max) {\n      max = test_list[i][N];\n    }\n  }\n  return max;",
    "    long max = 0;\n    for(long i = 0; i < test_list.size(); i++) {\n        if(test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;",
    "    long max = test_list[0][N];\n    for (long i = 1; i < test_list.size(); i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;"
  ]
}