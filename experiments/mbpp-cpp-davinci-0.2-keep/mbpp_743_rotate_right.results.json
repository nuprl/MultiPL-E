{
  "name": "mbpp_743_rotate_right",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpvplkbt79: /tmp/tmpvplkbt79.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n  std::vector<long> result;\n  for (long i = 0; i < list.size(); i++) {\n    long index = (i + m) % list.size();\n    result.push_back(list[index]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpw8f9bdl7: /tmp/tmpw8f9bdl7.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i+m)%list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpt39phuwm: /tmp/tmpt39phuwm.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpvplkbt79: /tmp/tmpvplkbt79.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; i++) {\n        list[list.size() - m + i] = result[i];\n    }\n    return list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpfspbyi2l: /tmp/tmpfspbyi2l.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        result.push_back(list[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpbx6cpynt: /tmp/tmpbx6cpynt.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> ret;\n    for (long i = 0; i < list.size(); i++) {\n        ret.push_back(list[(i + m) % list.size()]);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpo7vbpq_a: /tmp/tmpo7vbpq_a.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpkrdf6ayh: /tmp/tmpkrdf6ayh.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n\tstd::vector<long> result;\n\tfor (long i = m; i < list.size(); i++) {\n\t\tresult.push_back(list[i]);\n\t}\n\tfor (long i = 0; i < m; i++) {\n\t\tresult.push_back(list[i]);\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpjty8k1qg: /tmp/tmpjty8k1qg.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpvplkbt79: /tmp/tmpvplkbt79.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpvplkbt79: /tmp/tmpvplkbt79.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpvplkbt79: /tmp/tmpvplkbt79.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    long len = list.size();\n    for(long i = 0; i < len; i++) {\n        result.push_back(list[(i + m) % len]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmp3z82olk8: /tmp/tmp3z82olk8.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpkrdf6ayh: /tmp/tmpkrdf6ayh.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpkrdf6ayh: /tmp/tmpkrdf6ayh.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (int i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpc4458epu: /tmp/tmpc4458epu.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        rotated_list.push_back(list[(i + m) % n]);\n    }\n    return rotated_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmp0fs78qzz: /tmp/tmp0fs78qzz.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n    for (int i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpcpm1tm8d: /tmp/tmpcpm1tm8d.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpvplkbt79: /tmp/tmpvplkbt79.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n    for(long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmptsfjxveu: /tmp/tmptsfjxveu.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    long n = list.size();\n    std::vector<long> result(n);\n    for (long i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpkrdf6ayh: /tmp/tmpkrdf6ayh.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    // write your code here\n    std::vector<long> result;\n    for(int i=0;i<list.size();i++){\n        result.push_back(list[(i+m)%list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpoaqxf7n_: /tmp/tmpoaqxf7n_.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpvplkbt79: /tmp/tmpvplkbt79.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i=0; i<list.size(); i++) {\n        result.push_back(list[(i+m)%list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpagwwzrwx: /tmp/tmpagwwzrwx.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n\tstd::vector<long> result;\n\tfor (long i = 0; i < list.size(); i++) {\n\t\tresult.push_back(list[(i + m) % list.size()]);\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmp3panngpb: /tmp/tmp3panngpb.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> res;\n    for (long i = 0; i < m; i++) {\n        res.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; i++) {\n        list[list.size() - m + i] = res[i];\n    }\n    return list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpuvb3asbn: /tmp/tmpuvb3asbn.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; i++) {\n        list[list.size() - m + i] = result[i];\n    }\n    return list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpfspbyi2l: /tmp/tmpfspbyi2l.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpkrdf6ayh: /tmp/tmpkrdf6ayh.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        result.push_back(list[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpbx6cpynt: /tmp/tmpbx6cpynt.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> new_list;\n    for (long i = 0; i < list.size(); i++) {\n        long new_index = (i + m) % list.size();\n        new_list.push_back(list[new_index]);\n    }\n    return new_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmp3qwdtgyq: /tmp/tmp3qwdtgyq.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = m; i < list.size(); i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpsz2t1zdb: /tmp/tmpsz2t1zdb.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> new_list;\n    for (long i = 0; i < list.size(); i++) {\n        new_list.push_back(list[(i + m) % list.size()]);\n    }\n    return new_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpok1fdsbo: /tmp/tmpok1fdsbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; i++) {\n        list[list.size() - m + i] = result[i];\n    }\n    return list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpfspbyi2l: /tmp/tmpfspbyi2l.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    long i = 0;\n    while (i < list.size()) {\n        result.push_back(list[(i + m) % list.size()]);\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmp8g9aj54f: /tmp/tmp8g9aj54f.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpkrdf6ayh: /tmp/tmpkrdf6ayh.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (int i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpc4458epu: /tmp/tmpc4458epu.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    long n = list.size();\n    std::vector<long> result(n);\n    for (long i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n    for(long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmptsfjxveu: /tmp/tmptsfjxveu.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> new_list;\n    for (long i = 0; i < list.size(); i++) {\n        new_list.push_back(list[(i + m) % list.size()]);\n    }\n    return new_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpok1fdsbo: /tmp/tmpok1fdsbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpvplkbt79: /tmp/tmpvplkbt79.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    long n = list.size();\n    std::vector<long> result(n);\n    for (long i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpvplkbt79: /tmp/tmpvplkbt79.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpkrdf6ayh: /tmp/tmpkrdf6ayh.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpkrdf6ayh: /tmp/tmpkrdf6ayh.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> res;\n    for (long i = 0; i < list.size(); i++) {\n        res.push_back(list[(i + m) % list.size()]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpfs1_x2ex: /tmp/tmpfs1_x2ex.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = m; i < list.size(); i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpsz2t1zdb: /tmp/tmpsz2t1zdb.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    long n = list.size();\n    std::vector<long> result(n);\n    for (long i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    long n = list.size();\n    m = m % n;\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpe0z7660a: /tmp/tmpe0z7660a.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> res;\n    for (long i = 0; i < list.size(); i++) {\n        res.push_back(list[(i + m) % list.size()]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpfs1_x2ex: /tmp/tmpfs1_x2ex.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpkrdf6ayh: /tmp/tmpkrdf6ayh.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n    for(long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i+m) % list.size()]);\n    }\n    return rotated_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmplnxkxv_j: /tmp/tmplnxkxv_j.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> new_list;\n    for (long i = 0; i < m; i++) {\n        new_list.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; i++) {\n        list[list.size() - m + i] = new_list[i];\n    }\n    return list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmp9xxcdz7c: /tmp/tmp9xxcdz7c.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpvplkbt79: /tmp/tmpvplkbt79.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        result.insert(result.begin(), list[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpgkrd2xec: /tmp/tmpgkrd2xec.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> res;\n    long n = list.size();\n    for(long i = 0; i < n; i++) {\n        res.push_back(list[(i + m) % n]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpyeqm_7pj: /tmp/tmpyeqm_7pj.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        result.push_back(list[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpbx6cpynt: /tmp/tmpbx6cpynt.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i+m)%list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmph0ddxb9m: /tmp/tmph0ddxb9m.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (int i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpc4458epu: /tmp/tmpc4458epu.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; i++) {\n        list[list.size() - m + i] = result[i];\n    }\n    return list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpfspbyi2l: /tmp/tmpfspbyi2l.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i=0; i<list.size(); i++) {\n        result.push_back(list[(i+m)%list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpagwwzrwx: /tmp/tmpagwwzrwx.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = m; i < list.size(); i++) {\n        result.push_back(list[i]);\n    }\n    for(long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmpxv0pk4jx: /tmp/tmpxv0pk4jx.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; i++) {\n        list[list.size() - m + i] = result[i];\n    }\n    return list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpfspbyi2l: /tmp/tmpfspbyi2l.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpvplkbt79: /tmp/tmpvplkbt79.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpkrdf6ayh: /tmp/tmpkrdf6ayh.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        result.push_back(list[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpbx6cpynt: /tmp/tmpbx6cpynt.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n    for (long i = 0; i < list.size(); i++) {\n        rotated_list.push_back(list[(i + m) % list.size()]);\n    }\n    return rotated_list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpvplkbt79: /tmp/tmpvplkbt79.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < m; ++i) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); ++i) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; ++i) {\n        list[list.size() - m + i] = result[i];\n    }\n    return list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122598,
      "stdout": "",
      "stderr": "tmp94fkikng: /tmp/tmp94fkikng.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n\tstd::vector<long> result;\n\tfor (long i = 0; i < list.size(); i++) {\n\t\tresult.push_back(list[(i + m) % list.size()]);\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "tmp3panngpb: /tmp/tmp3panngpb.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmphzeb3143: /tmp/tmphzeb3143.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    long n = list.size();\n    for (long i = 0; i < n; i++) {\n        result.push_back(list[(i + m) % n]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpkrdf6ayh: /tmp/tmpkrdf6ayh.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for (long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for (long i = 0; i < m; i++) {\n        list[list.size() - m + i] = result[i];\n    }\n    return list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmpfspbyi2l: /tmp/tmpfspbyi2l.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for (long i = 0; i < list.size(); i++) {\n        result.push_back(list[(i + m) % list.size()]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "tmp9xubw_yo: /tmp/tmp9xubw_yo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> result;\n    for(long i = 0; i < m; i++) {\n        result.push_back(list[i]);\n    }\n    for(long i = m; i < list.size(); i++) {\n        list[i - m] = list[i];\n    }\n    for(long i = 0; i < m; i++) {\n        list[list.size() - m + i] = result[i];\n    }\n    return list;\n}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
      "timestamp": 1666122598,
      "stdout": "",
      "stderr": "tmppi4j8pou: /tmp/tmppi4j8pou.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}