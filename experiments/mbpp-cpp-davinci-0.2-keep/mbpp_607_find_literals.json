{
  "name": "mbpp_607_find_literals",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nUnion_std_string_long find_literals(std::string text, std::string pattern) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = find_literals;\n    assert(candidate((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")) == std::make_tuple(\"fox\", 16, 19));\n    assert(candidate((\"Its been a very crazy procedure right\"), (\"crazy\")) == std::make_tuple(\"crazy\", 16, 21));\n    assert(candidate((\"Hardest choices required strongest will\"), (\"will\")) == std::make_tuple(\"will\", 35, 39));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() == 0) {\n        return Union_std_string_long(0);\n    }\n    return Union_std_string_long(m.str());",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return Union_std_string_long(m.str());\n    } else {\n        return Union_std_string_long(long(-1));\n    }",
    "    std::string result = \"\";\n    long start = -1;\n    long end = -1;\n    for (long i = 0; i < text.size(); i++) {\n        if (text[i] == pattern[0]) {\n            start = i;\n            end = i;\n            for (long j = 1; j < pattern.size(); j++) {\n                if (text[i + j] != pattern[j]) {\n                    start = -1;\n                    end = -1;\n                    break;\n                }\n                end++;\n            }\n            if (start != -1) {\n                break;\n            }\n        }\n    }\n    if (start != -1) {\n        for (long i = start; i <= end; i++) {\n            result += text[i];\n        }\n    }\n    return Union_std_string_long(result);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch result;\n    if (std::regex_search(text, result, r)) {\n        std::cout << \"Found \" << result.str(0) << \" at index \" << result.position(0) << \" to \" << result.position(0) + result.length(0) << std::endl;\n        return result.str(0);\n    }\n    else {\n        std::cout << \"Not found\" << std::endl;\n        return -1;\n    }",
    "    Union_std_string_long result;\n    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re) && match.size() > 1) {\n        result.f0 = match.str(1);\n        result.f1 = match.position();\n    }\n    return result;",
    "    // Write your code here\n    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re) && match.size() > 1) {\n        return Union_std_string_long(match.str(1));\n    }\n    return Union_std_string_long(-1);",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (text[i + j] != pattern[j])\n                break;\n        if (j == m)\n            return Union_std_string_long(text.substr(i, m));\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return Union_std_string_long(m.str());\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    std::regex re(pattern);\n    std::smatch match;\n    std::regex_search(text, match, re);\n    if (match.size() > 0) {\n        return Union_std_string_long(match.str(0));\n    } else {\n        return Union_std_string_long((long) -1);\n    }",
    "    std::regex re(pattern);\n    std::smatch match;\n    std::regex_search(text, match, re);\n    if (match.size() > 0) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (text[i + j] != pattern[j])\n                break;\n        if (j == m)\n            return Union_std_string_long(text.substr(i, m));\n    }\n    return Union_std_string_long(0);",
    "    std::regex re(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, re)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (text[i + j] != pattern[j])\n                break;\n        if (j == m)\n            return Union_std_string_long(text.substr(i, m));\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(i);\n        }\n    }\n    return Union_std_string_long(std::string(\"\"));",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for(int i = 0; i <= n - m; i++) {\n        int j;\n        for(j = 0; j < m; j++) {\n            if(text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if(j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    std::regex re(pattern);\n    std::smatch m;\n    std::regex_search(text, m, re);\n    if (m.size() == 0) {\n        return Union_std_string_long(-1);\n    }\n    return Union_std_string_long(m.str(0));",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (text[i + j] != pattern[j])\n                break;\n        if (j == m)\n            return Union_std_string_long(text.substr(i, m));\n    }\n    return Union_std_string_long(0);",
    "    std::regex re(pattern);\n    std::smatch match;\n    std::regex_search(text, match, re);\n    if (match.size() > 0) {\n        return match.str();\n    } else {\n        return -1;\n    }",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (text[i + j] != pattern[j])\n                break;\n        if (j == m)\n            return Union_std_string_long(text.substr(i, m));\n    }\n    return Union_std_string_long(-1);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.empty()) {\n        return Union_std_string_long(0);\n    }\n    return Union_std_string_long(m.str());",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.empty()) {\n        return Union_std_string_long(long(-1));\n    }\n    return Union_std_string_long(m.str());",
    "    Union_std_string_long result;\n    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re) && match.size() > 1) {\n        result.f0 = match.str(1);\n        result.f1 = match.position(1);\n    }\n    return result;",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str(0));\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int ab = 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n    int af = 0;\n    int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj = 0;\n    int ak = 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n    int ao = 0;\n    int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as = 0;\n    int at = 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n    int ax = 0;\n    int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb = 0;\n    int bc = 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n    int bg = 0;\n    int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk = 0;\n    int bl = 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n    int bp = 0;\n    int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt = 0;\n    int bu = 0;\n    int bv = 0;\n    int bw = 0;\n    int bx = 0;\n    int by = 0;\n    int bz = 0",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(i);\n        }\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (text[i + j] != pattern[j])\n                break;\n        if (j == m)\n            return Union_std_string_long(text.substr(i, m));\n    }\n    return Union_std_string_long(0);",
    "    std::regex re(pattern);\n    std::smatch match;\n    std::regex_search(text, match, re);\n    if (match.size() > 0) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re) && match.size() > 1) {\n        return Union_std_string_long(match.str(1));\n    } else {\n        return Union_std_string_long(0);\n    }",
    "    Union_std_string_long result;\n    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        result.f0 = match.str();\n        result.f1 = match.position();\n    }\n    return result;",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.empty()) {\n        return Union_std_string_long(long(-1));\n    }\n    return Union_std_string_long(m.str());",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re) && match.size() > 1) {\n        return Union_std_string_long(match.str(1));\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(-1);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int A = 0;\n    int B = 0;\n    int C = 0;\n    int D = 0;\n    int E = 0;\n    int F = 0;\n    int G = 0;\n    int H = 0;\n    int I = 0;\n    int J = 0;\n    int K = 0;\n    int L = 0;\n    int M = 0;\n    int N = 0;\n    int O = 0;\n    int P = 0;\n    int Q = 0;\n    int R = 0;\n    int S = 0;\n    int T = 0;\n    int U = 0;\n    int V = 0;\n    int W = 0;\n    int X = 0;\n    int Y = 0;\n    int Z = 0;\n    int _ = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n    int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n    int",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    std::regex e(pattern);\n    std::smatch m;\n    std::regex_search(text, m, e);\n    if(m.size() == 0) {\n        return Union_std_string_long(0);\n    }\n    return Union_std_string_long(m.str());",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re) && match.size() > 1) {\n        std::ssub_match sub_match = match[1];\n        std::string piece = sub_match.str();\n        return Union_std_string_long(piece);\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() == 0) {\n        return Union_std_string_long(0);\n    }\n    return Union_std_string_long(m.str());",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (text[i + j] != pattern[j])\n                break;\n        if (j == m)\n            return Union_std_string_long(text.substr(i, m));\n    }\n    return Union_std_string_long(-1);",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re) && match.size() > 1) {\n        return Union_std_string_long(match.str(1));\n    } else {\n        return Union_std_string_long(0);\n    }",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 1) {\n        return m.str(1);\n    } else {\n        return -1;\n    }",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(i);\n        }\n    }\n    return Union_std_string_long(std::string(\"\"));",
    "    if (pattern.size() == 0) {\n        return Union_std_string_long(0);\n    }\n    int i = 0;\n    int j = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.size()) {\n        if (text[i] == pattern[j]) {\n            if (j == 0) {\n                start = i;\n            }\n            i++;\n            j++;\n            if (j == pattern.size()) {\n                end = i;\n                return Union_std_string_long(text.substr(start, end - start));\n            }\n        } else {\n            i++;\n            j = 0;\n        }\n    }\n    return Union_std_string_long(-1);",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    std::regex re(pattern);\n    std::smatch m;\n    std::regex_search(text, m, re);\n    if (m.size() == 0) {\n        return Union_std_string_long(0);\n    }\n    return Union_std_string_long(m.str());",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return Union_std_string_long(m.str(0));\n    } else {\n        return Union_std_string_long(0);\n    }",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(long(0));",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return Union_std_string_long(m.str(0));\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (text[i + j] != pattern[j])\n                break;\n        if (j == m)\n            return Union_std_string_long(text.substr(i, m));\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return m.str();\n    }\n    return -1;",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(i);\n        }\n    }\n    return Union_std_string_long(-1);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    return Union_std_string_long(m.str());",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(-1);",
    "    std::regex re(pattern);\n    std::smatch match;\n    std::regex_search(text, match, re);\n    if (match.size() > 0) {\n        return Union_std_string_long(match.str());\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() == 0) {\n        return Union_std_string_long(0);\n    }\n    std::string match = m[0];\n    int start = m.position(0);\n    int end = start + match.size();\n    return Union_std_string_long(match);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    int i = 0;\n    int j = 0;\n    int start = -1;\n    int end = -1;\n    while (i < text.size() && j < pattern.size()) {\n        if (text[i] == pattern[j]) {\n            if (start == -1) {\n                start = i;\n            }\n            i++;\n            j++;\n        } else {\n            start = -1;\n            i++;\n        }\n    }\n    if (j == pattern.size()) {\n        end = i - 1;\n    }\n    if (start == -1) {\n        return -1;\n    }\n    return std::make_pair(start, end);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re) && match.size() > 1) {\n        return Union_std_string_long(match.str(1));\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() == 0) {\n        return Union_std_string_long(0);\n    }\n    return Union_std_string_long(m.str());",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() == 0) {\n        return Union_std_string_long(0);\n    }\n    return Union_std_string_long(m.str(0));",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return m.str();\n    }\n    return -1;",
    "    int n = text.length();\n    int m = pattern.length();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (text[i] == pattern[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == m) {\n        return Union_std_string_long(text.substr(i - m, m));\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return Union_std_string_long(m.str(0));\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    int n = text.size();\n    int m = pattern.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (text[i + j] != pattern[j])\n                break;\n        if (j == m)\n            return Union_std_string_long(text.substr(i, m));\n    }\n    return Union_std_string_long(-1);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return Union_std_string_long(m.str());\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    if (pattern.size() == 0) {\n        return Union_std_string_long(0);\n    }\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == pattern[0]) {\n            int j = 0;\n            for (; j < pattern.size(); j++) {\n                if (text[i + j] != pattern[j]) {\n                    break;\n                }\n            }\n            if (j == pattern.size()) {\n                return Union_std_string_long(text.substr(i, j));\n            }\n        }\n    }\n    return Union_std_string_long(-1);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.empty()) {\n        return Union_std_string_long(long(-1));\n    }\n    return Union_std_string_long(m.str());",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    return Union_std_string_long(m.str());",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    for(int i = 0; i < text.length(); i++) {\n        for(int j = 0; j < pattern.length(); j++) {\n            if(text[i + j] != pattern[j]) {\n                break;\n            }\n            if(j == pattern.length() - 1) {\n                return Union_std_string_long(pattern);\n            }\n        }\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(-1);",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re) && match.size() > 1) {\n        return Union_std_string_long(match.str(1));\n    } else {\n        return Union_std_string_long(0);\n    }",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(long(0));",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return Union_std_string_long(m.str());\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    int n = text.size();\n    int m = pattern.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (text[i + j] != pattern[j])\n                break;\n        if (j == m)\n            return Union_std_string_long(text.substr(i, m));\n    }\n    return Union_std_string_long(-1);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() == 0) {\n        return Union_std_string_long(0);\n    }\n    return Union_std_string_long(m.str(0));",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    std::regex e(pattern);\n    std::smatch m;\n    std::regex_search(text, m, e);\n    if (m.size() == 0) {\n        return Union_std_string_long(0);\n    }\n    return Union_std_string_long(m.str());",
    "    int n = text.size();\n    int m = pattern.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return Union_std_string_long(m.str());\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    std::regex re(pattern);\n    std::smatch match;\n    std::regex_search(text, match, re);\n    if (match.size() > 0) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(0);",
    "    if (pattern.size() == 0) {\n        return Union_std_string_long(0);\n    }\n    if (pattern.size() == 1) {\n        for (int i = 0; i < text.size(); i++) {\n            if (text[i] == pattern[0]) {\n                return Union_std_string_long(i);\n            }\n        }\n        return Union_std_string_long(std::string(\"\"));\n    }\n    if (pattern.size() == 2) {\n        for (int i = 0; i < text.size() - 1; i++) {\n            if (text[i] == pattern[0] && text[i + 1] == pattern[1]) {\n                return Union_std_string_long(i);\n            }\n        }\n        return Union_std_string_long(std::string(\"\"));\n    }\n    if (pattern.size() == 3) {\n        for (int i = 0; i < text.size() - 2; i++) {\n            if (text[i] == pattern[0] && text[i + 1] == pattern[1] && text[i + 2] == pattern[2]) {\n                return Union_std_string_long(i);\n            }\n        }\n        return Union_std_string_long(std::string(\"\"));\n    }\n    if (pattern.size() == 4) {\n        for (int i = 0; i < text.size() - 3; i++) {\n            if (text[i] == pattern[0] && text[i + 1] == pattern[1] && text[i + 2] == pattern[2] && text[i + 3] == pattern[3]) {\n                return Union_std_string_long(i);\n            }\n        }\n        return Union_std_string_long(std::string(\"\"));\n    }\n    if (pattern.size() == 5) {\n        for (int i = 0; i < text.size() - 4; i++) {\n            if (text[i] == pattern[0] && text[i + 1] == pattern[1] && text[i + 2] == pattern[2] &&",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return Union_std_string_long(m.str(0));\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex pattern_regex(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, pattern_regex)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex regex(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, regex)) {\n        return match.str(0);\n    }\n    return -1;",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.empty()) {\n        return Union_std_string_long(0);\n    } else {\n        return Union_std_string_long(m.str());\n    }",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (text[i + j] != pattern[j])\n                break;\n        if (j == m)\n            return Union_std_string_long(text.substr(i, m));\n    }\n    return Union_std_string_long(-1);",
    "    int i = 0;\n    int j = 0;\n    int start = 0;\n    int end = 0;\n    bool found = false;\n    while (i < text.length()) {\n        if (text[i] == pattern[j]) {\n            if (j == 0) {\n                start = i;\n            }\n            j++;\n            if (j == pattern.length()) {\n                end = i;\n                found = true;\n                break;\n            }\n        } else {\n            j = 0;\n        }\n        i++;\n    }\n    if (found) {\n        return Union_std_string_long(text.substr(start, end - start + 1));\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() == 0) {\n        return Union_std_string_long(0);\n    }\n    return Union_std_string_long(m.str());",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return Union_std_string_long(m.str());\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    Union_std_string_long result;\n    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        result.f0 = m.str();\n        result.f1 = m.position();\n        return result;\n    }\n    return result;",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(-1);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    std::regex pattern_regex(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, pattern_regex)) {\n        return Union_std_string_long(match.str());\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    int i = 0;\n    int j = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text[i] == pattern[j]) {\n            if (j == 0) {\n                start = i;\n            }\n            i++;\n            j++;\n            if (j == pattern.length()) {\n                end = i;\n                return Union_std_string_long(text.substr(start, end - start));\n            }\n        } else {\n            if (j != 0) {\n                i = start + 1;\n                j = 0;\n            } else {\n                i++;\n            }\n        }\n    }\n    return Union_std_string_long(long(-1));",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return Union_std_string_long(m.str(0));\n    } else {\n        return Union_std_string_long(0);\n    }",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(-1);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if(m.size() > 0) {\n        return Union_std_string_long(m.str(0));\n    }\n    return Union_std_string_long(0);",
    "    std::smatch m;\n    std::regex_search(text, m, std::regex(pattern));\n    if(m.size() == 0) {\n        return Union_std_string_long(0);\n    }\n    return Union_std_string_long(m.str());",
    "    Union_std_string_long rv(0);\n    if (pattern.length() == 0) {\n        rv.f0 = \"\";\n        rv.f1 = 0;\n        return rv;\n    }\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == pattern[j]) {\n            i++;\n            j++;\n            if (j == pattern.length()) {\n                rv.f0 = text.substr(i - j, j);\n                rv.f1 = i - j;\n                return rv;\n            }\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    rv.f0 = \"\";\n    rv.f1 = -1;\n    return rv;",
    "    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int ab = 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n    int af = 0;\n    int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj = 0;\n    int ak = 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n    int ao = 0;\n    int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as = 0;\n    int at = 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n    int ax = 0;\n    int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb = 0;\n    int bc = 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n    int bg = 0;\n    int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk = 0;\n    int bl = 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n    int bp = 0;\n    int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt = 0;\n    int bu = 0;\n    int bv = 0;\n    int bw = 0;\n    int bx = 0;\n    int by = 0;\n    int bz = 0",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return m[0].str();\n    }\n    return -1;",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (text[i + j] != pattern[j])\n                break;\n        if (j == m)\n            return Union_std_string_long(text.substr(i, m));\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return Union_std_string_long(m.str(0));\n    } else {\n        return Union_std_string_long(0);\n    }",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str(0));\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    std::regex e(pattern);\n    std::smatch m;\n    std::regex_search(text, m, e);\n    if (m.size() == 0) {\n        return Union_std_string_long(0);\n    }\n    return Union_std_string_long(m.str());",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (text[i + j] != pattern[j])\n                break;\n        if (j == m)\n            return Union_std_string_long(text.substr(i, m));\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(-1);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() == 0) {\n        return Union_std_string_long(0);\n    }\n    return Union_std_string_long(m.str());",
    "    int i = 0;\n    int j = 0;\n    int text_len = text.length();\n    int pattern_len = pattern.length();\n    while (i < text_len && j < pattern_len) {\n        if (text[i] == pattern[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == pattern_len) {\n        return Union_std_string_long(pattern);\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    int n = text.size();\n    int m = pattern.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    int i = 0;\n    int j = 0;\n    while (i < text.size() && j < pattern.size()) {\n        if (text[i] == pattern[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == pattern.size()) {\n        return Union_std_string_long(i - j);\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return Union_std_string_long(m.str());\n    } else {\n        return Union_std_string_long(long(-1));\n    }",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    if (pattern.length() == 0) {\n        return Union_std_string_long(0);\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == pattern[0]) {\n            int j = 0;\n            for (; j < pattern.length(); j++) {\n                if (text[i + j] != pattern[j]) {\n                    break;\n                }\n            }\n            if (j == pattern.length()) {\n                return Union_std_string_long(text.substr(i, j));\n            }\n        }\n    }\n    return Union_std_string_long(-1);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (text[i + j] != pattern[j])\n                break;\n        if (j == m)\n            return Union_std_string_long(text.substr(i, m));\n    }\n    return Union_std_string_long(-1);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() == 0) {\n        return Union_std_string_long(std::string(\"\"));\n    }\n    return Union_std_string_long(m.str());",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re) && match.size() > 1) {\n        return Union_std_string_long(match.str(1));\n    } else {\n        return Union_std_string_long(0);\n    }",
    "    Union_std_string_long result;\n    result.f0 = \"\";\n    result.f1 = -1;\n    int i = 0;\n    int j = 0;\n    while (i < text.length() && j < pattern.length()) {\n        if (text[i] == pattern[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == pattern.length()) {\n        result.f0 = pattern;\n        result.f1 = i - j;\n    }\n    return result;",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (text[i + j] != pattern[j])\n                break;\n        if (j == m)\n            return Union_std_string_long(text.substr(i, m));\n    }\n    return Union_std_string_long(0);",
    "    std::regex re(pattern);\n    std::smatch match;\n    std::regex_search(text, match, re);\n    if (match.size() > 0) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    std::string result = m.str();\n    long start = m.position();\n    long end = m.position() + m.length();\n    return Union_std_string_long(result);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(long(-1));",
    "    std::regex re(pattern);\n    std::smatch match;\n    std::regex_search(text, match, re);\n    if (match.size() > 0) {\n        return match.str(0);\n    }\n    return -1;",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.empty()) {\n        return Union_std_string_long(0);\n    }\n    return Union_std_string_long(m.str());",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex e(pattern);\n    std::smatch m;\n    std::regex_search(text, m, e);\n    return Union_std_string_long(m.str());",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return m[0].str();\n    } else {\n        return -1;\n    }",
    "    std::regex re(pattern);\n    std::smatch match;\n    std::regex_search(text, match, re);\n    if (match.size() == 0) {\n        return Union_std_string_long(0);\n    }\n    return Union_std_string_long(match.str());",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re) && match.size() > 1) {\n        return Union_std_string_long(match.str(1));\n    } else {\n        return Union_std_string_long(0);\n    }",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (text[i + j] != pattern[j])\n                break;\n        if (j == m)\n            return Union_std_string_long(text.substr(i, m));\n    }\n    return Union_std_string_long(-1);",
    "    if (text == \"\") {\n        return Union_std_string_long(0L);\n    }\n    if (pattern == \"\") {\n        return Union_std_string_long(0L);\n    }\n    int i = 0;\n    int j = 0;\n    int start = -1;\n    int end = -1;\n    while (i < text.length()) {\n        if (text[i] == pattern[j]) {\n            if (start == -1) {\n                start = i;\n            }\n            i++;\n            j++;\n            if (j == pattern.length()) {\n                end = i;\n                break;\n            }\n        } else {\n            i++;\n            j = 0;\n            start = -1;\n        }\n    }\n    if (start == -1) {\n        return Union_std_string_long(0L);\n    } else {\n        return Union_std_string_long(text.substr(start, end - start));\n    }",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (text[i + j] != pattern[j])\n                break;\n        if (j == m)\n            return Union_std_string_long(text.substr(i, m));\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    if (std::regex_search(text, m, r)) {\n        return Union_std_string_long(m.str());\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    std::regex re(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, re)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(0);",
    "    int n = text.size();\n    int m = pattern.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    for(int i = 0; i <= n - m; i++) {\n        int j;\n        for(j = 0; j < m; j++) {\n            if(text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if(j == m) {\n            return Union_std_string_long(text.substr(i, m));\n        }\n    }\n    return Union_std_string_long(0);",
    "    std::regex r(pattern);\n    std::smatch m;\n    std::regex_search(text, m, r);\n    if (m.size() > 0) {\n        return Union_std_string_long(m.str());\n    }\n    return Union_std_string_long(0);",
    "    int n = text.length();\n    int m = pattern.length();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (text[i] == pattern[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == m) {\n        return Union_std_string_long(text.substr(i - j, j));\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    std::regex pattern_regex(pattern);\n    std::smatch match;\n    if (std::regex_search(text, match, pattern_regex)) {\n        return Union_std_string_long(match.str());\n    }\n    return Union_std_string_long(0);",
    "    int n = text.size();\n    int m = pattern.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (text[i] == pattern[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == m) {\n        return Union_std_string_long(text.substr(i - j, m));\n    } else {\n        return Union_std_string_long(-1);\n    }",
    "    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int A = 0;\n    int B = 0;\n    int C = 0;\n    int D = 0;\n    int E = 0;\n    int F = 0;\n    int G = 0;\n    int H = 0;\n    int I = 0;\n    int J = 0;\n    int K = 0;\n    int L = 0;\n    int M = 0;\n    int N = 0;\n    int O = 0;\n    int P = 0;\n    int Q = 0;\n    int R = 0;\n    int S = 0;\n    int T = 0;\n    int U = 0;\n    int V = 0;\n    int W = 0;\n    int X = 0;\n    int Y = 0;\n    int Z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n    int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n    int Aa = 0;\n   ",
    "    int n = text.length();\n    int m = pattern.length();\n    for(int i = 0; i <= n - m; i++) {\n        int j;\n        for(j = 0; j < m; j++) {\n            if(text[i + j] != pattern[j]) {\n                break;\n            }\n        }\n        if(j == m) {\n            return Union_std_string_long(i);\n        }\n    }\n    return Union_std_string_long(\"\");"
  ]
}