{
  "name": "mbpp_598_armstrong_number",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    int remainder, digits = 0;\n    temp = number;\n    while (temp != 0) {\n        digits++;\n        temp = temp/10;\n    }\n    temp = number;\n    while (temp != 0) {\n        remainder = temp%10;\n        sum = sum + pow(remainder, digits);\n        temp = temp/10;\n    }\n    if(number == sum)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while(temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    int temp = number;\n    while (temp != 0) {\n        int last_digit = temp % 10;\n        sum += last_digit * last_digit * last_digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n  long long sum = 0;\n  long long temp = number;\n  while (temp != 0) {\n    int digit = temp % 10;\n    sum += digit * digit * digit;\n    temp /= 10;\n  }\n  if (sum == number) {\n    return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp > 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int num = number;\n    int sum = 0;\n    while (num != 0) {\n        int digit = num % 10;\n        sum += digit * digit * digit;\n        num /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long original_number = number;\n    long sum = 0;\n    while (number != 0) {\n        int digit = number % 10;\n        sum += digit * digit * digit;\n        number /= 10;\n    }\n    return sum == original_number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    int remainder, digits = 0;\n    temp = number;\n    while (temp != 0) {\n        digits++;\n        temp = temp/10;\n    }\n    temp = number;\n    while (temp != 0) {\n        remainder = temp%10;\n        sum = sum + pow(remainder, digits);\n        temp = temp/10;\n    }\n    if(number == sum)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    long temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    int remainder, digits = 0;\n    temp = number;\n    while (temp != 0) {\n        digits++;\n        temp = temp/10;\n    }\n    temp = number;\n    while (temp != 0) {\n        remainder = temp%10;\n        sum = sum + pow(remainder, digits);\n        temp = temp/10;\n    }\n    if(number == sum)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n  long sum = 0, temp;\n  int remainder, digits = 0;\n  temp = number;\n  while (temp != 0) {\n    digits++;\n    temp = temp/10;\n  }\n  temp = number;\n  while (temp != 0) {\n    remainder = temp%10;\n    sum = sum + pow(remainder, digits);\n    temp = temp/10;\n  }\n  if(number == sum)\n    return true;\n  else\n    return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int remainder = temp % 10;\n        sum += remainder * remainder * remainder;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n  long sum = 0;\n  long temp = number;\n  while (temp != 0) {\n    long digit = temp % 10;\n    sum += digit * digit * digit;\n    temp /= 10;\n  }\n  return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n  long sum = 0;\n  long temp = number;\n  while (temp != 0) {\n    int digit = temp % 10;\n    sum += digit * digit * digit;\n    temp /= 10;\n  }\n  return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while(temp > 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    int temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number, sum = 0;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n  long sum = 0;\n  long temp = number;\n  while (temp != 0) {\n    int digit = temp % 10;\n    sum += digit * digit * digit;\n    temp /= 10;\n  }\n  return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long original_number = number;\n    while (number > 0) {\n        long digit = number % 10;\n        sum += digit * digit * digit;\n        number /= 10;\n    }\n    return sum == original_number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp = number;\n    while (temp != 0) {\n        int remainder = temp % 10;\n        sum += remainder * remainder * remainder;\n        temp /= 10;\n    }\n    return (sum == number);\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n  long original_number = number;\n  long result = 0;\n  while (number != 0) {\n    long remainder = number % 10;\n    result += remainder * remainder * remainder;\n    number /= 10;\n  }\n  return result == original_number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    long temp = number;\n    while(temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n\tlong temp = number;\n\tlong sum = 0;\n\twhile (temp != 0) {\n\t\tint digit = temp % 10;\n\t\tsum += digit * digit * digit;\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while (temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp > 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while(temp > 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while (temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    int remainder, digits = 0;\n    temp = number;\n    while (temp != 0) {\n        digits++;\n        temp = temp/10;\n    }\n    temp = number;\n    while (temp != 0) {\n        remainder = temp%10;\n        sum = sum + pow(remainder, digits);\n        temp = temp/10;\n    }\n    if(number == sum)\n        return 1;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    long n = number;\n    while (n != 0) {\n        temp = n % 10;\n        sum = sum + temp * temp * temp;\n        n = n / 10;\n    }\n    return (sum == number);\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n  long sum = 0;\n  long temp = number;\n  while (number > 0) {\n    int digit = number % 10;\n    sum += digit * digit * digit;\n    number /= 10;\n  }\n  return sum == temp;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp = number;\n    while (temp != 0) {\n        int last_digit = temp % 10;\n        sum += last_digit * last_digit * last_digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while (temp) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int digits = 0;\n    long temp = number;\n    while(temp) {\n        digits++;\n        temp /= 10;\n    }\n    temp = number;\n    long sum = 0;\n    while(temp) {\n        int digit = temp % 10;\n        sum += pow(digit, digits);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n  long sum = 0;\n  long temp = number;\n  while (temp != 0) {\n    int digit = temp % 10;\n    sum += digit * digit * digit;\n    temp /= 10;\n  }\n  return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int last_digit = temp % 10;\n        sum += last_digit * last_digit * last_digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    int remainder, digits = 0;\n    temp = number;\n    while (temp != 0) {\n        digits++;\n        temp = temp/10;\n    }\n    temp = number;\n    while (temp != 0) {\n        remainder = temp%10;\n        sum = sum + pow(remainder, digits);\n        temp = temp/10;\n    }\n    if(number == sum)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while(temp != 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    long n = number;\n    while (n != 0) {\n        temp = n % 10;\n        sum = sum + temp * temp * temp;\n        n = n / 10;\n    }\n    return (sum == number);\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    long temp = number;\n    while(temp) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    int temp = number;\n    while (temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    if(sum == number) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while(temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    temp = number;\n    while (temp != 0) {\n        int remainder = temp % 10;\n        sum += remainder * remainder * remainder;\n        temp /= 10;\n    }\n    if (sum == number)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    // Write your code here\n    long temp = number;\n    int digits = 0;\n    while(temp>0){\n        temp /= 10;\n        digits++;\n    }\n    temp = number;\n    long sum = 0;\n    while(temp>0){\n        sum += pow(temp%10, digits);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp = number;\n    while(temp) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(number) {\n        int digit = number % 10;\n        sum += digit * digit * digit;\n        number /= 10;\n    }\n    return sum == temp;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    int remainder, digits = 0;\n    temp = number;\n    while (temp != 0) {\n        digits++;\n        temp = temp/10;\n    }\n    temp = number;\n    while (temp != 0) {\n        remainder = temp%10;\n        sum = sum + pow(remainder, digits);\n        temp = temp/10;\n    }\n    if(number == sum)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        long last_digit = temp % 10;\n        sum += last_digit * last_digit * last_digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp != 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    long num = number;\n    while (num != 0) {\n        temp = num % 10;\n        sum += temp * temp * temp;\n        num /= 10;\n    }\n    return (sum == number);\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    long temp = number;\n    while(temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long original_number = number;\n    while (number > 0) {\n        int digit = number % 10;\n        sum += digit * digit * digit;\n        number /= 10;\n    }\n    return sum == original_number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    int remainder, digits = 0;\n    temp = number;\n    while (temp != 0) {\n        digits++;\n        temp = temp/10;\n    }\n    temp = number;\n    while (temp != 0) {\n        remainder = temp%10;\n        sum = sum + pow(remainder, digits);\n        temp = temp/10;\n    }\n    if(number == sum)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while(temp > 0) {\n        sum += pow(temp%10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    long num = number;\n    while (num != 0) {\n        temp = num % 10;\n        sum = sum + temp * temp * temp;\n        num = num / 10;\n    }\n    return (sum == number);\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    long originalNumber = number;\n    while (number != 0) {\n        temp = number % 10;\n        sum = sum + temp * temp * temp;\n        number = number / 10;\n    }\n    return (originalNumber == sum);\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp = number;\n    while (temp) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp = number;\n    while(temp) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    long temp = number;\n    while(temp) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return (sum == number);\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    int temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    long digit;\n    temp = number;\n    while (temp != 0) {\n        digit = temp % 10;\n        sum = sum + digit * digit * digit;\n        temp = temp / 10;\n    }\n    if (number == sum)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    int remainder, digits = 0;\n\n    temp = number;\n    while (temp != 0) {\n        digits++;\n        temp = temp/10;\n    }\n\n    temp = number;\n\n    while (temp != 0) {\n        remainder = temp%10;\n        sum = sum + pow(remainder, digits);\n        temp = temp/10;\n    }\n\n    if(number == sum)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    int temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    long n = number;\n    while (n != 0) {\n        temp = n % 10;\n        sum += temp * temp * temp;\n        n /= 10;\n    }\n    return (sum == number);\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int last_digit = temp % 10;\n        sum += last_digit * last_digit * last_digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int digits = 0;\n    long temp = number;\n    while (temp != 0) {\n        digits++;\n        temp /= 10;\n    }\n    temp = number;\n    long sum = 0;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digits);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp = number;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp = number;\n    while (temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp > 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp != 0) {\n        sum += pow(temp%10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    // Write your code here\n    long sum = 0, temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp = number;\n    while (number) {\n        int rem = number % 10;\n        sum += rem * rem * rem;\n        number /= 10;\n    }\n    return sum == temp;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    int remainder, digits = 0;\n    temp = number;\n    while (temp != 0) {\n        digits++;\n        temp = temp/10;\n    }\n    temp = number;\n    while (temp != 0) {\n        remainder = temp%10;\n        sum = sum + pow(remainder, digits);\n        temp = temp/10;\n    }\n    if(number == sum)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    int remainder, digits = 0;\n    temp = number;\n    while (temp != 0) {\n        digits++;\n        temp = temp/10;\n    }\n    temp = number;\n    while (temp != 0) {\n        remainder = temp%10;\n        sum = sum + pow(remainder, digits);\n        temp = temp/10;\n    }\n    if(number == sum)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    int digits = 0;\n    long temp = number;\n    while(temp > 0) {\n        digits++;\n        temp /= 10;\n    }\n    temp = number;\n    while(temp > 0) {\n        sum += pow(temp % 10, digits);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp = number;\n    while (temp != 0) {\n        int rem = temp % 10;\n        sum += rem * rem * rem;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int original_number, remainder, result = 0;\n    original_number = number;\n    while (original_number != 0) {\n        remainder = original_number % 10;\n        result += remainder * remainder * remainder;\n        original_number /= 10;\n    }\n    if (result == number)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    long n = number;\n    while (n != 0) {\n        temp = n % 10;\n        sum = sum + temp * temp * temp;\n        n = n / 10;\n    }\n    return (sum == number);\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    int remainder, digits = 0;\n    temp = number;\n    while (temp != 0) {\n        digits++;\n        temp = temp/10;\n    }\n    temp = number;\n    while (temp != 0) {\n        remainder = temp%10;\n        sum = sum + pow(remainder, digits);\n        temp = temp/10;\n    }\n    if(number == sum)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    long n = number;\n    while (n != 0) {\n        temp = n % 10;\n        sum = sum + temp * temp * temp;\n        n = n / 10;\n    }\n    if (sum == number)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    long num = number;\n    while (num != 0) {\n        temp = num % 10;\n        sum += temp * temp * temp;\n        num /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n\tlong original_number = number;\n\tlong sum = 0;\n\twhile(number != 0) {\n\t\tint remainder = number % 10;\n\t\tsum += remainder * remainder * remainder;\n\t\tnumber /= 10;\n\t}\n\treturn sum == original_number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    if (sum == number) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int n = 0;\n    long temp = number;\n    while (temp) {\n        n++;\n        temp /= 10;\n    }\n    temp = number;\n    long sum = 0;\n    while (temp) {\n        sum += pow(temp % 10, n);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int last_digit = temp % 10;\n        sum += last_digit * last_digit * last_digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    long num = number;\n    while (num != 0) {\n        temp = num % 10;\n        sum = sum + temp * temp * temp;\n        num = num / 10;\n    }\n    if (sum == number)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n  long sum = 0;\n  long temp = number;\n  while (temp != 0) {\n    int last_digit = temp % 10;\n    sum += last_digit * last_digit * last_digit;\n    temp /= 10;\n  }\n  return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int digits = 0;\n    long temp = number;\n    while(temp != 0) {\n        digits++;\n        temp /= 10;\n    }\n    temp = number;\n    long sum = 0;\n    while(temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digits);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp = number;\n    while(temp) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number, sum = 0;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while(temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n  long sum = 0, temp;\n  int remainder, digits = 0;\n  temp = number;\n  while (temp != 0) {\n    digits++;\n    temp = temp/10;\n  }\n  temp = number;\n  while (temp != 0) {\n    remainder = temp%10;\n    sum = sum + pow(remainder, digits);\n    temp = temp/10;\n  }\n  if(number == sum)\n    return true;\n  else\n    return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp > 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    long n = number;\n    while (n != 0) {\n        temp = n % 10;\n        sum += temp * temp * temp;\n        n /= 10;\n    }\n    return (sum == number);\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long long int sum = 0;\n    long long int temp = number;\n    while(temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n\tlong temp = number;\n\tlong sum = 0;\n\twhile (temp) {\n\t\tint last_digit = temp % 10;\n\t\tsum += last_digit * last_digit * last_digit;\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp = number;\n    while (temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    long n = number;\n    while (n != 0) {\n        temp = n % 10;\n        sum += temp * temp * temp;\n        n /= 10;\n    }\n    return (sum == number);\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp > 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    int remainder, digits = 0;\n    temp = number;\n    while (temp != 0) {\n        digits++;\n        temp = temp/10;\n    }\n    temp = number;\n    while (temp != 0) {\n        remainder = temp%10;\n        sum = sum + pow(remainder, digits);\n        temp = temp/10;\n    }\n    if(number == sum)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp > 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    long temp = number;\n    while(temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    if(sum == number) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    long temp = number;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    long num = number;\n    while (number != 0) {\n        temp = number % 10;\n        sum += temp * temp * temp;\n        number /= 10;\n    }\n    return (sum == num);\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp > 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while (temp) {\n        sum += pow(temp % 10, 3);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long temp = number;\n    long sum = 0;\n    while (temp != 0) {\n        long digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0;\n    long temp = number;\n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp = number;\n    while (number > 0) {\n        int digit = number % 10;\n        sum += digit * digit * digit;\n        number /= 10;\n    }\n    return sum == temp;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n  long temp = number;\n  long sum = 0;\n  while (temp != 0) {\n    int digit = temp % 10;\n    sum += digit * digit * digit;\n    temp /= 10;\n  }\n  return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int digit_count = 0;\n    long temp = number;\n    while(temp != 0) {\n        temp /= 10;\n        digit_count++;\n    }\n    temp = number;\n    long sum = 0;\n    while(temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digit_count);\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp = number;\n    while (temp != 0) {\n        int remainder = temp % 10;\n        sum += remainder * remainder * remainder;\n        temp /= 10;\n    }\n    return sum == number;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    int sum = 0;\n    long temp = number;\n    while (number > 0) {\n        int digit = number % 10;\n        sum += digit * digit * digit;\n        number /= 10;\n    }\n    return sum == temp;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    long sum = 0, temp;\n    int remainder, digits = 0;\n    temp = number;\n    while (temp != 0) {\n        digits++;\n        temp = temp/10;\n    }\n    temp = number;\n    while (temp != 0) {\n        remainder = temp%10;\n        sum = sum + pow(remainder, digits);\n        temp = temp/10;\n    }\n    if(number == sum)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n",
      "timestamp": 1665510430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}