{
  "name": "mbpp_11_remove_Occ",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    int i,j;\n    for(i=0;i<s.length();i++){\n        if(s[i]==ch[0]){\n            break;\n        }\n    }\n    for(j=s.length()-1;j>=0;j--){\n        if(s[j]==ch[0]){\n            break;\n        }\n    }\n    if(i==s.length()){\n        return s;\n    }\n    else if(i==j){\n        s.erase(i,1);\n        return s;\n    }\n    else{\n        s.erase(i,1);\n        s.erase(j-1,1);\n        return s;\n    }",
    "    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < n; k++) {\n        if (k != i && k != j) {\n            ans += s[k];\n        }\n    }\n    return ans;",
    "    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i++;\n        }\n    }\n    i = n-1;\n    while(i >= 0) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i--;\n        }\n    }\n    return s;",
    "    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    int j = n-1;\n    while(j >= 0) {\n        if(s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    std::string res = \"\";\n    for(int k = 0; k < n; k++) {\n        if(k < i || k > j) {\n            res += s[k];\n        }\n    }\n    return res;",
    "    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;",
    "    std::string res = \"\";\n    int i = 0;\n    while(i < s.length()) {\n        if(s[i] == ch[0]) {\n            i++;\n            continue;\n        }\n        res += s[i];\n        i++;\n    }\n    return res;",
    "    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < n; k++) {\n        if (k != i && k != j) {\n            ans += s[k];\n        }\n    }\n    return ans;",
    "    int n = s.length();\n    int i;\n    for (i = 0; i < n; i++) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n    }\n    if (i == n) {\n        return s;\n    }\n    int j;\n    for (j = n - 1; j >= 0; j--) {\n        if (s[j] == ch[0]) {\n            break;\n        }\n    }\n    if (i == j) {\n        return s.substr(0, i) + s.substr(i + 1, n - i - 1);\n    }\n    return s.substr(0, i) + s.substr(i + 1, j - i - 1) + s.substr(j + 1, n - j - 1);",
    "    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    int j = n - 1;\n    while(j >= 0) {\n        if(s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    std::string res = \"\";\n    for(int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for(int k = j + 1; k < n; k++) {\n        res += s[k];\n    }\n    return res;",
    "    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);",
    "    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;",
    "    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i+1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j+1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;",
    "    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;",
    "    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < n; k++) {\n        if (k != i && k != j) {\n            ans += s[k];\n        }\n    }\n    return ans;",
    "    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for(int k = i+1; k < j; k++) {\n        ans += s[k];\n    }\n    for(int k = j+1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;",
    "    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;",
    "\t// Write your code here\n\tint n = s.length();\n\tint m = ch.length();\n\tif (n == 0) {\n\t\treturn \"\";\n\t}\n\tif (m == 0) {\n\t\treturn s;\n\t}\n\tif (m > 1) {\n\t\treturn \"\";\n\t}\n\tint i = 0;\n\twhile (i < n) {\n\t\tif (s[i] == ch[0]) {\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (i == n) {\n\t\treturn s;\n\t}\n\tint j = n - 1;\n\twhile (j >= 0) {\n\t\tif (s[j] == ch[0]) {\n\t\t\tbreak;\n\t\t}\n\t\tj--;\n\t}\n\tif (j == -1) {\n\t\treturn s;\n\t}\n\tstd::string ans = \"\";\n\tfor (int k = 0; k < i; k++) {\n\t\tans += s[k];\n\t}\n\tfor (int k = j + 1; k < n; k++) {\n\t\tans += s[k];\n\t}\n\treturn ans;",
    "    int i = s.find(ch);\n    int j = s.rfind(ch);\n    if (i == -1) {\n        return s;\n    }\n    else {\n        s.erase(i, 1);\n        s.erase(j-1, 1);\n        return s;\n    }",
    "    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;",
    "    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i + 1, j - i - 1) + s.substr(j + 1, n - j - 1);"
  ]
}